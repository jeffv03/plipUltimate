
bin\Debug\plipUltimate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00001f82  00002056  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f82  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000657  0080013c  0080013c  00002092  2**0
                  ALLOC
  3 .eeprom       00000016  00810000  00810000  00002092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  000020a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .debug_aranges 000001e0  00000000  00000000  000020ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000072a  00000000  00000000  0000228b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000038f9  00000000  00000000  000029b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000149c  00000000  00000000  000062ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000026ac  00000000  00000000  0000774a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005e0  00000000  00000000  00009df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000011ae  00000000  00000000  0000a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001bd4  00000000  00000000  0000b586  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  0000d15a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__ctors_end>
       4:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
       8:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
       c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      10:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      14:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      18:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      1c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      20:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      24:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      28:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      2c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_11>
      30:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      34:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      38:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      3c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      40:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      44:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      48:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      4c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      50:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      54:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      58:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      5c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      60:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      64:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>

00000068 <cmd_table>:
      68:	aa 00 9c 05 ad 00 bd 00 98 05 c0 00 d1 00 75 05     ..............u.
      78:	d3 00 ef 00 2c 05 f2 00 0b 01 2c 05 0e 01 24 01     ....,.....,...$.
      88:	f1 04 27 01 3e 01 f1 04 41 01 5a 01 d1 04 5d 01     ..'.>...A.Z...].
      98:	72 01 f1 04 75 01 87 01 2c 05 8a 01 00 00 00 00     r...u...,.......
	...

000000aa <cmd_stats_dump_name>:
      aa:	73 64 00                                            sd.

000000ad <cmd_stats_dump_help>:
      ad:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

000000bd <cmd_stats_reset_name>:
      bd:	73 72 00                                            sr.

000000c0 <cmd_stats_reset_help>:
      c0:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

000000d1 <cmd_gen_m_name>:
      d1:	6d 00                                               m.

000000d3 <cmd_gen_m_help>:
      d3:	6d 61 63 20 61 64 64 72 65 73 73 20 6f 66 20 64     mac address of d
      e3:	65 76 69 63 65 20 3c 6d 61 63 3e 00                 evice <mac>.

000000ef <cmd_gen_fd_name>:
      ef:	66 64 00                                            fd.

000000f2 <cmd_gen_fd_help>:
      f2:	73 65 74 20 66 75 6c 6c 20 64 75 70 6c 65 20 6d     set full duple m
     102:	6f 64 65 20 5b 6f 6e 5d 00                          ode [on].

0000010b <cmd_gen_fc_name>:
     10b:	66 63 00                                            fc.

0000010e <cmd_gen_fc_help>:
     10e:	73 65 74 20 66 6c 6f 77 20 63 6f 6e 74 72 6f 6c     set flow control
     11e:	20 5b 6f 6e 5d 00                                    [on].

00000124 <cmd_gen_tl_name>:
     124:	74 6c 00                                            tl.

00000127 <cmd_gen_tl_help>:
     127:	74 65 73 74 20 70 61 63 6b 65 74 20 6c 65 6e 67     test packet leng
     137:	74 68 20 3c 6e 3e 00                                th <n>.

0000013e <cmd_gen_tt_name>:
     13e:	74 74 00                                            tt.

00000141 <cmd_gen_tt_help>:
     141:	74 65 73 74 20 70 61 63 6b 65 74 20 65 74 68 20     test packet eth 
     151:	74 79 70 65 20 3c 6e 3e 00                          type <n>.

0000015a <cmd_gen_ti_name>:
     15a:	74 69 00                                            ti.

0000015d <cmd_gen_ti_help>:
     15d:	74 65 73 74 20 49 50 20 61 64 64 72 65 73 73 20     test IP address 
     16d:	3c 69 70 3e 00                                      <ip>.

00000172 <cmd_gen_tp_name>:
     172:	74 70 00                                            tp.

00000175 <cmd_gen_tp_help>:
     175:	74 65 73 74 20 55 44 50 20 70 6f 72 74 20 3c 6e     test UDP port <n
     185:	3e 00                                               >.

00000187 <cmd_gen_tm_name>:
     187:	74 6d 00                                            tm.

0000018a <cmd_gen_tm_help>:
     18a:	74 65 73 74 20 6d 6f 64 65 20 5b 30 7c 31 5d 00     test mode [0|1].

0000019a <cmdkey_table>:
     19a:	73 a0 05 a4 01 00 00 00 00 00                       s.........

000001a4 <cmd_dump_stats_help>:
     1a4:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

000001b4 <sc_sDefaultConfig>:
     1b4:	1a 11 af a0 47 11 00 00 ea 05 fd ff c0 a8 02 de     ....G...........
     1c4:	90 1a 00 00                                         ....

000001c8 <__ctors_end>:
     1c8:	11 24       	eor	r1, r1
     1ca:	1f be       	out	0x3f, r1	; 63
     1cc:	cf ef       	ldi	r28, 0xFF	; 255
     1ce:	d8 e0       	ldi	r29, 0x08	; 8
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	cd bf       	out	0x3d, r28	; 61

000001d4 <__do_copy_data>:
     1d4:	11 e0       	ldi	r17, 0x01	; 1
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	e2 e8       	ldi	r30, 0x82	; 130
     1dc:	ff e1       	ldi	r31, 0x1F	; 31
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <.do_copy_data_start>

000001e0 <.do_copy_data_loop>:
     1e0:	05 90       	lpm	r0, Z+
     1e2:	0d 92       	st	X+, r0

000001e4 <.do_copy_data_start>:
     1e4:	ac 33       	cpi	r26, 0x3C	; 60
     1e6:	b1 07       	cpc	r27, r17
     1e8:	d9 f7       	brne	.-10     	; 0x1e0 <.do_copy_data_loop>

000001ea <__do_clear_bss>:
     1ea:	17 e0       	ldi	r17, 0x07	; 7
     1ec:	ac e3       	ldi	r26, 0x3C	; 60
     1ee:	b1 e0       	ldi	r27, 0x01	; 1
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <.do_clear_bss_start>

000001f2 <.do_clear_bss_loop>:
     1f2:	1d 92       	st	X+, r1

000001f4 <.do_clear_bss_start>:
     1f4:	a3 39       	cpi	r26, 0x93	; 147
     1f6:	b1 07       	cpc	r27, r17
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <.do_clear_bss_loop>
     1fa:	0e 94 23 06 	call	0xc46	; 0xc46 <main>
     1fe:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <_exit>

00000202 <__bad_interrupt>:
     202:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000206 <timerInit>:
/// 100us is 1/10k of a second
/// NOTE(KaiN#): time was reduced by 1, should it be?
#define T1_100us F_CPU/10000

void timerInit(void) {
  cli();
     206:	f8 94       	cli

	/// Set timer 2 to CTC, prescaler 8 & compare value: 100us
  TCCR1A = _BV(WGM12);  // CTC
     208:	88 e0       	ldi	r24, 0x08	; 8
     20a:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = _BV(CS10);   // Prescaler 1
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	80 93 81 00 	sts	0x0081, r24
  OCR1A = T1_100us;     // Output compare
     214:	80 ed       	ldi	r24, 0xD0	; 208
     216:	97 e0       	ldi	r25, 0x07	; 7
     218:	90 93 89 00 	sts	0x0089, r25
     21c:	80 93 88 00 	sts	0x0088, r24
  TCNT1  = 0;           // Reset timer state
     220:	10 92 85 00 	sts	0x0085, r1
     224:	10 92 84 00 	sts	0x0084, r1
  TIMSK1 = _BV(OCIE1A); // Enable compare interrupt
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	80 93 6f 00 	sts	0x006F, r24

  g_uwTimer100us = 0;
     22e:	10 92 4d 01 	sts	0x014D, r1
     232:	10 92 4c 01 	sts	0x014C, r1
  g_uwTimer10ms = 0;
     236:	10 92 4b 01 	sts	0x014B, r1
     23a:	10 92 4a 01 	sts	0x014A, r1
  g_uwTimeStamp = 0;
     23e:	10 92 4e 01 	sts	0x014E, r1
     242:	10 92 4f 01 	sts	0x014F, r1
     246:	10 92 50 01 	sts	0x0150, r1
     24a:	10 92 51 01 	sts	0x0151, r1
  s_uw10msCounter = 0;
     24e:	10 92 3d 01 	sts	0x013D, r1
     252:	10 92 3c 01 	sts	0x013C, r1

  sei();
     256:	78 94       	sei
}
     258:	08 95       	ret

0000025a <__vector_11>:

/**
 * Timer interrupt handler.
 * Increments time stamp and time interval vars accordingly.
 */
ISR(TIMER1_COMPA_vect) {
     25a:	1f 92       	push	r1
     25c:	0f 92       	push	r0
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	11 24       	eor	r1, r1
     264:	8f 93       	push	r24
     266:	9f 93       	push	r25
     268:	af 93       	push	r26
     26a:	bf 93       	push	r27
     26c:	ef 93       	push	r30
     26e:	ff 93       	push	r31
	TCNT1 = 0; // Reset timer s_uw10msCounterer
     270:	10 92 85 00 	sts	0x0085, r1
     274:	10 92 84 00 	sts	0x0084, r1
  ++g_uwTimer100us;
     278:	80 91 4c 01 	lds	r24, 0x014C
     27c:	90 91 4d 01 	lds	r25, 0x014D
     280:	01 96       	adiw	r24, 0x01	; 1
     282:	90 93 4d 01 	sts	0x014D, r25
     286:	80 93 4c 01 	sts	0x014C, r24
  ++g_uwTimeStamp;
     28a:	80 91 4e 01 	lds	r24, 0x014E
     28e:	90 91 4f 01 	lds	r25, 0x014F
     292:	a0 91 50 01 	lds	r26, 0x0150
     296:	b0 91 51 01 	lds	r27, 0x0151
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	a1 1d       	adc	r26, r1
     29e:	b1 1d       	adc	r27, r1
     2a0:	80 93 4e 01 	sts	0x014E, r24
     2a4:	90 93 4f 01 	sts	0x014F, r25
     2a8:	a0 93 50 01 	sts	0x0150, r26
     2ac:	b0 93 51 01 	sts	0x0151, r27
  ++s_uw10msCounter;
     2b0:	80 91 3c 01 	lds	r24, 0x013C
     2b4:	90 91 3d 01 	lds	r25, 0x013D
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	90 93 3d 01 	sts	0x013D, r25
     2be:	80 93 3c 01 	sts	0x013C, r24
  if(s_uw10msCounter >= 100) {
     2c2:	84 36       	cpi	r24, 0x64	; 100
     2c4:	91 05       	cpc	r25, r1
     2c6:	68 f0       	brcs	.+26     	; 0x2e2 <__vector_11+0x88>
    s_uw10msCounter = 0;
     2c8:	10 92 3d 01 	sts	0x013D, r1
     2cc:	10 92 3c 01 	sts	0x013C, r1
    g_uwTimer10ms++;
     2d0:	80 91 4a 01 	lds	r24, 0x014A
     2d4:	90 91 4b 01 	lds	r25, 0x014B
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	90 93 4b 01 	sts	0x014B, r25
     2de:	80 93 4a 01 	sts	0x014A, r24
  }

  // Update ENC28J60 status on LED
  if(g_ubEncOnline)
     2e2:	80 91 44 01 	lds	r24, 0x0144
     2e6:	88 23       	and	r24, r24
     2e8:	31 f0       	breq	.+12     	; 0x2f6 <__vector_11+0x9c>
		LED_DDR |= LED_STATUS;
     2ea:	e7 e2       	ldi	r30, 0x27	; 39
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	80 62       	ori	r24, 0x20	; 32
     2f2:	80 83       	st	Z, r24
     2f4:	05 c0       	rjmp	.+10     	; 0x300 <__vector_11+0xa6>
	else
		LED_DDR &= ~LED_STATUS;
     2f6:	e7 e2       	ldi	r30, 0x27	; 39
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	8f 7d       	andi	r24, 0xDF	; 223
     2fe:	80 83       	st	Z, r24
}
     300:	ff 91       	pop	r31
     302:	ef 91       	pop	r30
     304:	bf 91       	pop	r27
     306:	af 91       	pop	r26
     308:	9f 91       	pop	r25
     30a:	8f 91       	pop	r24
     30c:	0f 90       	pop	r0
     30e:	0f be       	out	0x3f, r0	; 63
     310:	0f 90       	pop	r0
     312:	1f 90       	pop	r1
     314:	18 95       	reti

00000316 <timerDelay10ms>:

/// Busy-wait for supplied number of 10ms intervals
void timerDelay10ms(uint16_t uwCount) {
     316:	9c 01       	movw	r18, r24
	g_uwTimer10ms=0;
     318:	10 92 4b 01 	sts	0x014B, r1
     31c:	10 92 4a 01 	sts	0x014A, r1
	while(g_uwTimer10ms<uwCount);
     320:	80 91 4a 01 	lds	r24, 0x014A
     324:	90 91 4b 01 	lds	r25, 0x014B
     328:	82 17       	cp	r24, r18
     32a:	93 07       	cpc	r25, r19
     32c:	c8 f3       	brcs	.-14     	; 0x320 <timerDelay10ms+0xa>
}
     32e:	08 95       	ret

00000330 <timerDelay100us>:

/// Busy-wait for supplied number of 100us intervals
void timerDelay100us(uint16_t uwCount) {
     330:	9c 01       	movw	r18, r24
	g_uwTimer100us=0;
     332:	10 92 4d 01 	sts	0x014D, r1
     336:	10 92 4c 01 	sts	0x014C, r1
	while(g_uwTimer100us<uwCount);
     33a:	80 91 4c 01 	lds	r24, 0x014C
     33e:	90 91 4d 01 	lds	r25, 0x014D
     342:	82 17       	cp	r24, r18
     344:	93 07       	cpc	r25, r19
     346:	c8 f3       	brcs	.-14     	; 0x33a <timerDelay100us+0xa>
}
     348:	08 95       	ret

0000034a <timerCalculateKbps>:

// TODO(KaiN#9): timerCalculateKbps() is completely messed up
/**
 * Calculates bitrate based on transferred byte count and elapsed time.
 */
uint16_t timerCalculateKbps(uint16_t bytes, uint16_t delta) {
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	eb 01       	movw	r28, r22
  if(delta != 0) {
     350:	61 15       	cp	r22, r1
     352:	71 05       	cpc	r23, r1
     354:	19 f4       	brne	.+6      	; 0x35c <timerCalculateKbps+0x12>
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	16 c0       	rjmp	.+44     	; 0x388 <timerCalculateKbps+0x3e>
    uint32_t nom = 1000 * (uint32_t)bytes * 100;
    uint32_t denom = (uint32_t)delta * 4;
    uint32_t rate = nom / denom;
    return (uint16_t)rate;
     35c:	bc 01       	movw	r22, r24
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	20 ea       	ldi	r18, 0xA0	; 160
     364:	36 e8       	ldi	r19, 0x86	; 134
     366:	41 e0       	ldi	r20, 0x01	; 1
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__mulsi3>
     36e:	9e 01       	movw	r18, r28
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	22 0f       	add	r18, r18
     376:	33 1f       	adc	r19, r19
     378:	44 1f       	adc	r20, r20
     37a:	55 1f       	adc	r21, r21
     37c:	22 0f       	add	r18, r18
     37e:	33 1f       	adc	r19, r19
     380:	44 1f       	adc	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__udivmodsi4>
  }
	else
		return 0;
}
     388:	82 2f       	mov	r24, r18
     38a:	93 2f       	mov	r25, r19
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <utilNibbleToHex>:
/**
 * Converts nibble (0..15) value to hex char.
 */
char utilNibbleToHex(uint8_t ubIn)
{
  if(ubIn < 10)
     392:	8a 30       	cpi	r24, 0x0A	; 10
     394:	10 f4       	brcc	.+4      	; 0x39a <utilNibbleToHex+0x8>
    return '0' + ubIn;
     396:	80 5d       	subi	r24, 0xD0	; 208
     398:	08 95       	ret
  else
    return 'A' + ubIn - 10;
     39a:	89 5c       	subi	r24, 0xC9	; 201
}
     39c:	08 95       	ret

0000039e <utilByteToHex>:

/**
 * Converts byte value to hex chars.
 */
void utilByteToHex(uint8_t ubIn, char *pOut)
{
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	f8 2e       	mov	r15, r24
     3a6:	8b 01       	movw	r16, r22
  pOut[0] = utilNibbleToHex(ubIn >> 4);
     3a8:	82 95       	swap	r24
     3aa:	8f 70       	andi	r24, 0x0F	; 15
     3ac:	0e 94 c9 01 	call	0x392	; 0x392 <utilNibbleToHex>
     3b0:	f8 01       	movw	r30, r16
     3b2:	80 83       	st	Z, r24
  pOut[1] = utilNibbleToHex(ubIn & 0xf);
     3b4:	8f 2d       	mov	r24, r15
     3b6:	8f 70       	andi	r24, 0x0F	; 15
     3b8:	0e 94 c9 01 	call	0x392	; 0x392 <utilNibbleToHex>
     3bc:	f8 01       	movw	r30, r16
     3be:	81 83       	std	Z+1, r24	; 0x01
}
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	08 95       	ret

000003c8 <utilWordToHex>:

void utilWordToHex(uint16_t uwIn, char *pOut)
{
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	f8 2e       	mov	r15, r24
     3d0:	8b 01       	movw	r16, r22
  utilByteToHex((uint8_t)(uwIn>>8), pOut);
     3d2:	89 2f       	mov	r24, r25
     3d4:	0e 94 cf 01 	call	0x39e	; 0x39e <utilByteToHex>
  utilByteToHex((uint8_t)(uwIn&0xff), pOut+2);
     3d8:	0e 5f       	subi	r16, 0xFE	; 254
     3da:	1f 4f       	sbci	r17, 0xFF	; 255
     3dc:	8f 2d       	mov	r24, r15
     3de:	b8 01       	movw	r22, r16
     3e0:	0e 94 cf 01 	call	0x39e	; 0x39e <utilByteToHex>
}
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	08 95       	ret

000003ec <utilDwordToHex>:

void utilDwordToHex(uint32_t ulIn, char *pOut)
{
     3ec:	cf 92       	push	r12
     3ee:	df 92       	push	r13
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	6b 01       	movw	r12, r22
     3fa:	7c 01       	movw	r14, r24
     3fc:	8a 01       	movw	r16, r20
  utilWordToHex((uint16_t)(ulIn>>16), pOut);
     3fe:	aa 27       	eor	r26, r26
     400:	bb 27       	eor	r27, r27
     402:	ba 01       	movw	r22, r20
     404:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <utilWordToHex>
  utilWordToHex((uint16_t)(ulIn&0xffff), pOut+4);
     408:	0c 5f       	subi	r16, 0xFC	; 252
     40a:	1f 4f       	sbci	r17, 0xFF	; 255
     40c:	c6 01       	movw	r24, r12
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <utilWordToHex>
}
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	ff 90       	pop	r15
     41a:	ef 90       	pop	r14
     41c:	df 90       	pop	r13
     41e:	cf 90       	pop	r12
     420:	08 95       	ret

00000422 <utilByteToDec>:

void utilByteToDec(uint8_t value, uint8_t *out)
{
     422:	28 2f       	mov	r18, r24
     424:	fb 01       	movw	r30, r22
  uint8_t h = value / 100;
  uint8_t t = value % 100;
     426:	64 e6       	ldi	r22, 0x64	; 100
     428:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__udivmodqi4>
     42c:	39 2f       	mov	r19, r25
  uint8_t o = t % 10;
  t = t / 10;
  out[0] = '0' + h;
     42e:	82 2f       	mov	r24, r18
     430:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__udivmodqi4>
     434:	80 5d       	subi	r24, 0xD0	; 208
     436:	80 83       	st	Z, r24
  out[1] = '0' + t;
     438:	83 2f       	mov	r24, r19
     43a:	6a e0       	ldi	r22, 0x0A	; 10
     43c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__udivmodqi4>
     440:	80 5d       	subi	r24, 0xD0	; 208
     442:	81 83       	std	Z+1, r24	; 0x01
  out[2] = '0' + o;
     444:	83 2f       	mov	r24, r19
     446:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__udivmodqi4>
     44a:	90 5d       	subi	r25, 0xD0	; 208
     44c:	92 83       	std	Z+2, r25	; 0x02
}
     44e:	08 95       	ret

00000450 <utilDwordToDec>:

void utilDwordToDec(uint32_t value, uint8_t *out, uint8_t num_digits, uint8_t point_pos)
{
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	c6 2e       	mov	r12, r22
     466:	d7 2e       	mov	r13, r23
     468:	e8 2e       	mov	r14, r24
     46a:	f9 2e       	mov	r15, r25
     46c:	b2 2e       	mov	r11, r18
	uint8_t i;
  // start backwards
  uint8_t *pos = out + num_digits - 1;
     46e:	82 2f       	mov	r24, r18
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	ea 01       	movw	r28, r20
     476:	c8 0f       	add	r28, r24
     478:	d9 1f       	adc	r29, r25
  if(point_pos < num_digits) {
     47a:	02 17       	cp	r16, r18
     47c:	08 f4       	brcc	.+2      	; 0x480 <utilDwordToDec+0x30>
    pos++;
     47e:	21 96       	adiw	r28, 0x01	; 1
  }
  for(i=0;i<num_digits;i++) {
     480:	bb 20       	and	r11, r11
     482:	41 f1       	breq	.+80     	; 0x4d4 <utilDwordToDec+0x84>
     484:	10 e0       	ldi	r17, 0x00	; 0
    if(i == point_pos) {
      *pos = '.';
     486:	0f 2e       	mov	r0, r31
     488:	fe e2       	ldi	r31, 0x2E	; 46
     48a:	af 2e       	mov	r10, r31
     48c:	f0 2d       	mov	r31, r0
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
    if(i == point_pos) {
     48e:	10 17       	cp	r17, r16
     490:	11 f4       	brne	.+4      	; 0x496 <utilDwordToDec+0x46>
      *pos = '.';
     492:	a8 82       	st	Y, r10
      pos--;
     494:	21 97       	sbiw	r28, 0x01	; 1
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
     496:	6c 2d       	mov	r22, r12
     498:	7d 2d       	mov	r23, r13
     49a:	8e 2d       	mov	r24, r14
     49c:	9f 2d       	mov	r25, r15
     49e:	2a e0       	ldi	r18, 0x0A	; 10
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__udivmodsi4>
     4aa:	60 5d       	subi	r22, 0xD0	; 208
     4ac:	68 83       	st	Y, r22
  // start backwards
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
     4ae:	1f 5f       	subi	r17, 0xFF	; 255
     4b0:	1b 15       	cp	r17, r11
     4b2:	80 f4       	brcc	.+32     	; 0x4d4 <utilDwordToDec+0x84>
      *pos = '.';
      pos--;
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
    pos--;
     4b4:	21 97       	sbiw	r28, 0x01	; 1
    value /= 10;
     4b6:	6c 2d       	mov	r22, r12
     4b8:	7d 2d       	mov	r23, r13
     4ba:	8e 2d       	mov	r24, r14
     4bc:	9f 2d       	mov	r25, r15
     4be:	2a e0       	ldi	r18, 0x0A	; 10
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__udivmodsi4>
     4ca:	c2 2e       	mov	r12, r18
     4cc:	d3 2e       	mov	r13, r19
     4ce:	e4 2e       	mov	r14, r20
     4d0:	f5 2e       	mov	r15, r21
     4d2:	dd cf       	rjmp	.-70     	; 0x48e <utilDwordToDec+0x3e>
  }
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	08 95       	ret

000004ea <utilParseNibbleHex>:

// parse

uint8_t utilParseNibbleHex(char c,uint8_t *value)
{
     4ea:	fb 01       	movw	r30, r22
  if((c>='a')&&(c<='f')) {
     4ec:	98 2f       	mov	r25, r24
     4ee:	81 56       	subi	r24, 0x61	; 97
     4f0:	86 30       	cpi	r24, 0x06	; 6
     4f2:	20 f4       	brcc	.+8      	; 0x4fc <utilParseNibbleHex+0x12>
    *value = c + 10 - 'a';
     4f4:	86 5f       	subi	r24, 0xF6	; 246
     4f6:	80 83       	st	Z, r24
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	08 95       	ret
    return 1;
  }
  else if((c>='A')&&(c<='F')) {
     4fc:	89 2f       	mov	r24, r25
     4fe:	81 54       	subi	r24, 0x41	; 65
     500:	86 30       	cpi	r24, 0x06	; 6
     502:	20 f4       	brcc	.+8      	; 0x50c <utilParseNibbleHex+0x22>
    *value = c + 10 - 'A';
     504:	86 5f       	subi	r24, 0xF6	; 246
     506:	80 83       	st	Z, r24
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	08 95       	ret
    return 1;
  }
  else if((c>='0')&&(c<='9')) {
     50c:	89 2f       	mov	r24, r25
     50e:	80 53       	subi	r24, 0x30	; 48
     510:	8a 30       	cpi	r24, 0x0A	; 10
     512:	10 f0       	brcs	.+4      	; 0x518 <utilParseNibbleHex+0x2e>
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	08 95       	ret
    *value = c - '0';
     518:	80 83       	st	Z, r24
     51a:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
  }
  else
    return 0;
}
     51c:	08 95       	ret

0000051e <utilParseByteHex>:

uint8_t utilParseByteHex(const char *str,uint8_t *value)
{
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	0f 92       	push	r0
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	8c 01       	movw	r16, r24
     532:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseNibbleHex(str[0],&val))
     534:	fc 01       	movw	r30, r24
     536:	80 81       	ld	r24, Z
     538:	be 01       	movw	r22, r28
     53a:	6f 5f       	subi	r22, 0xFF	; 255
     53c:	7f 4f       	sbci	r23, 0xFF	; 255
     53e:	0e 94 75 02 	call	0x4ea	; 0x4ea <utilParseNibbleHex>
     542:	88 23       	and	r24, r24
     544:	91 f0       	breq	.+36     	; 0x56a <utilParseByteHex+0x4c>
    return 0;
  val <<= 4;
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	82 95       	swap	r24
     54a:	80 7f       	andi	r24, 0xF0	; 240
     54c:	89 83       	std	Y+1, r24	; 0x01
  if(!utilParseNibbleHex(str[1],value))
     54e:	f8 01       	movw	r30, r16
     550:	81 81       	ldd	r24, Z+1	; 0x01
     552:	b7 01       	movw	r22, r14
     554:	0e 94 75 02 	call	0x4ea	; 0x4ea <utilParseNibbleHex>
     558:	88 23       	and	r24, r24
     55a:	39 f0       	breq	.+14     	; 0x56a <utilParseByteHex+0x4c>
    return 0;
  *value |= val;
     55c:	f7 01       	movw	r30, r14
     55e:	80 81       	ld	r24, Z
     560:	99 81       	ldd	r25, Y+1	; 0x01
     562:	89 2b       	or	r24, r25
     564:	80 83       	st	Z, r24
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	01 c0       	rjmp	.+2      	; 0x56c <utilParseByteHex+0x4e>
  return 1;
     56a:	80 e0       	ldi	r24, 0x00	; 0
}
     56c:	0f 90       	pop	r0
     56e:	cf 91       	pop	r28
     570:	df 91       	pop	r29
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	08 95       	ret

0000057c <utilParseWordHex>:

uint8_t utilParseWordHex(const char *str,uint16_t *value)
{
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	df 93       	push	r29
     586:	cf 93       	push	r28
     588:	00 d0       	rcall	.+0      	; 0x58a <utilParseWordHex+0xe>
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	8c 01       	movw	r16, r24
     590:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     592:	be 01       	movw	r22, r28
     594:	6f 5f       	subi	r22, 0xFF	; 255
     596:	7f 4f       	sbci	r23, 0xFF	; 255
     598:	0e 94 8f 02 	call	0x51e	; 0x51e <utilParseByteHex>
     59c:	88 23       	and	r24, r24
     59e:	a1 f0       	breq	.+40     	; 0x5c8 <utilParseWordHex+0x4c>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     5a0:	c8 01       	movw	r24, r16
     5a2:	02 96       	adiw	r24, 0x02	; 2
     5a4:	be 01       	movw	r22, r28
     5a6:	6e 5f       	subi	r22, 0xFE	; 254
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	0e 94 8f 02 	call	0x51e	; 0x51e <utilParseByteHex>
     5ae:	88 23       	and	r24, r24
     5b0:	59 f0       	breq	.+22     	; 0x5c8 <utilParseWordHex+0x4c>
    return 0;
  *value = (uint16_t)val << 8 | val2;
     5b2:	99 81       	ldd	r25, Y+1	; 0x01
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	2a 81       	ldd	r18, Y+2	; 0x02
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	82 2b       	or	r24, r18
     5bc:	93 2b       	or	r25, r19
     5be:	f7 01       	movw	r30, r14
     5c0:	91 83       	std	Z+1, r25	; 0x01
     5c2:	80 83       	st	Z, r24
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <utilParseWordHex+0x4e>
  return 1;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
}
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	cf 91       	pop	r28
     5d0:	df 91       	pop	r29
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	08 95       	ret

000005dc <utilParseDwordHex>:

uint8_t utilParseDwordHex(const char *str,uint32_t *value)
{
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	df 93       	push	r29
     5e6:	cf 93       	push	r28
     5e8:	00 d0       	rcall	.+0      	; 0x5ea <utilParseDwordHex+0xe>
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <utilParseDwordHex+0x10>
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	8c 01       	movw	r16, r24
     5f2:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	0e 94 8f 02 	call	0x51e	; 0x51e <utilParseByteHex>
     5fe:	88 23       	and	r24, r24
     600:	09 f4       	brne	.+2      	; 0x604 <utilParseDwordHex+0x28>
     602:	4a c0       	rjmp	.+148    	; 0x698 <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     604:	c8 01       	movw	r24, r16
     606:	02 96       	adiw	r24, 0x02	; 2
     608:	be 01       	movw	r22, r28
     60a:	6e 5f       	subi	r22, 0xFE	; 254
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	0e 94 8f 02 	call	0x51e	; 0x51e <utilParseByteHex>
     612:	88 23       	and	r24, r24
     614:	09 f4       	brne	.+2      	; 0x618 <utilParseDwordHex+0x3c>
     616:	40 c0       	rjmp	.+128    	; 0x698 <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val3;
  if(!utilParseByteHex(&str[4],&val3))
     618:	c8 01       	movw	r24, r16
     61a:	04 96       	adiw	r24, 0x04	; 4
     61c:	be 01       	movw	r22, r28
     61e:	6d 5f       	subi	r22, 0xFD	; 253
     620:	7f 4f       	sbci	r23, 0xFF	; 255
     622:	0e 94 8f 02 	call	0x51e	; 0x51e <utilParseByteHex>
     626:	88 23       	and	r24, r24
     628:	b9 f1       	breq	.+110    	; 0x698 <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val4;
  if(!utilParseByteHex(&str[6],&val4))
     62a:	c8 01       	movw	r24, r16
     62c:	06 96       	adiw	r24, 0x06	; 6
     62e:	be 01       	movw	r22, r28
     630:	6c 5f       	subi	r22, 0xFC	; 252
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	0e 94 8f 02 	call	0x51e	; 0x51e <utilParseByteHex>
     638:	88 23       	and	r24, r24
     63a:	71 f1       	breq	.+92     	; 0x698 <utilParseDwordHex+0xbc>
    return 0;
  *value = (uint32_t)val << 24 | (uint32_t)val2 << 16 | (uint32_t)val3 << 8 | val4;
     63c:	29 81       	ldd	r18, Y+1	; 0x01
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	52 2f       	mov	r21, r18
     646:	44 27       	eor	r20, r20
     648:	33 27       	eor	r19, r19
     64a:	22 27       	eor	r18, r18
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	a0 e0       	ldi	r26, 0x00	; 0
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	dc 01       	movw	r26, r24
     656:	99 27       	eor	r25, r25
     658:	88 27       	eor	r24, r24
     65a:	28 2b       	or	r18, r24
     65c:	39 2b       	or	r19, r25
     65e:	4a 2b       	or	r20, r26
     660:	5b 2b       	or	r21, r27
     662:	8c 81       	ldd	r24, Y+4	; 0x04
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	a0 e0       	ldi	r26, 0x00	; 0
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	28 2b       	or	r18, r24
     66c:	39 2b       	or	r19, r25
     66e:	4a 2b       	or	r20, r26
     670:	5b 2b       	or	r21, r27
     672:	8b 81       	ldd	r24, Y+3	; 0x03
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a0 e0       	ldi	r26, 0x00	; 0
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	ba 2f       	mov	r27, r26
     67c:	a9 2f       	mov	r26, r25
     67e:	98 2f       	mov	r25, r24
     680:	88 27       	eor	r24, r24
     682:	28 2b       	or	r18, r24
     684:	39 2b       	or	r19, r25
     686:	4a 2b       	or	r20, r26
     688:	5b 2b       	or	r21, r27
     68a:	f7 01       	movw	r30, r14
     68c:	20 83       	st	Z, r18
     68e:	31 83       	std	Z+1, r19	; 0x01
     690:	42 83       	std	Z+2, r20	; 0x02
     692:	53 83       	std	Z+3, r21	; 0x03
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	01 c0       	rjmp	.+2      	; 0x69a <utilParseDwordHex+0xbe>
  return 1;
     698:	80 e0       	ldi	r24, 0x00	; 0
}
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	cf 91       	pop	r28
     6a4:	df 91       	pop	r29
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	08 95       	ret

000006b0 <utilParseByteDec>:

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
     6b0:	db 01       	movw	r26, r22
     6b2:	fc 01       	movw	r30, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
      break;
    }
    c -= '0';
    value *= 10;
     6b8:	4a e0       	ldi	r20, 0x0A	; 10
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
     6ba:	80 81       	ld	r24, Z
     6bc:	98 2f       	mov	r25, r24
     6be:	90 53       	subi	r25, 0x30	; 48
     6c0:	9a 30       	cpi	r25, 0x0A	; 10
     6c2:	50 f4       	brcc	.+20     	; 0x6d8 <utilParseByteDec+0x28>
      break;
    }
    c -= '0';
    value *= 10;
     6c4:	34 9f       	mul	r19, r20
     6c6:	80 2d       	mov	r24, r0
     6c8:	11 24       	eor	r1, r1
    value += c;
     6ca:	38 2f       	mov	r19, r24
     6cc:	39 0f       	add	r19, r25
    digits++;
     6ce:	2f 5f       	subi	r18, 0xFF	; 255
     6d0:	31 96       	adiw	r30, 0x01	; 1

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
     6d2:	23 30       	cpi	r18, 0x03	; 3
     6d4:	91 f7       	brne	.-28     	; 0x6ba <utilParseByteDec+0xa>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <utilParseByteDec+0x2a>
    c -= '0';
    value *= 10;
    value += c;
    digits++;
  }
  if(digits > 0) {
     6d8:	21 11       	cpse	r18, r1
    *out = value;
     6da:	3c 93       	st	X, r19
  }
  return digits;
}
     6dc:	82 2f       	mov	r24, r18
     6de:	08 95       	ret

000006e0 <utilReset>:
 * Performs watchdog-based AVR reset, resulting in executing bootloader code
 * in a clean way.
 */
void utilReset(void) {
	// Perform a reset
	cli();
     6e0:	f8 94       	cli
	wdt_enable(WDTO_250MS);
     6e2:	2c e0       	ldi	r18, 0x0C	; 12
     6e4:	88 e1       	ldi	r24, 0x18	; 24
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	a8 95       	wdr
     6ee:	80 93 60 00 	sts	0x0060, r24
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	20 93 60 00 	sts	0x0060, r18
     6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <utilReset+0x18>

000006fa <bridgeRequestResponseRead>:
uint8_t s_ubFlags;
static uint8_t req_is_pending;

static void bridgeRequestResponseRead(void)
{
  if(!req_is_pending) {
     6fa:	80 91 3e 01 	lds	r24, 0x013E
     6fe:	88 23       	and	r24, r24
     700:	29 f4       	brne	.+10     	; 0x70c <bridgeRequestResponseRead+0x12>
    req_is_pending = 1;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 3e 01 	sts	0x013E, r24
    parRequestAmiRead();
     708:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <parRequestAmiRead>
     70c:	08 95       	ret

0000070e <bridgeLoop>:
/**
 * Main plip loop.
 * Monitors parallel port and ENC28J60 traffic.
 */
void bridgeLoop(void)
{
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	00 d0       	rcall	.+0      	; 0x71e <bridgeLoop+0x10>
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
  // Associate protocol fns with given ptrs
  parInit();
     722:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <parInit>

  // Init ENC28j60
  enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
     726:	0e 94 8e 0b 	call	0x171c	; 0x171c <pio_util_get_init_flags>
     72a:	68 2f       	mov	r22, r24
     72c:	05 e5       	ldi	r16, 0x55	; 85
     72e:	11 e0       	ldi	r17, 0x01	; 1
     730:	c8 01       	movw	r24, r16
     732:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <enc28j60_init>

  // Reset stats
  stats_reset();
     736:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <stats_reset>

  // Reset flags & request state
  s_ubFlags = 0;
     73a:	10 92 52 01 	sts	0x0152, r1
  req_is_pending = 0;
     73e:	10 92 3e 01 	sts	0x013E, r1

  uint8_t flow_control = g_sConfig.flow_ctl;
     742:	f8 01       	movw	r30, r16
     744:	f6 80       	ldd	r15, Z+6	; 0x06
     746:	10 e0       	ldi	r17, 0x00	; 0
        bridgeRequestResponseRead();
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     748:	6e 01       	movw	r12, r28
     74a:	08 94       	sec
     74c:	c1 1c       	adc	r12, r1
     74e:	d1 1c       	adc	r13, r1
  uint8_t ubPacketCount;
  while(1) {
    // NOTE: UART command handling was here

    // Calls pb_proto_handle - this is where PAR communication is done
    pb_proto_handle();
     750:	0e 94 42 08 	call	0x1084	; 0x1084 <pb_proto_handle>

    // Handle packets coming from network
		ubPacketCount = enc28j60_has_recv();
     754:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <enc28j60_has_recv>
     758:	08 2f       	mov	r16, r24
    if(ubPacketCount) {
     75a:	88 23       	and	r24, r24
     75c:	51 f0       	breq	.+20     	; 0x772 <bridgeLoop+0x64>
      if(ubDisplayPacketInfo) {
        // NOTE: UART - time_stamp_spc() FIRST INCOMING!\r\n
        ubDisplayPacketInfo = 0;
      }

      if(s_ubFlags & FLAG_ONLINE) {
     75e:	80 91 52 01 	lds	r24, 0x0152
     762:	80 ff       	sbrs	r24, 0
     764:	03 c0       	rjmp	.+6      	; 0x76c <bridgeLoop+0x5e>
				// Comm online: let Amiga know about new packet
        bridgeRequestResponseRead();
     766:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bridgeRequestResponseRead>
     76a:	03 c0       	rjmp	.+6      	; 0x772 <bridgeLoop+0x64>
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     76c:	c6 01       	movw	r24, r12
     76e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <pio_util_recv_packet>
        // NOTE: UART - time_stamp_spc() OFFLINE DROP: hex_word(size)\r\n
      }
    }

    // flow control
    if(flow_control) {
     772:	ff 20       	and	r15, r15
     774:	69 f3       	breq	.-38     	; 0x750 <bridgeLoop+0x42>
      // flow limited
      if(limit_flow) {
     776:	11 23       	and	r17, r17
     778:	41 f0       	breq	.+16     	; 0x78a <bridgeLoop+0x7c>
        // disable again?
        if(!ubPacketCount) {
     77a:	00 23       	and	r16, r16
     77c:	49 f7       	brne	.-46     	; 0x750 <bridgeLoop+0x42>
          enc28j60_control(PIO_CONTROL_FLOW, 0);
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	0e 94 cb 0c 	call	0x1996	; 0x1996 <enc28j60_control>
     786:	10 e0       	ldi	r17, 0x00	; 0
     788:	e3 cf       	rjmp	.-58     	; 0x750 <bridgeLoop+0x42>
        }
      }
      // no flow limit
      else {
        // enable?
        if(ubPacketCount) {
     78a:	00 23       	and	r16, r16
     78c:	09 f3       	breq	.-62     	; 0x750 <bridgeLoop+0x42>
          enc28j60_control(PIO_CONTROL_FLOW, 1);
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	0e 94 cb 0c 	call	0x1996	; 0x1996 <enc28j60_control>
     796:	11 e0       	ldi	r17, 0x01	; 1
     798:	db cf       	rjmp	.-74     	; 0x750 <bridgeLoop+0x42>

0000079a <bridgeProcessPacket>:
 * by ETH_TYPE_* defines.
 * Custom "Magic" packets are defined as topmost EtherType values.
 * @param uwSize Packet length
 * @return Always PBPROTO_STATUS_OK
 */
uint8_t bridgeProcessPacket(uint16_t uwSize) {
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	ec 01       	movw	r28, r24
	// DEBUG
	// Blink LED
	LED_PORT &= ~LED_STATUS;
     7a4:	08 e2       	ldi	r16, 0x28	; 40
     7a6:	10 e0       	ldi	r17, 0x00	; 0
     7a8:	f8 01       	movw	r30, r16
     7aa:	80 81       	ld	r24, Z
     7ac:	8f 7d       	andi	r24, 0xDF	; 223
     7ae:	80 83       	st	Z, r24
	timerDelay10ms(20);
     7b0:	84 e1       	ldi	r24, 0x14	; 20
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 8b 01 	call	0x316	; 0x316 <timerDelay10ms>
	LED_PORT |= LED_STATUS;
     7b8:	f8 01       	movw	r30, r16
     7ba:	80 81       	ld	r24, Z
     7bc:	80 62       	ori	r24, 0x20	; 32
     7be:	80 83       	st	Z, r24
 * Returns EtherType field value in given eth frame.
 * @param pkt Pointer to eth frame.
 * @return 2-byte EtherType field value.
 */
inline uint16_t eth_get_pkt_type(const uint8_t *pkt) {
	return net_get_word(pkt + ETH_OFF_TYPE);
     7c0:	85 e8       	ldi	r24, 0x85	; 133
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	0e 94 c2 06 	call	0xd84	; 0xd84 <net_get_word>
	// DEBUG end

  // get eth type
  uint16_t eth_type = eth_get_pkt_type(g_pDataBuffer);
  switch(eth_type) {
     7c8:	ff ef       	ldi	r31, 0xFF	; 255
     7ca:	8d 3f       	cpi	r24, 0xFD	; 253
     7cc:	9f 07       	cpc	r25, r31
     7ce:	99 f1       	breq	.+102    	; 0x836 <bridgeProcessPacket+0x9c>
     7d0:	2f ef       	ldi	r18, 0xFF	; 255
     7d2:	8e 3f       	cpi	r24, 0xFE	; 254
     7d4:	92 07       	cpc	r25, r18
     7d6:	28 f4       	brcc	.+10     	; 0x7e2 <bridgeProcessPacket+0x48>
     7d8:	8c 5f       	subi	r24, 0xFC	; 252
     7da:	9f 4f       	sbci	r25, 0xFF	; 255
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <bridgeProcessPacket+0x46>
     7de:	40 c0       	rjmp	.+128    	; 0x860 <bridgeProcessPacket+0xc6>
     7e0:	32 c0       	rjmp	.+100    	; 0x846 <bridgeProcessPacket+0xac>
     7e2:	ff ef       	ldi	r31, 0xFF	; 255
     7e4:	8e 3f       	cpi	r24, 0xFE	; 254
     7e6:	9f 07       	cpc	r25, r31
     7e8:	01 f1       	breq	.+64     	; 0x82a <bridgeProcessPacket+0x90>
     7ea:	8f 5f       	subi	r24, 0xFF	; 255
     7ec:	9f 4f       	sbci	r25, 0xFF	; 255
     7ee:	c1 f5       	brne	.+112    	; 0x860 <bridgeProcessPacket+0xc6>
 * @param buf Pointer to magic packet.
 */
static void bridgeCommOnline(const uint8_t *buf)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] online \r\n
  s_ubFlags |= FLAG_ONLINE | FLAG_FIRST_TRANSFER;
     7f0:	80 91 52 01 	lds	r24, 0x0152
     7f4:	85 60       	ori	r24, 0x05	; 5
     7f6:	80 93 52 01 	sts	0x0152, r24

  // validate mac address and if it does not match then reconfigure PIO
  const uint8_t *src_mac = eth_get_src_mac(buf);
  if(!net_compare_mac(g_sConfig.mac_addr, src_mac)) {
     7fa:	85 e5       	ldi	r24, 0x55	; 85
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	6f e7       	ldi	r22, 0x7F	; 127
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	0e 94 0e 07 	call	0xe1c	; 0xe1c <net_compare_mac>
     806:	88 23       	and	r24, r24
     808:	b9 f5       	brne	.+110    	; 0x878 <bridgeProcessPacket+0xde>
    // update mac param and save
    net_copy_mac(src_mac, g_sConfig.mac_addr);
     80a:	05 e5       	ldi	r16, 0x55	; 85
     80c:	11 e0       	ldi	r17, 0x01	; 1
     80e:	8f e7       	ldi	r24, 0x7F	; 127
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	b8 01       	movw	r22, r16
     814:	0e 94 a2 06 	call	0xd44	; 0xd44 <net_copy_mac>
    configSaveToRom();
     818:	0e 94 08 06 	call	0xc10	; 0xc10 <configSaveToRom>

    // re-configure PIO
    enc28j60_exit();
     81c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <enc28j60_exit>
    enc28j60_init(g_sConfig.mac_addr, PIO_INIT_BROAD_CAST);
     820:	c8 01       	movw	r24, r16
     822:	64 e0       	ldi	r22, 0x04	; 4
     824:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <enc28j60_init>
     828:	27 c0       	rjmp	.+78     	; 0x878 <bridgeProcessPacket+0xde>
 * Disables ethernet communication.
 */
static void bridgeCommOffline(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] offline
  s_ubFlags &= ~FLAG_ONLINE;
     82a:	80 91 52 01 	lds	r24, 0x0152
     82e:	8e 7f       	andi	r24, 0xFE	; 254
     830:	80 93 52 01 	sts	0x0152, r24
     834:	21 c0       	rjmp	.+66     	; 0x878 <bridgeProcessPacket+0xde>
}

static void bridgeLoopback(uint16_t size)
{
  s_ubFlags |= FLAG_SEND_MAGIC;
     836:	80 91 52 01 	lds	r24, 0x0152
     83a:	82 60       	ori	r24, 0x02	; 2
     83c:	80 93 52 01 	sts	0x0152, r24
  bridgeRequestResponseRead();
     840:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bridgeRequestResponseRead>
     844:	19 c0       	rjmp	.+50     	; 0x878 <bridgeProcessPacket+0xde>
      break;
    case ETH_TYPE_MAGIC_LOOPBACK:
      bridgeLoopback(uwSize);
      break;
		case ETH_TYPE_MAGIC_CMD:
			cmdProcess(uwSize);
     846:	ce 01       	movw	r24, r28
     848:	0e 94 82 04 	call	0x904	; 0x904 <cmdProcess>
			s_ubFlags |= FLAG_SEND_CMD_RESPONSE;
     84c:	80 91 52 01 	lds	r24, 0x0152
     850:	88 60       	ori	r24, 0x08	; 8
     852:	80 93 52 01 	sts	0x0152, r24
			req_is_pending = 0;
     856:	10 92 3e 01 	sts	0x013E, r1
			bridgeRequestResponseRead();
     85a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bridgeRequestResponseRead>
     85e:	0c c0       	rjmp	.+24     	; 0x878 <bridgeProcessPacket+0xde>
			break;
    default:
      // send packet via pio
      pio_util_send_packet(uwSize);
     860:	ce 01       	movw	r24, r28
     862:	0e 94 9b 0b 	call	0x1736	; 0x1736 <pio_util_send_packet>
      // if a packet arrived and we are not online then request online state
      if((s_ubFlags & FLAG_ONLINE)==0) {
     866:	80 91 52 01 	lds	r24, 0x0152
     86a:	80 fd       	sbrc	r24, 0
     86c:	05 c0       	rjmp	.+10     	; 0x878 <bridgeProcessPacket+0xde>
static void request_magic(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] request\r\n

  // request receive
  s_ubFlags |= FLAG_SEND_MAGIC | FLAG_FIRST_TRANSFER;
     86e:	86 60       	ori	r24, 0x06	; 6
     870:	80 93 52 01 	sts	0x0152, r24
  bridgeRequestResponseRead();
     874:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bridgeRequestResponseRead>
        request_magic();
      }
      break;
  }
  return PBPROTO_STATUS_OK;
}
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	08 95       	ret

00000884 <bridgeFillPacket>:

// ----- packet callbacks -----

// the Amiga requests a new packet

uint8_t bridgeFillPacket(uint16_t *pFilledSize) {
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	ec 01       	movw	r28, r24
  if((s_ubFlags & FLAG_SEND_MAGIC) == FLAG_SEND_MAGIC) {
     88e:	80 91 52 01 	lds	r24, 0x0152
     892:	81 ff       	sbrs	r24, 1
     894:	1c c0       	rjmp	.+56     	; 0x8ce <bridgeFillPacket+0x4a>
		// Send magic packet to Amiga
    s_ubFlags &= ~FLAG_SEND_MAGIC;
     896:	8d 7f       	andi	r24, 0xFD	; 253
     898:	80 93 52 01 	sts	0x0152, r24
extern const uint8_t net_zero_mac[6];
extern const uint8_t net_zero_ip[4];
extern const uint8_t net_ones_ip[4];

/* convenience functions */
inline void net_copy_bcast_mac(uint8_t *out) { net_copy_mac(net_bcast_mac, out); }
     89c:	09 e7       	ldi	r16, 0x79	; 121
     89e:	11 e0       	ldi	r17, 0x01	; 1
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 a2 06 	call	0xd44	; 0xd44 <net_copy_mac>

    // Build magic packet header
    // Target (bcast) MAC, src (plipbox) MAC, 0xFFFF => pFilledSize: 14 bytes
    net_copy_bcast_mac(g_pDataBuffer + ETH_OFF_TGT_MAC);
    net_copy_mac(g_sConfig.mac_addr, g_pDataBuffer + ETH_OFF_SRC_MAC);
     8aa:	b8 01       	movw	r22, r16
     8ac:	6a 5f       	subi	r22, 0xFA	; 250
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	85 e5       	ldi	r24, 0x55	; 85
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 a2 06 	call	0xd44	; 0xd44 <net_copy_mac>
    net_put_word(g_pDataBuffer + ETH_OFF_TYPE, ETH_TYPE_MAGIC_ONLINE);
     8b8:	c8 01       	movw	r24, r16
     8ba:	0c 96       	adiw	r24, 0x0c	; 12
     8bc:	6f ef       	ldi	r22, 0xFF	; 255
     8be:	7f ef       	ldi	r23, 0xFF	; 255
     8c0:	0e 94 cc 06 	call	0xd98	; 0xd98 <net_put_word>

    *pFilledSize = ETH_HDR_SIZE;
     8c4:	8e e0       	ldi	r24, 0x0E	; 14
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	99 83       	std	Y+1, r25	; 0x01
     8ca:	88 83       	st	Y, r24
     8cc:	13 c0       	rjmp	.+38     	; 0x8f4 <bridgeFillPacket+0x70>
  }
  else if((s_ubFlags & FLAG_SEND_CMD_RESPONSE) == FLAG_SEND_CMD_RESPONSE) {
     8ce:	83 ff       	sbrs	r24, 3
     8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <bridgeFillPacket+0x5c>
    // Send CMD response - it's already in buffer
    *pFilledSize = g_uwCmdResponseSize;
     8d2:	80 91 53 01 	lds	r24, 0x0153
     8d6:	90 91 54 01 	lds	r25, 0x0154
     8da:	99 83       	std	Y+1, r25	; 0x01
     8dc:	88 83       	st	Y, r24
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <bridgeFillPacket+0x70>
  }
  else {
		// Receive packet buffer with data from ENC28j60 if pending
    pio_util_recv_packet(pFilledSize);
     8e0:	ce 01       	movw	r24, r28
     8e2:	0e 94 c8 0b 	call	0x1790	; 0x1790 <pio_util_recv_packet>

    if(s_ubFlags & FLAG_FIRST_TRANSFER) {
     8e6:	80 91 52 01 	lds	r24, 0x0152
     8ea:	82 ff       	sbrs	r24, 2
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <bridgeFillPacket+0x70>
			// report first packet transfer
      // NOTE: UART - time_stamp_spc() FIRST TRANSFER!\r\n
      s_ubFlags &= ~FLAG_FIRST_TRANSFER;
     8ee:	8b 7f       	andi	r24, 0xFB	; 251
     8f0:	80 93 52 01 	sts	0x0152, r24
    }
  }

  req_is_pending = 0;
     8f4:	10 92 3e 01 	sts	0x013E, r1

  return PBPROTO_STATUS_OK;
}
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	08 95       	ret

00000904 <cmdProcess>:

/**
 * PlipUltimate command process function.
 * This function should be called when cmd packet has been received.
 */
void cmdProcess(uint16_t uwPacketSize) {
     904:	1f 93       	push	r17
	uint8_t ubCmdType = g_pDataBuffer[0];
     906:	e9 e7       	ldi	r30, 0x79	; 121
     908:	f1 e0       	ldi	r31, 0x01	; 1
     90a:	90 81       	ld	r25, Z
	g_pDataBuffer[0] |= CMD_RESPONSE;
     90c:	89 2f       	mov	r24, r25
     90e:	80 68       	ori	r24, 0x80	; 128
     910:	80 83       	st	Z, r24
	switch(ubCmdType) {
     912:	93 30       	cpi	r25, 0x03	; 3
     914:	41 f0       	breq	.+16     	; 0x926 <cmdProcess+0x22>
     916:	94 30       	cpi	r25, 0x04	; 4
     918:	b1 f0       	breq	.+44     	; 0x946 <cmdProcess+0x42>
     91a:	91 30       	cpi	r25, 0x01	; 1
     91c:	09 f0       	breq	.+2      	; 0x920 <cmdProcess+0x1c>
     91e:	3f c0       	rjmp	.+126    	; 0x99e <cmdProcess+0x9a>
		case CMD_SDWRITE:   cmdSdWrite();   return;
	}
}

static void cmdReboot(void) {
	utilReset();
     920:	0e 94 70 03 	call	0x6e0	; 0x6e0 <utilReset>
     924:	3c c0       	rjmp	.+120    	; 0x99e <cmdProcess+0x9a>
static void cmdGetLog(void) {
	// TODO(KaiN#9): implement cmdGetLog()
}

static void cmdGetConfig(void) {
	memcpy(&g_pDataBuffer[ETH_HDR_SIZE], &g_sConfig, sizeof(tConfig));
     926:	a7 e8       	ldi	r26, 0x87	; 135
     928:	b1 e0       	ldi	r27, 0x01	; 1
     92a:	e5 e5       	ldi	r30, 0x55	; 85
     92c:	f1 e0       	ldi	r31, 0x01	; 1
     92e:	84 e1       	ldi	r24, 0x14	; 20
     930:	01 90       	ld	r0, Z+
     932:	0d 92       	st	X+, r0
     934:	81 50       	subi	r24, 0x01	; 1
     936:	e1 f7       	brne	.-8      	; 0x930 <cmdProcess+0x2c>
	g_uwCmdResponseSize = ETH_HDR_SIZE + sizeof(tConfig);
     938:	82 e2       	ldi	r24, 0x22	; 34
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	90 93 54 01 	sts	0x0154, r25
     940:	80 93 53 01 	sts	0x0153, r24
     944:	2c c0       	rjmp	.+88     	; 0x99e <cmdProcess+0x9a>
}

static void cmdSetConfig(void) {
	uint8_t ubResult = 1;

	if(
     946:	80 91 7a 01 	lds	r24, 0x017A
     94a:	81 50       	subi	r24, 0x01	; 1
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	10 f0       	brcs	.+4      	; 0x954 <cmdProcess+0x50>
     950:	13 e0       	ldi	r17, 0x03	; 3
     952:	1d c0       	rjmp	.+58     	; 0x98e <cmdProcess+0x8a>
	) {
		ubResult |= 0b10;
	}
	else {
		// Update current config
		memcpy(&g_sConfig, &g_pDataBuffer[ETH_HDR_SIZE], sizeof(tConfig));
     954:	a5 e5       	ldi	r26, 0x55	; 85
     956:	b1 e0       	ldi	r27, 0x01	; 1
     958:	e7 e8       	ldi	r30, 0x87	; 135
     95a:	f1 e0       	ldi	r31, 0x01	; 1
     95c:	84 e1       	ldi	r24, 0x14	; 20
     95e:	01 90       	ld	r0, Z+
     960:	0d 92       	st	X+, r0
     962:	81 50       	subi	r24, 0x01	; 1
     964:	e1 f7       	brne	.-8      	; 0x95e <cmdProcess+0x5a>

		// Update ROM config
		if(g_pDataBuffer[1] == WRITE_TYPE_DEFAULT) {
     966:	80 91 7a 01 	lds	r24, 0x017A
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	31 f4       	brne	.+12     	; 0x97a <cmdProcess+0x76>
			if(configSaveToRom())
     96e:	0e 94 08 06 	call	0xc10	; 0xc10 <configSaveToRom>
     972:	88 23       	and	r24, r24
     974:	11 f0       	breq	.+4      	; 0x97a <cmdProcess+0x76>
     976:	15 e0       	ldi	r17, 0x05	; 5
     978:	01 c0       	rjmp	.+2      	; 0x97c <cmdProcess+0x78>
     97a:	11 e0       	ldi	r17, 0x01	; 1
				ubResult |= 0b100;
		}

		// Reconfigure plip
		enc28j60_exit();
     97c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <enc28j60_exit>
		enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
     980:	0e 94 8e 0b 	call	0x171c	; 0x171c <pio_util_get_init_flags>
     984:	68 2f       	mov	r22, r24
     986:	85 e5       	ldi	r24, 0x55	; 85
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <enc28j60_init>
	}

	// Prepare response
	g_pDataBuffer[1] = ubResult;
     98e:	10 93 7a 01 	sts	0x017A, r17
	g_uwCmdResponseSize = ETH_HDR_SIZE;
     992:	8e e0       	ldi	r24, 0x0E	; 14
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	90 93 54 01 	sts	0x0154, r25
     99a:	80 93 53 01 	sts	0x0153, r24
		case CMD_SETCONFIG: cmdSetConfig(); return;
		case CMD_SDINFO:    cmdGetSdInfo(); return;
		case CMD_SDREAD:    cmdSdRead();    return;
		case CMD_SDWRITE:   cmdSdWrite();   return;
	}
}
     99e:	1f 91       	pop	r17
     9a0:	08 95       	ret

000009a2 <cmd_param_ip_addr>:
    return CMD_PARSE_ERROR;
  }
}

COMMAND(cmd_param_ip_addr)
{
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <cmd_param_ip_addr+0x6>
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <cmd_param_ip_addr+0x8>
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	fb 01       	movw	r30, r22
  uint8_t ip[4];

  if(net_parse_ip((char*)argv[1], ip)) {
     9b0:	82 81       	ldd	r24, Z+2	; 0x02
     9b2:	93 81       	ldd	r25, Z+3	; 0x03
     9b4:	be 01       	movw	r22, r28
     9b6:	6f 5f       	subi	r22, 0xFF	; 255
     9b8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ba:	0e 94 96 07 	call	0xf2c	; 0xf2c <net_parse_ip>
     9be:	88 23       	and	r24, r24
     9c0:	11 f4       	brne	.+4      	; 0x9c6 <cmd_param_ip_addr+0x24>
     9c2:	81 e1       	ldi	r24, 0x11	; 17
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <cmd_param_ip_addr+0x32>
    net_copy_ip(ip, g_sConfig.test_ip);
     9c6:	ce 01       	movw	r24, r28
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	61 e6       	ldi	r22, 0x61	; 97
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	0e 94 b1 06 	call	0xd62	; 0xd62 <net_copy_ip>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	cf 91       	pop	r28
     9de:	df 91       	pop	r29
     9e0:	08 95       	ret

000009e2 <cmd_param_word>:
  }
  return result;
}

COMMAND(cmd_param_word)
{
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	df 93       	push	r29
     9e8:	cf 93       	push	r28
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <cmd_param_word+0xa>
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	28 2f       	mov	r18, r24
     9f2:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     9f4:	ed 91       	ld	r30, X+
     9f6:	fc 91       	ld	r31, X
     9f8:	11 97       	sbiw	r26, 0x01	; 1
  uint8_t type = argv[0][1];
     9fa:	91 81       	ldd	r25, Z+1	; 0x01
  uint16_t *val = 0;

  if(group == 't') {
     9fc:	80 81       	ld	r24, Z
     9fe:	84 37       	cpi	r24, 0x74	; 116
     a00:	19 f5       	brne	.+70     	; 0xa48 <cmd_param_word+0x66>
    switch(type) {
     a02:	90 37       	cpi	r25, 0x70	; 112
     a04:	59 f0       	breq	.+22     	; 0xa1c <cmd_param_word+0x3a>
     a06:	94 37       	cpi	r25, 0x74	; 116
     a08:	19 f0       	breq	.+6      	; 0xa10 <cmd_param_word+0x2e>
     a0a:	9c 36       	cpi	r25, 0x6C	; 108
     a0c:	e9 f4       	brne	.+58     	; 0xa48 <cmd_param_word+0x66>
     a0e:	03 c0       	rjmp	.+6      	; 0xa16 <cmd_param_word+0x34>
     a10:	0f e5       	ldi	r16, 0x5F	; 95
     a12:	11 e0       	ldi	r17, 0x01	; 1
     a14:	05 c0       	rjmp	.+10     	; 0xa20 <cmd_param_word+0x3e>
     a16:	0d e5       	ldi	r16, 0x5D	; 93
     a18:	11 e0       	ldi	r17, 0x01	; 1
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <cmd_param_word+0x3e>
     a1c:	05 e6       	ldi	r16, 0x65	; 101
     a1e:	11 e0       	ldi	r17, 0x01	; 1
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     a20:	21 30       	cpi	r18, 0x01	; 1
     a22:	91 f0       	breq	.+36     	; 0xa48 <cmd_param_word+0x66>
    return CMD_PARSE_ERROR;
  } else {
    uint16_t new_val;
    if(utilParseWordHex((char*)argv[1],&new_val)) {
     a24:	12 96       	adiw	r26, 0x02	; 2
     a26:	8d 91       	ld	r24, X+
     a28:	9c 91       	ld	r25, X
     a2a:	13 97       	sbiw	r26, 0x03	; 3
     a2c:	be 01       	movw	r22, r28
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	0e 94 be 02 	call	0x57c	; 0x57c <utilParseWordHex>
     a36:	88 23       	and	r24, r24
     a38:	39 f0       	breq	.+14     	; 0xa48 <cmd_param_word+0x66>
      *val = new_val;
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	9a 81       	ldd	r25, Y+2	; 0x02
     a3e:	f8 01       	movw	r30, r16
     a40:	91 83       	std	Z+1, r25	; 0x01
     a42:	80 83       	st	Z, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <cmd_param_word+0x68>
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return CMD_OK;
     a48:	81 e1       	ldi	r24, 0x11	; 17
}
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	cf 91       	pop	r28
     a50:	df 91       	pop	r29
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	08 95       	ret

00000a58 <cmd_param_toggle>:
#include "net/net.h"
#include "config.h"
#include "stats.h"

COMMAND(cmd_param_toggle)
{
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	1f 93       	push	r17
     a5e:	df 93       	push	r29
     a60:	cf 93       	push	r28
     a62:	0f 92       	push	r0
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     a6a:	ed 91       	ld	r30, X+
     a6c:	fc 91       	ld	r31, X
     a6e:	11 97       	sbiw	r26, 0x01	; 1
     a70:	90 81       	ld	r25, Z
  uint8_t type = argv[0][1];
     a72:	21 81       	ldd	r18, Z+1	; 0x01
  uint8_t *val = 0;
  uint8_t result = CMD_OK;

  if(group == 't') {
     a74:	94 37       	cpi	r25, 0x74	; 116
     a76:	41 f4       	brne	.+16     	; 0xa88 <cmd_param_toggle+0x30>
    switch(type) {
     a78:	2d 36       	cpi	r18, 0x6D	; 109
     a7a:	71 f5       	brne	.+92     	; 0xad8 <cmd_param_toggle+0x80>
     a7c:	e8 e6       	ldi	r30, 0x68	; 104
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	90 81       	ld	r25, Z
     a82:	7f 01       	movw	r14, r30
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	11 c0       	rjmp	.+34     	; 0xaaa <cmd_param_toggle+0x52>
      case 'm': val = &g_sConfig.test_mode; break;
      default: return CMD_PARSE_ERROR;
    }
  }
  else if(group == 'f') {
     a88:	96 36       	cpi	r25, 0x66	; 102
     a8a:	31 f5       	brne	.+76     	; 0xad8 <cmd_param_toggle+0x80>
    switch(type) {
     a8c:	23 36       	cpi	r18, 0x63	; 99
     a8e:	41 f0       	breq	.+16     	; 0xaa0 <cmd_param_toggle+0x48>
     a90:	24 36       	cpi	r18, 0x64	; 100
     a92:	11 f5       	brne	.+68     	; 0xad8 <cmd_param_toggle+0x80>
     a94:	ec e5       	ldi	r30, 0x5C	; 92
     a96:	f1 e0       	ldi	r31, 0x01	; 1
     a98:	90 81       	ld	r25, Z
     a9a:	7f 01       	movw	r14, r30
     a9c:	13 e0       	ldi	r17, 0x03	; 3
     a9e:	05 c0       	rjmp	.+10     	; 0xaaa <cmd_param_toggle+0x52>
     aa0:	eb e5       	ldi	r30, 0x5B	; 91
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
     aa4:	90 81       	ld	r25, Z
     aa6:	7f 01       	movw	r14, r30
     aa8:	13 e0       	ldi	r17, 0x03	; 3
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	31 f4       	brne	.+12     	; 0xaba <cmd_param_toggle+0x62>
    // toggle value if no argument is given
    *val = *val ? 0 : 1;
     aae:	f7 01       	movw	r30, r14
     ab0:	10 82       	st	Z, r1
     ab2:	99 23       	and	r25, r25
     ab4:	91 f4       	brne	.+36     	; 0xada <cmd_param_toggle+0x82>
     ab6:	80 83       	st	Z, r24
     ab8:	10 c0       	rjmp	.+32     	; 0xada <cmd_param_toggle+0x82>
  } else {
    uint8_t new_val;
    if(utilParseByteHex((char*)argv[1],&new_val)) {
     aba:	12 96       	adiw	r26, 0x02	; 2
     abc:	8d 91       	ld	r24, X+
     abe:	9c 91       	ld	r25, X
     ac0:	13 97       	sbiw	r26, 0x03	; 3
     ac2:	be 01       	movw	r22, r28
     ac4:	6f 5f       	subi	r22, 0xFF	; 255
     ac6:	7f 4f       	sbci	r23, 0xFF	; 255
     ac8:	0e 94 8f 02 	call	0x51e	; 0x51e <utilParseByteHex>
     acc:	88 23       	and	r24, r24
     ace:	21 f0       	breq	.+8      	; 0xad8 <cmd_param_toggle+0x80>
      *val = new_val;
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	f7 01       	movw	r30, r14
     ad4:	80 83       	st	Z, r24
     ad6:	01 c0       	rjmp	.+2      	; 0xada <cmd_param_toggle+0x82>
     ad8:	11 e1       	ldi	r17, 0x11	; 17
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return result;
}
     ada:	81 2f       	mov	r24, r17
     adc:	0f 90       	pop	r0
     ade:	cf 91       	pop	r28
     ae0:	df 91       	pop	r29
     ae2:	1f 91       	pop	r17
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	08 95       	ret

00000aea <cmd_param_mac_addr>:
  }
  return CMD_OK;
}

COMMAND(cmd_param_mac_addr)
{
     aea:	df 93       	push	r29
     aec:	cf 93       	push	r28
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <cmd_param_mac_addr+0x6>
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <cmd_param_mac_addr+0x8>
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <cmd_param_mac_addr+0xa>
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	fb 01       	movw	r30, r22
  uint8_t mac[6];

  if(net_parse_mac((char*)argv[1], mac)) {
     afa:	82 81       	ldd	r24, Z+2	; 0x02
     afc:	93 81       	ldd	r25, Z+3	; 0x03
     afe:	be 01       	movw	r22, r28
     b00:	6f 5f       	subi	r22, 0xFF	; 255
     b02:	7f 4f       	sbci	r23, 0xFF	; 255
     b04:	0e 94 5d 07 	call	0xeba	; 0xeba <net_parse_mac>
     b08:	88 23       	and	r24, r24
     b0a:	11 f4       	brne	.+4      	; 0xb10 <cmd_param_mac_addr+0x26>
     b0c:	81 e1       	ldi	r24, 0x11	; 17
     b0e:	07 c0       	rjmp	.+14     	; 0xb1e <cmd_param_mac_addr+0x34>
    net_copy_mac(mac, g_sConfig.mac_addr);
     b10:	ce 01       	movw	r24, r28
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	65 e5       	ldi	r22, 0x55	; 85
     b16:	71 e0       	ldi	r23, 0x01	; 1
     b18:	0e 94 a2 06 	call	0xd44	; 0xd44 <net_copy_mac>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     b1e:	26 96       	adiw	r28, 0x06	; 6
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	cf 91       	pop	r28
     b2c:	df 91       	pop	r29
     b2e:	08 95       	ret

00000b30 <cmd_stats_reset>:
  return CMD_OK;
}

COMMAND(cmd_stats_reset)
{
  stats_reset();
     b30:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <stats_reset>
  return CMD_OK;
}
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	08 95       	ret

00000b38 <cmd_stats_dump>:
  }
}

COMMAND(cmd_stats_dump)
{
  stats_dump_all();
     b38:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <stats_dump_all>
  return CMD_OK;
}
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	08 95       	ret

00000b40 <cmd_dump_stats>:
#include "stats.h"
#include "base/uartutil.h"

COMMAND_KEY(cmd_dump_stats)
{
  stats_dump_all();
     b40:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <stats_dump_all>
}
     b44:	08 95       	ret

00000b46 <configCalcCrc16>:
};

// build check sum for parameter block
static uint16_t configCalcCrc16(tConfig *p) {
  uint16_t crc16 = 0xffff;
  uint8_t *data = (uint8_t *)p;
     b46:	fc 01       	movw	r30, r24
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	4f ef       	ldi	r20, 0xFF	; 255
     b4e:	5f ef       	ldi	r21, 0xFF	; 255
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     b50:	81 91       	ld	r24, Z+
     b52:	48 27       	eor	r20, r24
     b54:	84 2f       	mov	r24, r20
     b56:	82 95       	swap	r24
     b58:	84 27       	eor	r24, r20
     b5a:	08 2e       	mov	r0, r24
     b5c:	86 95       	lsr	r24
     b5e:	86 95       	lsr	r24
     b60:	80 25       	eor	r24, r0
     b62:	08 2e       	mov	r0, r24
     b64:	86 95       	lsr	r24
     b66:	80 25       	eor	r24, r0
     b68:	87 70       	andi	r24, 0x07	; 7
     b6a:	04 2e       	mov	r0, r20
     b6c:	45 2f       	mov	r20, r21
     b6e:	86 95       	lsr	r24
     b70:	07 94       	ror	r0
     b72:	87 95       	ror	r24
     b74:	50 2d       	mov	r21, r0
     b76:	48 27       	eor	r20, r24
     b78:	06 94       	lsr	r0
     b7a:	87 95       	ror	r24
     b7c:	50 25       	eor	r21, r0
     b7e:	48 27       	eor	r20, r24
  uint16_t i;
  for(i=0;i<sizeof(tConfig);i++) {
     b80:	2f 5f       	subi	r18, 0xFF	; 255
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	24 31       	cpi	r18, 0x14	; 20
     b86:	31 05       	cpc	r19, r1
     b88:	19 f7       	brne	.-58     	; 0xb50 <configCalcCrc16+0xa>
    crc16 = _crc16_update(crc16,*data);
    data++;
  }
  return crc16;
}
     b8a:	84 2f       	mov	r24, r20
     b8c:	95 2f       	mov	r25, r21
     b8e:	08 95       	ret

00000b90 <configReset>:
  }

  return CONFIG_OK;
}

void configReset(void) {
     b90:	a5 e5       	ldi	r26, 0x55	; 85
     b92:	b1 e0       	ldi	r27, 0x01	; 1
     b94:	24 eb       	ldi	r18, 0xB4	; 180
     b96:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
     b98:	49 e6       	ldi	r20, 0x69	; 105
     b9a:	51 e0       	ldi	r21, 0x01	; 1
  }

  return CONFIG_OK;
}

void configReset(void) {
     b9c:	f9 01       	movw	r30, r18
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
    *(out++) = pgm_read_byte_near(in++);
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	e4 91       	lpm	r30, Z+
     ba4:	ed 93       	st	X+, r30
void configReset(void) {
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
     ba6:	a4 17       	cp	r26, r20
     ba8:	b5 07       	cpc	r27, r21
     baa:	c1 f7       	brne	.-16     	; 0xb9c <configReset+0xc>
    *(out++) = pgm_read_byte_near(in++);
  }
}
     bac:	08 95       	ret

00000bae <configLoadFromRom>:
  eeprom_write_word(&s_uwEepromCrc,crc16);

  return CONFIG_OK;
}

uint8_t configLoadFromRom(void) {
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
  // Check if eeprom is readable
  if(!eeprom_is_ready())
     bb6:	f9 9b       	sbis	0x1f, 1	; 31
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <configLoadFromRom+0x10>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	1d c0       	rjmp	.+58     	; 0xbf8 <configLoadFromRom+0x4a>
    return CONFIG_EEPROM_NOT_READY;

  // Read config
  eeprom_read_block(&g_sConfig,&s_sEepromConfig,sizeof(tConfig));
     bbe:	0f 2e       	mov	r0, r31
     bc0:	f5 e5       	ldi	r31, 0x55	; 85
     bc2:	ef 2e       	mov	r14, r31
     bc4:	f1 e0       	ldi	r31, 0x01	; 1
     bc6:	ff 2e       	mov	r15, r31
     bc8:	f0 2d       	mov	r31, r0
     bca:	c7 01       	movw	r24, r14
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	44 e1       	ldi	r20, 0x14	; 20
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__eerd_block_m328p>

  // Read crc16
  uint16_t uwCrc = eeprom_read_word(&s_uwEepromCrc);
     bd8:	84 e1       	ldi	r24, 0x14	; 20
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__eerd_word_m328p>
     be0:	8c 01       	movw	r16, r24
  if(uwCrc != configCalcCrc16(&g_sConfig)) {
     be2:	c7 01       	movw	r24, r14
     be4:	0e 94 a3 05 	call	0xb46	; 0xb46 <configCalcCrc16>
     be8:	80 17       	cp	r24, r16
     bea:	91 07       	cpc	r25, r17
     bec:	11 f4       	brne	.+4      	; 0xbf2 <configLoadFromRom+0x44>
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <configLoadFromRom+0x4a>
    configReset();
     bf2:	0e 94 c8 05 	call	0xb90	; 0xb90 <configReset>
     bf6:	82 e0       	ldi	r24, 0x02	; 2
    return CONFIG_EEPROM_CRC_MISMATCH;
  }

  return CONFIG_OK;
}
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	08 95       	ret

00000c02 <configInit>:
    *(out++) = pgm_read_byte_near(in++);
  }
}

void configInit(void) {
  if(configLoadFromRom() != CONFIG_OK)
     c02:	0e 94 d7 05 	call	0xbae	; 0xbae <configLoadFromRom>
     c06:	88 23       	and	r24, r24
     c08:	11 f0       	breq	.+4      	; 0xc0e <configInit+0xc>
    configReset();
     c0a:	0e 94 c8 05 	call	0xb90	; 0xb90 <configReset>
     c0e:	08 95       	ret

00000c10 <configSaveToRom>:
    data++;
  }
  return crc16;
}

uint8_t configSaveToRom(void) {
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
  // check that eeprom is writable
  if(!eeprom_is_ready())
     c14:	f9 9b       	sbis	0x1f, 1	; 31
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <configSaveToRom+0xc>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	12 c0       	rjmp	.+36     	; 0xc40 <configSaveToRom+0x30>
    return CONFIG_EEPROM_NOT_READY;

  // write current param to eeprom
  eeprom_write_block(&g_sConfig,&s_sEepromConfig,sizeof(tConfig));
     c1c:	05 e5       	ldi	r16, 0x55	; 85
     c1e:	11 e0       	ldi	r17, 0x01	; 1
     c20:	c8 01       	movw	r24, r16
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	44 e1       	ldi	r20, 0x14	; 20
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__eewr_block_m328p>

  // calc current parameter crc
  uint16_t crc16 = configCalcCrc16(&g_sConfig);
     c2e:	c8 01       	movw	r24, r16
     c30:	0e 94 a3 05 	call	0xb46	; 0xb46 <configCalcCrc16>
     c34:	bc 01       	movw	r22, r24
  eeprom_write_word(&s_uwEepromCrc,crc16);
     c36:	84 e1       	ldi	r24, 0x14	; 20
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__eewr_word_m328p>
     c3e:	80 e0       	ldi	r24, 0x00	; 0

  return CONFIG_OK;
}
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	08 95       	ret

00000c46 <main>:
 */

int main(void)
{
	// Disable watchdog
	cli();
     c46:	f8 94       	cli
	wdt_reset();
     c48:	a8 95       	wdr
	MCUSR=0;
     c4a:	14 be       	out	0x34, r1	; 52
	WDTCSR|=_BV(WDCE) | _BV(WDE);
     c4c:	e0 e6       	ldi	r30, 0x60	; 96
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	88 61       	ori	r24, 0x18	; 24
     c54:	80 83       	st	Z, r24
	WDTCSR=0;
     c56:	10 82       	st	Z, r1
	sei();
     c58:	78 94       	sei

	// Setup timers
	timerInit();
     c5a:	0e 94 03 01 	call	0x206	; 0x206 <timerInit>

  // Initialize status LED
  LED_PORT |= LED_STATUS;
     c5e:	e8 e2       	ldi	r30, 0x28	; 40
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	80 62       	ori	r24, 0x20	; 32
     c66:	80 83       	st	Z, r24

	// Load config
	configInit();
     c68:	0e 94 01 06 	call	0xc02	; 0xc02 <configInit>

	// Do the main loop
	bridgeLoop();
     c6c:	0e 94 87 03 	call	0x70e	; 0x70e <bridgeLoop>

  return 0;
}
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	08 95       	ret

00000c76 <arp_make_reply>:

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
}

void arp_make_reply(uint8_t *buf, const uint8_t *my_mac, const uint8_t *my_ip)
{
     c76:	8f 92       	push	r8
     c78:	9f 92       	push	r9
     c7a:	af 92       	push	r10
     c7c:	bf 92       	push	r11
     c7e:	cf 92       	push	r12
     c80:	df 92       	push	r13
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	8c 01       	movw	r16, r24
     c8c:	5b 01       	movw	r10, r22
     c8e:	4a 01       	movw	r8, r20
	// make a reply
	net_put_word(buf + ARP_OFF_OP, ARP_REPLY);
     c90:	06 96       	adiw	r24, 0x06	; 6
     c92:	62 e0       	ldi	r22, 0x02	; 2
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	0e 94 cc 06 	call	0xd98	; 0xd98 <net_put_word>
	net_copy_mac(buf + ARP_OFF_SRC_MAC, buf + ARP_OFF_TGT_MAC);
     c9a:	cc 24       	eor	r12, r12
     c9c:	dd 24       	eor	r13, r13
     c9e:	68 94       	set
     ca0:	c3 f8       	bld	r12, 3
     ca2:	c0 0e       	add	r12, r16
     ca4:	d1 1e       	adc	r13, r17
     ca6:	b8 01       	movw	r22, r16
     ca8:	6e 5e       	subi	r22, 0xEE	; 238
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	c6 01       	movw	r24, r12
     cae:	0e 94 a2 06 	call	0xd44	; 0xd44 <net_copy_mac>
	net_copy_ip(buf + ARP_OFF_SRC_IP, buf + ARP_OFF_TGT_IP);
     cb2:	0f 2e       	mov	r0, r31
     cb4:	fe e0       	ldi	r31, 0x0E	; 14
     cb6:	ef 2e       	mov	r14, r31
     cb8:	ff 24       	eor	r15, r15
     cba:	f0 2d       	mov	r31, r0
     cbc:	e0 0e       	add	r14, r16
     cbe:	f1 1e       	adc	r15, r17
     cc0:	08 5e       	subi	r16, 0xE8	; 232
     cc2:	1f 4f       	sbci	r17, 0xFF	; 255
     cc4:	c7 01       	movw	r24, r14
     cc6:	b8 01       	movw	r22, r16
     cc8:	0e 94 b1 06 	call	0xd62	; 0xd62 <net_copy_ip>
	net_copy_mac(my_mac, buf + ARP_OFF_SRC_MAC);
     ccc:	c5 01       	movw	r24, r10
     cce:	b6 01       	movw	r22, r12
     cd0:	0e 94 a2 06 	call	0xd44	; 0xd44 <net_copy_mac>
	net_copy_ip(my_ip, buf + ARP_OFF_SRC_IP);
     cd4:	c4 01       	movw	r24, r8
     cd6:	b7 01       	movw	r22, r14
     cd8:	0e 94 b1 06 	call	0xd62	; 0xd62 <net_copy_ip>
}
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	bf 90       	pop	r11
     cea:	af 90       	pop	r10
     cec:	9f 90       	pop	r9
     cee:	8f 90       	pop	r8
     cf0:	08 95       	ret

00000cf2 <arp_is_ipv4>:

#include "arp.h"
#include "net.h"

uint8_t arp_is_ipv4(const uint8_t *buf, uint16_t len)
{
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	ec 01       	movw	r28, r24
  if(len < ARP_SIZE) {
     cfc:	6c 31       	cpi	r22, 0x1C	; 28
     cfe:	71 05       	cpc	r23, r1
     d00:	10 f4       	brcc	.+4      	; 0xd06 <arp_is_ipv4+0x14>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	1a c0       	rjmp	.+52     	; 0xd3a <arp_is_ipv4+0x48>
    return 0;
  }

  uint16_t hw_type = net_get_word(buf + ARP_OFF_HW_TYPE);
     d06:	0e 94 c2 06 	call	0xd84	; 0xd84 <net_get_word>
     d0a:	8c 01       	movw	r16, r24
  uint16_t pt_type = net_get_word(buf + ARP_OFF_PROT_TYPE);
     d0c:	ce 01       	movw	r24, r28
     d0e:	02 96       	adiw	r24, 0x02	; 2
     d10:	0e 94 c2 06 	call	0xd84	; 0xd84 <net_get_word>
  uint8_t hw_size = buf[ARP_OFF_HW_SIZE];
     d14:	2c 81       	ldd	r18, Y+4	; 0x04
  uint8_t pt_size = buf[ARP_OFF_PROT_SIZE];
     d16:	3d 81       	ldd	r19, Y+5	; 0x05

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
     d18:	01 30       	cpi	r16, 0x01	; 1
     d1a:	11 05       	cpc	r17, r1
     d1c:	61 f4       	brne	.+24     	; 0xd36 <arp_is_ipv4+0x44>
     d1e:	80 50       	subi	r24, 0x00	; 0
     d20:	98 40       	sbci	r25, 0x08	; 8
     d22:	49 f4       	brne	.+18     	; 0xd36 <arp_is_ipv4+0x44>
     d24:	26 30       	cpi	r18, 0x06	; 6
     d26:	39 f4       	brne	.+14     	; 0xd36 <arp_is_ipv4+0x44>
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	34 30       	cpi	r19, 0x04	; 4
     d2c:	09 f0       	breq	.+2      	; 0xd30 <arp_is_ipv4+0x3e>
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	89 27       	eor	r24, r25
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <arp_is_ipv4+0x48>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	08 95       	ret

00000d44 <net_copy_mac>:
const uint8_t net_bcast_mac[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
const uint8_t net_zero_mac[6] = { 0,0,0,0,0,0 };
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
     d44:	ac 01       	movw	r20, r24
     d46:	25 e0       	ldi	r18, 0x05	; 5
	uint8_t i;
  for(i=6; i--;)
    out[i] = in[i];
     d48:	82 2f       	mov	r24, r18
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	db 01       	movw	r26, r22
     d4e:	a8 0f       	add	r26, r24
     d50:	b9 1f       	adc	r27, r25
     d52:	fa 01       	movw	r30, r20
     d54:	e8 0f       	add	r30, r24
     d56:	f9 1f       	adc	r31, r25
     d58:	80 81       	ld	r24, Z
     d5a:	8c 93       	st	X, r24
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
	uint8_t i;
  for(i=6; i--;)
     d5c:	21 50       	subi	r18, 0x01	; 1
     d5e:	a0 f7       	brcc	.-24     	; 0xd48 <net_copy_mac+0x4>
    out[i] = in[i];
}
     d60:	08 95       	ret

00000d62 <net_copy_ip>:

void net_copy_ip(const uint8_t *in, uint8_t *out) {
     d62:	fc 01       	movw	r30, r24
     d64:	db 01       	movw	r26, r22
	uint8_t i;
  for(i = 4; i--;)
		out[i] = in[i];
     d66:	83 81       	ldd	r24, Z+3	; 0x03
     d68:	13 96       	adiw	r26, 0x03	; 3
     d6a:	8c 93       	st	X, r24
     d6c:	13 97       	sbiw	r26, 0x03	; 3
     d6e:	82 81       	ldd	r24, Z+2	; 0x02
     d70:	12 96       	adiw	r26, 0x02	; 2
     d72:	8c 93       	st	X, r24
     d74:	12 97       	sbiw	r26, 0x02	; 2
     d76:	81 81       	ldd	r24, Z+1	; 0x01
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	8c 93       	st	X, r24
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	80 81       	ld	r24, Z
     d80:	8c 93       	st	X, r24
}
     d82:	08 95       	ret

00000d84 <net_get_word>:

uint16_t  net_get_word(const uint8_t *buf) {
     d84:	fc 01       	movw	r30, r24
     d86:	21 81       	ldd	r18, Z+1	; 0x01
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	90 81       	ld	r25, Z
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	28 2b       	or	r18, r24
     d90:	39 2b       	or	r19, r25
  return (uint16_t)buf[0] << 8 | (uint16_t)buf[1];
}
     d92:	82 2f       	mov	r24, r18
     d94:	93 2f       	mov	r25, r19
     d96:	08 95       	ret

00000d98 <net_put_word>:

void net_put_word(uint8_t *buf, uint16_t value)
{
     d98:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 8);
     d9a:	70 83       	st	Z, r23
  buf[1] = (uint8_t)(value & 0xff);
     d9c:	61 83       	std	Z+1, r22	; 0x01
}
     d9e:	08 95       	ret

00000da0 <net_get_long>:

uint32_t  net_get_long(const uint8_t *buf)
{
     da0:	fc 01       	movw	r30, r24
     da2:	23 81       	ldd	r18, Z+3	; 0x03
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	b8 2f       	mov	r27, r24
     db4:	aa 27       	eor	r26, r26
     db6:	99 27       	eor	r25, r25
     db8:	88 27       	eor	r24, r24
     dba:	28 2b       	or	r18, r24
     dbc:	39 2b       	or	r19, r25
     dbe:	4a 2b       	or	r20, r26
     dc0:	5b 2b       	or	r21, r27
     dc2:	81 81       	ldd	r24, Z+1	; 0x01
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a0 e0       	ldi	r26, 0x00	; 0
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	dc 01       	movw	r26, r24
     dcc:	99 27       	eor	r25, r25
     dce:	88 27       	eor	r24, r24
     dd0:	28 2b       	or	r18, r24
     dd2:	39 2b       	or	r19, r25
     dd4:	4a 2b       	or	r20, r26
     dd6:	5b 2b       	or	r21, r27
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	a0 e0       	ldi	r26, 0x00	; 0
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ba 2f       	mov	r27, r26
     de2:	a9 2f       	mov	r26, r25
     de4:	98 2f       	mov	r25, r24
     de6:	88 27       	eor	r24, r24
     de8:	28 2b       	or	r18, r24
     dea:	39 2b       	or	r19, r25
     dec:	4a 2b       	or	r20, r26
     dee:	5b 2b       	or	r21, r27
  return (uint32_t)buf[0] << 24 | (uint32_t)buf[1] << 16 | (uint32_t)buf[2] << 8 | (uint32_t)buf[3];
}
     df0:	62 2f       	mov	r22, r18
     df2:	73 2f       	mov	r23, r19
     df4:	84 2f       	mov	r24, r20
     df6:	95 2f       	mov	r25, r21
     df8:	08 95       	ret

00000dfa <net_put_long>:

void net_put_long(uint8_t *buf, uint32_t value)
{
     dfa:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 24);
     dfc:	87 2f       	mov	r24, r23
     dfe:	99 27       	eor	r25, r25
     e00:	aa 27       	eor	r26, r26
     e02:	bb 27       	eor	r27, r27
     e04:	80 83       	st	Z, r24
  buf[1] = (uint8_t)((value >> 16) & 0xff);
     e06:	cb 01       	movw	r24, r22
     e08:	aa 27       	eor	r26, r26
     e0a:	bb 27       	eor	r27, r27
     e0c:	81 83       	std	Z+1, r24	; 0x01
  buf[2] = (uint8_t)((value >> 8) & 0xff);
     e0e:	bb 27       	eor	r27, r27
     e10:	a7 2f       	mov	r26, r23
     e12:	96 2f       	mov	r25, r22
     e14:	85 2f       	mov	r24, r21
     e16:	82 83       	std	Z+2, r24	; 0x02
  buf[3] = (uint8_t)(value & 0xff);
     e18:	43 83       	std	Z+3, r20	; 0x03
}
     e1a:	08 95       	ret

00000e1c <net_compare_mac>:
    pos += 4;
  }
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
     e1c:	ac 01       	movw	r20, r24
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++)
    if(a[i] != b[i])
     e22:	fa 01       	movw	r30, r20
     e24:	e2 0f       	add	r30, r18
     e26:	f3 1f       	adc	r31, r19
     e28:	db 01       	movw	r26, r22
     e2a:	a2 0f       	add	r26, r18
     e2c:	b3 1f       	adc	r27, r19
     e2e:	90 81       	ld	r25, Z
     e30:	8c 91       	ld	r24, X
     e32:	98 17       	cp	r25, r24
     e34:	11 f0       	breq	.+4      	; 0xe3a <net_compare_mac+0x1e>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	08 95       	ret
     e3a:	2f 5f       	subi	r18, 0xFF	; 255
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<6;i++)
     e3e:	26 30       	cpi	r18, 0x06	; 6
     e40:	31 05       	cpc	r19, r1
     e42:	79 f7       	brne	.-34     	; 0xe22 <net_compare_mac+0x6>
     e44:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
     e46:	08 95       	ret

00000e48 <net_compare_ip>:

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
     e48:	ac 01       	movw	r20, r24
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++)
    if(a[i] != b[i])
     e4e:	fa 01       	movw	r30, r20
     e50:	e2 0f       	add	r30, r18
     e52:	f3 1f       	adc	r31, r19
     e54:	db 01       	movw	r26, r22
     e56:	a2 0f       	add	r26, r18
     e58:	b3 1f       	adc	r27, r19
     e5a:	90 81       	ld	r25, Z
     e5c:	8c 91       	ld	r24, X
     e5e:	98 17       	cp	r25, r24
     e60:	11 f0       	breq	.+4      	; 0xe66 <net_compare_ip+0x1e>
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	08 95       	ret
     e66:	2f 5f       	subi	r18, 0xFF	; 255
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
  return 1;
}

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<4;i++)
     e6a:	24 30       	cpi	r18, 0x04	; 4
     e6c:	31 05       	cpc	r19, r1
     e6e:	79 f7       	brne	.-34     	; 0xe4e <net_compare_ip+0x6>
     e70:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
     e72:	08 95       	ret

00000e74 <net_dump_ip>:
    mac[i] = value;
  }
  return 1;
}

void net_dump_ip(const uint8_t *in) {
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
     e80:	20 91 24 01 	lds	r18, 0x0124
     e84:	30 91 25 01 	lds	r19, 0x0125
     e88:	8c 01       	movw	r16, r24
     e8a:	e9 01       	movw	r28, r18
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
     e8c:	ee 24       	eor	r14, r14
     e8e:	ff 24       	eor	r15, r15
     e90:	68 94       	set
     e92:	e4 f8       	bld	r14, 4
     e94:	e2 0e       	add	r14, r18
     e96:	f3 1e       	adc	r15, r19
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
     e98:	f8 01       	movw	r30, r16
     e9a:	81 91       	ld	r24, Z+
     e9c:	8f 01       	movw	r16, r30
     e9e:	be 01       	movw	r22, r28
     ea0:	0e 94 11 02 	call	0x422	; 0x422 <utilByteToDec>
     ea4:	24 96       	adiw	r28, 0x04	; 4
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
     ea6:	ce 15       	cp	r28, r14
     ea8:	df 05       	cpc	r29, r15
     eaa:	b1 f7       	brne	.-20     	; 0xe98 <net_dump_ip+0x24>
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    pos += 4;
  }
  // NOTE: UART - ip_str
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	08 95       	ret

00000eba <net_parse_mac>:
    ip[i] = value;
  }
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
     eba:	af 92       	push	r10
     ebc:	bf 92       	push	r11
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	0f 92       	push	r0
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	7c 01       	movw	r14, r24
     ed6:	6b 01       	movw	r12, r22
     ed8:	00 e0       	ldi	r16, 0x00	; 0
     eda:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++) {
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
     edc:	5e 01       	movw	r10, r28
     ede:	08 94       	sec
     ee0:	a1 1c       	adc	r10, r1
     ee2:	b1 1c       	adc	r11, r1
     ee4:	c7 01       	movw	r24, r14
     ee6:	b5 01       	movw	r22, r10
     ee8:	0e 94 8f 02 	call	0x51e	; 0x51e <utilParseByteHex>
     eec:	88 23       	and	r24, r24
     eee:	89 f0       	breq	.+34     	; 0xf12 <net_parse_mac+0x58>
      return 0;
    }
    buf += 3;
    mac[i] = value;
     ef0:	f6 01       	movw	r30, r12
     ef2:	e0 0f       	add	r30, r16
     ef4:	f1 1f       	adc	r31, r17
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	80 83       	st	Z, r24
     efa:	0f 5f       	subi	r16, 0xFF	; 255
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
	uint8_t i;
  for(i=0;i<6;i++) {
     efe:	06 30       	cpi	r16, 0x06	; 6
     f00:	11 05       	cpc	r17, r1
     f02:	11 f4       	brne	.+4      	; 0xf08 <net_parse_mac+0x4e>
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	06 c0       	rjmp	.+12     	; 0xf14 <net_parse_mac+0x5a>
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
      return 0;
    }
    buf += 3;
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	e8 0e       	add	r14, r24
     f0e:	f9 1e       	adc	r15, r25
     f10:	e9 cf       	rjmp	.-46     	; 0xee4 <net_parse_mac+0x2a>
     f12:	80 e0       	ldi	r24, 0x00	; 0
    mac[i] = value;
  }
  return 1;
}
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	df 90       	pop	r13
     f24:	cf 90       	pop	r12
     f26:	bf 90       	pop	r11
     f28:	af 90       	pop	r10
     f2a:	08 95       	ret

00000f2c <net_parse_ip>:
    pos += 3;
  }
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
     f2c:	af 92       	push	r10
     f2e:	bf 92       	push	r11
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	0f 92       	push	r0
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	7c 01       	movw	r14, r24
     f48:	6b 01       	movw	r12, r22
     f4a:	00 e0       	ldi	r16, 0x00	; 0
     f4c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++) {
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
     f4e:	5e 01       	movw	r10, r28
     f50:	08 94       	sec
     f52:	a1 1c       	adc	r10, r1
     f54:	b1 1c       	adc	r11, r1
     f56:	c7 01       	movw	r24, r14
     f58:	b5 01       	movw	r22, r10
     f5a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <utilParseByteDec>
     f5e:	98 2f       	mov	r25, r24
    if(digits == 0)
     f60:	88 23       	and	r24, r24
     f62:	91 f0       	breq	.+36     	; 0xf88 <net_parse_ip+0x5c>
      return 0;
    buf += digits + 1;
    ip[i] = value;
     f64:	f6 01       	movw	r30, r12
     f66:	e0 0f       	add	r30, r16
     f68:	f1 1f       	adc	r31, r17
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	0f 5f       	subi	r16, 0xFF	; 255
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
	uint8_t i;
  for(i=0;i<4;i++) {
     f72:	04 30       	cpi	r16, 0x04	; 4
     f74:	11 05       	cpc	r17, r1
     f76:	11 f4       	brne	.+4      	; 0xf7c <net_parse_ip+0x50>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	07 c0       	rjmp	.+14     	; 0xf8a <net_parse_ip+0x5e>
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
    if(digits == 0)
      return 0;
    buf += digits + 1;
     f7c:	89 2f       	mov	r24, r25
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	e8 0e       	add	r14, r24
     f84:	f9 1e       	adc	r15, r25
     f86:	e7 cf       	rjmp	.-50     	; 0xf56 <net_parse_ip+0x2a>
     f88:	80 e0       	ldi	r24, 0x00	; 0
    ip[i] = value;
  }
  return 1;
}
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	08 95       	ret

00000fa2 <net_dump_mac>:
}

static char *mac_str = "00:00:00:00:00:00";
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
    utilByteToHex(in[i], mac_str+pos);
     fae:	e0 90 38 01 	lds	r14, 0x0138
     fb2:	f0 90 39 01 	lds	r15, 0x0139
     fb6:	8c 01       	movw	r16, r24
     fb8:	c0 e0       	ldi	r28, 0x00	; 0
     fba:	d0 e0       	ldi	r29, 0x00	; 0
     fbc:	b7 01       	movw	r22, r14
     fbe:	6c 0f       	add	r22, r28
     fc0:	7d 1f       	adc	r23, r29
     fc2:	f8 01       	movw	r30, r16
     fc4:	81 91       	ld	r24, Z+
     fc6:	8f 01       	movw	r16, r30
     fc8:	0e 94 cf 01 	call	0x39e	; 0x39e <utilByteToHex>
    pos += 3;
     fcc:	23 96       	adiw	r28, 0x03	; 3
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
     fce:	c2 31       	cpi	r28, 0x12	; 18
     fd0:	d1 05       	cpc	r29, r1
     fd2:	a1 f7       	brne	.-24     	; 0xfbc <net_dump_mac+0x1a>
    utilByteToHex(in[i], mac_str+pos);
    pos += 3;
  }
  // NOTE: UART - mac_str
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	08 95       	ret

00000fe2 <parInit>:
 * 	POut:    input,  pulled high
 * 	NAck:    output, default: 1
 */
void parInit(void) {
	// Zero DDR and PORT status
  PAR_STATUS_DDR &= ~PAR_STATUS_MASK;
     fe2:	a7 e2       	ldi	r26, 0x27	; 39
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	8c 91       	ld	r24, X
     fe8:	80 7e       	andi	r24, 0xE0	; 224
     fea:	8c 93       	st	X, r24
  PAR_STATUS_PORT &= ~PAR_STATUS_MASK;
     fec:	e8 e2       	ldi	r30, 0x28	; 40
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 7e       	andi	r24, 0xE0	; 224
     ff4:	80 83       	st	Z, r24

  // Set them correctly
  PAR_STATUS_DDR |= PAR_BUSY | PAR_NACK;
     ff6:	8c 91       	ld	r24, X
     ff8:	86 60       	ori	r24, 0x06	; 6
     ffa:	8c 93       	st	X, r24
  PAR_STATUS_PORT |= PAR_NSTROBE | PAR_SEL | PAR_POUT | PAR_NACK;
     ffc:	80 81       	ld	r24, Z
     ffe:	8b 61       	ori	r24, 0x1B	; 27
    1000:	80 83       	st	Z, r24

  // Set data DDR to input
  PAR_DATA_DDR = 0x00;
    1002:	1a b8       	out	0x0a, r1	; 10
}
    1004:	08 95       	ret

00001006 <parGetStatusLines>:

uint8_t parGetStatusLines(void) {
	uint8_t ubIn, ubStrobe, ubSelect, ubPOut;
	ubIn = PAR_STATUS_PIN;
    1006:	86 b1       	in	r24, 0x06	; 6
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	20 71       	andi	r18, 0x10	; 16
    100e:	30 70       	andi	r19, 0x00	; 0
    1010:	35 95       	asr	r19
    1012:	27 95       	ror	r18
    1014:	35 95       	asr	r19
    1016:	27 95       	ror	r18
    1018:	35 95       	asr	r19
    101a:	27 95       	ror	r18
    101c:	35 95       	asr	r19
    101e:	27 95       	ror	r18
    1020:	22 0f       	add	r18, r18
    1022:	33 1f       	adc	r19, r19
    1024:	88 70       	andi	r24, 0x08	; 8
    1026:	88 0f       	add	r24, r24
    1028:	88 0f       	add	r24, r24
  ubStrobe = (ubIn & PAR_NSTROBE) >> PAR_POUT_PIN;
  ubSelect = (ubIn & PAR_SEL)     >> PAR_SEL_PIN;
  ubPOut   = (ubIn & PAR_POUT)    >> PAR_NSTROBE_PIN;
  return ((ubPOut << 2) | (ubSelect << 1) | ubStrobe);
}
    102a:	82 2b       	or	r24, r18
    102c:	08 95       	ret

0000102e <parWaitForPout>:
 * Waits for PaperOut pin state specified by ubReqValue, for ubStateFlag purposes.
 * @param ubReqValue Requested PaperOut pin state (1: hi, 0: lo)
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t parWaitForPout(uint8_t ubReqValue, uint8_t ubStateFlag) {
    102e:	78 2f       	mov	r23, r24
  g_uwTimer100us = 0;
    1030:	10 92 4d 01 	sts	0x014D, r1
    1034:	10 92 4c 01 	sts	0x014C, r1
  while(g_uwTimer100us < pb_proto_timeout) {
    1038:	40 91 3a 01 	lds	r20, 0x013A
    103c:	50 91 3b 01 	lds	r21, 0x013B
		uint8_t ubIn = PAR_STATUS_PIN;
    1040:	e6 e2       	ldi	r30, 0x26	; 38
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	15 c0       	rjmp	.+42     	; 0x1070 <parWaitForPout+0x42>
    1046:	80 81       	ld	r24, Z
    uint8_t ubPOut = (ubIn & PAR_POUT) >> PAR_POUT_PIN;
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    if(ubReqValue == ubPOut)
    104c:	c9 01       	movw	r24, r18
    104e:	88 70       	andi	r24, 0x08	; 8
    1050:	90 70       	andi	r25, 0x00	; 0
    1052:	95 95       	asr	r25
    1054:	87 95       	ror	r24
    1056:	95 95       	asr	r25
    1058:	87 95       	ror	r24
    105a:	95 95       	asr	r25
    105c:	87 95       	ror	r24
    105e:	78 17       	cp	r23, r24
    1060:	11 f4       	brne	.+4      	; 0x1066 <parWaitForPout+0x38>
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	08 95       	ret
      return PBPROTO_STATUS_OK;
    // During transfer client aborted and removed SEL
    if(!(ubIn & PAR_SEL))
    1066:	24 fd       	sbrc	r18, 4
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <parWaitForPout+0x42>
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
    106a:	86 2f       	mov	r24, r22
    106c:	83 60       	ori	r24, 0x03	; 3
    106e:	08 95       	ret
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t parWaitForPout(uint8_t ubReqValue, uint8_t ubStateFlag) {
  g_uwTimer100us = 0;
  while(g_uwTimer100us < pb_proto_timeout) {
    1070:	80 91 4c 01 	lds	r24, 0x014C
    1074:	90 91 4d 01 	lds	r25, 0x014D
    1078:	84 17       	cp	r24, r20
    107a:	95 07       	cpc	r25, r21
    107c:	20 f3       	brcs	.-56     	; 0x1046 <parWaitForPout+0x18>
      return PBPROTO_STATUS_OK;
    // During transfer client aborted and removed SEL
    if(!(ubIn & PAR_SEL))
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
    107e:	86 2f       	mov	r24, r22
    1080:	82 60       	ori	r24, 0x02	; 2
}
    1082:	08 95       	ret

00001084 <pb_proto_handle>:
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    1084:	2f 92       	push	r2
    1086:	3f 92       	push	r3
    1088:	4f 92       	push	r4
    108a:	5f 92       	push	r5
    108c:	6f 92       	push	r6
    108e:	7f 92       	push	r7
    1090:	8f 92       	push	r8
    1092:	9f 92       	push	r9
    1094:	af 92       	push	r10
    1096:	bf 92       	push	r11
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <pb_proto_handle+0x26>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
  uint8_t result;
  pb_proto_stat_t *ps = &pb_proto_stat;

  // handle server side of plipbox protocol
  ps->cmd = 0;
    10ae:	10 92 69 01 	sts	0x0169, r1

  // make sure that SEL == 1 and POUT == 0
  if(!(PAR_STATUS_PIN & PAR_SEL) || (PAR_STATUS_PIN & PAR_POUT)) {
    10b2:	34 9b       	sbis	0x06, 4	; 6
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <pb_proto_handle+0x36>
    10b6:	33 9b       	sbis	0x06, 3	; 6
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <pb_proto_handle+0x3e>
    ps->status = PBPROTO_STATUS_IDLE;
    10ba:	10 92 6a 01 	sts	0x016A, r1
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	d6 c2       	rjmp	.+1452   	; 0x166e <pb_proto_handle+0x5ea>
    return PBPROTO_STATUS_IDLE;
  }

  // Read command byte
  uint8_t cmd = PAR_DATA_PIN;
    10c2:	a9 b0       	in	r10, 0x09	; 9

  // Amiga wants to receive data - prepare
  uint16_t pkt_size = 0;
    10c4:	1a 82       	std	Y+2, r1	; 0x02
    10c6:	19 82       	std	Y+1, r1	; 0x01
  if((cmd == PBPROTO_CMD_RECV) || (cmd == PBPROTO_CMD_RECV_BURST)) {
    10c8:	22 e2       	ldi	r18, 0x22	; 34
    10ca:	a2 16       	cp	r10, r18
    10cc:	19 f0       	breq	.+6      	; 0x10d4 <pb_proto_handle+0x50>
    10ce:	84 e4       	ldi	r24, 0x44	; 68
    10d0:	a8 16       	cp	r10, r24
    10d2:	b9 f4       	brne	.+46     	; 0x1102 <pb_proto_handle+0x7e>
    uint8_t res = bridgeFillPacket(&pkt_size);
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	0e 94 42 04 	call	0x884	; 0x884 <bridgeFillPacket>
    10dc:	28 2f       	mov	r18, r24
    if(res != PBPROTO_STATUS_OK) {
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	81 f0       	breq	.+32     	; 0x1102 <pb_proto_handle+0x7e>
      ps->status = res;
    10e2:	ea e6       	ldi	r30, 0x6A	; 106
    10e4:	f1 e0       	ldi	r31, 0x01	; 1
    10e6:	80 83       	st	Z, r24
    10e8:	e2 81       	ldd	r30, Z+2	; 0x02
    10ea:	8c e0       	ldi	r24, 0x0C	; 12
    10ec:	e8 9f       	mul	r30, r24
    10ee:	f0 01       	movw	r30, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	ed 59       	subi	r30, 0x9D	; 157
    10f4:	f8 4f       	sbci	r31, 0xF8	; 248
			stats_get(ps->stats_id)->err++;
    10f6:	86 81       	ldd	r24, Z+6	; 0x06
    10f8:	97 81       	ldd	r25, Z+7	; 0x07
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	97 83       	std	Z+7, r25	; 0x07
    10fe:	86 83       	std	Z+6, r24	; 0x06
    1100:	b6 c2       	rjmp	.+1388   	; 0x166e <pb_proto_handle+0x5ea>
      return res;
    }
  }

  // start timer
  uint32_t ts = g_uwTimeStamp;
    1102:	60 90 4e 01 	lds	r6, 0x014E
    1106:	70 90 4f 01 	lds	r7, 0x014F
    110a:	80 90 50 01 	lds	r8, 0x0150
    110e:	90 90 51 01 	lds	r9, 0x0151
    1112:	10 92 85 00 	sts	0x0085, r1
    1116:	10 92 84 00 	sts	0x0084, r1
  timerReset();

  // confirm cmd with BUSY = 1
  PAR_STATUS_PORT |= PAR_BUSY;
    111a:	e8 e2       	ldi	r30, 0x28	; 40
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	84 60       	ori	r24, 0x04	; 4
    1122:	80 83       	st	Z, r24

  uint16_t uwParDataSize = 0;
  switch(cmd) {
    1124:	a2 e2       	ldi	r26, 0x22	; 34
    1126:	aa 16       	cp	r10, r26
    1128:	a1 f0       	breq	.+40     	; 0x1152 <pb_proto_handle+0xce>
    112a:	aa 15       	cp	r26, r10
    112c:	20 f0       	brcs	.+8      	; 0x1136 <pb_proto_handle+0xb2>
    112e:	b1 e1       	ldi	r27, 0x11	; 17
    1130:	ab 16       	cp	r10, r27
    1132:	49 f4       	brne	.+18     	; 0x1146 <pb_proto_handle+0xc2>
    1134:	75 c0       	rjmp	.+234    	; 0x1220 <pb_proto_handle+0x19c>
    1136:	e3 e3       	ldi	r30, 0x33	; 51
    1138:	ae 16       	cp	r10, r30
    113a:	09 f4       	brne	.+2      	; 0x113e <pb_proto_handle+0xba>
    113c:	7a c1       	rjmp	.+756    	; 0x1432 <pb_proto_handle+0x3ae>
    113e:	f4 e4       	ldi	r31, 0x44	; 68
    1140:	af 16       	cp	r10, r31
    1142:	09 f4       	brne	.+2      	; 0x1146 <pb_proto_handle+0xc2>
    1144:	dd c0       	rjmp	.+442    	; 0x1300 <pb_proto_handle+0x27c>
    1146:	bb 24       	eor	r11, r11
    1148:	68 94       	set
    114a:	b2 f8       	bld	r11, 2
    114c:	cc 24       	eor	r12, r12
    114e:	dd 24       	eor	r13, r13
    1150:	02 c2       	rjmp	.+1028   	; 0x1556 <pb_proto_handle+0x4d2>
    case PBPROTO_CMD_RECV:
      result = parHandleAmiRead(pkt_size, &uwParDataSize);
    1152:	e9 80       	ldd	r14, Y+1	; 0x01
    1154:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t parHandleAmiRead(uint16_t uwSize, uint16_t *pWriteSize)
{
	uint8_t ubStatus;

  PAR_DATA_DDR = 0xFF;
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	8a b9       	out	0x0a, r24	; 10

  // Send packet size - high part
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	60 e2       	ldi	r22, 0x20	; 32
    115e:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    1162:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    1164:	21 e0       	ldi	r18, 0x01	; 1
    1166:	82 17       	cp	r24, r18
    1168:	09 f0       	breq	.+2      	; 0x116c <pb_proto_handle+0xe8>
    116a:	57 c0       	rjmp	.+174    	; 0x121a <pb_proto_handle+0x196>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize >> 8;
    116c:	fb b8       	out	0x0b, r15	; 11
  PAR_STATUS_PORT &= ~PAR_BUSY;
    116e:	e8 e2       	ldi	r30, 0x28	; 40
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8b 7f       	andi	r24, 0xFB	; 251
    1176:	80 83       	st	Z, r24

  // Send packet size - low part
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	60 e3       	ldi	r22, 0x30	; 48
    117c:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    1180:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	b8 16       	cp	r11, r24
    1186:	09 f0       	breq	.+2      	; 0x118a <pb_proto_handle+0x106>
    1188:	48 c0       	rjmp	.+144    	; 0x121a <pb_proto_handle+0x196>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize & 0xFF;
    118a:	eb b8       	out	0x0b, r14	; 11
  PAR_STATUS_PORT |= PAR_BUSY;
    118c:	e8 e2       	ldi	r30, 0x28	; 40
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	84 60       	ori	r24, 0x04	; 4
    1194:	80 83       	st	Z, r24
  const uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    1196:	c7 01       	movw	r24, r14
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	0f 2e       	mov	r0, r31
    119c:	fe ef       	ldi	r31, 0xFE	; 254
    119e:	2f 2e       	mov	r2, r31
    11a0:	ff ef       	ldi	r31, 0xFF	; 255
    11a2:	3f 2e       	mov	r3, r31
    11a4:	f0 2d       	mov	r31, r0
    11a6:	28 22       	and	r2, r24
    11a8:	39 22       	and	r3, r25
  while(uwSize--) {
    11aa:	21 14       	cp	r2, r1
    11ac:	31 04       	cpc	r3, r1
    11ae:	61 f1       	breq	.+88     	; 0x1208 <pb_proto_handle+0x184>
    11b0:	01 e0       	ldi	r16, 0x01	; 1
    11b2:	0f 2e       	mov	r0, r31
    11b4:	f9 e7       	ldi	r31, 0x79	; 121
    11b6:	ef 2e       	mov	r14, r31
    11b8:	f1 e0       	ldi	r31, 0x01	; 1
    11ba:	ff 2e       	mov	r15, r31
    11bc:	f0 2d       	mov	r31, r0
    11be:	cc 24       	eor	r12, r12
    11c0:	dd 24       	eor	r13, r13
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    PAR_STATUS_PORT ^= PAR_BUSY;
    11c2:	0f 2e       	mov	r0, r31
    11c4:	f8 e2       	ldi	r31, 0x28	; 40
    11c6:	4f 2e       	mov	r4, r31
    11c8:	55 24       	eor	r5, r5
    11ca:	f0 2d       	mov	r31, r0
    11cc:	14 e0       	ldi	r17, 0x04	; 4
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    11ce:	80 2f       	mov	r24, r16
    11d0:	60 e4       	ldi	r22, 0x40	; 64
    11d2:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    11d6:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    11d8:	a1 e0       	ldi	r26, 0x01	; 1
    11da:	8a 17       	cp	r24, r26
    11dc:	e1 f4       	brne	.+56     	; 0x1216 <pb_proto_handle+0x192>
      break;
    PAR_DATA_PORT = *(ptr++);
    11de:	f7 01       	movw	r30, r14
    11e0:	80 81       	ld	r24, Z
    11e2:	ab e2       	ldi	r26, 0x2B	; 43
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	8c 93       	st	X, r24
    PAR_STATUS_PORT ^= PAR_BUSY;
    11e8:	f2 01       	movw	r30, r4
    11ea:	80 81       	ld	r24, Z
    11ec:	81 27       	eor	r24, r17
    11ee:	80 83       	st	Z, r24
    ++uwWriteSize;
    11f0:	08 94       	sec
    11f2:	c1 1c       	adc	r12, r1
    11f4:	d1 1c       	adc	r13, r1
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    11f6:	2c 14       	cp	r2, r12
    11f8:	3d 04       	cpc	r3, r13
    11fa:	41 f0       	breq	.+16     	; 0x120c <pb_proto_handle+0x188>
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    11fc:	08 94       	sec
    11fe:	e1 1c       	adc	r14, r1
    1200:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= PAR_BUSY;
    ++uwWriteSize;
    ubPOutWait ^= 1;
    1202:	f1 e0       	ldi	r31, 0x01	; 1
    1204:	0f 27       	eor	r16, r31
    1206:	e3 cf       	rjmp	.-58     	; 0x11ce <pb_proto_handle+0x14a>
    1208:	cc 24       	eor	r12, r12
    120a:	dd 24       	eor	r13, r13
  }

  // Final wait
  if(ubStatus == PBPROTO_STATUS_OK)
    ubStatus = parWaitForPout(1, PBPROTO_STAGE_LAST_DATA);
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	60 e5       	ldi	r22, 0x50	; 80
    1210:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    1214:	b8 2e       	mov	r11, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    1216:	1a b8       	out	0x0a, r1	; 10
    1218:	9e c1       	rjmp	.+828    	; 0x1556 <pb_proto_handle+0x4d2>
    121a:	cc 24       	eor	r12, r12
    121c:	dd 24       	eor	r13, r13
    121e:	9b c1       	rjmp	.+822    	; 0x1556 <pb_proto_handle+0x4d2>
{
  uint8_t ubStatus;
  uint16_t uwSize;

  // --- get size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	60 e2       	ldi	r22, 0x20	; 32
    1224:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    1228:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    122a:	21 e0       	ldi	r18, 0x01	; 1
    122c:	82 17       	cp	r24, r18
    122e:	09 f0       	breq	.+2      	; 0x1232 <pb_proto_handle+0x1ae>
    1230:	64 c0       	rjmp	.+200    	; 0x12fa <pb_proto_handle+0x276>
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    1232:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~PAR_BUSY;
    1234:	e8 e2       	ldi	r30, 0x28	; 40
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8b 7f       	andi	r24, 0xFB	; 251
    123c:	80 83       	st	Z, r24

  // --- get size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	60 e3       	ldi	r22, 0x30	; 48
    1242:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    1246:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	b8 16       	cp	r11, r24
    124c:	09 f0       	breq	.+2      	; 0x1250 <pb_proto_handle+0x1cc>
    124e:	55 c0       	rjmp	.+170    	; 0x12fa <pb_proto_handle+0x276>
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    1250:	29 b1       	in	r18, 0x09	; 9

  // --- get size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    1252:	90 2f       	mov	r25, r16
    1254:	80 e0       	ldi	r24, 0x00	; 0

  // --- get size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	28 2b       	or	r18, r24
    125a:	39 2b       	or	r19, r25
  PAR_STATUS_PORT ^= PAR_BUSY;
    125c:	e8 e2       	ldi	r30, 0x28	; 40
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	94 e0       	ldi	r25, 0x04	; 4
    1264:	89 27       	eor	r24, r25
    1266:	80 83       	st	Z, r24

  // Check with buffer size
  if(uwSize > DATABUF_SIZE) {
    1268:	a5 e0       	ldi	r26, 0x05	; 5
    126a:	2b 3e       	cpi	r18, 0xEB	; 235
    126c:	3a 07       	cpc	r19, r26
    126e:	38 f0       	brcs	.+14     	; 0x127e <pb_proto_handle+0x1fa>
    1270:	0f 2e       	mov	r0, r31
    1272:	f5 e0       	ldi	r31, 0x05	; 5
    1274:	bf 2e       	mov	r11, r31
    1276:	f0 2d       	mov	r31, r0
    1278:	cc 24       	eor	r12, r12
    127a:	dd 24       	eor	r13, r13
    127c:	6c c1       	rjmp	.+728    	; 0x1556 <pb_proto_handle+0x4d2>
  }

  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    127e:	c9 01       	movw	r24, r18
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	0f 2e       	mov	r0, r31
    1284:	fe ef       	ldi	r31, 0xFE	; 254
    1286:	2f 2e       	mov	r2, r31
    1288:	ff ef       	ldi	r31, 0xFF	; 255
    128a:	3f 2e       	mov	r3, r31
    128c:	f0 2d       	mov	r31, r0
    128e:	28 22       	and	r2, r24
    1290:	39 22       	and	r3, r25

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    1292:	21 14       	cp	r2, r1
    1294:	31 04       	cpc	r3, r1
    1296:	71 f1       	breq	.+92     	; 0x12f4 <pb_proto_handle+0x270>
    1298:	01 e0       	ldi	r16, 0x01	; 1
    129a:	0f 2e       	mov	r0, r31
    129c:	f9 e7       	ldi	r31, 0x79	; 121
    129e:	ef 2e       	mov	r14, r31
    12a0:	f1 e0       	ldi	r31, 0x01	; 1
    12a2:	ff 2e       	mov	r15, r31
    12a4:	f0 2d       	mov	r31, r0
    12a6:	cc 24       	eor	r12, r12
    12a8:	dd 24       	eor	r13, r13
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    PAR_STATUS_PORT ^= PAR_BUSY;
    12aa:	0f 2e       	mov	r0, r31
    12ac:	f8 e2       	ldi	r31, 0x28	; 40
    12ae:	4f 2e       	mov	r4, r31
    12b0:	55 24       	eor	r5, r5
    12b2:	f0 2d       	mov	r31, r0
    12b4:	14 e0       	ldi	r17, 0x04	; 4
  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    12b6:	80 2f       	mov	r24, r16
    12b8:	60 e4       	ldi	r22, 0x40	; 64
    12ba:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    12be:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    12c0:	b1 e0       	ldi	r27, 0x01	; 1
    12c2:	8b 17       	cp	r24, r27
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <pb_proto_handle+0x244>
    12c6:	47 c1       	rjmp	.+654    	; 0x1556 <pb_proto_handle+0x4d2>
      break;
    *(ptr++) = PAR_DATA_PIN;
    12c8:	e9 e2       	ldi	r30, 0x29	; 41
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	d7 01       	movw	r26, r14
    12d0:	8c 93       	st	X, r24
    PAR_STATUS_PORT ^= PAR_BUSY;
    12d2:	f2 01       	movw	r30, r4
    12d4:	80 81       	ld	r24, Z
    12d6:	81 27       	eor	r24, r17
    12d8:	80 83       	st	Z, r24
    ubPOutWait ^= 1;
    uwReadSize++;
    12da:	08 94       	sec
    12dc:	c1 1c       	adc	r12, r1
    12de:	d1 1c       	adc	r13, r1

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    12e0:	2c 14       	cp	r2, r12
    12e2:	3d 04       	cpc	r3, r13
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <pb_proto_handle+0x264>
    12e6:	37 c1       	rjmp	.+622    	; 0x1556 <pb_proto_handle+0x4d2>
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    12e8:	08 94       	sec
    12ea:	e1 1c       	adc	r14, r1
    12ec:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= PAR_BUSY;
    ubPOutWait ^= 1;
    12ee:	f1 e0       	ldi	r31, 0x01	; 1
    12f0:	0f 27       	eor	r16, r31
    12f2:	e1 cf       	rjmp	.-62     	; 0x12b6 <pb_proto_handle+0x232>
    12f4:	cc 24       	eor	r12, r12
    12f6:	dd 24       	eor	r13, r13
    12f8:	2e c1       	rjmp	.+604    	; 0x1556 <pb_proto_handle+0x4d2>
    12fa:	cc 24       	eor	r12, r12
    12fc:	dd 24       	eor	r13, r13
    12fe:	2b c1       	rjmp	.+598    	; 0x1556 <pb_proto_handle+0x4d2>
      break;
    case PBPROTO_CMD_SEND:
      result = parHandleAmiWrite(&uwParDataSize);
      break;
    case PBPROTO_CMD_RECV_BURST:
      result = parHandleAmiReadBurst(pkt_size, &uwParDataSize);
    1300:	e9 80       	ldd	r14, Y+1	; 0x01
    1302:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t parHandleAmiReadBurst(uint16_t size, uint16_t *ret_size) {
  uint8_t status;

  // --- set packet size hi
  status = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	60 e2       	ldi	r22, 0x20	; 32
    1308:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    130c:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	82 17       	cp	r24, r18
    1312:	09 f0       	breq	.+2      	; 0x1316 <pb_proto_handle+0x292>
    1314:	8b c0       	rjmp	.+278    	; 0x142c <pb_proto_handle+0x3a8>
    return status;

	PAR_DATA_DDR = 0xFF;
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	8a b9       	out	0x0a, r24	; 10
	PAR_DATA_PORT = size >> 8;
    131a:	fb b8       	out	0x0b, r15	; 11
	PAR_STATUS_PORT &= ~PAR_BUSY;
    131c:	e8 e2       	ldi	r30, 0x28	; 40
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8b 7f       	andi	r24, 0xFB	; 251
    1324:	80 83       	st	Z, r24

  // --- set packet size lo ---
  status = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	60 e3       	ldi	r22, 0x30	; 48
    132a:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    132e:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	b8 16       	cp	r11, r24
    1334:	09 f0       	breq	.+2      	; 0x1338 <pb_proto_handle+0x2b4>
    1336:	7a c0       	rjmp	.+244    	; 0x142c <pb_proto_handle+0x3a8>
    return status;

	PAR_DATA_PORT = size & 0xFF;
    1338:	eb b8       	out	0x0b, r14	; 11
	PAR_STATUS_PORT ^= PAR_BUSY;
    133a:	e8 e2       	ldi	r30, 0x28	; 40
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	94 e0       	ldi	r25, 0x04	; 4
    1342:	89 27       	eor	r24, r25
    1344:	80 83       	st	Z, r24

  // --- burst ready? ---
  status = parWaitForPout(1, PBPROTO_STAGE_DATA);
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	60 e4       	ldi	r22, 0x40	; 64
    134a:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    134e:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    1350:	a1 e0       	ldi	r26, 0x01	; 1
    1352:	8a 17       	cp	r24, r26
    1354:	09 f0       	breq	.+2      	; 0x1358 <pb_proto_handle+0x2d4>
    1356:	6a c0       	rjmp	.+212    	; 0x142c <pb_proto_handle+0x3a8>
    return status;

  // round to even and convert to words
  uint16_t words = (size + 1) >> 1;
    1358:	c7 01       	movw	r24, r14
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	ac 01       	movw	r20, r24
    135e:	56 95       	lsr	r21
    1360:	47 95       	ror	r20
  uint16_t i;
  uint8_t *ptr = g_pDataBuffer;

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    1362:	f8 94       	cli
	PAR_STATUS_PORT ^= PAR_BUSY;
    1364:	e8 e2       	ldi	r30, 0x28	; 40
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	94 e0       	ldi	r25, 0x04	; 4
    136c:	89 27       	eor	r24, r25
    136e:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    1370:	41 15       	cp	r20, r1
    1372:	51 05       	cpc	r21, r1
    1374:	91 f1       	breq	.+100    	; 0x13da <pb_proto_handle+0x356>
    1376:	09 e7       	ldi	r16, 0x79	; 121
    1378:	11 e0       	ldi	r17, 0x01	; 1
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    137e:	9f e0       	ldi	r25, 0x0F	; 15
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    1380:	6b e2       	ldi	r22, 0x2B	; 43
    1382:	70 e0       	ldi	r23, 0x00	; 0

    // wait REQ == 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    1384:	e6 e2       	ldi	r30, 0x26	; 38
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	89 2f       	mov	r24, r25
    138a:	8a 95       	dec	r24
    138c:	f1 f7       	brne	.-4      	; 0x138a <pb_proto_handle+0x306>
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= PAR_BUSY;
  for(i=0;i<words;i++) {
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    138e:	d8 01       	movw	r26, r16
    1390:	8c 91       	ld	r24, X
    1392:	db 01       	movw	r26, r22
    1394:	8c 93       	st	X, r24

    // wait REQ == 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    1396:	80 81       	ld	r24, Z
    1398:	83 ff       	sbrs	r24, 3
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <pb_proto_handle+0x31e>
    139c:	80 81       	ld	r24, Z
    139e:	84 fd       	sbrc	r24, 4
    13a0:	fa cf       	rjmp	.-12     	; 0x1396 <pb_proto_handle+0x312>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    13a2:	80 81       	ld	r24, Z
    13a4:	84 ff       	sbrs	r24, 4
    13a6:	1b c0       	rjmp	.+54     	; 0x13de <pb_proto_handle+0x35a>
    13a8:	89 2f       	mov	r24, r25
    13aa:	8a 95       	dec	r24
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <pb_proto_handle+0x326>
			break;

    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    13ae:	d8 01       	movw	r26, r16
    13b0:	11 96       	adiw	r26, 0x01	; 1
    13b2:	8c 91       	ld	r24, X
    13b4:	db 01       	movw	r26, r22
    13b6:	8c 93       	st	X, r24

    // wait REQ == 1
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    13b8:	80 81       	ld	r24, Z
    13ba:	83 fd       	sbrc	r24, 3
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <pb_proto_handle+0x340>
    13be:	80 81       	ld	r24, Z
    13c0:	84 fd       	sbrc	r24, 4
    13c2:	fa cf       	rjmp	.-12     	; 0x13b8 <pb_proto_handle+0x334>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    13c4:	80 81       	ld	r24, Z
    13c6:	84 ff       	sbrs	r24, 4
    13c8:	0a c0       	rjmp	.+20     	; 0x13de <pb_proto_handle+0x35a>

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= PAR_BUSY;
  for(i=0;i<words;i++) {
    13ca:	2f 5f       	subi	r18, 0xFF	; 255
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	24 17       	cp	r18, r20
    13d0:	35 07       	cpc	r19, r21
    13d2:	28 f4       	brcc	.+10     	; 0x13de <pb_proto_handle+0x35a>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    13d4:	0e 5f       	subi	r16, 0xFE	; 254
    13d6:	1f 4f       	sbci	r17, 0xFF	; 255
    13d8:	d7 cf       	rjmp	.-82     	; 0x1388 <pb_proto_handle+0x304>
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & PAR_POUT)
    13de:	e6 e2       	ldi	r30, 0x26	; 38
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    if(!(PAR_STATUS_PIN & PAR_SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= PAR_BUSY;
    13e2:	a8 e2       	ldi	r26, 0x28	; 40
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
  }
  recv_burst_exit:
  sei();
    13e6:	78 94       	sei
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <pb_proto_handle+0x36c>
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & PAR_POUT)
    if(!(PAR_STATUS_PIN & PAR_SEL))
    13ea:	80 81       	ld	r24, Z
    13ec:	84 ff       	sbrs	r24, 4
    13ee:	fb cf       	rjmp	.-10     	; 0x13e6 <pb_proto_handle+0x362>
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & PAR_POUT)
    13f0:	80 81       	ld	r24, Z
    13f2:	83 fd       	sbrc	r24, 3
    13f4:	fa cf       	rjmp	.-12     	; 0x13ea <pb_proto_handle+0x366>
    if(!(PAR_STATUS_PIN & PAR_SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= PAR_BUSY;
    13f6:	8c 91       	ld	r24, X
    13f8:	84 60       	ori	r24, 0x04	; 4
    13fa:	8c 93       	st	X, r24
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <pb_proto_handle+0x380>

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & PAR_POUT))
    if(!(PAR_STATUS_PIN & PAR_SEL))
    13fe:	80 81       	ld	r24, Z
    1400:	84 ff       	sbrs	r24, 4
    1402:	f1 cf       	rjmp	.-30     	; 0x13e6 <pb_proto_handle+0x362>
			goto recv_burst_exit;

	PAR_STATUS_PORT |= PAR_BUSY;

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & PAR_POUT))
    1404:	80 81       	ld	r24, Z
    1406:	83 ff       	sbrs	r24, 3
    1408:	fa cf       	rjmp	.-12     	; 0x13fe <pb_proto_handle+0x37a>
    if(!(PAR_STATUS_PIN & PAR_SEL))
			goto recv_burst_exit;

  // error?
  if(i<words)
    140a:	24 17       	cp	r18, r20
    140c:	35 07       	cpc	r19, r21
    140e:	20 f4       	brcc	.+8      	; 0x1418 <pb_proto_handle+0x394>
    1410:	0f 2e       	mov	r0, r31
    1412:	f2 e4       	ldi	r31, 0x42	; 66
    1414:	bf 2e       	mov	r11, r31
    1416:	f0 2d       	mov	r31, r0
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT &= ~PAR_BUSY;
    1418:	e8 e2       	ldi	r30, 0x28	; 40
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8b 7f       	andi	r24, 0xFB	; 251
    1420:	80 83       	st	Z, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    1422:	1a b8       	out	0x0a, r1	; 10

  *ret_size = i << 1;
    1424:	69 01       	movw	r12, r18
    1426:	cc 0c       	add	r12, r12
    1428:	dd 1c       	adc	r13, r13
    142a:	95 c0       	rjmp	.+298    	; 0x1556 <pb_proto_handle+0x4d2>
    142c:	cc 24       	eor	r12, r12
    142e:	dd 24       	eor	r13, r13
    1430:	92 c0       	rjmp	.+292    	; 0x1556 <pb_proto_handle+0x4d2>
{
  uint16_t uwSize;
  uint8_t ubStatus;

  // --- packet size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	60 e2       	ldi	r22, 0x20	; 32
    1436:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    143a:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    143c:	b1 e0       	ldi	r27, 0x01	; 1
    143e:	8b 17       	cp	r24, r27
    1440:	09 f0       	breq	.+2      	; 0x1444 <pb_proto_handle+0x3c0>
    1442:	87 c0       	rjmp	.+270    	; 0x1552 <pb_proto_handle+0x4ce>
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    1444:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~PAR_BUSY;
    1446:	e8 e2       	ldi	r30, 0x28	; 40
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	8b 7f       	andi	r24, 0xFB	; 251
    144e:	80 83       	st	Z, r24

  // --- packet size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	60 e3       	ldi	r22, 0x30	; 48
    1454:	0e 94 17 08 	call	0x102e	; 0x102e <parWaitForPout>
    1458:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    145a:	e1 e0       	ldi	r30, 0x01	; 1
    145c:	8e 17       	cp	r24, r30
    145e:	09 f0       	breq	.+2      	; 0x1462 <pb_proto_handle+0x3de>
    1460:	78 c0       	rjmp	.+240    	; 0x1552 <pb_proto_handle+0x4ce>
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    1462:	29 b1       	in	r18, 0x09	; 9
  // --- packet size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    1464:	90 2f       	mov	r25, r16
    1466:	80 e0       	ldi	r24, 0x00	; 0
  // --- packet size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	82 2b       	or	r24, r18
    146c:	93 2b       	or	r25, r19
  // delay SET_RAK until burst begin...

  // check size
  if(uwSize > DATABUF_SIZE)
    146e:	f5 e0       	ldi	r31, 0x05	; 5
    1470:	8b 3e       	cpi	r24, 0xEB	; 235
    1472:	9f 07       	cpc	r25, r31
    1474:	38 f0       	brcs	.+14     	; 0x1484 <pb_proto_handle+0x400>
    1476:	0f 2e       	mov	r0, r31
    1478:	f5 e0       	ldi	r31, 0x05	; 5
    147a:	bf 2e       	mov	r11, r31
    147c:	f0 2d       	mov	r31, r0
    147e:	cc 24       	eor	r12, r12
    1480:	dd 24       	eor	r13, r13
    1482:	69 c0       	rjmp	.+210    	; 0x1556 <pb_proto_handle+0x4d2>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;

  // round to even and convert to words
  uint16_t words = (uwSize +1) >> 1;
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	bc 01       	movw	r22, r24
    1488:	76 95       	lsr	r23
    148a:	67 95       	ror	r22
  uint8_t result = PBPROTO_STATUS_OK;
  uint8_t *ptr = g_pDataBuffer;

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    148c:	f8 94       	cli
  PAR_STATUS_PORT ^= PAR_BUSY; // trigger start of burst
    148e:	e8 e2       	ldi	r30, 0x28	; 40
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	94 e0       	ldi	r25, 0x04	; 4
    1496:	89 27       	eor	r24, r25
    1498:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    149a:	61 15       	cp	r22, r1
    149c:	71 05       	cpc	r23, r1
    149e:	59 f1       	breq	.+86     	; 0x14f6 <pb_proto_handle+0x472>
    14a0:	09 e7       	ldi	r16, 0x79	; 121
    14a2:	11 e0       	ldi	r17, 0x01	; 1
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    14a8:	e6 e2       	ldi	r30, 0x26	; 38
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    14ac:	49 e2       	ldi	r20, 0x29	; 41
    14ae:	50 e0       	ldi	r21, 0x00	; 0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= PAR_BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    14b0:	80 81       	ld	r24, Z
    14b2:	83 fd       	sbrc	r24, 3
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <pb_proto_handle+0x438>
    14b6:	80 81       	ld	r24, Z
    14b8:	84 fd       	sbrc	r24, 4
    14ba:	fa cf       	rjmp	.-12     	; 0x14b0 <pb_proto_handle+0x42c>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    14bc:	80 81       	ld	r24, Z
    14be:	84 ff       	sbrs	r24, 4
    14c0:	1c c0       	rjmp	.+56     	; 0x14fa <pb_proto_handle+0x476>
			break;
    *(ptr++) = PAR_DATA_PIN;
    14c2:	da 01       	movw	r26, r20
    14c4:	8c 91       	ld	r24, X
    14c6:	d8 01       	movw	r26, r16
    14c8:	8c 93       	st	X, r24

    // wait REQ == 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    14ca:	80 81       	ld	r24, Z
    14cc:	83 ff       	sbrs	r24, 3
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <pb_proto_handle+0x452>
    14d0:	80 81       	ld	r24, Z
    14d2:	84 fd       	sbrc	r24, 4
    14d4:	fa cf       	rjmp	.-12     	; 0x14ca <pb_proto_handle+0x446>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    14d6:	80 81       	ld	r24, Z
    14d8:	84 ff       	sbrs	r24, 4
    14da:	0f c0       	rjmp	.+30     	; 0x14fa <pb_proto_handle+0x476>
			break;
    *(ptr++) = PAR_DATA_PIN;
    14dc:	da 01       	movw	r26, r20
    14de:	8c 91       	ld	r24, X
    14e0:	d8 01       	movw	r26, r16
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	8c 93       	st	X, r24

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= PAR_BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    14e6:	2f 5f       	subi	r18, 0xFF	; 255
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	26 17       	cp	r18, r22
    14ec:	37 07       	cpc	r19, r23
    14ee:	28 f4       	brcc	.+10     	; 0x14fa <pb_proto_handle+0x476>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    14f0:	0e 5f       	subi	r16, 0xFE	; 254
    14f2:	1f 4f       	sbci	r17, 0xFF	; 255
    14f4:	dd cf       	rjmp	.-70     	; 0x14b0 <pb_proto_handle+0x42c>
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
  }
  sei();
    14fa:	78 94       	sei
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    14fc:	e6 e2       	ldi	r30, 0x26	; 38
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & PAR_SEL))
			continue;

		PAR_STATUS_PORT ^= PAR_BUSY;
    1500:	a8 e2       	ldi	r26, 0x28	; 40
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	94 e0       	ldi	r25, 0x04	; 4
  sei();
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    1506:	80 81       	ld	r24, Z
    1508:	83 fd       	sbrc	r24, 3
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <pb_proto_handle+0x48e>
    150c:	80 81       	ld	r24, Z
    150e:	84 fd       	sbrc	r24, 4
    1510:	fa cf       	rjmp	.-12     	; 0x1506 <pb_proto_handle+0x482>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    1512:	80 81       	ld	r24, Z
    1514:	84 ff       	sbrs	r24, 4
    1516:	09 c0       	rjmp	.+18     	; 0x152a <pb_proto_handle+0x4a6>
			continue;

		PAR_STATUS_PORT ^= PAR_BUSY;
    1518:	8c 91       	ld	r24, X
    151a:	89 27       	eor	r24, r25
    151c:	8c 93       	st	X, r24
		// Wait for POUT == 0
		while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    151e:	80 81       	ld	r24, Z
    1520:	83 ff       	sbrs	r24, 3
    1522:	03 c0       	rjmp	.+6      	; 0x152a <pb_proto_handle+0x4a6>
    1524:	80 81       	ld	r24, Z
    1526:	84 fd       	sbrc	r24, 4
    1528:	fa cf       	rjmp	.-12     	; 0x151e <pb_proto_handle+0x49a>
  } while(!(PAR_STATUS_PIN & PAR_SEL));
    152a:	80 81       	ld	r24, Z
    152c:	84 ff       	sbrs	r24, 4
    152e:	eb cf       	rjmp	.-42     	; 0x1506 <pb_proto_handle+0x482>

  // error?
  if(i<words)
    1530:	26 17       	cp	r18, r22
    1532:	37 07       	cpc	r19, r23
    1534:	20 f4       	brcc	.+8      	; 0x153e <pb_proto_handle+0x4ba>
    1536:	0f 2e       	mov	r0, r31
    1538:	f2 e4       	ldi	r31, 0x42	; 66
    153a:	bf 2e       	mov	r11, r31
    153c:	f0 2d       	mov	r31, r0
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT ^= PAR_BUSY;
    153e:	e8 e2       	ldi	r30, 0x28	; 40
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	94 e0       	ldi	r25, 0x04	; 4
    1546:	89 27       	eor	r24, r25
    1548:	80 83       	st	Z, r24

  *ret_size = i << 1;
    154a:	69 01       	movw	r12, r18
    154c:	cc 0c       	add	r12, r12
    154e:	dd 1c       	adc	r13, r13
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <pb_proto_handle+0x4d2>
    1552:	cc 24       	eor	r12, r12
    1554:	dd 24       	eor	r13, r13
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t parWaitForSel(uint8_t select_state, uint8_t state_flag) {
  g_uwTimer100us = 0;
    1556:	10 92 4d 01 	sts	0x014D, r1
    155a:	10 92 4c 01 	sts	0x014C, r1
  while(g_uwTimer100us < pb_proto_timeout) {
    155e:	20 91 3a 01 	lds	r18, 0x013A
    1562:	30 91 3b 01 	lds	r19, 0x013B
    if(((PAR_STATUS_PIN & PAR_SEL) >> PAR_SEL_PIN) == select_state)
    1566:	e6 e2       	ldi	r30, 0x26	; 38
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <pb_proto_handle+0x4ee>
    156c:	80 81       	ld	r24, Z
    156e:	84 ff       	sbrs	r24, 4
    1570:	07 c0       	rjmp	.+14     	; 0x1580 <pb_proto_handle+0x4fc>
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t parWaitForSel(uint8_t select_state, uint8_t state_flag) {
  g_uwTimer100us = 0;
  while(g_uwTimer100us < pb_proto_timeout) {
    1572:	80 91 4c 01 	lds	r24, 0x014C
    1576:	90 91 4d 01 	lds	r25, 0x014D
    157a:	82 17       	cp	r24, r18
    157c:	93 07       	cpc	r25, r19
    157e:	b0 f3       	brcs	.-20     	; 0x156c <pb_proto_handle+0x4e8>

  // wait for SEL == 0
  parWaitForSel(0, PBPROTO_STAGE_END_SELECT);

  // reset BUSY = 0
  PAR_STATUS_PORT &= ~PAR_BUSY;
    1580:	e8 e2       	ldi	r30, 0x28	; 40
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	8b 7f       	andi	r24, 0xFB	; 251
    1588:	80 83       	st	Z, r24
    158a:	e0 90 84 00 	lds	r14, 0x0084
    158e:	f0 90 85 00 	lds	r15, 0x0085
  // Read timer - assuming transfer will be much shorter than 100us
  // TODO(KaiN#7): is it really that short?
  uint16_t uwTimeDelta = timerGetState();

  // Amiga sent data - process it
  if(result == PBPROTO_STATUS_OK) {
    1592:	b1 e0       	ldi	r27, 0x01	; 1
    1594:	bb 16       	cp	r11, r27
    1596:	59 f4       	brne	.+22     	; 0x15ae <pb_proto_handle+0x52a>
    if((cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST))
    1598:	e1 e1       	ldi	r30, 0x11	; 17
    159a:	ae 16       	cp	r10, r30
    159c:	21 f0       	breq	.+8      	; 0x15a6 <pb_proto_handle+0x522>
    159e:	f3 e3       	ldi	r31, 0x33	; 51
    15a0:	af 16       	cp	r10, r31
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <pb_proto_handle+0x522>
    15a4:	7a c0       	rjmp	.+244    	; 0x169a <pb_proto_handle+0x616>
      result = bridgeProcessPacket(uwParDataSize);
    15a6:	c6 01       	movw	r24, r12
    15a8:	0e 94 cd 03 	call	0x79a	; 0x79a <bridgeProcessPacket>
    15ac:	b8 2e       	mov	r11, r24
  }

  // fill in stats
  ps->cmd = cmd;
    15ae:	09 e6       	ldi	r16, 0x69	; 105
    15b0:	11 e0       	ldi	r17, 0x01	; 1
    15b2:	f8 01       	movw	r30, r16
    15b4:	a1 92       	st	Z+, r10
  ps->status = result;
    15b6:	b0 82       	st	Z, r11
  ps->size = uwParDataSize;
    15b8:	d8 01       	movw	r26, r16
    15ba:	15 96       	adiw	r26, 0x05	; 5
    15bc:	dc 92       	st	X, r13
    15be:	ce 92       	st	-X, r12
    15c0:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = uwTimeDelta;
    15c2:	17 96       	adiw	r26, 0x07	; 7
    15c4:	fc 92       	st	X, r15
    15c6:	ee 92       	st	-X, r14
    15c8:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timerCalculateKbps(uwParDataSize, uwTimeDelta);
    15ca:	c6 01       	movw	r24, r12
    15cc:	b7 01       	movw	r22, r14
    15ce:	0e 94 a5 01 	call	0x34a	; 0x34a <timerCalculateKbps>
    15d2:	f8 01       	movw	r30, r16
    15d4:	91 87       	std	Z+9, r25	; 0x09
    15d6:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    15d8:	d8 01       	movw	r26, r16
    15da:	1c 96       	adiw	r26, 0x0c	; 12
    15dc:	6d 92       	st	X+, r6
    15de:	7d 92       	st	X+, r7
    15e0:	8d 92       	st	X+, r8
    15e2:	9c 92       	st	X, r9
    15e4:	1f 97       	sbiw	r26, 0x0f	; 15
  ps->is_send = (cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST);
    15e6:	b1 e1       	ldi	r27, 0x11	; 17
    15e8:	ab 16       	cp	r10, r27
    15ea:	31 f0       	breq	.+12     	; 0x15f8 <pb_proto_handle+0x574>
    15ec:	e3 e3       	ldi	r30, 0x33	; 51
    15ee:	ae 16       	cp	r10, r30
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <pb_proto_handle+0x574>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <pb_proto_handle+0x578>
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	eb e6       	ldi	r30, 0x6B	; 107
    15fe:	f1 e0       	ldi	r31, 0x01	; 1
    1600:	81 93       	st	Z+, r24
  ps->stats_id = ps->is_send ? STATS_ID_PB_TX : STATS_ID_PB_RX;
    1602:	10 82       	st	Z, r1
    1604:	88 23       	and	r24, r24
    1606:	11 f0       	breq	.+4      	; 0x160c <pb_proto_handle+0x588>
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	80 83       	st	Z, r24
  ps->recv_delta = ps->is_send ? 0 : (uint16_t)(ps->ts - trigger_ts);
    160c:	80 91 6b 01 	lds	r24, 0x016B
    1610:	88 23       	and	r24, r24
    1612:	19 f0       	breq	.+6      	; 0x161a <pb_proto_handle+0x596>
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	0a c0       	rjmp	.+20     	; 0x162e <pb_proto_handle+0x5aa>
    161a:	20 91 75 01 	lds	r18, 0x0175
    161e:	30 91 76 01 	lds	r19, 0x0176
    1622:	80 91 40 01 	lds	r24, 0x0140
    1626:	90 91 41 01 	lds	r25, 0x0141
    162a:	28 1b       	sub	r18, r24
    162c:	39 0b       	sbc	r19, r25
    162e:	30 93 74 01 	sts	0x0174, r19
    1632:	20 93 73 01 	sts	0x0173, r18

	if(result == PBPROTO_STATUS_OK)
    1636:	f1 e0       	ldi	r31, 0x01	; 1
    1638:	bf 16       	cp	r11, r31
    163a:	59 f4       	brne	.+22     	; 0x1652 <pb_proto_handle+0x5ce>
		stats_update_ok(ps->stats_id, ps->size, ps->rate);
    163c:	ec e6       	ldi	r30, 0x6C	; 108
    163e:	f1 e0       	ldi	r31, 0x01	; 1
    1640:	61 81       	ldd	r22, Z+1	; 0x01
    1642:	72 81       	ldd	r23, Z+2	; 0x02
    1644:	45 81       	ldd	r20, Z+5	; 0x05
    1646:	56 81       	ldd	r21, Z+6	; 0x06
    1648:	80 81       	ld	r24, Z
    164a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <stats_update_ok>
    164e:	21 e0       	ldi	r18, 0x01	; 1
    1650:	0e c0       	rjmp	.+28     	; 0x166e <pb_proto_handle+0x5ea>
    1652:	e0 91 6c 01 	lds	r30, 0x016C
    1656:	8c e0       	ldi	r24, 0x0C	; 12
    1658:	e8 9f       	mul	r30, r24
    165a:	f0 01       	movw	r30, r0
    165c:	11 24       	eor	r1, r1
    165e:	ed 59       	subi	r30, 0x9D	; 157
    1660:	f8 4f       	sbci	r31, 0xF8	; 248
	else
    stats_get(ps->stats_id)->err++;
    1662:	86 81       	ldd	r24, Z+6	; 0x06
    1664:	97 81       	ldd	r25, Z+7	; 0x07
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	97 83       	std	Z+7, r25	; 0x07
    166a:	86 83       	std	Z+6, r24	; 0x06
    166c:	2b 2d       	mov	r18, r11

  return result;
}
    166e:	82 2f       	mov	r24, r18
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	bf 90       	pop	r11
    1686:	af 90       	pop	r10
    1688:	9f 90       	pop	r9
    168a:	8f 90       	pop	r8
    168c:	7f 90       	pop	r7
    168e:	6f 90       	pop	r6
    1690:	5f 90       	pop	r5
    1692:	4f 90       	pop	r4
    1694:	3f 90       	pop	r3
    1696:	2f 90       	pop	r2
    1698:	08 95       	ret
    if((cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST))
      result = bridgeProcessPacket(uwParDataSize);
  }

  // fill in stats
  ps->cmd = cmd;
    169a:	09 e6       	ldi	r16, 0x69	; 105
    169c:	11 e0       	ldi	r17, 0x01	; 1
    169e:	f8 01       	movw	r30, r16
    16a0:	a1 92       	st	Z+, r10
  ps->status = result;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	80 83       	st	Z, r24
  ps->size = uwParDataSize;
    16a6:	d8 01       	movw	r26, r16
    16a8:	15 96       	adiw	r26, 0x05	; 5
    16aa:	dc 92       	st	X, r13
    16ac:	ce 92       	st	-X, r12
    16ae:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = uwTimeDelta;
    16b0:	17 96       	adiw	r26, 0x07	; 7
    16b2:	fc 92       	st	X, r15
    16b4:	ee 92       	st	-X, r14
    16b6:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timerCalculateKbps(uwParDataSize, uwTimeDelta);
    16b8:	c6 01       	movw	r24, r12
    16ba:	b7 01       	movw	r22, r14
    16bc:	0e 94 a5 01 	call	0x34a	; 0x34a <timerCalculateKbps>
    16c0:	f8 01       	movw	r30, r16
    16c2:	91 87       	std	Z+9, r25	; 0x09
    16c4:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    16c6:	d8 01       	movw	r26, r16
    16c8:	1c 96       	adiw	r26, 0x0c	; 12
    16ca:	6d 92       	st	X+, r6
    16cc:	7d 92       	st	X+, r7
    16ce:	8d 92       	st	X+, r8
    16d0:	9c 92       	st	X, r9
    16d2:	1f 97       	sbiw	r26, 0x0f	; 15
    16d4:	8e cf       	rjmp	.-228    	; 0x15f2 <pb_proto_handle+0x56e>

000016d6 <parRequestAmiRead>:

/**
 * Sends information to Amiga that data is ready.
 * Done as 1ms pulse on ACK line.
 */
void parRequestAmiRead(void) {
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
  PAR_STATUS_PORT &= ~PAR_NACK;
    16da:	08 e2       	ldi	r16, 0x28	; 40
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	f8 01       	movw	r30, r16
    16e0:	80 81       	ld	r24, Z
    16e2:	8d 7f       	andi	r24, 0xFD	; 253
    16e4:	80 83       	st	Z, r24
  timerDelay100us(20);
    16e6:	84 e1       	ldi	r24, 0x14	; 20
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 98 01 	call	0x330	; 0x330 <timerDelay100us>
  PAR_STATUS_PORT |= PAR_NACK;
    16ee:	f8 01       	movw	r30, r16
    16f0:	80 81       	ld	r24, Z
    16f2:	82 60       	ori	r24, 0x02	; 2
    16f4:	80 83       	st	Z, r24
  trigger_ts = g_uwTimeStamp;
    16f6:	80 91 4e 01 	lds	r24, 0x014E
    16fa:	90 91 4f 01 	lds	r25, 0x014F
    16fe:	a0 91 50 01 	lds	r26, 0x0150
    1702:	b0 91 51 01 	lds	r27, 0x0151
    1706:	80 93 40 01 	sts	0x0140, r24
    170a:	90 93 41 01 	sts	0x0141, r25
    170e:	a0 93 42 01 	sts	0x0142, r26
    1712:	b0 93 43 01 	sts	0x0143, r27
}
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	08 95       	ret

0000171c <pio_util_get_init_flags>:

uint8_t pio_util_get_init_flags()
{
  uint8_t flags = PIO_INIT_BROAD_CAST;

  if(g_sConfig.flow_ctl) {
    171c:	80 91 5b 01 	lds	r24, 0x015B
    1720:	88 23       	and	r24, r24
    1722:	11 f0       	breq	.+4      	; 0x1728 <pio_util_get_init_flags+0xc>
    1724:	9c e0       	ldi	r25, 0x0C	; 12
    1726:	01 c0       	rjmp	.+2      	; 0x172a <pio_util_get_init_flags+0xe>
    1728:	94 e0       	ldi	r25, 0x04	; 4
    flags |= PIO_INIT_FLOW_CONTROL;
  }
  if(g_sConfig.full_duplex) {
    172a:	80 91 5c 01 	lds	r24, 0x015C
    172e:	81 11       	cpse	r24, r1
    flags |= PIO_INIT_FULL_DUPLEX;
    1730:	91 60       	ori	r25, 0x01	; 1
  }

  return flags;
}
    1732:	89 2f       	mov	r24, r25
    1734:	08 95       	ret

00001736 <pio_util_send_packet>:

  return ubRecvResult;
}

uint8_t pio_util_send_packet(uint16_t size)
{
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
    1742:	04 e8       	ldi	r16, 0x84	; 132
    1744:	10 e0       	ldi	r17, 0x00	; 0
    1746:	f8 01       	movw	r30, r16
    1748:	11 82       	std	Z+1, r1	; 0x01
    174a:	10 82       	st	Z, r1
  timerReset();
  uint8_t result = enc28j60_send(g_pDataBuffer, size);
    174c:	89 e7       	ldi	r24, 0x79	; 121
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	be 01       	movw	r22, r28
    1752:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <enc28j60_send>
    1756:	f8 2e       	mov	r15, r24
    1758:	f8 01       	movw	r30, r16
    175a:	60 81       	ld	r22, Z
    175c:	71 81       	ldd	r23, Z+1	; 0x01
  // NOTE(KaiN#7): Is it really that short?
  uint16_t delta = timerGetState();

  uint16_t rate = timerCalculateKbps(size, delta);
    175e:	ce 01       	movw	r24, r28
    1760:	0e 94 a5 01 	call	0x34a	; 0x34a <timerCalculateKbps>
    1764:	ac 01       	movw	r20, r24
  if(result == PIO_OK) {
    1766:	ff 20       	and	r15, r15
    1768:	29 f4       	brne	.+10     	; 0x1774 <pio_util_send_packet+0x3e>
    stats_update_ok(STATS_ID_PIO_TX, size, rate);
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	be 01       	movw	r22, r28
    176e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <stats_update_ok>
    1772:	07 c0       	rjmp	.+14     	; 0x1782 <pio_util_send_packet+0x4c>
  }
  else {
    stats_get(STATS_ID_PIO_TX)->err++;
    1774:	ed e8       	ldi	r30, 0x8D	; 141
    1776:	f7 e0       	ldi	r31, 0x07	; 7
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	80 83       	st	Z, r24
  }

  return result;
}
    1782:	8f 2d       	mov	r24, r15
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	08 95       	ret

00001790 <pio_util_recv_packet>:
/**
 * Receives data from ENC28j60, calculates stats & does logging.
 * @param pDataSize Pointer to addr to be filled with read data size.
 */
uint8_t pio_util_recv_packet(uint16_t *pDataSize)
{
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	ec 01       	movw	r28, r24
    179c:	04 e8       	ldi	r16, 0x84	; 132
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	f8 01       	movw	r30, r16
    17a2:	11 82       	std	Z+1, r1	; 0x01
    17a4:	10 82       	st	Z, r1
  // Fetch packet from ENC28j60, measure elapsed time
  timerReset();
  uint8_t ubRecvResult = enc28j60_recv(g_pDataBuffer, DATABUF_SIZE, pDataSize);
    17a6:	89 e7       	ldi	r24, 0x79	; 121
    17a8:	91 e0       	ldi	r25, 0x01	; 1
    17aa:	6a ee       	ldi	r22, 0xEA	; 234
    17ac:	75 e0       	ldi	r23, 0x05	; 5
    17ae:	ae 01       	movw	r20, r28
    17b0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <enc28j60_recv>
    17b4:	f8 2e       	mov	r15, r24
    17b6:	f8 01       	movw	r30, r16
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
  uint16_t uwTimeDelta = timerGetState();
  uint16_t uwDataRate = timerCalculateKbps(*pDataSize, uwTimeDelta);
    17bc:	88 81       	ld	r24, Y
    17be:	99 81       	ldd	r25, Y+1	; 0x01
    17c0:	0e 94 a5 01 	call	0x34a	; 0x34a <timerCalculateKbps>
    17c4:	ac 01       	movw	r20, r24

  if(ubRecvResult == PIO_OK) {
    17c6:	ff 20       	and	r15, r15
    17c8:	31 f4       	brne	.+12     	; 0x17d6 <pio_util_recv_packet+0x46>
		// Update stats - write new data size & rate
    stats_update_ok(STATS_ID_PIO_RX, *pDataSize, uwDataRate);
    17ca:	68 81       	ld	r22, Y
    17cc:	79 81       	ldd	r23, Y+1	; 0x01
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <stats_update_ok>
    17d4:	07 c0       	rjmp	.+14     	; 0x17e4 <pio_util_recv_packet+0x54>
  }
  else {
		// Update stats - increase error count
    stats_get(STATS_ID_PIO_RX)->err++;
    17d6:	e1 e8       	ldi	r30, 0x81	; 129
    17d8:	f7 e0       	ldi	r31, 0x07	; 7
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	80 83       	st	Z, r24
  }

  return ubRecvResult;
}
    17e4:	8f 2d       	mov	r24, r15
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	08 95       	ret

000017f2 <readOp>:
    17f2:	e5 e2       	ldi	r30, 0x25	; 37
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	90 81       	ld	r25, Z
    17f8:	92 60       	ori	r25, 0x02	; 2
    17fa:	90 83       	st	Z, r25
    17fc:	90 81       	ld	r25, Z
    17fe:	9b 7f       	andi	r25, 0xFB	; 251
    1800:	90 83       	st	Z, r25
static uint8_t readOp (uint8_t op, uint8_t address) {
	#ifdef NOENC
	return 0;
	#endif
	spiEnableEth();
	spiWriteByte(op | (address & ADDR_MASK));
    1802:	96 2f       	mov	r25, r22
    1804:	9f 71       	andi	r25, 0x1F	; 31
    1806:	98 2b       	or	r25, r24
    1808:	9e bd       	out	0x2e, r25	; 46
    180a:	ed e4       	ldi	r30, 0x4D	; 77
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	88 23       	and	r24, r24
    1812:	ec f7       	brge	.-6      	; 0x180e <readOp+0x1c>
	if (address & 0x80)
    1814:	66 23       	and	r22, r22
    1816:	34 f4       	brge	.+12     	; 0x1824 <readOp+0x32>
    1818:	1e bc       	out	0x2e, r1	; 46
    181a:	ed e4       	ldi	r30, 0x4D	; 77
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	88 23       	and	r24, r24
    1822:	ec f7       	brge	.-6      	; 0x181e <readOp+0x2c>
    1824:	1e bc       	out	0x2e, r1	; 46
    1826:	ed e4       	ldi	r30, 0x4D	; 77
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	88 23       	and	r24, r24
    182e:	ec f7       	brge	.-6      	; 0x182a <readOp+0x38>
    1830:	8e b5       	in	r24, 0x2e	; 46
    1832:	e5 e2       	ldi	r30, 0x25	; 37
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	90 81       	ld	r25, Z
    1838:	94 60       	ori	r25, 0x04	; 4
    183a:	90 83       	st	Z, r25
		spiWriteByte(0x00);
	uint8_t result = spiReadByte();
	spiDisableEth();
	return result;
}
    183c:	08 95       	ret

0000183e <writeOp>:
    183e:	e5 e2       	ldi	r30, 0x25	; 37
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	90 81       	ld	r25, Z
    1844:	92 60       	ori	r25, 0x02	; 2
    1846:	90 83       	st	Z, r25
    1848:	90 81       	ld	r25, Z
    184a:	9b 7f       	andi	r25, 0xFB	; 251
    184c:	90 83       	st	Z, r25
static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
	#ifdef NOENC
	return;
	#endif
	spiEnableEth();
	spiWriteByte(op | (address & ADDR_MASK));
    184e:	6f 71       	andi	r22, 0x1F	; 31
    1850:	68 2b       	or	r22, r24
    1852:	6e bd       	out	0x2e, r22	; 46
    1854:	ed e4       	ldi	r30, 0x4D	; 77
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	88 23       	and	r24, r24
    185c:	ec f7       	brge	.-6      	; 0x1858 <writeOp+0x1a>
    185e:	4e bd       	out	0x2e, r20	; 46
    1860:	ed e4       	ldi	r30, 0x4D	; 77
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	88 23       	and	r24, r24
    1868:	ec f7       	brge	.-6      	; 0x1864 <writeOp+0x26>
    186a:	e5 e2       	ldi	r30, 0x25	; 37
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	84 60       	ori	r24, 0x04	; 4
    1872:	80 83       	st	Z, r24
	spiWriteByte(data);
	spiDisableEth();
}
    1874:	08 95       	ret

00001876 <readBuf>:

static void readBuf(uint16_t len, uint8_t* data) {
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	9c 01       	movw	r18, r24
    187c:	db 01       	movw	r26, r22
    187e:	e5 e2       	ldi	r30, 0x25	; 37
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	82 60       	ori	r24, 0x02	; 2
    1886:	80 83       	st	Z, r24
    1888:	80 81       	ld	r24, Z
    188a:	8b 7f       	andi	r24, 0xFB	; 251
    188c:	80 83       	st	Z, r24
    188e:	8a e3       	ldi	r24, 0x3A	; 58
    1890:	8e bd       	out	0x2e, r24	; 46
    1892:	ed e4       	ldi	r30, 0x4D	; 77
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	88 23       	and	r24, r24
    189a:	ec f7       	brge	.-6      	; 0x1896 <readBuf+0x20>
	#ifdef NOENC
	return;
	#endif
	spiEnableEth();
	spiWriteByte(ENC28J60_READ_BUF_MEM);
	while (len--) {
    189c:	21 15       	cp	r18, r1
    189e:	31 05       	cpc	r19, r1
    18a0:	79 f0       	breq	.+30     	; 0x18c0 <readBuf+0x4a>
    18a2:	ce e4       	ldi	r28, 0x4E	; 78
    18a4:	d0 e0       	ldi	r29, 0x00	; 0
    18a6:	ed e4       	ldi	r30, 0x4D	; 77
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	18 82       	st	Y, r1
    18ac:	80 81       	ld	r24, Z
    18ae:	88 23       	and	r24, r24
    18b0:	ec f7       	brge	.-6      	; 0x18ac <readBuf+0x36>
    18b2:	88 81       	ld	r24, Y
		*data++ = spiReadByte();
    18b4:	8c 93       	st	X, r24
    18b6:	21 50       	subi	r18, 0x01	; 1
    18b8:	30 40       	sbci	r19, 0x00	; 0
	#ifdef NOENC
	return;
	#endif
	spiEnableEth();
	spiWriteByte(ENC28J60_READ_BUF_MEM);
	while (len--) {
    18ba:	11 f0       	breq	.+4      	; 0x18c0 <readBuf+0x4a>
		*data++ = spiReadByte();
    18bc:	11 96       	adiw	r26, 0x01	; 1
    18be:	f5 cf       	rjmp	.-22     	; 0x18aa <readBuf+0x34>
    18c0:	e5 e2       	ldi	r30, 0x25	; 37
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	84 60       	ori	r24, 0x04	; 4
    18c8:	80 83       	st	Z, r24
	}
	spiDisableEth();
}
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <SetBank>:

static void SetBank (uint8_t address) {
    18d0:	1f 93       	push	r17
    18d2:	18 2f       	mov	r17, r24
	#ifdef NOENC
	return;
	#endif
	if ((address & BANK_MASK) != Enc28j60Bank) {
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	20 76       	andi	r18, 0x60	; 96
    18da:	30 70       	andi	r19, 0x00	; 0
    18dc:	80 91 45 01 	lds	r24, 0x0145
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	28 17       	cp	r18, r24
    18e4:	39 07       	cpc	r19, r25
    18e6:	81 f0       	breq	.+32     	; 0x1908 <SetBank+0x38>
		writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
    18e8:	80 ea       	ldi	r24, 0xA0	; 160
    18ea:	6f e1       	ldi	r22, 0x1F	; 31
    18ec:	43 e0       	ldi	r20, 0x03	; 3
    18ee:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
		Enc28j60Bank = address & BANK_MASK;
    18f2:	41 2f       	mov	r20, r17
    18f4:	40 76       	andi	r20, 0x60	; 96
    18f6:	40 93 45 01 	sts	0x0145, r20
		writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
    18fa:	42 95       	swap	r20
    18fc:	46 95       	lsr	r20
    18fe:	47 70       	andi	r20, 0x07	; 7
    1900:	80 e8       	ldi	r24, 0x80	; 128
    1902:	6f e1       	ldi	r22, 0x1F	; 31
    1904:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
	}
}
    1908:	1f 91       	pop	r17
    190a:	08 95       	ret

0000190c <readRegByte>:

static uint8_t readRegByte (uint8_t address) {
    190c:	1f 93       	push	r17
    190e:	18 2f       	mov	r17, r24
	#ifdef NOENC
	return 0;
	#endif
	SetBank(address);
    1910:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <SetBank>
	return readOp(ENC28J60_READ_CTRL_REG, address);
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	61 2f       	mov	r22, r17
    1918:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <readOp>
}
    191c:	1f 91       	pop	r17
    191e:	08 95       	ret

00001920 <writeRegByte>:
	#endif
	return readRegByte(address) + (readRegByte(address+1) << 8);
}
#endif

static void writeRegByte (uint8_t address, uint8_t data) {
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	18 2f       	mov	r17, r24
    1926:	06 2f       	mov	r16, r22
	#ifdef NOENC
	return;
	#endif
	SetBank(address);
    1928:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <SetBank>
	writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
    192c:	80 e4       	ldi	r24, 0x40	; 64
    192e:	61 2f       	mov	r22, r17
    1930:	40 2f       	mov	r20, r16
    1932:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
}
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	08 95       	ret

0000193c <writeReg>:

static void writeReg(uint8_t address, uint16_t data) {
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	18 2f       	mov	r17, r24
    1942:	07 2f       	mov	r16, r23
	#ifdef NOENC
	return;
	#endif
	writeRegByte(address, data);
    1944:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
	writeRegByte(address + 1, data >> 8);
    1948:	81 2f       	mov	r24, r17
    194a:	8f 5f       	subi	r24, 0xFF	; 255
    194c:	60 2f       	mov	r22, r16
    194e:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
}
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	08 95       	ret

00001958 <writePhy>:
	while (readRegByte(MISTAT) & MISTAT_BUSY);
	writeRegByte(MICMD, 0x00);
	return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	98 2f       	mov	r25, r24
    195e:	8b 01       	movw	r16, r22
	#ifdef NOENC
	return;
	#endif
	writeRegByte(MIREGADR, address);
    1960:	84 ed       	ldi	r24, 0xD4	; 212
    1962:	69 2f       	mov	r22, r25
    1964:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
	writeReg(MIWR, data);
    1968:	86 ed       	ldi	r24, 0xD6	; 214
    196a:	b8 01       	movw	r22, r16
    196c:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
	while (readRegByte(MISTAT) & MISTAT_BUSY);
    1970:	8a ee       	ldi	r24, 0xEA	; 234
    1972:	0e 94 86 0c 	call	0x190c	; 0x190c <readRegByte>
    1976:	80 fd       	sbrc	r24, 0
    1978:	fb cf       	rjmp	.-10     	; 0x1970 <writePhy+0x18>
}
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	08 95       	ret

00001980 <enc28j60_exit>:
	#ifdef NOENC
	return;
	#endif
	// Moved note from pio_exit
	// NOTE: UART - time_stamp_spc() pio: exit\r\n
  SetBank(ECON1);
    1980:	8f e1       	ldi	r24, 0x1F	; 31
    1982:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <SetBank>
  writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_RXEN);
    1986:	80 ea       	ldi	r24, 0xA0	; 160
    1988:	6f e1       	ldi	r22, 0x1F	; 31
    198a:	44 e0       	ldi	r20, 0x04	; 4
    198c:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
  g_ubEncOnline = 0;
    1990:	10 92 44 01 	sts	0x0144, r1
}
    1994:	08 95       	ret

00001996 <enc28j60_control>:
uint8_t enc28j60_control(uint8_t control_id, uint8_t value)
{
	#ifdef NOENC
	return 0;
	#endif
  switch(control_id) {
    1996:	88 23       	and	r24, r24
    1998:	11 f0       	breq	.+4      	; 0x199e <enc28j60_control+0x8>
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	08 95       	ret
    case PIO_CONTROL_FLOW: {
			uint8_t flag;
			if(is_full_duplex) {
    199e:	80 91 48 01 	lds	r24, 0x0148
    19a2:	88 23       	and	r24, r24
    19a4:	31 f0       	breq	.+12     	; 0x19b2 <enc28j60_control+0x1c>
				flag = value ? 2 : 3;
    19a6:	66 23       	and	r22, r22
    19a8:	11 f4       	brne	.+4      	; 0x19ae <enc28j60_control+0x18>
    19aa:	63 e0       	ldi	r22, 0x03	; 3
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <enc28j60_control+0x20>
    19ae:	62 e0       	ldi	r22, 0x02	; 2
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <enc28j60_control+0x20>
			}
			else {
				flag = value ? 1 : 0;
    19b2:	61 11       	cpse	r22, r1
    19b4:	61 e0       	ldi	r22, 0x01	; 1
			}
			writeRegByte(EFLOCON, flag);
    19b6:	87 e7       	ldi	r24, 0x77	; 119
    19b8:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
    19bc:	80 e0       	ldi	r24, 0x00	; 0
			return PIO_OK;
		}
    default:
      return PIO_NOT_FOUND;
  }
}
    19be:	08 95       	ret

000019c0 <enc28j60_status>:

// ---------- status ----------

uint8_t enc28j60_status(uint8_t status_id, uint8_t *value)
{
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	eb 01       	movw	r28, r22
	#ifdef NOENC
	return 0;
	#endif
  switch(status_id) {
    19c6:	88 23       	and	r24, r24
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <enc28j60_status+0x10>
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	19 f5       	brne	.+70     	; 0x1a14 <enc28j60_status+0x54>
    19ce:	05 c0       	rjmp	.+10     	; 0x19da <enc28j60_status+0x1a>
    case PIO_STATUS_VERSION:
      *value = rev;
    19d0:	80 91 49 01 	lds	r24, 0x0149
    19d4:	88 83       	st	Y, r24
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	1f c0       	rjmp	.+62     	; 0x1a18 <enc28j60_status+0x58>

static uint16_t readPhyByte (uint8_t address) {
	#ifdef NOENC
	return 0;
	#endif
	writeRegByte(MIREGADR, address);
    19da:	84 ed       	ldi	r24, 0xD4	; 212
    19dc:	61 e1       	ldi	r22, 0x11	; 17
    19de:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
	writeRegByte(MICMD, MICMD_MIIRD);
    19e2:	82 ed       	ldi	r24, 0xD2	; 210
    19e4:	61 e0       	ldi	r22, 0x01	; 1
    19e6:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
	while (readRegByte(MISTAT) & MISTAT_BUSY);
    19ea:	8a ee       	ldi	r24, 0xEA	; 234
    19ec:	0e 94 86 0c 	call	0x190c	; 0x190c <readRegByte>
    19f0:	80 fd       	sbrc	r24, 0
    19f2:	fb cf       	rjmp	.-10     	; 0x19ea <enc28j60_status+0x2a>
	writeRegByte(MICMD, 0x00);
    19f4:	82 ed       	ldi	r24, 0xD2	; 210
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
	return readRegByte(MIRD+1);
    19fc:	89 ed       	ldi	r24, 0xD9	; 217
    19fe:	0e 94 86 0c 	call	0x190c	; 0x190c <readRegByte>
  switch(status_id) {
    case PIO_STATUS_VERSION:
      *value = rev;
      return PIO_OK;
    case PIO_STATUS_LINK_UP:
      *value = (readPhyByte(PHSTAT2) >> 2) & 1;
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	96 95       	lsr	r25
    1a06:	87 95       	ror	r24
    1a08:	96 95       	lsr	r25
    1a0a:	87 95       	ror	r24
    1a0c:	81 70       	andi	r24, 0x01	; 1
    1a0e:	88 83       	st	Y, r24
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <enc28j60_status+0x58>
      return PIO_OK;
    default:
      *value = 0;
    1a14:	18 82       	st	Y, r1
    1a16:	81 e0       	ldi	r24, 0x01	; 1
      return PIO_NOT_FOUND;
  }
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	08 95       	ret

00001a1e <enc28j60_send>:
#endif

// ---------- send ----------

uint8_t enc28j60_send(const uint8_t *data, uint16_t size)
{
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	ec 01       	movw	r28, r24
    1a28:	8b 01       	movw	r16, r22
	#ifdef NOENC
	return 0;
	#endif
  // prepare tx buffer write
  writeReg(EWRPT, TXSTART_INIT);
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	7a e1       	ldi	r23, 0x1A	; 26
    1a30:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
  writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    1a34:	8a e7       	ldi	r24, 0x7A	; 122
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
    1a3e:	e5 e2       	ldi	r30, 0x25	; 37
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	82 60       	ori	r24, 0x02	; 2
    1a46:	80 83       	st	Z, r24
    1a48:	80 81       	ld	r24, Z
    1a4a:	8b 7f       	andi	r24, 0xFB	; 251
    1a4c:	80 83       	st	Z, r24
    1a4e:	8a e7       	ldi	r24, 0x7A	; 122
    1a50:	8e bd       	out	0x2e, r24	; 46
    1a52:	ed e4       	ldi	r30, 0x4D	; 77
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	88 23       	and	r24, r24
    1a5a:	ec f7       	brge	.-6      	; 0x1a56 <enc28j60_send+0x38>
    1a5c:	98 01       	movw	r18, r16
    1a5e:	ae e4       	ldi	r26, 0x4E	; 78
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	ed e4       	ldi	r30, 0x4D	; 77
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <enc28j60_send+0x5a>
  // fill buffer
  uint16_t num = size;
  spiEnableEth(),
  spiWriteByte(ENC28J60_WRITE_BUF_MEM);
  while(num--) {
    spiWriteByte(*data++);
    1a68:	88 81       	ld	r24, Y
    1a6a:	8c 93       	st	X, r24
    1a6c:	80 81       	ld	r24, Z
    1a6e:	88 23       	and	r24, r24
    1a70:	ec f7       	brge	.-6      	; 0x1a6c <enc28j60_send+0x4e>
    1a72:	21 96       	adiw	r28, 0x01	; 1
    1a74:	21 50       	subi	r18, 0x01	; 1
    1a76:	30 40       	sbci	r19, 0x00	; 0

  // fill buffer
  uint16_t num = size;
  spiEnableEth(),
  spiWriteByte(ENC28J60_WRITE_BUF_MEM);
  while(num--) {
    1a78:	21 15       	cp	r18, r1
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	a9 f7       	brne	.-22     	; 0x1a68 <enc28j60_send+0x4a>
    1a7e:	e5 e2       	ldi	r30, 0x25	; 37
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	84 60       	ori	r24, 0x04	; 4
    1a86:	80 83       	st	Z, r24
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <enc28j60_send+0x8a>
  }
  spiDisableEth();

  // wait for tx ready
  while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
      if (readRegByte(EIR) & EIR_TXERIF) {
    1a8a:	8c e1       	ldi	r24, 0x1C	; 28
    1a8c:	0e 94 86 0c 	call	0x190c	; 0x190c <readRegByte>
    1a90:	81 ff       	sbrs	r24, 1
    1a92:	0a c0       	rjmp	.+20     	; 0x1aa8 <enc28j60_send+0x8a>
          writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
    1a94:	80 e8       	ldi	r24, 0x80	; 128
    1a96:	6f e1       	ldi	r22, 0x1F	; 31
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
          writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
    1a9e:	80 ea       	ldi	r24, 0xA0	; 160
    1aa0:	6f e1       	ldi	r22, 0x1F	; 31
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
    spiWriteByte(*data++);
  }
  spiDisableEth();

  // wait for tx ready
  while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	6f e1       	ldi	r22, 0x1F	; 31
    1aac:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <readOp>
    1ab0:	83 fd       	sbrc	r24, 3
    1ab2:	eb cf       	rjmp	.-42     	; 0x1a8a <enc28j60_send+0x6c>
          writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
          writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
      }

  // initiate send
  writeReg(ETXND, TXSTART_INIT+size);
    1ab4:	b8 01       	movw	r22, r16
    1ab6:	60 50       	subi	r22, 0x00	; 0
    1ab8:	76 4e       	sbci	r23, 0xE6	; 230
    1aba:	86 e0       	ldi	r24, 0x06	; 6
    1abc:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
    1ac0:	80 e8       	ldi	r24, 0x80	; 128
    1ac2:	6f e1       	ldi	r22, 0x1F	; 31
    1ac4:	48 e0       	ldi	r20, 0x08	; 8
    1ac6:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
  return PIO_OK;
}
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	08 95       	ret

00001ad6 <enc28j60_has_recv>:
uint8_t enc28j60_has_recv(void)
{
	#ifdef NOENC
	return 0;
	#endif
  return readRegByte(EPKTCNT);
    1ad6:	89 e3       	ldi	r24, 0x39	; 57
    1ad8:	0e 94 86 0c 	call	0x190c	; 0x190c <readRegByte>
}
    1adc:	08 95       	ret

00001ade <enc28j60_init>:
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/);
}

// TODO(KaiN#1): merge flags with pio_util_get_init_flags()?
uint8_t enc28j60_init(const uint8_t macaddr[6], uint8_t flags)
{
    1ade:	df 92       	push	r13
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	0f 92       	push	r0
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	7c 01       	movw	r14, r24
    1af4:	d6 2e       	mov	r13, r22
	#ifdef NOENC
	return 0;
	#endif

  spiInit(); // TODO(KaiN#7): move to main/bridge
    1af6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <spiInit>
    1afa:	e5 e2       	ldi	r30, 0x25	; 37
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	84 60       	ori	r24, 0x04	; 4
    1b02:	80 83       	st	Z, r24
  spiDisableEth();

  is_full_duplex = (flags & PIO_INIT_FULL_DUPLEX) == PIO_INIT_FULL_DUPLEX;
    1b04:	8d 2d       	mov	r24, r13
    1b06:	81 70       	andi	r24, 0x01	; 1
    1b08:	80 93 48 01 	sts	0x0148, r24

  // soft reset cpu
  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	4f ef       	ldi	r20, 0xFF	; 255
    1b12:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
  timerDelay100us(20); // errata B7/2
    1b16:	84 e1       	ldi	r24, 0x14	; 20
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 98 01 	call	0x330	; 0x330 <timerDelay100us>
    1b1e:	00 e0       	ldi	r16, 0x00	; 0
    1b20:	10 e0       	ldi	r17, 0x00	; 0
    1b22:	0b c0       	rjmp	.+22     	; 0x1b3a <enc28j60_init+0x5c>

  // wait or error
  uint16_t count = 0;
  while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY) {
		timerDelay100us(1);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0e 94 98 01 	call	0x330	; 0x330 <timerDelay100us>
    ++count;
    1b2c:	0f 5f       	subi	r16, 0xFF	; 255
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    if(count == 0xfff) {
    1b30:	8f e0       	ldi	r24, 0x0F	; 15
    1b32:	0f 3f       	cpi	r16, 0xFF	; 255
    1b34:	18 07       	cpc	r17, r24
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <enc28j60_init+0x5c>
    1b38:	c6 c0       	rjmp	.+396    	; 0x1cc6 <enc28j60_init+0x1e8>
  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
  timerDelay100us(20); // errata B7/2

  // wait or error
  uint16_t count = 0;
  while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY) {
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	6d e1       	ldi	r22, 0x1D	; 29
    1b3e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <readOp>
    1b42:	88 23       	and	r24, r24
    1b44:	79 f3       	breq	.-34     	; 0x1b24 <enc28j60_init+0x46>
      return PIO_NOT_FOUND;
    }
  }

  // set packet pointers
  gNextPacketPtr = RXSTART_INIT;
    1b46:	10 92 47 01 	sts	0x0147, r1
    1b4a:	10 92 46 01 	sts	0x0146, r1
  writeReg(ERXST, RXSTART_INIT);
    1b4e:	88 e0       	ldi	r24, 0x08	; 8
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
  writeReg(ERXRDPT, RXSTART_INIT);
    1b58:	8c e0       	ldi	r24, 0x0C	; 12
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
  writeReg(ERXND, RXSTOP_INIT);
    1b62:	8a e0       	ldi	r24, 0x0A	; 10
    1b64:	6f ef       	ldi	r22, 0xFF	; 255
    1b66:	79 e1       	ldi	r23, 0x19	; 25
    1b68:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
  writeReg(ETXST, TXSTART_INIT);
    1b6c:	84 e0       	ldi	r24, 0x04	; 4
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	7a e1       	ldi	r23, 0x1A	; 26
    1b72:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
  writeReg(ETXND, TXSTOP_INIT);
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	6f ef       	ldi	r22, 0xFF	; 255
    1b7a:	7f e1       	ldi	r23, 0x1F	; 31
    1b7c:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>

  // set packet filter
  if(flags & PIO_INIT_BROAD_CAST) {
    1b80:	d2 fe       	sbrs	r13, 2
    1b82:	05 c0       	rjmp	.+10     	; 0x1b8e <enc28j60_init+0xb0>
static inline void enc28j60_enable_broadcast ( void )
{
	#ifdef NOENC
	return;
	#endif
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/|ERXFCON_BCEN);
    1b84:	88 e3       	ldi	r24, 0x38	; 56
    1b86:	61 ea       	ldi	r22, 0xA1	; 161
    1b88:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <enc28j60_init+0xb8>
static inline void enc28j60_disable_broadcast ( void )
{
	#ifdef NOENC
	return;
	#endif
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/);
    1b8e:	88 e3       	ldi	r24, 0x38	; 56
    1b90:	60 ea       	ldi	r22, 0xA0	; 160
    1b92:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
  } else {
    enc28j60_disable_broadcast(); // change to add ERXFCON_BCEN recommended by epam
  }

  // BIST pattern generator?
  writeReg(EPMM0, 0x303f);
    1b96:	88 e2       	ldi	r24, 0x28	; 40
    1b98:	6f e3       	ldi	r22, 0x3F	; 63
    1b9a:	70 e3       	ldi	r23, 0x30	; 48
    1b9c:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
  writeReg(EPMCS, 0xf7f9);
    1ba0:	80 e3       	ldi	r24, 0x30	; 48
    1ba2:	69 ef       	ldi	r22, 0xF9	; 249
    1ba4:	77 ef       	ldi	r23, 0xF7	; 247
    1ba6:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>

  // MAC init (with flow control)
  writeRegByte(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
    1baa:	80 ec       	ldi	r24, 0xC0	; 192
    1bac:	6d e0       	ldi	r22, 0x0D	; 13
    1bae:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
  writeRegByte(MACON2, 0x00);
    1bb2:	81 ec       	ldi	r24, 0xC1	; 193
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
  uint8_t mac3val = MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN;
  if(is_full_duplex) {
    1bba:	80 91 48 01 	lds	r24, 0x0148
    1bbe:	88 23       	and	r24, r24
    1bc0:	11 f0       	breq	.+4      	; 0x1bc6 <enc28j60_init+0xe8>
    1bc2:	63 e3       	ldi	r22, 0x33	; 51
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <enc28j60_init+0xea>
    1bc6:	62 e3       	ldi	r22, 0x32	; 50
    mac3val |= MACON3_FULDPX;
  }
  writeRegByte(MACON3, mac3val);
    1bc8:	82 ec       	ldi	r24, 0xC2	; 194
    1bca:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>

  if(is_full_duplex) {
    1bce:	80 91 48 01 	lds	r24, 0x0148
    1bd2:	88 23       	and	r24, r24
    1bd4:	51 f0       	breq	.+20     	; 0x1bea <enc28j60_init+0x10c>
    writeRegByte(MABBIPG, 0x15);
    1bd6:	84 ec       	ldi	r24, 0xC4	; 196
    1bd8:	65 e1       	ldi	r22, 0x15	; 21
    1bda:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
    writeReg(MAIPG, 0x0012);
    1bde:	86 ec       	ldi	r24, 0xC6	; 198
    1be0:	62 e1       	ldi	r22, 0x12	; 18
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
    1be8:	09 c0       	rjmp	.+18     	; 0x1bfc <enc28j60_init+0x11e>
  } else {
    writeRegByte(MABBIPG, 0x12);
    1bea:	84 ec       	ldi	r24, 0xC4	; 196
    1bec:	62 e1       	ldi	r22, 0x12	; 18
    1bee:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
    writeReg(MAIPG, 0x0C12);
    1bf2:	86 ec       	ldi	r24, 0xC6	; 198
    1bf4:	62 e1       	ldi	r22, 0x12	; 18
    1bf6:	7c e0       	ldi	r23, 0x0C	; 12
    1bf8:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
  }
  writeReg(MAMXFL, MAX_FRAMELEN);
    1bfc:	8a ec       	ldi	r24, 0xCA	; 202
    1bfe:	6e ee       	ldi	r22, 0xEE	; 238
    1c00:	75 e0       	ldi	r23, 0x05	; 5
    1c02:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>

  // PHY init
  if(is_full_duplex) {
    1c06:	80 91 48 01 	lds	r24, 0x0148
    1c0a:	88 23       	and	r24, r24
    1c0c:	59 f0       	breq	.+22     	; 0x1c24 <enc28j60_init+0x146>
    writePhy(PHCON1, PHCON1_PDPXMD);
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	71 e0       	ldi	r23, 0x01	; 1
    1c14:	0e 94 ac 0c 	call	0x1958	; 0x1958 <writePhy>
    writePhy(PHCON2, 0);
    1c18:	80 e1       	ldi	r24, 0x10	; 16
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <writePhy>
    1c22:	0a c0       	rjmp	.+20     	; 0x1c38 <enc28j60_init+0x15a>
  } else {
    writePhy(PHCON1, 0);
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <writePhy>
    writePhy(PHCON2, PHCON2_HDLDIS);
    1c2e:	80 e1       	ldi	r24, 0x10	; 16
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	71 e0       	ldi	r23, 0x01	; 1
    1c34:	0e 94 ac 0c 	call	0x1958	; 0x1958 <writePhy>
  }

  // prepare flow control
  writeReg(EPAUS, 20 * 100); // 100ms
    1c38:	88 e7       	ldi	r24, 0x78	; 120
    1c3a:	60 ed       	ldi	r22, 0xD0	; 208
    1c3c:	77 e0       	ldi	r23, 0x07	; 7
    1c3e:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>

  // return rev
  rev = readRegByte(EREVID);
    1c42:	82 e7       	ldi	r24, 0x72	; 114
    1c44:	0e 94 86 0c 	call	0x190c	; 0x190c <readRegByte>
    1c48:	80 93 49 01 	sts	0x0149, r24
  // microchip forgot to step the number on the silcon when they
  // released the revision B7. 6 is now rev B7. We still have
  // to see what they do when they release B8. At the moment
  // there is no B8 out yet
  if (rev > 5) ++rev;
    1c4c:	86 30       	cpi	r24, 0x06	; 6
    1c4e:	18 f0       	brcs	.+6      	; 0x1c56 <enc28j60_init+0x178>
    1c50:	8f 5f       	subi	r24, 0xFF	; 255
    1c52:	80 93 49 01 	sts	0x0149, r24

  // set mac
  writeRegByte(MAADR5, macaddr[0]);
    1c56:	84 ee       	ldi	r24, 0xE4	; 228
    1c58:	f7 01       	movw	r30, r14
    1c5a:	60 81       	ld	r22, Z
    1c5c:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
  writeRegByte(MAADR4, macaddr[1]);
    1c60:	85 ee       	ldi	r24, 0xE5	; 229
    1c62:	f7 01       	movw	r30, r14
    1c64:	61 81       	ldd	r22, Z+1	; 0x01
    1c66:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
  writeRegByte(MAADR3, macaddr[2]);
    1c6a:	82 ee       	ldi	r24, 0xE2	; 226
    1c6c:	f7 01       	movw	r30, r14
    1c6e:	62 81       	ldd	r22, Z+2	; 0x02
    1c70:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
  writeRegByte(MAADR2, macaddr[3]);
    1c74:	83 ee       	ldi	r24, 0xE3	; 227
    1c76:	f7 01       	movw	r30, r14
    1c78:	63 81       	ldd	r22, Z+3	; 0x03
    1c7a:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
  writeRegByte(MAADR1, macaddr[4]);
    1c7e:	80 ee       	ldi	r24, 0xE0	; 224
    1c80:	f7 01       	movw	r30, r14
    1c82:	64 81       	ldd	r22, Z+4	; 0x04
    1c84:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>
  writeRegByte(MAADR0, macaddr[5]);
    1c88:	81 ee       	ldi	r24, 0xE1	; 225
    1c8a:	f7 01       	movw	r30, r14
    1c8c:	65 81       	ldd	r22, Z+5	; 0x05
    1c8e:	0e 94 90 0c 	call	0x1920	; 0x1920 <writeRegByte>

  SetBank(ECON1);
    1c92:	8f e1       	ldi	r24, 0x1F	; 31
    1c94:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <SetBank>
  writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
    1c98:	80 e8       	ldi	r24, 0x80	; 128
    1c9a:	6b e1       	ldi	r22, 0x1B	; 27
    1c9c:	40 ec       	ldi	r20, 0xC0	; 192
    1c9e:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
    1ca2:	80 e8       	ldi	r24, 0x80	; 128
    1ca4:	6f e1       	ldi	r22, 0x1F	; 31
    1ca6:	44 e0       	ldi	r20, 0x04	; 4
    1ca8:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>

  // Code moved from pio_init
	uint8_t rev, result;
	result = enc28j60_status(PIO_STATUS_VERSION, &rev);
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	be 01       	movw	r22, r28
    1cb0:	6f 5f       	subi	r22, 0xFF	; 255
    1cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb4:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <enc28j60_status>
	if(result == PIO_OK) {
    1cb8:	88 23       	and	r24, r24
    1cba:	29 f4       	brne	.+10     	; 0x1cc6 <enc28j60_init+0x1e8>
		g_ubEncOnline = 1;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	80 93 44 01 	sts	0x0144, r24
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <enc28j60_init+0x1ea>
		return PIO_OK;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
	}

  return PIO_NOT_FOUND;
}
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	08 95       	ret

00001cda <enc28j60_recv>:
  *got_size = header.byteCount - 4; //remove the CRC count
  return header.status;
}

uint8_t enc28j60_recv(uint8_t *data, uint16_t max_size, uint16_t *got_size)
{
    1cda:	af 92       	push	r10
    1cdc:	bf 92       	push	r11
    1cde:	cf 92       	push	r12
    1ce0:	df 92       	push	r13
    1ce2:	ef 92       	push	r14
    1ce4:	ff 92       	push	r15
    1ce6:	0f 93       	push	r16
    1ce8:	1f 93       	push	r17
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <enc28j60_recv+0x16>
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <enc28j60_recv+0x18>
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <enc28j60_recv+0x1a>
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	5c 01       	movw	r10, r24
    1cfa:	6b 01       	movw	r12, r22
    1cfc:	8a 01       	movw	r16, r20
	#ifdef NOENC
	return 0;
	#endif
  writeReg(ERDPT, gNextPacketPtr);
    1cfe:	60 91 46 01 	lds	r22, 0x0146
    1d02:	70 91 47 01 	lds	r23, 0x0147
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
		uint16_t nextPacket;
		uint16_t byteCount;
		uint16_t status;
  } header;

  readBuf(sizeof header, (uint8_t*) &header);
    1d0c:	86 e0       	ldi	r24, 0x06	; 6
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	be 01       	movw	r22, r28
    1d12:	6f 5f       	subi	r22, 0xFF	; 255
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	0e 94 3b 0c 	call	0x1876	; 0x1876 <readBuf>

  gNextPacketPtr  = header.nextPacket;
    1d1a:	e9 80       	ldd	r14, Y+1	; 0x01
    1d1c:	fa 80       	ldd	r15, Y+2	; 0x02
    1d1e:	f0 92 47 01 	sts	0x0147, r15
    1d22:	e0 92 46 01 	sts	0x0146, r14
  *got_size = header.byteCount - 4; //remove the CRC count
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2a:	9c 01       	movw	r18, r24
    1d2c:	24 50       	subi	r18, 0x04	; 4
    1d2e:	30 40       	sbci	r19, 0x00	; 0
    1d30:	f8 01       	movw	r30, r16
    1d32:	31 83       	std	Z+1, r19	; 0x01
    1d34:	20 83       	st	Z, r18

  // read chip's packet header
  uint8_t status = read_hdr(got_size);

  // was a receive error?
  if ((status & 0x80)==0) {
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	88 23       	and	r24, r24
    1d3a:	bc f0       	brlt	.+46     	; 0x1d6a <enc28j60_recv+0x90>
inline static void next_pkt(void)
{
	#ifdef NOENC
	return;
	#endif
  if (gNextPacketPtr - 1 > RXSTOP_INIT)
    1d3c:	b7 01       	movw	r22, r14
    1d3e:	61 50       	subi	r22, 0x01	; 1
    1d40:	70 40       	sbci	r23, 0x00	; 0
    1d42:	fa e1       	ldi	r31, 0x1A	; 26
    1d44:	60 30       	cpi	r22, 0x00	; 0
    1d46:	7f 07       	cpc	r23, r31
    1d48:	30 f0       	brcs	.+12     	; 0x1d56 <enc28j60_recv+0x7c>
      writeReg(ERXRDPT, RXSTOP_INIT);
    1d4a:	8c e0       	ldi	r24, 0x0C	; 12
    1d4c:	6f ef       	ldi	r22, 0xFF	; 255
    1d4e:	79 e1       	ldi	r23, 0x19	; 25
    1d50:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
    1d54:	03 c0       	rjmp	.+6      	; 0x1d5c <enc28j60_recv+0x82>
  else
      writeReg(ERXRDPT, gNextPacketPtr - 1);
    1d56:	8c e0       	ldi	r24, 0x0C	; 12
    1d58:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1d5c:	80 e8       	ldi	r24, 0x80	; 128
    1d5e:	6e e1       	ldi	r22, 0x1E	; 30
    1d60:	40 e4       	ldi	r20, 0x40	; 64
    1d62:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
    1d66:	03 e0       	ldi	r16, 0x03	; 3
    1d68:	20 c0       	rjmp	.+64     	; 0x1daa <enc28j60_recv+0xd0>
  }

  // check size
  uint16_t len = *got_size;
  uint8_t result = PIO_OK;
  if(len > max_size) {
    1d6a:	c2 16       	cp	r12, r18
    1d6c:	d3 06       	cpc	r13, r19
    1d6e:	18 f4       	brcc	.+6      	; 0x1d76 <enc28j60_recv+0x9c>
    1d70:	96 01       	movw	r18, r12
    1d72:	02 e0       	ldi	r16, 0x02	; 2
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <enc28j60_recv+0x9e>
    1d76:	00 e0       	ldi	r16, 0x00	; 0
    len = max_size;
    result = PIO_TOO_LARGE;
  }

  // read packet
  readBuf(len, data);
    1d78:	c9 01       	movw	r24, r18
    1d7a:	b5 01       	movw	r22, r10
    1d7c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <readBuf>
inline static void next_pkt(void)
{
	#ifdef NOENC
	return;
	#endif
  if (gNextPacketPtr - 1 > RXSTOP_INIT)
    1d80:	b7 01       	movw	r22, r14
    1d82:	61 50       	subi	r22, 0x01	; 1
    1d84:	70 40       	sbci	r23, 0x00	; 0
    1d86:	8a e1       	ldi	r24, 0x1A	; 26
    1d88:	60 30       	cpi	r22, 0x00	; 0
    1d8a:	78 07       	cpc	r23, r24
    1d8c:	30 f0       	brcs	.+12     	; 0x1d9a <enc28j60_recv+0xc0>
      writeReg(ERXRDPT, RXSTOP_INIT);
    1d8e:	8c e0       	ldi	r24, 0x0C	; 12
    1d90:	6f ef       	ldi	r22, 0xFF	; 255
    1d92:	79 e1       	ldi	r23, 0x19	; 25
    1d94:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <enc28j60_recv+0xc6>
  else
      writeReg(ERXRDPT, gNextPacketPtr - 1);
    1d9a:	8c e0       	ldi	r24, 0x0C	; 12
    1d9c:	0e 94 9e 0c 	call	0x193c	; 0x193c <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1da0:	80 e8       	ldi	r24, 0x80	; 128
    1da2:	6e e1       	ldi	r22, 0x1E	; 30
    1da4:	40 e4       	ldi	r20, 0x40	; 64
    1da6:	0e 94 1f 0c 	call	0x183e	; 0x183e <writeOp>
  // read packet
  readBuf(len, data);

  next_pkt();
  return result;
}
    1daa:	80 2f       	mov	r24, r16
    1dac:	26 96       	adiw	r28, 0x06	; 6
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	ef 90       	pop	r14
    1dc4:	df 90       	pop	r13
    1dc6:	cf 90       	pop	r12
    1dc8:	bf 90       	pop	r11
    1dca:	af 90       	pop	r10
    1dcc:	08 95       	ret

00001dce <spiInit>:
#include "spi.h"

void spiInit(void)
{
	// output: CS, MOSI, SCK, input: MISO, card detect, write protect
	SPI_DDR |= SPI_SCK | SPI_MOSI | SD_CS | ETH_CS;
    1dce:	e4 e2       	ldi	r30, 0x24	; 36
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8e 62       	ori	r24, 0x2E	; 46
    1dd6:	80 83       	st	Z, r24
	SPI_DDR &= ~(SPI_MISO | SD_DETECT | SD_LOCK);
    1dd8:	80 81       	ld	r24, Z
    1dda:	8e 76       	andi	r24, 0x6E	; 110
    1ddc:	80 83       	st	Z, r24

	// MOSI, SCK = 0, Eth CS = 1
	SPI_PORT &= ~(SPI_MOSI | SPI_SCK);
    1dde:	e5 e2       	ldi	r30, 0x25	; 37
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	87 7d       	andi	r24, 0xD7	; 215
    1de6:	80 83       	st	Z, r24
    1de8:	80 81       	ld	r24, Z
    1dea:	84 60       	ori	r24, 0x04	; 4
    1dec:	80 83       	st	Z, r24
    1dee:	80 81       	ld	r24, Z
    1df0:	82 60       	ori	r24, 0x02	; 2
    1df2:	80 83       	st	Z, r24
	spiDisableAll();

  SPCR = _BV(SPE) | _BV(MSTR); // 8 MHz @ 16
    1df4:	80 e5       	ldi	r24, 0x50	; 80
    1df6:	8c bd       	out	0x2c, r24	; 44
	SPSR = _BV(SPI2X);
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	8d bd       	out	0x2d, r24	; 45
}
    1dfc:	08 95       	ret

00001dfe <stats_reset>:
#include "base/uart.h"

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
    1dfe:	e3 e6       	ldi	r30, 0x63	; 99
    1e00:	f7 e0       	ldi	r31, 0x07	; 7
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    1e02:	23 e9       	ldi	r18, 0x93	; 147
    1e04:	37 e0       	ldi	r19, 0x07	; 7
    stats_t *s = &stats[i];
    s->bytes = 0;
    1e06:	10 82       	st	Z, r1
    1e08:	11 82       	std	Z+1, r1	; 0x01
    1e0a:	12 82       	std	Z+2, r1	; 0x02
    1e0c:	13 82       	std	Z+3, r1	; 0x03
    s->cnt = 0;
    1e0e:	15 82       	std	Z+5, r1	; 0x05
    1e10:	14 82       	std	Z+4, r1	; 0x04
    s->err = 0;
    1e12:	17 82       	std	Z+7, r1	; 0x07
    1e14:	16 82       	std	Z+6, r1	; 0x06
    s->drop = 0;
    1e16:	11 86       	std	Z+9, r1	; 0x09
    1e18:	10 86       	std	Z+8, r1	; 0x08
    s->max_rate = 0;
    1e1a:	13 86       	std	Z+11, r1	; 0x0b
    1e1c:	12 86       	std	Z+10, r1	; 0x0a
    1e1e:	3c 96       	adiw	r30, 0x0c	; 12

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    1e20:	e2 17       	cp	r30, r18
    1e22:	f3 07       	cpc	r31, r19
    1e24:	81 f7       	brne	.-32     	; 0x1e06 <stats_reset+0x8>
    s->cnt = 0;
    s->err = 0;
    s->drop = 0;
    s->max_rate = 0;
  }
}
    1e26:	08 95       	ret

00001e28 <stats_update_ok>:

void stats_update_ok(uint8_t id, uint16_t size, uint16_t rate)
{
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
  stats_t *s = &stats[id];
    1e2c:	9c e0       	ldi	r25, 0x0C	; 12
    1e2e:	89 9f       	mul	r24, r25
    1e30:	c0 01       	movw	r24, r0
    1e32:	11 24       	eor	r1, r1
    1e34:	fc 01       	movw	r30, r24
    1e36:	ed 59       	subi	r30, 0x9D	; 157
    1e38:	f8 4f       	sbci	r31, 0xF8	; 248
  s->cnt++;
    1e3a:	84 81       	ldd	r24, Z+4	; 0x04
    1e3c:	95 81       	ldd	r25, Z+5	; 0x05
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	95 83       	std	Z+5, r25	; 0x05
    1e42:	84 83       	std	Z+4, r24	; 0x04
  s->bytes += size;
    1e44:	8b 01       	movw	r16, r22
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	a2 81       	ldd	r26, Z+2	; 0x02
    1e50:	b3 81       	ldd	r27, Z+3	; 0x03
    1e52:	80 0f       	add	r24, r16
    1e54:	91 1f       	adc	r25, r17
    1e56:	a2 1f       	adc	r26, r18
    1e58:	b3 1f       	adc	r27, r19
    1e5a:	80 83       	st	Z, r24
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	a2 83       	std	Z+2, r26	; 0x02
    1e60:	b3 83       	std	Z+3, r27	; 0x03
  if(rate > s->max_rate) {
    1e62:	82 85       	ldd	r24, Z+10	; 0x0a
    1e64:	93 85       	ldd	r25, Z+11	; 0x0b
    1e66:	84 17       	cp	r24, r20
    1e68:	95 07       	cpc	r25, r21
    1e6a:	10 f4       	brcc	.+4      	; 0x1e70 <stats_update_ok+0x48>
    s->max_rate = rate;
    1e6c:	53 87       	std	Z+11, r21	; 0x0b
    1e6e:	42 87       	std	Z+10, r20	; 0x0a
  }
}
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	08 95       	ret

00001e76 <dump_line>:
      break;
    default:
			// NOTE: UART - ?
      break;
  }
}
    1e76:	08 95       	ret

00001e78 <dump_header>:

static void dump_header(void)
{
	// NOTE: UART - cnt  bytes    err  drop rate\r\n
}
    1e78:	08 95       	ret

00001e7a <stats_dump_all>:
{
  dump_header();
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    dump_line(i);
  }
}
    1e7a:	08 95       	ret

00001e7c <stats_dump>:
  }
  if(pio) {
    dump_line(STATS_ID_PIO_RX);
    dump_line(STATS_ID_PIO_TX);
  }
}
    1e7c:	08 95       	ret

00001e7e <__mulsi3>:
    1e7e:	62 9f       	mul	r22, r18
    1e80:	d0 01       	movw	r26, r0
    1e82:	73 9f       	mul	r23, r19
    1e84:	f0 01       	movw	r30, r0
    1e86:	82 9f       	mul	r24, r18
    1e88:	e0 0d       	add	r30, r0
    1e8a:	f1 1d       	adc	r31, r1
    1e8c:	64 9f       	mul	r22, r20
    1e8e:	e0 0d       	add	r30, r0
    1e90:	f1 1d       	adc	r31, r1
    1e92:	92 9f       	mul	r25, r18
    1e94:	f0 0d       	add	r31, r0
    1e96:	83 9f       	mul	r24, r19
    1e98:	f0 0d       	add	r31, r0
    1e9a:	74 9f       	mul	r23, r20
    1e9c:	f0 0d       	add	r31, r0
    1e9e:	65 9f       	mul	r22, r21
    1ea0:	f0 0d       	add	r31, r0
    1ea2:	99 27       	eor	r25, r25
    1ea4:	72 9f       	mul	r23, r18
    1ea6:	b0 0d       	add	r27, r0
    1ea8:	e1 1d       	adc	r30, r1
    1eaa:	f9 1f       	adc	r31, r25
    1eac:	63 9f       	mul	r22, r19
    1eae:	b0 0d       	add	r27, r0
    1eb0:	e1 1d       	adc	r30, r1
    1eb2:	f9 1f       	adc	r31, r25
    1eb4:	bd 01       	movw	r22, r26
    1eb6:	cf 01       	movw	r24, r30
    1eb8:	11 24       	eor	r1, r1
    1eba:	08 95       	ret

00001ebc <__udivmodqi4>:
    1ebc:	99 1b       	sub	r25, r25
    1ebe:	79 e0       	ldi	r23, 0x09	; 9
    1ec0:	04 c0       	rjmp	.+8      	; 0x1eca <__udivmodqi4_ep>

00001ec2 <__udivmodqi4_loop>:
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	96 17       	cp	r25, r22
    1ec6:	08 f0       	brcs	.+2      	; 0x1eca <__udivmodqi4_ep>
    1ec8:	96 1b       	sub	r25, r22

00001eca <__udivmodqi4_ep>:
    1eca:	88 1f       	adc	r24, r24
    1ecc:	7a 95       	dec	r23
    1ece:	c9 f7       	brne	.-14     	; 0x1ec2 <__udivmodqi4_loop>
    1ed0:	80 95       	com	r24
    1ed2:	08 95       	ret

00001ed4 <__udivmodsi4>:
    1ed4:	a1 e2       	ldi	r26, 0x21	; 33
    1ed6:	1a 2e       	mov	r1, r26
    1ed8:	aa 1b       	sub	r26, r26
    1eda:	bb 1b       	sub	r27, r27
    1edc:	fd 01       	movw	r30, r26
    1ede:	0d c0       	rjmp	.+26     	; 0x1efa <__udivmodsi4_ep>

00001ee0 <__udivmodsi4_loop>:
    1ee0:	aa 1f       	adc	r26, r26
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	ee 1f       	adc	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	a2 17       	cp	r26, r18
    1eea:	b3 07       	cpc	r27, r19
    1eec:	e4 07       	cpc	r30, r20
    1eee:	f5 07       	cpc	r31, r21
    1ef0:	20 f0       	brcs	.+8      	; 0x1efa <__udivmodsi4_ep>
    1ef2:	a2 1b       	sub	r26, r18
    1ef4:	b3 0b       	sbc	r27, r19
    1ef6:	e4 0b       	sbc	r30, r20
    1ef8:	f5 0b       	sbc	r31, r21

00001efa <__udivmodsi4_ep>:
    1efa:	66 1f       	adc	r22, r22
    1efc:	77 1f       	adc	r23, r23
    1efe:	88 1f       	adc	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	1a 94       	dec	r1
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <__udivmodsi4_loop>
    1f06:	60 95       	com	r22
    1f08:	70 95       	com	r23
    1f0a:	80 95       	com	r24
    1f0c:	90 95       	com	r25
    1f0e:	9b 01       	movw	r18, r22
    1f10:	ac 01       	movw	r20, r24
    1f12:	bd 01       	movw	r22, r26
    1f14:	cf 01       	movw	r24, r30
    1f16:	08 95       	ret

00001f18 <__eerd_block_m328p>:
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22

00001f1c <__eerd_blraw_m328p>:
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	f9 99       	sbic	0x1f, 1	; 31
    1f20:	fe cf       	rjmp	.-4      	; 0x1f1e <__eerd_blraw_m328p+0x2>
    1f22:	06 c0       	rjmp	.+12     	; 0x1f30 <__eerd_blraw_m328p+0x14>
    1f24:	f2 bd       	out	0x22, r31	; 34
    1f26:	e1 bd       	out	0x21, r30	; 33
    1f28:	f8 9a       	sbi	0x1f, 0	; 31
    1f2a:	31 96       	adiw	r30, 0x01	; 1
    1f2c:	00 b4       	in	r0, 0x20	; 32
    1f2e:	0d 92       	st	X+, r0
    1f30:	41 50       	subi	r20, 0x01	; 1
    1f32:	50 40       	sbci	r21, 0x00	; 0
    1f34:	b8 f7       	brcc	.-18     	; 0x1f24 <__eerd_blraw_m328p+0x8>
    1f36:	08 95       	ret

00001f38 <__eerd_word_m328p>:
    1f38:	a8 e1       	ldi	r26, 0x18	; 24
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	42 e0       	ldi	r20, 0x02	; 2
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__eerd_blraw_m328p>

00001f44 <__eewr_block_m328p>:
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	03 c0       	rjmp	.+6      	; 0x1f50 <__eewr_block_m328p+0xc>
    1f4a:	2d 91       	ld	r18, X+
    1f4c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__eewr_r18_m328p>
    1f50:	41 50       	subi	r20, 0x01	; 1
    1f52:	50 40       	sbci	r21, 0x00	; 0
    1f54:	d0 f7       	brcc	.-12     	; 0x1f4a <__eewr_block_m328p+0x6>
    1f56:	08 95       	ret

00001f58 <__eewr_byte_m328p>:
    1f58:	26 2f       	mov	r18, r22

00001f5a <__eewr_r18_m328p>:
    1f5a:	f9 99       	sbic	0x1f, 1	; 31
    1f5c:	fe cf       	rjmp	.-4      	; 0x1f5a <__eewr_r18_m328p>
    1f5e:	1f ba       	out	0x1f, r1	; 31
    1f60:	92 bd       	out	0x22, r25	; 34
    1f62:	81 bd       	out	0x21, r24	; 33
    1f64:	20 bd       	out	0x20, r18	; 32
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	fa 9a       	sbi	0x1f, 2	; 31
    1f6c:	f9 9a       	sbi	0x1f, 1	; 31
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	08 95       	ret

00001f74 <__eewr_word_m328p>:
    1f74:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__eewr_byte_m328p>
    1f78:	27 2f       	mov	r18, r23
    1f7a:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__eewr_r18_m328p>

00001f7e <_exit>:
    1f7e:	f8 94       	cli

00001f80 <__stop_program>:
    1f80:	ff cf       	rjmp	.-2      	; 0x1f80 <__stop_program>

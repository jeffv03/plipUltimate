
bin\Debug\plipUltimate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00003dc8  00003e9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003dc8  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ab  0080013c  0080013c  00003ed8  2**0
                  ALLOC
  3 .eeprom       00000015  00810000  00810000  00003ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  00003eed  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .debug_aranges 00000320  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000009e3  00000000  00000000  00004210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000078d7  00000000  00000000  00004bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000022f6  00000000  00000000  0000c4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004936  00000000  00000000  0000e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000aa0  00000000  00000000  000130f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000016ab  00000000  00000000  00013b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003237  00000000  00000000  00015243  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d8  00000000  00000000  0001847a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__ctors_end>
       4:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
       8:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
       c:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      10:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      14:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      18:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      1c:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__vector_7>
      20:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      24:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      28:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      2c:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      30:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      34:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      38:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      3c:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      40:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      44:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      48:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__vector_18>
      4c:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      50:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      54:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      58:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      5c:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      60:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>
      64:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__bad_interrupt>

00000068 <__c.1488>:
      68:	62 79 65 2e 20 72 65 73 74 61 72 74 69 6e 67 2e     bye. restarting.
      78:	2e 2e 0d 0a 00                                      .....

0000007d <__c.1486>:
      7d:	62 79 65 0d 0a 00                                   bye...

00000083 <__c.1481>:
      83:	48 55 48 3f 0d 0a 00                                HUH?...

0000008a <__c.1479>:
      8a:	3f 3f 3f 0d 0a 00                                   ???...

00000090 <__c.1477>:
      90:	45 52 52 4f 52 0d 0a 00                             ERROR...

00000098 <__c.1475>:
      98:	53 59 4e 54 41 58 0d 0a 00                          SYNTAX...

000000a1 <__c.1473>:
      a1:	4f 4b 0d 0a 00                                      OK...

000000a6 <__c.1471>:
      a6:	4f 4b 20 28 4e 45 45 44 20 52 45 53 54 41 52 54     OK (NEED RESTART
      b6:	29 0d 0a 00                                         )...

000000ba <__c.1469>:
      ba:	52 45 53 45 54 0d 0a 00                             RESET...

000000c2 <__c.1453>:
      c2:	3e 20 00                                            > .

000000c5 <__c.1448>:
      c5:	43 6f 6d 6d 61 6e 64 20 4d 6f 64 65 2e 20 45 6e     Command Mode. En
      d5:	74 65 72 20 3c 3f 3e 2b 3c 72 65 74 75 72 6e 3e     ter <?>+<return>
      e5:	20 66 6f 72 20 68 65 6c 70 20 61 6e 64 20 3c 71      for help and <q
      f5:	3e 2b 3c 72 65 74 75 72 6e 3e 20 74 6f 20 6c 65     >+<return> to le
     105:	61 76 65 2e 0d 0a 00                                ave....

0000010c <__c.1420>:
     10c:	43 6f 6d 6d 61 6e 64 20 48 65 6c 70 3a 0d 0a 00     Command Help:...

0000011c <__c.1515>:
     11c:	20 20 20 00                                            .

00000120 <__c.1503>:
     120:	43 6f 6d 6d 61 6e 64 20 4b 65 79 20 48 65 6c 70     Command Key Help
     130:	3a 0d 0a 00                                         :...

00000134 <__c.1340>:
     134:	20 4b 42 2f 73 00                                    KB/s.

0000013a <__c.1324>:
     13a:	0d 0a 00                                            ...

0000013d <__c.1605>:
     13d:	5b 42 52 49 44 47 45 5d 20 6f 66 66 0d 0a 00        [BRIDGE] off...

0000014c <__c.1601>:
     14c:	46 4c 4f 57 20 6f 6e 0d 0a 00                       FLOW on...

00000156 <__c.1599>:
     156:	46 4c 4f 57 20 6f 66 66 0d 0a 00                    FLOW off...

00000161 <__c.1597>:
     161:	4f 46 46 4c 49 4e 45 20 44 52 4f 50 3a 20 00        OFFLINE DROP: .

00000170 <__c.1594>:
     170:	46 49 52 53 54 20 49 4e 43 4f 4d 49 4e 47 21 0d     FIRST INCOMING!.
     180:	0a 00                                               ..

00000182 <__c.1587>:
     182:	5b 42 52 49 44 47 45 5d 20 6f 6e 0d 0a 00           [BRIDGE] on...

00000190 <__c.1521>:
     190:	72 65 71 20 69 67 6e 0d 0a 00                       req ign...

0000019a <__c.1519>:
     19a:	52 45 51 0d 0a 00                                   REQ...

000001a0 <__c.1528>:
     1a0:	5b 4d 41 47 49 43 5d 20 6f 6e 6c 69 6e 65 0d 0a     [MAGIC] online..
	...

000001b1 <__c.1538>:
     1b1:	5b 4d 41 47 49 43 5d 20 6f 66 66 6c 69 6e 65 0d     [MAGIC] offline.
     1c1:	0a 00                                               ..

000001c3 <__c.1550>:
     1c3:	5b 4d 41 47 49 43 5d 20 72 65 71 75 65 73 74 0d     [MAGIC] request.
     1d3:	0a 00                                               ..

000001d5 <__c.1559>:
     1d5:	46 49 52 53 54 20 54 52 41 4e 53 46 45 52 21 0d     FIRST TRANSFER!.
     1e5:	0a 00                                               ..

000001e7 <__c.1494>:
     1e7:	5b 42 52 49 44 47 45 5f 54 45 53 54 5d 20 6f 66     [BRIDGE_TEST] of
     1f7:	66 0d 0a 00                                         f...

000001fb <__c.1490>:
     1fb:	4f 56 45 52 57 52 49 54 45 3f 21 0d 0a 00           OVERWRITE?!...

00000209 <__c.1486>:
     209:	5b 42 52 49 44 47 45 5f 54 45 53 54 5d 20 6f 6e     [BRIDGE_TEST] on
     219:	0d 0a 00                                            ...

0000021c <__c.1477>:
     21c:	4e 4f 20 49 50 56 34 21 21 0d 0a 00                 NO IPV4!!...

00000228 <__c.1475>:
     228:	4e 4f 20 4d 41 47 49 43 21 21 0d 0a 00              NO MAGIC!!...

00000235 <cmd_table>:
     235:	b2 02 71 0c b4 02 c6 02 73 0c c8 02 da 02 56 0d     ..q.....s.....V.
     245:	dc 02 f3 02 52 0d f5 02 06 03 4d 0d 09 03 23 03     ....R.....M...#.
     255:	48 0d 26 03 42 03 44 0d 45 03 61 03 40 0d 64 03     H.&.B.D.E.a.@.d.
     265:	74 03 3c 0d 77 03 88 03 19 0d 8a 03 a6 03 d0 0c     t.<.w...........
     275:	a9 03 c2 03 d0 0c c5 03 db 03 95 0c de 03 f5 03     ................
     285:	95 0c f8 03 11 04 75 0c 14 04 29 04 95 0c 2c 04     ......u...)...,.
     295:	3e 04 d0 0c 41 04 00 00 00 00 00 00                 >...A.......

000002a1 <__c.1396>:
     2a1:	30 2e 36 20 42 55 49 4c 44 5f 44 41 54 45 0d 0a     0.6 BUILD_DATE..
	...

000002b2 <cmd_quit_name>:
     2b2:	71 00                                               q.

000002b4 <cmd_quit_help>:
     2b4:	71 75 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     quit command mod
     2c4:	65 00                                               e.

000002c6 <cmd_device_reset_name>:
     2c6:	72 00                                               r.

000002c8 <cmd_device_reset_help>:
     2c8:	73 6f 66 74 20 72 65 73 65 74 20 64 65 76 69 63     soft reset devic
     2d8:	65 00                                               e.

000002da <cmd_version_name>:
     2da:	76 00                                               v.

000002dc <cmd_version_help>:
     2dc:	70 72 69 6e 74 20 66 69 72 6d 77 61 72 65 20 76     print firmware v
     2ec:	65 72 73 69 6f 6e 00                                ersion.

000002f3 <cmd_param_dump_name>:
     2f3:	70 00                                               p.

000002f5 <cmd_param_dump_help>:
     2f5:	70 72 69 6e 74 20 70 61 72 61 6d 65 74 65 72 73     print parameters
	...

00000306 <cmd_param_save_name>:
     306:	70 73 00                                            ps.

00000309 <cmd_param_save_help>:
     309:	73 61 76 65 20 70 61 72 61 6d 65 74 65 72 73 20     save parameters 
     319:	74 6f 20 45 45 50 52 4f 4d 00                       to EEPROM.

00000323 <cmd_param_load_name>:
     323:	70 6c 00                                            pl.

00000326 <cmd_param_load_help>:
     326:	6c 6f 61 64 20 70 61 72 61 6d 65 74 65 72 73 20     load parameters 
     336:	66 72 6f 6d 20 45 45 50 52 4f 4d 00                 from EEPROM.

00000342 <cmd_param_reset_name>:
     342:	70 72 00                                            pr.

00000345 <cmd_param_reset_help>:
     345:	72 65 73 65 74 20 70 61 72 61 6d 65 74 65 72 73     reset parameters
     355:	20 74 6f 20 64 65 66 61 75 6c 74 00                  to default.

00000361 <cmd_stats_dump_name>:
     361:	73 64 00                                            sd.

00000364 <cmd_stats_dump_help>:
     364:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

00000374 <cmd_stats_reset_name>:
     374:	73 72 00                                            sr.

00000377 <cmd_stats_reset_help>:
     377:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

00000388 <cmd_gen_m_name>:
     388:	6d 00                                               m.

0000038a <cmd_gen_m_help>:
     38a:	6d 61 63 20 61 64 64 72 65 73 73 20 6f 66 20 64     mac address of d
     39a:	65 76 69 63 65 20 3c 6d 61 63 3e 00                 evice <mac>.

000003a6 <cmd_gen_fd_name>:
     3a6:	66 64 00                                            fd.

000003a9 <cmd_gen_fd_help>:
     3a9:	73 65 74 20 66 75 6c 6c 20 64 75 70 6c 65 20 6d     set full duple m
     3b9:	6f 64 65 20 5b 6f 6e 5d 00                          ode [on].

000003c2 <cmd_gen_fc_name>:
     3c2:	66 63 00                                            fc.

000003c5 <cmd_gen_fc_help>:
     3c5:	73 65 74 20 66 6c 6f 77 20 63 6f 6e 74 72 6f 6c     set flow control
     3d5:	20 5b 6f 6e 5d 00                                    [on].

000003db <cmd_gen_tl_name>:
     3db:	74 6c 00                                            tl.

000003de <cmd_gen_tl_help>:
     3de:	74 65 73 74 20 70 61 63 6b 65 74 20 6c 65 6e 67     test packet leng
     3ee:	74 68 20 3c 6e 3e 00                                th <n>.

000003f5 <cmd_gen_tt_name>:
     3f5:	74 74 00                                            tt.

000003f8 <cmd_gen_tt_help>:
     3f8:	74 65 73 74 20 70 61 63 6b 65 74 20 65 74 68 20     test packet eth 
     408:	74 79 70 65 20 3c 6e 3e 00                          type <n>.

00000411 <cmd_gen_ti_name>:
     411:	74 69 00                                            ti.

00000414 <cmd_gen_ti_help>:
     414:	74 65 73 74 20 49 50 20 61 64 64 72 65 73 73 20     test IP address 
     424:	3c 69 70 3e 00                                      <ip>.

00000429 <cmd_gen_tp_name>:
     429:	74 70 00                                            tp.

0000042c <cmd_gen_tp_help>:
     42c:	74 65 73 74 20 55 44 50 20 70 6f 72 74 20 3c 6e     test UDP port <n
     43c:	3e 00                                               >.

0000043e <cmd_gen_tm_name>:
     43e:	74 6d 00                                            tm.

00000441 <cmd_gen_tm_help>:
     441:	74 65 73 74 20 6d 6f 64 65 20 5b 30 7c 31 5d 00     test mode [0|1].

00000451 <cmdkey_table>:
     451:	31 64 0d 9d 04 32 67 0d af 04 33 60 0d c6 04 34     1d...2g...3`...4
     461:	5c 0d da 04 73 91 0d ed 04 53 8e 0d fd 04 76 76     \...s....S....vv
     471:	0d 0e 05 70 72 0d 24 05 50 6e 0d 45 05 61 6b 0d     ...pr.$.Pn.E.ak.
     481:	6f 05 00 00 00 00 00                                o......

00000488 <__c.1305>:
     488:	4f 46 46 0d 0a 00                                   OFF...

0000048e <__c.1303>:
     48e:	4f 4e 0d 0a 00                                      ON...

00000493 <__c.1301>:
     493:	56 45 52 42 4f 53 45 3a 20 00                       VERBOSE: .

0000049d <cmd_enter_bridge_mode_help>:
     49d:	65 6e 74 65 72 20 62 72 69 64 67 65 20 6d 6f 64     enter bridge mod
     4ad:	65 00                                               e.

000004af <cmd_enter_bridge_test_mode_help>:
     4af:	65 6e 74 65 72 20 62 72 69 64 67 65 20 74 65 73     enter bridge tes
     4bf:	74 20 6d 6f 64 65 00                                t mode.

000004c6 <cmd_enter_pio_test_mode_help>:
     4c6:	65 6e 74 65 72 20 50 49 4f 20 74 65 73 74 20 6d     enter PIO test m
     4d6:	6f 64 65 00                                         ode.

000004da <cmd_enter_pb_test_mode_help>:
     4da:	65 6e 74 65 72 20 50 42 20 74 65 73 74 20 6d 6f     enter PB test mo
     4ea:	64 65 00                                            de.

000004ed <cmd_dump_stats_help>:
     4ed:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

000004fd <cmd_reset_stats_help>:
     4fd:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

0000050e <cmd_toggle_verbose_help>:
     50e:	74 6f 67 67 6c 65 20 76 65 72 62 6f 73 65 20 6f     toggle verbose o
     51e:	75 74 70 75 74 00                                   utput.

00000524 <cmd_send_test_packet_help>:
     524:	73 65 6e 64 20 61 20 74 65 73 74 20 70 61 63 6b     send a test pack
     534:	65 74 20 28 70 62 74 65 73 74 20 6d 6f 64 65 29     et (pbtest mode)
	...

00000545 <cmd_send_test_packet_silent_help>:
     545:	73 65 6e 64 20 61 20 74 65 73 74 20 70 61 63 6b     send a test pack
     555:	65 74 20 28 73 69 6c 65 6e 74 29 20 28 70 62 74     et (silent) (pbt
     565:	65 73 74 20 6d 6f 64 65 29 00                       est mode).

0000056f <cmd_toggle_auto_mode_help>:
     56f:	74 6f 67 67 6c 65 20 61 75 74 6f 20 73 65 6e 64     toggle auto send
     57f:	20 28 70 62 74 65 73 74 20 6d 6f 64 65 29 00         (pbtest mode).

0000058e <__c.1695>:
     58e:	20 20 2b 72 65 71 3d 00                               +req=.

00000596 <__c.1693>:
     596:	20 76 3d 00                                          v=.

0000059a <__c.1691>:
     59a:	20 64 3d 00                                          d=.

0000059e <__c.1689>:
     59e:	20 6e 3d 00                                          n=.

000005a2 <__c.1687>:
     5a2:	5d 20 45 52 52 3a 00                                ] ERR:.

000005a9 <__c.1685>:
     5a9:	5d 20 6f 6b 00                                      ] ok.

000005ae <__c.1683>:
     5ae:	5b 52 58 3a 00                                      [RX:.

000005b3 <__c.1681>:
     5b3:	5b 54 58 3a 00                                      [TX:.

000005b8 <__c.1678>:
     5b8:	3f 3f 20 45 52 52 3a 00                             ?? ERR:.

000005c0 <__c.1676>:
     5c0:	63 6d 64 3d 00                                      cmd=.

000005c5 <__c.1643>:
     5c5:	2c 61 63 6b 3d 00                                   ,ack=.

000005cb <__c.1639>:
     5cb:	2c 73 65 71 3d 00                                   ,seq=.

000005d1 <__c.1637>:
     5d1:	2c 66 6c 61 67 73 3d 00                             ,flags=.

000005d9 <__c.1632>:
     5d9:	5b 54 43 50 3a 00                                   [TCP:.

000005df <__c.1628>:
     5df:	5b 55 44 50 3a 00                                   [UDP:.

000005e5 <__c.1614>:
     5e5:	42 4f 4f 54 50 43 00                                BOOTPC.

000005ec <__c.1612>:
     5ec:	42 4f 4f 54 50 53 00                                BOOTPS.

000005f3 <__c.1621>:
     5f3:	46 54 50 64 61 74 00                                FTPdat.

000005fa <__c.1619>:
     5fa:	46 54 50 63 74 6c 00                                FTPctl.

00000601 <__c.1602>:
     601:	2c 55 44 50 20 00                                   ,UDP .

00000607 <__c.1600>:
     607:	2c 54 43 50 20 00                                   ,TCP .

0000060d <__c.1598>:
     60d:	2c 49 43 4d 50 00                                   ,ICMP.

00000613 <__c.1595>:
     613:	5b 49 50 34 3a 00                                   [IP4:.

00000619 <__c.1585>:
     619:	52 45 50 4c 00                                      REPL.

0000061e <__c.1583>:
     61e:	52 45 51 20 00                                      REQ .

00000623 <__c.1580>:
     623:	5b 41 52 50 3a 00                                   [ARP:.

00000629 <pio_dev_enc28j60>:
     629:	39 06 55 11 ab 10 f8 10 3a 12 51 11 c9 10 b4 10     9.U.....:.Q.....

00000639 <dev_name>:
     639:	65 6e 63 32 38 6a 36 30 00                          enc28j60.

00000642 <__c.1324>:
     642:	72 65 73 65 74 74 69 6e 67 2e 2e 2e 0d 0a 00        resetting......

00000651 <__c.1312>:
     651:	50 72 65 73 73 20 3c 72 65 74 75 72 6e 3e 20 74     Press <return> t
     661:	6f 20 65 6e 74 65 72 20 63 6f 6d 6d 61 6e 64 20     o enter command 
     671:	6d 6f 64 65 20 6f 72 20 3c 3f 3e 20 66 6f 72 20     mode or <?> for 
     681:	6b 65 79 20 68 65 6c 70 0d 0a 00                    key help...

0000068c <__c.1310>:
     68c:	0d 0a 57 65 6c 63 6f 6d 65 20 74 6f 20 70 6c 69     ..Welcome to pli
     69c:	70 62 6f 78 20 30 2e 36 20 42 55 49 4c 44 5f 44     pbox 0.6 BUILD_D
     6ac:	41 54 45 0d 0a 00                                   ATE...

000006b2 <default_param>:
     6b2:	1a 11 af a0 47 11 00 00 ea 05 fd ff c0 a8 02 de     ....G...........
     6c2:	90 1a 00                                            ...

000006c5 <__c.1548>:
     6c5:	74 6d 3a 20 74 65 73 74 20 6d 6f 64 65 20 20 20     tm: test mode   
     6d5:	20 00                                                .

000006d7 <__c.1546>:
     6d7:	74 70 3a 20 75 64 70 20 70 6f 72 74 20 20 20 20     tp: udp port    
     6e7:	20 00                                                .

000006e9 <__c.1544>:
     6e9:	74 69 3a 20 69 70 20 61 64 64 72 65 73 73 20 20     ti: ip address  
     6f9:	20 00                                                .

000006fb <__c.1542>:
     6fb:	74 74 3a 20 70 61 63 6b 65 74 20 74 79 70 65 20     tt: packet type 
     70b:	20 00                                                .

0000070d <__c.1540>:
     70d:	74 6c 3a 20 70 61 63 6b 65 74 20 6c 65 6e 20 20     tl: packet len  
     71d:	20 00                                                .

0000071f <__c.1538>:
     71f:	66 63 3a 20 66 6c 6f 77 20 63 6f 6e 74 72 6f 6c     fc: flow control
     72f:	20 00                                                .

00000731 <__c.1536>:
     731:	66 64 3a 20 66 75 6c 6c 20 64 75 70 6c 65 78 20     fd: full duplex 
     741:	20 00                                                .

00000743 <__c.1534>:
     743:	6d 3a 20 6d 61 63 20 61 64 64 72 65 73 73 20 20     m: mac address  
     753:	20 00                                                .

00000755 <__c.1515>:
     755:	6f 66 66 00                                         off.

00000759 <__c.1513>:
     759:	6f 6e 00                                            on.

0000075c <__c.1511>:
     75c:	5b 41 55 54 4f 5d 20 00                             [AUTO] .

00000764 <__c.1498>:
     764:	5b 50 42 5f 54 45 53 54 5d 20 6f 66 66 0d 0a 00     [PB_TEST] off...

00000774 <__c.1492>:
     774:	5b 50 42 5f 54 45 53 54 5d 20 6f 6e 0d 0a 00        [PB_TEST] on...

00000783 <__c.1465>:
     783:	54 4f 54 41 4c 20 45 52 52 4f 52 53 20 00           TOTAL ERRORS .

00000791 <__c.1460>:
     791:	45 52 52 3a 20 64 61 74 61 20 40 00                 ERR: data @.

0000079d <__c.1455>:
     79d:	45 52 52 3a 20 70 6b 74 20 74 79 70 65 0d 0a 00     ERR: pkt type...

000007ad <__c.1451>:
     7ad:	45 52 52 3a 20 73 72 63 20 6d 61 63 0d 0a 00        ERR: src mac...

000007bc <__c.1449>:
     7bc:	45 52 52 3a 20 64 73 74 20 6d 61 63 0d 0a 00        ERR: dst mac...

000007cb <__c.1447>:
     7cb:	45 52 52 3a 20 73 69 7a 65 0d 0a 00                 ERR: size...

000007d7 <__c.1474>:
     7d7:	70 69 6f 3a 20 65 78 69 74 0d 0a 00                 pio: exit...

000007e3 <__c.1458>:
     7e3:	45 52 52 4f 52 3a 00                                ERROR:.

000007ea <__c.1456>:
     7ea:	20 72 65 76 3d 00                                    rev=.

000007f0 <__c.1453>:
     7f0:	20 66 6c 61 67 73 3d 00                              flags=.

000007f8 <__c.1451>:
     7f8:	3a 20 6f 6b 21 20 6d 61 63 3d 00                    : ok! mac=.

00000803 <__c.1447>:
     803:	70 69 6f 3a 20 69 6e 69 74 3a 20 00                 pio: init: .

0000080f <__c.1324>:
     80f:	5b 50 49 4f 5f 54 45 53 54 5d 20 6f 66 66 0d 0a     [PIO_TEST] off..
	...

00000820 <__c.1318>:
     820:	5b 50 49 4f 5f 54 45 53 54 5d 20 6f 6e 0d 0a 00     [PIO_TEST] on...

00000830 <__c.1594>:
     830:	55 44 50 3a 20 00                                   UDP: .

00000836 <__c.1577>:
     836:	41 52 50 20 52 45 50 4c 59 21 0d 0a 00              ARP REPLY!...

00000843 <__c.1575>:
     843:	41 52 50 20 52 45 51 3a 20 49 50 3d 00              ARP REQ: IP=.

00000850 <__c.1558>:
     850:	45 52 52 4f 52 3d 00                                ERROR=.

00000857 <__c.1556>:
     857:	20 6e 3d 00                                          n=.

0000085b <__c.1554>:
     85b:	76 3d 00                                            v=.

0000085e <__c.1552>:
     85e:	70 69 6f 20 74 78 3a 20 00                          pio tx: .

00000867 <__c.1536>:
     867:	45 52 52 4f 52 3d 00                                ERROR=.

0000086e <__c.1534>:
     86e:	20 6e 3d 00                                          n=.

00000872 <__c.1532>:
     872:	76 3d 00                                            v=.

00000875 <__c.1530>:
     875:	70 69 6f 20 72 78 3a 20 00                          pio rx: .

0000087e <__c.1318>:
     87e:	63 6e 74 20 20 62 79 74 65 73 20 20 20 20 65 72     cnt  bytes    er
     88e:	72 20 20 64 72 6f 70 20 72 61 74 65 0d 0a 00        r  drop rate...

0000089d <__c.1305>:
     89d:	3f 00                                               ?.

0000089f <__c.1302>:
     89f:	74 78 00                                            tx.

000008a2 <__c.1298>:
     8a2:	72 78 20 70 69 6f 00                                rx pio.

000008a9 <__c.1294>:
     8a9:	72 78 20 70 6c 69 70 62 6f 78 00                    rx plipbox.

000008b4 <__ctors_end>:
     8b4:	11 24       	eor	r1, r1
     8b6:	1f be       	out	0x3f, r1	; 63
     8b8:	cf ef       	ldi	r28, 0xFF	; 255
     8ba:	d8 e0       	ldi	r29, 0x08	; 8
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	cd bf       	out	0x3d, r28	; 61

000008c0 <__do_copy_data>:
     8c0:	11 e0       	ldi	r17, 0x01	; 1
     8c2:	a0 e0       	ldi	r26, 0x00	; 0
     8c4:	b1 e0       	ldi	r27, 0x01	; 1
     8c6:	e8 ec       	ldi	r30, 0xC8	; 200
     8c8:	fd e3       	ldi	r31, 0x3D	; 61
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <.do_copy_data_start>

000008cc <.do_copy_data_loop>:
     8cc:	05 90       	lpm	r0, Z+
     8ce:	0d 92       	st	X+, r0

000008d0 <.do_copy_data_start>:
     8d0:	ac 33       	cpi	r26, 0x3C	; 60
     8d2:	b1 07       	cpc	r27, r17
     8d4:	d9 f7       	brne	.-10     	; 0x8cc <.do_copy_data_loop>

000008d6 <__do_clear_bss>:
     8d6:	17 e0       	ldi	r17, 0x07	; 7
     8d8:	ac e3       	ldi	r26, 0x3C	; 60
     8da:	b1 e0       	ldi	r27, 0x01	; 1
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <.do_clear_bss_start>

000008de <.do_clear_bss_loop>:
     8de:	1d 92       	st	X+, r1

000008e0 <.do_clear_bss_start>:
     8e0:	a7 3e       	cpi	r26, 0xE7	; 231
     8e2:	b1 07       	cpc	r27, r17
     8e4:	e1 f7       	brne	.-8      	; 0x8de <.do_clear_bss_loop>
     8e6:	0e 94 c9 12 	call	0x2592	; 0x2592 <main>
     8ea:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <_exit>

000008ee <__bad_interrupt>:
     8ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008f2 <cmd_worker>:
  }

}

u08 cmd_worker(void)
{
     8f2:	2f 92       	push	r2
     8f4:	3f 92       	push	r3
     8f6:	4f 92       	push	r4
     8f8:	5f 92       	push	r5
     8fa:	6f 92       	push	r6
     8fc:	7f 92       	push	r7
     8fe:	8f 92       	push	r8
     900:	9f 92       	push	r9
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	00 d0       	rcall	.+0      	; 0x918 <__stack+0x19>
     918:	0f 92       	push	r0
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
  u08 result = CMD_WORKER_IDLE;

  // small hack to enter commands
  if(uart_read_data_available()) {
     91e:	0e 94 41 07 	call	0xe82	; 0xe82 <uart_read_data_available>
     922:	88 23       	and	r24, r24
     924:	09 f4       	brne	.+2      	; 0x928 <__stack+0x29>
     926:	95 c1       	rjmp	.+810    	; 0xc52 <__stack+0x353>
    u08 cmd = uart_read();
     928:	0e 94 4a 07 	call	0xe94	; 0xe94 <uart_read>
    if(cmd == '\n') {
     92c:	8a 30       	cpi	r24, 0x0A	; 10
     92e:	09 f0       	breq	.+2      	; 0x932 <__stack+0x33>
     930:	49 c1       	rjmp	.+658    	; 0xbc4 <__stack+0x2c5>
  }
}

static u08 cmd_loop(void)
{
  uart_send_pstring(PSTR("Command Mode. Enter <?>+<return> for help and <q>+<return> to leave.\r\n"));
     932:	85 ec       	ldi	r24, 0xC5	; 197
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
     93a:	44 24       	eor	r4, r4
     93c:	43 94       	inc	r4
     93e:	55 24       	eor	r5, r5
  u08 num_chars = 1;
  u08 status = CMD_OK;
  u08 result = CMD_WORKER_DONE;
  while(status != CMD_QUIT) {
    // print prompt
    uart_send_pstring(PSTR("> "));
     940:	0f 2e       	mov	r0, r31
     942:	f2 ec       	ldi	r31, 0xC2	; 194
     944:	6f 2e       	mov	r6, r31
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	7f 2e       	mov	r7, r31
     94a:	f0 2d       	mov	r31, r0
     94c:	10 e0       	ldi	r17, 0x00	; 0
        cmd_pos--;
        uart_send(c);
      }
    }
    else if((c>=32)&&(c<128)) {
      cmd_line[cmd_pos] = c;
     94e:	0f 2e       	mov	r0, r31
     950:	f2 e8       	ldi	r31, 0x82	; 130
     952:	ef 2e       	mov	r14, r31
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	ff 2e       	mov	r15, r31
     958:	f0 2d       	mov	r31, r0
        uart_send_crlf();
        break;
      }
    }
  }
  cmd_line[cmd_pos] = '\0';
     95a:	0f 2e       	mov	r0, r31
     95c:	f1 ea       	ldi	r31, 0xA1	; 161
     95e:	2f 2e       	mov	r2, r31
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	3f 2e       	mov	r3, r31
     964:	f0 2d       	mov	r31, r0
    // end reached?
    if(cmd_line[pos] == '\0') {
      break;
    }
    // start new arg
    cmd_args[argc] = cmd_line + pos;
     966:	0f 2e       	mov	r0, r31
     968:	fa e7       	ldi	r31, 0x7A	; 122
     96a:	8f 2e       	mov	r8, r31
     96c:	f1 e0       	ldi	r31, 0x01	; 1
     96e:	9f 2e       	mov	r9, r31
     970:	f0 2d       	mov	r31, r0

    // show command
    u08 pos = 0;
    while(1) {
      u08 c = pgm_read_byte(name);
      if(c==0) {
     972:	19 83       	std	Y+1, r17	; 0x01
  u08 num_chars = 1;
  u08 status = CMD_OK;
  u08 result = CMD_WORKER_DONE;
  while(status != CMD_QUIT) {
    // print prompt
    uart_send_pstring(PSTR("> "));
     974:	c3 01       	movw	r24, r6
     976:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
     97a:	01 2f       	mov	r16, r17

static u08 enter_line(void)
{
  u08 cmd_pos = 0;
  while(1) {
    u08 c = uart_read();
     97c:	0e 94 4a 07 	call	0xe94	; 0xe94 <uart_read>
     980:	98 2f       	mov	r25, r24
    if(c=='\n') {
     982:	8a 30       	cpi	r24, 0x0A	; 10
     984:	49 f4       	brne	.+18     	; 0x998 <__stack+0x99>
      uart_send_crlf();
     986:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
        uart_send_crlf();
        break;
      }
    }
  }
  cmd_line[cmd_pos] = '\0';
     98a:	f7 01       	movw	r30, r14
     98c:	e0 0f       	add	r30, r16
     98e:	f1 1d       	adc	r31, r1
     990:	10 82       	st	Z, r1
  while(status != CMD_QUIT) {
    // print prompt
    uart_send_pstring(PSTR("> "));
    // read line
    num_chars = enter_line();
    if(num_chars > 0) {
     992:	00 23       	and	r16, r16
     994:	79 f3       	breq	.-34     	; 0x974 <__stack+0x75>
     996:	77 c1       	rjmp	.+750    	; 0xc86 <__stack+0x387>
    u08 c = uart_read();
    if(c=='\n') {
      uart_send_crlf();
      break;
    }
    else if((c==127)||(c==8)) {
     998:	8f 37       	cpi	r24, 0x7F	; 127
     99a:	11 f0       	breq	.+4      	; 0x9a0 <__stack+0xa1>
     99c:	88 30       	cpi	r24, 0x08	; 8
     99e:	39 f4       	brne	.+14     	; 0x9ae <__stack+0xaf>
      if(cmd_pos > 0) {
     9a0:	00 23       	and	r16, r16
     9a2:	61 f3       	breq	.-40     	; 0x97c <__stack+0x7d>
        cmd_pos--;
     9a4:	01 50       	subi	r16, 0x01	; 1
        uart_send(c);
     9a6:	89 2f       	mov	r24, r25
     9a8:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
     9ac:	e7 cf       	rjmp	.-50     	; 0x97c <__stack+0x7d>
      }
    }
    else if((c>=32)&&(c<128)) {
     9ae:	80 52       	subi	r24, 0x20	; 32
     9b0:	80 36       	cpi	r24, 0x60	; 96
     9b2:	20 f7       	brcc	.-56     	; 0x97c <__stack+0x7d>
      cmd_line[cmd_pos] = c;
     9b4:	f7 01       	movw	r30, r14
     9b6:	e0 0f       	add	r30, r16
     9b8:	f1 1d       	adc	r31, r1
     9ba:	90 83       	st	Z, r25
      uart_send(c);
     9bc:	89 2f       	mov	r24, r25
     9be:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
      cmd_pos ++;
     9c2:	0f 5f       	subi	r16, 0xFF	; 255
      // max line reached -> end command
      if(cmd_pos == (MAX_LINE-1)) {
     9c4:	0f 31       	cpi	r16, 0x1F	; 31
     9c6:	d1 f6       	brne	.-76     	; 0x97c <__stack+0x7d>
        uart_send_crlf();
     9c8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
        break;
      }
    }
  }
  cmd_line[cmd_pos] = '\0';
     9cc:	f1 01       	movw	r30, r2
     9ce:	10 82       	st	Z, r1
     9d0:	5a c1       	rjmp	.+692    	; 0xc86 <__stack+0x387>
  u08 argc = 0;
  u08 stay = 1;
  while(stay) {
    // skip leading spaces
    while(cmd_line[pos] == ' ') {
      pos++;
     9d2:	4f 5f       	subi	r20, 0xFF	; 255
  u08 pos = 0;
  u08 argc = 0;
  u08 stay = 1;
  while(stay) {
    // skip leading spaces
    while(cmd_line[pos] == ' ') {
     9d4:	24 2f       	mov	r18, r20
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	f7 01       	movw	r30, r14
     9da:	e2 0f       	add	r30, r18
     9dc:	f3 1f       	adc	r31, r19
     9de:	e0 81       	ld	r30, Z
     9e0:	e0 32       	cpi	r30, 0x20	; 32
     9e2:	b9 f3       	breq	.-18     	; 0x9d2 <__stack+0xd3>
      pos++;
    }
    // end reached?
    if(cmd_line[pos] == '\0') {
     9e4:	ee 23       	and	r30, r30
     9e6:	31 f1       	breq	.+76     	; 0xa34 <__stack+0x135>
      break;
    }
    // start new arg
    cmd_args[argc] = cmd_line + pos;
     9e8:	80 2f       	mov	r24, r16
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	f4 01       	movw	r30, r8
     9f2:	e8 0f       	add	r30, r24
     9f4:	f9 1f       	adc	r31, r25
     9f6:	c7 01       	movw	r24, r14
     9f8:	84 0f       	add	r24, r20
     9fa:	91 1d       	adc	r25, r1
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	80 83       	st	Z, r24
    argc++;
     a00:	0f 5f       	subi	r16, 0xFF	; 255
    // seek end
    while(cmd_line[pos] != ' ') {
     a02:	fc 01       	movw	r30, r24
     a04:	e0 81       	ld	r30, Z
     a06:	e0 32       	cpi	r30, 0x20	; 32
     a08:	79 f0       	breq	.+30     	; 0xa28 <__stack+0x129>
      if(cmd_line[pos] == '\0') {
     a0a:	ee 23       	and	r30, r30
     a0c:	21 f4       	brne	.+8      	; 0xa16 <__stack+0x117>
     a0e:	3e c1       	rjmp	.+636    	; 0xc8c <__stack+0x38d>
     a10:	ee 23       	and	r30, r30
     a12:	09 f4       	brne	.+2      	; 0xa16 <__stack+0x117>
     a14:	3b c1       	rjmp	.+630    	; 0xc8c <__stack+0x38d>
        stay = 0;
        break;
      }
      pos++;
     a16:	4f 5f       	subi	r20, 0xFF	; 255
    }
    // start new arg
    cmd_args[argc] = cmd_line + pos;
    argc++;
    // seek end
    while(cmd_line[pos] != ' ') {
     a18:	24 2f       	mov	r18, r20
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	f7 01       	movw	r30, r14
     a1e:	e2 0f       	add	r30, r18
     a20:	f3 1f       	adc	r31, r19
     a22:	e0 81       	ld	r30, Z
     a24:	e0 32       	cpi	r30, 0x20	; 32
     a26:	a1 f7       	brne	.-24     	; 0xa10 <__stack+0x111>
        stay = 0;
        break;
      }
      pos++;
    }
    cmd_line[pos] = '\0';
     a28:	f7 01       	movw	r30, r14
     a2a:	e2 0f       	add	r30, r18
     a2c:	f3 1f       	adc	r31, r19
     a2e:	10 82       	st	Z, r1
    pos++;
     a30:	4f 5f       	subi	r20, 0xFF	; 255
     a32:	d0 cf       	rjmp	.-96     	; 0x9d4 <__stack+0xd5>
      uart_send_hex_byte(num_chars);
      uart_send_crlf();
#endif
      // parse line into args
      u08 argc = parse_args(num_chars);
      if(argc > 0) {
     a34:	00 23       	and	r16, r16
     a36:	09 f4       	brne	.+2      	; 0xa3a <__stack+0x13b>
     a38:	9d cf       	rjmp	.-198    	; 0x974 <__stack+0x75>
          uart_send_string((const char *)cmd_args[i]);
          uart_send_crlf();
        }
#endif
        // help?
        if(cmd_args[0][0] == '?') {
     a3a:	f4 01       	movw	r30, r8
     a3c:	c0 80       	ld	r12, Z
     a3e:	d1 80       	ldd	r13, Z+1	; 0x01
     a40:	f6 01       	movw	r30, r12
     a42:	80 81       	ld	r24, Z
     a44:	8f 33       	cpi	r24, 0x3F	; 63
     a46:	49 f0       	breq	.+18     	; 0xa5a <__stack+0x15b>
        } else {
          // find command
          const cmd_table_t * ptr = cmd_table;
          const cmd_table_t * found = 0;
          while(1) {
            const char * name = (const char *)pgm_read_word(&ptr->name);
     a48:	e5 e3       	ldi	r30, 0x35	; 53
     a4a:	f2 e0       	ldi	r31, 0x02	; 2
     a4c:	65 91       	lpm	r22, Z+
     a4e:	74 91       	lpm	r23, Z+
            if(name == 0) {
     a50:	61 15       	cp	r22, r1
     a52:	71 05       	cpc	r23, r1
     a54:	09 f0       	breq	.+2      	; 0xa58 <__stack+0x159>
     a56:	48 c0       	rjmp	.+144    	; 0xae8 <__stack+0x1e9>
     a58:	9f c0       	rjmp	.+318    	; 0xb98 <__stack+0x299>
  return argc;
}

static void show_cmd_help(void)
{
  uart_send_pstring(PSTR("Command Help:\r\n"));
     a5a:	8c e0       	ldi	r24, 0x0C	; 12
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  const cmd_table_t * ptr = cmd_table;
  while(1) {
    const char * name = (const char *)pgm_read_word(&ptr->name);
     a62:	e5 e3       	ldi	r30, 0x35	; 53
     a64:	f2 e0       	ldi	r31, 0x02	; 2
     a66:	85 91       	lpm	r24, Z+
     a68:	94 91       	lpm	r25, Z+
     a6a:	9b 83       	std	Y+3, r25	; 0x03
     a6c:	8a 83       	std	Y+2, r24	; 0x02
    if(name == 0) {
     a6e:	89 2b       	or	r24, r25
     a70:	09 f4       	brne	.+2      	; 0xa74 <__stack+0x175>
     a72:	96 c0       	rjmp	.+300    	; 0xba0 <__stack+0x2a1>
     a74:	0f 2e       	mov	r0, r31
     a76:	f5 e3       	ldi	r31, 0x35	; 53
     a78:	cf 2e       	mov	r12, r31
     a7a:	f2 e0       	ldi	r31, 0x02	; 2
     a7c:	df 2e       	mov	r13, r31
     a7e:	f0 2d       	mov	r31, r0
      break;
    }
    const char * help = (const char *)pgm_read_word(&ptr->help);
     a80:	f6 01       	movw	r30, r12
     a82:	34 96       	adiw	r30, 0x04	; 4
     a84:	a5 90       	lpm	r10, Z+
     a86:	b4 90       	lpm	r11, Z+

    // show command
    u08 pos = 0;
    while(1) {
      u08 c = pgm_read_byte(name);
     a88:	ea 81       	ldd	r30, Y+2	; 0x02
     a8a:	fb 81       	ldd	r31, Y+3	; 0x03
     a8c:	84 91       	lpm	r24, Z+
      if(c==0) {
     a8e:	88 23       	and	r24, r24
     a90:	21 f4       	brne	.+8      	; 0xa9a <__stack+0x19b>
     a92:	11 c0       	rjmp	.+34     	; 0xab6 <__stack+0x1b7>
      pos++;
      name++;
    }

    // pad
    while(pos < 10) {
     a94:	0a 30       	cpi	r16, 0x0A	; 10
     a96:	80 f0       	brcs	.+32     	; 0xab8 <__stack+0x1b9>
     a98:	15 c0       	rjmp	.+42     	; 0xac4 <__stack+0x1c5>
     a9a:	09 81       	ldd	r16, Y+1	; 0x01
    while(1) {
      u08 c = pgm_read_byte(name);
      if(c==0) {
        break;
      }
      uart_send(c);
     a9c:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
      pos++;
     aa0:	0f 5f       	subi	r16, 0xFF	; 255
      name++;
     aa2:	8a 81       	ldd	r24, Y+2	; 0x02
     aa4:	9b 81       	ldd	r25, Y+3	; 0x03
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	9b 83       	std	Y+3, r25	; 0x03
     aaa:	8a 83       	std	Y+2, r24	; 0x02
    const char * help = (const char *)pgm_read_word(&ptr->help);

    // show command
    u08 pos = 0;
    while(1) {
      u08 c = pgm_read_byte(name);
     aac:	fc 01       	movw	r30, r24
     aae:	84 91       	lpm	r24, Z+
      if(c==0) {
     ab0:	88 23       	and	r24, r24
     ab2:	a1 f7       	brne	.-24     	; 0xa9c <__stack+0x19d>
     ab4:	ef cf       	rjmp	.-34     	; 0xa94 <__stack+0x195>
     ab6:	09 81       	ldd	r16, Y+1	; 0x01
      name++;
    }

    // pad
    while(pos < 10) {
      uart_send(' ');
     ab8:	80 e2       	ldi	r24, 0x20	; 32
     aba:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
      pos++;
     abe:	0f 5f       	subi	r16, 0xFF	; 255
      pos++;
      name++;
    }

    // pad
    while(pos < 10) {
     ac0:	0a 30       	cpi	r16, 0x0A	; 10
     ac2:	d0 f3       	brcs	.-12     	; 0xab8 <__stack+0x1b9>
      uart_send(' ');
      pos++;
    }

    // show help
    uart_send_pstring(help);
     ac4:	c5 01       	movw	r24, r10
     ac6:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_crlf();
     aca:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>

    ptr ++;
     ace:	86 e0       	ldi	r24, 0x06	; 6
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	c8 0e       	add	r12, r24
     ad4:	d9 1e       	adc	r13, r25
static void show_cmd_help(void)
{
  uart_send_pstring(PSTR("Command Help:\r\n"));
  const cmd_table_t * ptr = cmd_table;
  while(1) {
    const char * name = (const char *)pgm_read_word(&ptr->name);
     ad6:	f6 01       	movw	r30, r12
     ad8:	85 91       	lpm	r24, Z+
     ada:	94 91       	lpm	r25, Z+
     adc:	9b 83       	std	Y+3, r25	; 0x03
     ade:	8a 83       	std	Y+2, r24	; 0x02
    if(name == 0) {
     ae0:	89 2b       	or	r24, r25
     ae2:	09 f0       	breq	.+2      	; 0xae6 <__stack+0x1e7>
     ae4:	cd cf       	rjmp	.-102    	; 0xa80 <__stack+0x181>
     ae6:	5c c0       	rjmp	.+184    	; 0xba0 <__stack+0x2a1>
     ae8:	0f 2e       	mov	r0, r31
     aea:	f5 e3       	ldi	r31, 0x35	; 53
     aec:	af 2e       	mov	r10, r31
     aee:	f2 e0       	ldi	r31, 0x02	; 2
     af0:	bf 2e       	mov	r11, r31
     af2:	f0 2d       	mov	r31, r0
          while(1) {
            const char * name = (const char *)pgm_read_word(&ptr->name);
            if(name == 0) {
              break;
            }
            if(strcmp_P((const char *)cmd_args[0], name)==0) {
     af4:	c6 01       	movw	r24, r12
     af6:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <strcmp_P>
     afa:	89 2b       	or	r24, r25
     afc:	59 f0       	breq	.+22     	; 0xb14 <__stack+0x215>
              found = ptr;
              break;
            }
            ptr ++;
     afe:	e6 e0       	ldi	r30, 0x06	; 6
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	ae 0e       	add	r10, r30
     b04:	bf 1e       	adc	r11, r31
        } else {
          // find command
          const cmd_table_t * ptr = cmd_table;
          const cmd_table_t * found = 0;
          while(1) {
            const char * name = (const char *)pgm_read_word(&ptr->name);
     b06:	f5 01       	movw	r30, r10
     b08:	65 91       	lpm	r22, Z+
     b0a:	74 91       	lpm	r23, Z+
            if(name == 0) {
     b0c:	61 15       	cp	r22, r1
     b0e:	71 05       	cpc	r23, r1
     b10:	89 f7       	brne	.-30     	; 0xaf4 <__stack+0x1f5>
     b12:	42 c0       	rjmp	.+132    	; 0xb98 <__stack+0x299>
              break;
            }
            ptr ++;
          }
          // got a command
          if(found != 0) {
     b14:	a1 14       	cp	r10, r1
     b16:	b1 04       	cpc	r11, r1
     b18:	09 f4       	brne	.+2      	; 0xb1c <__stack+0x21d>
     b1a:	3e c0       	rjmp	.+124    	; 0xb98 <__stack+0x299>
            // execute command
            cmd_table_func_t func = (cmd_table_func_t)pgm_read_word(&found->func);
     b1c:	c5 01       	movw	r24, r10
     b1e:	02 96       	adiw	r24, 0x02	; 2
     b20:	fc 01       	movw	r30, r24
     b22:	25 91       	lpm	r18, Z+
     b24:	34 91       	lpm	r19, Z+
            status = func(argc, (const u08 **)&cmd_args);
     b26:	80 2f       	mov	r24, r16
     b28:	b4 01       	movw	r22, r8
     b2a:	f9 01       	movw	r30, r18
     b2c:	09 95       	icall
     b2e:	58 2e       	mov	r5, r24
            // show result
            uart_send_hex_byte(status);
     b30:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
            uart_send_spc();
     b34:	0e 94 74 07 	call	0xee8	; 0xee8 <uart_send_spc>
            u08 type = status & CMD_MASK;
     b38:	85 2d       	mov	r24, r5
     b3a:	80 7f       	andi	r24, 0xF0	; 240
            if(type == CMD_MASK_OK) {
     b3c:	d1 f4       	brne	.+52     	; 0xb72 <__stack+0x273>
              if(status == CMD_RESET) {
     b3e:	f2 e0       	ldi	r31, 0x02	; 2
     b40:	5f 16       	cp	r5, r31
     b42:	31 f4       	brne	.+12     	; 0xb50 <__stack+0x251>
                uart_send_pstring(PSTR("RESET\r\n"));
     b44:	8a eb       	ldi	r24, 0xBA	; 186
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
     b4c:	02 e0       	ldi	r16, 0x02	; 2
     b4e:	84 c0       	rjmp	.+264    	; 0xc58 <__stack+0x359>
                return CMD_WORKER_RESET;
              } else if(status == CMD_OK_RESTART) {
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	58 16       	cp	r5, r24
     b54:	49 f4       	brne	.+18     	; 0xb68 <__stack+0x269>
                uart_send_pstring(PSTR("OK (NEED RESTART)\r\n"));
     b56:	86 ea       	ldi	r24, 0xA6	; 166
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
     b5e:	0f 2e       	mov	r0, r31
     b60:	f3 e0       	ldi	r31, 0x03	; 3
     b62:	4f 2e       	mov	r4, r31
     b64:	f0 2d       	mov	r31, r0
     b66:	06 cf       	rjmp	.-500    	; 0x974 <__stack+0x75>
                result = CMD_WORKER_RESTART;
              } else {
                uart_send_pstring(PSTR("OK\r\n"));
     b68:	81 ea       	ldi	r24, 0xA1	; 161
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
     b70:	17 c0       	rjmp	.+46     	; 0xba0 <__stack+0x2a1>
              }
            } else if(type == CMD_MASK_SYNTAX) {
     b72:	80 31       	cpi	r24, 0x10	; 16
     b74:	29 f4       	brne	.+10     	; 0xb80 <__stack+0x281>
              uart_send_pstring(PSTR("SYNTAX\r\n"));
     b76:	88 e9       	ldi	r24, 0x98	; 152
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
     b7e:	10 c0       	rjmp	.+32     	; 0xba0 <__stack+0x2a1>
            } else if(type == CMD_MASK_ERROR) {
     b80:	80 32       	cpi	r24, 0x20	; 32
     b82:	29 f4       	brne	.+10     	; 0xb8e <__stack+0x28f>
              uart_send_pstring(PSTR("ERROR\r\n"));
     b84:	80 e9       	ldi	r24, 0x90	; 144
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <__stack+0x2a1>
            } else {
              uart_send_pstring(PSTR("???\r\n"));
     b8e:	8a e8       	ldi	r24, 0x8A	; 138
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <__stack+0x2a1>
            }
          } else {
            uart_send_pstring(PSTR("HUH?\r\n"));
     b98:	83 e8       	ldi	r24, 0x83	; 131
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
{
  uart_send_pstring(PSTR("Command Mode. Enter <?>+<return> for help and <q>+<return> to leave.\r\n"));
  u08 num_chars = 1;
  u08 status = CMD_OK;
  u08 result = CMD_WORKER_DONE;
  while(status != CMD_QUIT) {
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	59 16       	cp	r5, r25
     ba4:	09 f0       	breq	.+2      	; 0xba8 <__stack+0x2a9>
     ba6:	e6 ce       	rjmp	.-564    	; 0x974 <__stack+0x75>
     ba8:	04 2d       	mov	r16, r4
          }
        }
      }
    }
  }
  if(result == CMD_WORKER_DONE) {
     baa:	49 16       	cp	r4, r25
     bac:	29 f4       	brne	.+10     	; 0xbb8 <__stack+0x2b9>
    uart_send_pstring(PSTR("bye\r\n"));
     bae:	8d e7       	ldi	r24, 0x7D	; 125
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
     bb6:	50 c0       	rjmp	.+160    	; 0xc58 <__stack+0x359>
  } else {
    uart_send_pstring(PSTR("bye. restarting...\r\n"));
     bb8:	88 e6       	ldi	r24, 0x68	; 104
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
     bc0:	04 2d       	mov	r16, r4
     bc2:	4a c0       	rjmp	.+148    	; 0xc58 <__stack+0x359>
  if(uart_read_data_available()) {
    u08 cmd = uart_read();
    if(cmd == '\n') {
      // enter command loop
      result = cmd_loop();
    } else if(cmd == '?') {
     bc4:	8f 33       	cpi	r24, 0x3F	; 63
     bc6:	39 f0       	breq	.+14     	; 0xbd6 <__stack+0x2d7>
    } else {
      // search command
      const cmdkey_table_t *ptr = cmdkey_table;
      const cmdkey_table_t *found = 0;
      while(1) {
        u08 key = pgm_read_byte(&ptr->key);
     bc8:	e1 e5       	ldi	r30, 0x51	; 81
     bca:	f4 e0       	ldi	r31, 0x04	; 4
     bcc:	94 91       	lpm	r25, Z+
        if(key == cmd) {
     bce:	89 17       	cp	r24, r25
     bd0:	51 f5       	brne	.+84     	; 0xc26 <__stack+0x327>
     bd2:	cf 01       	movw	r24, r30
     bd4:	36 c0       	rjmp	.+108    	; 0xc42 <__stack+0x343>
  return result;
}

static void show_cmdkey_help(void)
{
  uart_send_pstring(PSTR("Command Key Help:\r\n"));
     bd6:	80 e2       	ldi	r24, 0x20	; 32
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  const cmdkey_table_t *ptr = cmdkey_table;
  while(1) {
    u08 key = pgm_read_byte(&ptr->key);
     bde:	e1 e5       	ldi	r30, 0x51	; 81
     be0:	f4 e0       	ldi	r31, 0x04	; 4
     be2:	84 91       	lpm	r24, Z+
    if(key == 0) {
     be4:	88 23       	and	r24, r24
     be6:	09 f4       	brne	.+2      	; 0xbea <__stack+0x2eb>
     be8:	36 c0       	rjmp	.+108    	; 0xc56 <__stack+0x357>
     bea:	6f 01       	movw	r12, r30
      break;
    }
    const char *help = (const char *)pgm_read_word(&ptr->help);

    uart_send(key);
    uart_send_pstring(PSTR("   "));
     bec:	0f 2e       	mov	r0, r31
     bee:	fc e1       	ldi	r31, 0x1C	; 28
     bf0:	ef 2e       	mov	r14, r31
     bf2:	f1 e0       	ldi	r31, 0x01	; 1
     bf4:	ff 2e       	mov	r15, r31
     bf6:	f0 2d       	mov	r31, r0
  while(1) {
    u08 key = pgm_read_byte(&ptr->key);
    if(key == 0) {
      break;
    }
    const char *help = (const char *)pgm_read_word(&ptr->help);
     bf8:	f6 01       	movw	r30, r12
     bfa:	33 96       	adiw	r30, 0x03	; 3
     bfc:	05 91       	lpm	r16, Z+
     bfe:	14 91       	lpm	r17, Z+

    uart_send(key);
     c00:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    uart_send_pstring(PSTR("   "));
     c04:	c7 01       	movw	r24, r14
     c06:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_pstring(help);
     c0a:	c8 01       	movw	r24, r16
     c0c:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_crlf();
     c10:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>

    ptr++;
     c14:	e5 e0       	ldi	r30, 0x05	; 5
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	ce 0e       	add	r12, r30
     c1a:	df 1e       	adc	r13, r31
static void show_cmdkey_help(void)
{
  uart_send_pstring(PSTR("Command Key Help:\r\n"));
  const cmdkey_table_t *ptr = cmdkey_table;
  while(1) {
    u08 key = pgm_read_byte(&ptr->key);
     c1c:	f6 01       	movw	r30, r12
     c1e:	84 91       	lpm	r24, Z+
    if(key == 0) {
     c20:	88 23       	and	r24, r24
     c22:	51 f7       	brne	.-44     	; 0xbf8 <__stack+0x2f9>
     c24:	18 c0       	rjmp	.+48     	; 0xc56 <__stack+0x357>
        u08 key = pgm_read_byte(&ptr->key);
        if(key == cmd) {
          found = ptr;
          break;
        }
        if(key == 0) {
     c26:	99 23       	and	r25, r25
     c28:	a1 f0       	breq	.+40     	; 0xc52 <__stack+0x353>
     c2a:	e1 e5       	ldi	r30, 0x51	; 81
     c2c:	f4 e0       	ldi	r31, 0x04	; 4
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <__stack+0x335>
     c30:	99 23       	and	r25, r25
     c32:	79 f0       	breq	.+30     	; 0xc52 <__stack+0x353>
          break;
        }
        ptr++;
     c34:	35 96       	adiw	r30, 0x05	; 5
    } else {
      // search command
      const cmdkey_table_t *ptr = cmdkey_table;
      const cmdkey_table_t *found = 0;
      while(1) {
        u08 key = pgm_read_byte(&ptr->key);
     c36:	94 91       	lpm	r25, Z+
        if(key == cmd) {
     c38:	89 17       	cp	r24, r25
     c3a:	d1 f7       	brne	.-12     	; 0xc30 <__stack+0x331>
          break;
        }
        ptr++;
      }
      // got a key command?
      if(found != 0) {
     c3c:	30 97       	sbiw	r30, 0x00	; 0
     c3e:	49 f0       	breq	.+18     	; 0xc52 <__stack+0x353>
     c40:	cf 01       	movw	r24, r30
        cmdkey_func_t func = (cmdkey_func_t)pgm_read_word(&found->func);
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	fc 01       	movw	r30, r24
     c46:	25 91       	lpm	r18, Z+
     c48:	34 91       	lpm	r19, Z+
        func();
     c4a:	f9 01       	movw	r30, r18
     c4c:	09 95       	icall
     c4e:	01 e0       	ldi	r16, 0x01	; 1
     c50:	03 c0       	rjmp	.+6      	; 0xc58 <__stack+0x359>
     c52:	00 e0       	ldi	r16, 0x00	; 0
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <__stack+0x359>
     c56:	01 e0       	ldi	r16, 0x01	; 1
      }
    }
  }

  return result;
}
     c58:	80 2f       	mov	r24, r16
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	bf 90       	pop	r11
     c72:	af 90       	pop	r10
     c74:	9f 90       	pop	r9
     c76:	8f 90       	pop	r8
     c78:	7f 90       	pop	r7
     c7a:	6f 90       	pop	r6
     c7c:	5f 90       	pop	r5
     c7e:	4f 90       	pop	r4
     c80:	3f 90       	pop	r3
     c82:	2f 90       	pop	r2
     c84:	08 95       	ret
        ptr++;
      }
      // got a key command?
      if(found != 0) {
        cmdkey_func_t func = (cmdkey_func_t)pgm_read_word(&found->func);
        func();
     c86:	41 2f       	mov	r20, r17
     c88:	01 2f       	mov	r16, r17
     c8a:	a4 ce       	rjmp	.-696    	; 0x9d4 <__stack+0xd5>
        stay = 0;
        break;
      }
      pos++;
    }
    cmd_line[pos] = '\0';
     c8c:	f7 01       	movw	r30, r14
     c8e:	e2 0f       	add	r30, r18
     c90:	f3 1f       	adc	r31, r19
     c92:	10 82       	st	Z, r1
     c94:	cf ce       	rjmp	.-610    	; 0xa34 <__stack+0x135>

00000c96 <timer_init>:
/// 100us is 1/10k of a second
/// TODO: time was reduced by 1, should it be?
#define T2_100us ((F_CPU/8)/10000)

void timer_init(void) {
  cli();
     c96:	f8 94       	cli

	/// Set timer 2 to CTC, prescaler 8 & compare value: 100us
  TCCR2A = _BV(WGM21);  // CTC
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	80 93 b0 00 	sts	0x00B0, r24
  TCCR2B = _BV(CS21);   // Prescaler 8
     c9e:	80 93 b1 00 	sts	0x00B1, r24
  OCR2A = T2_100us;     // Output compare
     ca2:	98 ec       	ldi	r25, 0xC8	; 200
     ca4:	90 93 b3 00 	sts	0x00B3, r25
  TCNT2  = 0x00;        // Reset timer state
     ca8:	10 92 b2 00 	sts	0x00B2, r1
  TIMSK2 = _BV(OCIE2A); // Enable compare interrupt
     cac:	80 93 70 00 	sts	0x0070, r24
  // ----- TIMER1 (16bit) -----
  // prescale 64
  // 16 MHz -> 250 KHz = 4 us timer

  // set to CTC on OCR1A with prescale 8
  TCCR1A = 0x00;
     cb0:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = _BV(CS11) | _BV(CS10); // prescale 64
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	80 93 81 00 	sts	0x0081, r24
  TCCR1C = 0x00;
     cba:	10 92 82 00 	sts	0x0082, r1

  // reset timer
  TCNT1 = 0;
     cbe:	10 92 85 00 	sts	0x0085, r1
     cc2:	10 92 84 00 	sts	0x0084, r1

  timer_100us = 0;
     cc6:	10 92 a9 01 	sts	0x01A9, r1
     cca:	10 92 a8 01 	sts	0x01A8, r1
  timer_10ms = 0;
     cce:	10 92 a7 01 	sts	0x01A7, r1
     cd2:	10 92 a6 01 	sts	0x01A6, r1
  time_stamp = 0;
     cd6:	10 92 a2 01 	sts	0x01A2, r1
     cda:	10 92 a3 01 	sts	0x01A3, r1
     cde:	10 92 a4 01 	sts	0x01A4, r1
     ce2:	10 92 a5 01 	sts	0x01A5, r1
  count = 0;
     ce6:	10 92 3d 01 	sts	0x013D, r1
     cea:	10 92 3c 01 	sts	0x013C, r1

  sei();
     cee:	78 94       	sei
}
     cf0:	08 95       	ret

00000cf2 <__vector_7>:

// timer2 compare A handler
ISR(T2_vect) {
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	2f 93       	push	r18
     cfe:	8f 93       	push	r24
     d00:	9f 93       	push	r25
     d02:	af 93       	push	r26
     d04:	bf 93       	push	r27
  ++timer_100us;
     d06:	80 91 a8 01 	lds	r24, 0x01A8
     d0a:	90 91 a9 01 	lds	r25, 0x01A9
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	90 93 a9 01 	sts	0x01A9, r25
     d14:	80 93 a8 01 	sts	0x01A8, r24
  ++time_stamp;
     d18:	80 91 a2 01 	lds	r24, 0x01A2
     d1c:	90 91 a3 01 	lds	r25, 0x01A3
     d20:	a0 91 a4 01 	lds	r26, 0x01A4
     d24:	b0 91 a5 01 	lds	r27, 0x01A5
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	a1 1d       	adc	r26, r1
     d2c:	b1 1d       	adc	r27, r1
     d2e:	80 93 a2 01 	sts	0x01A2, r24
     d32:	90 93 a3 01 	sts	0x01A3, r25
     d36:	a0 93 a4 01 	sts	0x01A4, r26
     d3a:	b0 93 a5 01 	sts	0x01A5, r27
  ++count;
     d3e:	80 91 3c 01 	lds	r24, 0x013C
     d42:	90 91 3d 01 	lds	r25, 0x013D
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	90 93 3d 01 	sts	0x013D, r25
     d4c:	80 93 3c 01 	sts	0x013C, r24
  if(count >= 1000) {
     d50:	88 5e       	subi	r24, 0xE8	; 232
     d52:	93 40       	sbci	r25, 0x03	; 3
     d54:	68 f0       	brcs	.+26     	; 0xd70 <__vector_7+0x7e>
    count = 0;
     d56:	10 92 3d 01 	sts	0x013D, r1
     d5a:	10 92 3c 01 	sts	0x013C, r1
    timer_10ms++;
     d5e:	80 91 a6 01 	lds	r24, 0x01A6
     d62:	90 91 a7 01 	lds	r25, 0x01A7
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	90 93 a7 01 	sts	0x01A7, r25
     d6c:	80 93 a6 01 	sts	0x01A6, r24
  }
}
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	2f 91       	pop	r18
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	0f 90       	pop	r0
     d80:	1f 90       	pop	r1
     d82:	18 95       	reti

00000d84 <timer_delay_10ms>:

/// Busy-wait for supplied number of 10ms intervals
void timer_delay_10ms(u16 uwIntervalCount) {
     d84:	9c 01       	movw	r18, r24
	timer_10ms=0;
     d86:	10 92 a7 01 	sts	0x01A7, r1
     d8a:	10 92 a6 01 	sts	0x01A6, r1
	while(timer_10ms<uwIntervalCount);
     d8e:	80 91 a6 01 	lds	r24, 0x01A6
     d92:	90 91 a7 01 	lds	r25, 0x01A7
     d96:	82 17       	cp	r24, r18
     d98:	93 07       	cpc	r25, r19
     d9a:	c8 f3       	brcs	.-14     	; 0xd8e <timer_delay_10ms+0xa>
}
     d9c:	08 95       	ret

00000d9e <timer_delay_100us>:

/// Busy-wait for supplied number of 100us intervals
void timer_delay_100us(u16 uwIntervalCount) {
     d9e:	9c 01       	movw	r18, r24
	timer_100us=0;
     da0:	10 92 a9 01 	sts	0x01A9, r1
     da4:	10 92 a8 01 	sts	0x01A8, r1
	while(timer_100us<uwIntervalCount);
     da8:	80 91 a8 01 	lds	r24, 0x01A8
     dac:	90 91 a9 01 	lds	r25, 0x01A9
     db0:	82 17       	cp	r24, r18
     db2:	93 07       	cpc	r25, r19
     db4:	c8 f3       	brcs	.-14     	; 0xda8 <timer_delay_100us+0xa>
}
     db6:	08 95       	ret

00000db8 <timer_hw_calc_rate_kbs>:

/// Calculates bitrate based on transferred byte count and elapsed time
u16 timer_hw_calc_rate_kbs(u16 bytes, u16 delta) {
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	eb 01       	movw	r28, r22
  if(delta != 0) {
     dbe:	61 15       	cp	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	19 f4       	brne	.+6      	; 0xdca <timer_hw_calc_rate_kbs+0x12>
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	16 c0       	rjmp	.+44     	; 0xdf6 <timer_hw_calc_rate_kbs+0x3e>
    u32 nom = 1000 * (u32)bytes * 100;
    u32 denom = (u32)delta * 4;
    u32 rate = nom / denom;
    return (u16)rate;
     dca:	bc 01       	movw	r22, r24
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	20 ea       	ldi	r18, 0xA0	; 160
     dd2:	36 e8       	ldi	r19, 0x86	; 134
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__mulsi3>
     ddc:	9e 01       	movw	r18, r28
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
     de6:	44 1f       	adc	r20, r20
     de8:	55 1f       	adc	r21, r21
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	44 1f       	adc	r20, r20
     df0:	55 1f       	adc	r21, r21
     df2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__udivmodsi4>
  }
	else
		return 0;
}
     df6:	82 2f       	mov	r24, r18
     df8:	93 2f       	mov	r25, r19
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <uart_init>:
static volatile u08 uart_rx_end = 0;
static volatile u08 uart_rx_size = 0;

void uart_init(void)
{
  cli();
     e00:	f8 94       	cli

  // disable first
  UCSRB = 0;
     e02:	e1 ec       	ldi	r30, 0xC1	; 193
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	10 82       	st	Z, r1

  // baud rate
  UBRRH = (u08)((UART_UBRR)>>8);
     e08:	10 92 c5 00 	sts	0x00C5, r1
  UBRRL = (u08)((UART_UBRR)&0xff);
     e0c:	80 e1       	ldi	r24, 0x10	; 16
     e0e:	80 93 c4 00 	sts	0x00C4, r24

  UCSRB = 0x98; // 0x18  enable tranceiver and transmitter, RX interrupt
     e12:	88 e9       	ldi	r24, 0x98	; 152
     e14:	80 83       	st	Z, r24
  UCSRC = 0x86; // 0x86 -> use UCSRC, 8 bit, 1 stop, no parity, asynch. mode
     e16:	86 e8       	ldi	r24, 0x86	; 134
     e18:	80 93 c2 00 	sts	0x00C2, r24

  sei();
     e1c:	78 94       	sei

  uart_rx_start = 0;
     e1e:	10 92 3e 01 	sts	0x013E, r1
  uart_rx_end = 0;
     e22:	10 92 3f 01 	sts	0x013F, r1
  uart_rx_size = 0;
     e26:	10 92 40 01 	sts	0x0140, r1
}
     e2a:	08 95       	ret

00000e2c <__vector_18>:
#ifdef USART_RXC_vect
ISR(USART_RXC_vect)
#else
ISR(USART_RX_vect)
#endif
{
     e2c:	1f 92       	push	r1
     e2e:	0f 92       	push	r0
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	0f 92       	push	r0
     e34:	11 24       	eor	r1, r1
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
  u08 data = UDR;
     e3e:	90 91 c6 00 	lds	r25, 0x00C6
  uart_rx_buf[uart_rx_end] = data;
     e42:	80 91 3f 01 	lds	r24, 0x013F
     e46:	e1 e4       	ldi	r30, 0x41	; 65
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	e8 0f       	add	r30, r24
     e4c:	f1 1d       	adc	r31, r1
     e4e:	90 83       	st	Z, r25

  uart_rx_end++;
     e50:	80 91 3f 01 	lds	r24, 0x013F
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	80 93 3f 01 	sts	0x013F, r24
  if(uart_rx_end == UART_RX_BUF_SIZE)
     e5a:	80 91 3f 01 	lds	r24, 0x013F
     e5e:	80 31       	cpi	r24, 0x10	; 16
     e60:	11 f4       	brne	.+4      	; 0xe66 <__vector_18+0x3a>
    uart_rx_end = 0;
     e62:	10 92 3f 01 	sts	0x013F, r1

  uart_rx_size++;
     e66:	80 91 40 01 	lds	r24, 0x0140
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	80 93 40 01 	sts	0x0140, r24
}
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	9f 91       	pop	r25
     e76:	8f 91       	pop	r24
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <uart_read_data_available>:

u08 uart_read_data_available(void)
{
  return uart_rx_start != uart_rx_end;
     e82:	90 91 3e 01 	lds	r25, 0x013E
     e86:	80 91 3f 01 	lds	r24, 0x013F
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	98 13       	cpse	r25, r24
     e8e:	21 e0       	ldi	r18, 0x01	; 1
}
     e90:	82 2f       	mov	r24, r18
     e92:	08 95       	ret

00000e94 <uart_read>:

u08 uart_read(void)
{
  // wait for buffe to be filled
  while(uart_rx_start==uart_rx_end);
     e94:	90 91 3e 01 	lds	r25, 0x013E
     e98:	80 91 3f 01 	lds	r24, 0x013F
     e9c:	98 17       	cp	r25, r24
     e9e:	d1 f3       	breq	.-12     	; 0xe94 <uart_read>

  // read buffer
  cli();
     ea0:	f8 94       	cli

  u08 data = uart_rx_buf[uart_rx_start];
     ea2:	80 91 3e 01 	lds	r24, 0x013E
     ea6:	e1 e4       	ldi	r30, 0x41	; 65
     ea8:	f1 e0       	ldi	r31, 0x01	; 1
     eaa:	e8 0f       	add	r30, r24
     eac:	f1 1d       	adc	r31, r1
     eae:	e0 81       	ld	r30, Z

  uart_rx_start++;
     eb0:	80 91 3e 01 	lds	r24, 0x013E
     eb4:	8f 5f       	subi	r24, 0xFF	; 255
     eb6:	80 93 3e 01 	sts	0x013E, r24
  if(uart_rx_start == UART_RX_BUF_SIZE)
     eba:	80 91 3e 01 	lds	r24, 0x013E
     ebe:	80 31       	cpi	r24, 0x10	; 16
     ec0:	11 f4       	brne	.+4      	; 0xec6 <uart_read+0x32>
    uart_rx_start = 0;
     ec2:	10 92 3e 01 	sts	0x013E, r1

  uart_rx_size--;
     ec6:	80 91 40 01 	lds	r24, 0x0140
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	80 93 40 01 	sts	0x0140, r24

  sei();
     ed0:	78 94       	sei
  return data;
}
     ed2:	8e 2f       	mov	r24, r30
     ed4:	08 95       	ret

00000ed6 <uart_send>:

void uart_send(u08 data)
{
     ed6:	98 2f       	mov	r25, r24
  // wait for transmitter to become ready
  while(!( UCSRA & (1<<UDRE)));
     ed8:	e0 ec       	ldi	r30, 0xC0	; 192
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	85 ff       	sbrs	r24, 5
     ee0:	fd cf       	rjmp	.-6      	; 0xedc <uart_send+0x6>

  // send byte
  UDR = data;
     ee2:	90 93 c6 00 	sts	0x00C6, r25
}
     ee6:	08 95       	ret

00000ee8 <uart_send_spc>:
  uart_send_pstring(PSTR("\r\n"));
}

void uart_send_spc(void)
{
  uart_send((u08)' ');
     ee8:	80 e2       	ldi	r24, 0x20	; 32
     eea:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
}
     eee:	08 95       	ret

00000ef0 <uart_send_data>:
    str++;
  }
}

void uart_send_data(u08 *data,u08 len)
{
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	06 2f       	mov	r16, r22
	u08 i;
  for(i=0;i<len;i++)
     efa:	66 23       	and	r22, r22
     efc:	59 f0       	breq	.+22     	; 0xf14 <uart_send_data+0x24>
     efe:	18 2f       	mov	r17, r24
     f00:	28 2f       	mov	r18, r24
     f02:	39 2f       	mov	r19, r25
     f04:	e9 01       	movw	r28, r18
    uart_send(data[i]);
     f06:	89 91       	ld	r24, Y+
     f08:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
}

void uart_send_data(u08 *data,u08 len)
{
	u08 i;
  for(i=0;i<len;i++)
     f0c:	9e 01       	movw	r18, r28
     f0e:	21 1b       	sub	r18, r17
     f10:	20 17       	cp	r18, r16
     f12:	c8 f3       	brcs	.-14     	; 0xf06 <uart_send_data+0x16>
    uart_send(data[i]);
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	08 95       	ret

00000f1e <uart_send_hex_dword>:
  word_to_hex(data,buf);
  uart_send_data(buf,4);
}

void uart_send_hex_dword(u32 data)
{
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
  dword_to_hex(data,buf);
     f22:	01 e5       	ldi	r16, 0x51	; 81
     f24:	11 e0       	ldi	r17, 0x01	; 1
     f26:	a8 01       	movw	r20, r16
     f28:	0e 94 9c 08 	call	0x1138	; 0x1138 <dword_to_hex>
  uart_send_data(buf,8);
     f2c:	c8 01       	movw	r24, r16
     f2e:	68 e0       	ldi	r22, 0x08	; 8
     f30:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_send_data>
}
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <uart_send_hex_word>:
  byte_to_hex(data,buf);
  uart_send_data(buf,2);
}

void uart_send_hex_word(u16 data)
{
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
  word_to_hex(data,buf);
     f3e:	01 e5       	ldi	r16, 0x51	; 81
     f40:	11 e0       	ldi	r17, 0x01	; 1
     f42:	b8 01       	movw	r22, r16
     f44:	0e 94 8a 08 	call	0x1114	; 0x1114 <word_to_hex>
  uart_send_data(buf,4);
     f48:	c8 01       	movw	r24, r16
     f4a:	64 e0       	ldi	r22, 0x04	; 4
     f4c:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_send_data>
}
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	08 95       	ret

00000f56 <uart_send_hex_byte>:
  }
  uart_send_data(buf,5);
}

void uart_send_hex_byte(u08 data)
{
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
  byte_to_hex(data,buf);
     f5a:	01 e5       	ldi	r16, 0x51	; 81
     f5c:	11 e0       	ldi	r17, 0x01	; 1
     f5e:	b8 01       	movw	r22, r16
     f60:	0e 94 75 08 	call	0x10ea	; 0x10ea <byte_to_hex>
  uart_send_data(buf,2);
     f64:	c8 01       	movw	r24, r16
     f66:	62 e0       	ldi	r22, 0x02	; 2
     f68:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_send_data>
}
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	08 95       	ret

00000f72 <uart_send_delta>:
  uart_send_data(buf,7);
  uart_send_pstring(PSTR(" KB/s"));
}

void uart_send_delta(u32 delta)
{
     f72:	0f 93       	push	r16
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
  // huge -> show upper hex
  if(delta > 0xffff) {
     f78:	20 30       	cpi	r18, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	38 07       	cpc	r19, r24
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	48 07       	cpc	r20, r24
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	58 07       	cpc	r21, r24
     f86:	58 f0       	brcs	.+22     	; 0xf9e <uart_send_delta+0x2c>
    buf[0] = '!';
     f88:	e1 e5       	ldi	r30, 0x51	; 81
     f8a:	f1 e0       	ldi	r31, 0x01	; 1
     f8c:	81 e2       	ldi	r24, 0x21	; 33
     f8e:	81 93       	st	Z+, r24
    word_to_hex((u16)(delta >> 16), buf+1);
     f90:	ca 01       	movw	r24, r20
     f92:	aa 27       	eor	r26, r26
     f94:	bb 27       	eor	r27, r27
     f96:	bf 01       	movw	r22, r30
     f98:	0e 94 8a 08 	call	0x1114	; 0x1114 <word_to_hex>
     f9c:	1c c0       	rjmp	.+56     	; 0xfd6 <uart_send_delta+0x64>
  }
  // for too large numbers use hex
  else if(delta > 9999) {
     f9e:	20 31       	cpi	r18, 0x10	; 16
     fa0:	87 e2       	ldi	r24, 0x27	; 39
     fa2:	38 07       	cpc	r19, r24
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	48 07       	cpc	r20, r24
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	58 07       	cpc	r21, r24
     fac:	48 f0       	brcs	.+18     	; 0xfc0 <uart_send_delta+0x4e>
    buf[0] = '>';
     fae:	e1 e5       	ldi	r30, 0x51	; 81
     fb0:	f1 e0       	ldi	r31, 0x01	; 1
     fb2:	8e e3       	ldi	r24, 0x3E	; 62
     fb4:	81 93       	st	Z+, r24
    word_to_hex(delta, buf+1);
     fb6:	c9 01       	movw	r24, r18
     fb8:	bf 01       	movw	r22, r30
     fba:	0e 94 8a 08 	call	0x1114	; 0x1114 <word_to_hex>
     fbe:	0b c0       	rjmp	.+22     	; 0xfd6 <uart_send_delta+0x64>
  }
  // for smaller numbers use decimal
  else {
    buf[0] = '+';
     fc0:	e1 e5       	ldi	r30, 0x51	; 81
     fc2:	f1 e0       	ldi	r31, 0x01	; 1
     fc4:	8b e2       	ldi	r24, 0x2B	; 43
     fc6:	81 93       	st	Z+, r24
    dword_to_dec(delta, buf+1, 4, 4);
     fc8:	ca 01       	movw	r24, r20
     fca:	b9 01       	movw	r22, r18
     fcc:	af 01       	movw	r20, r30
     fce:	24 e0       	ldi	r18, 0x04	; 4
     fd0:	04 e0       	ldi	r16, 0x04	; 4
     fd2:	0e 94 ce 08 	call	0x119c	; 0x119c <dword_to_dec>
  }
  uart_send_data(buf,5);
     fd6:	81 e5       	ldi	r24, 0x51	; 81
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	65 e0       	ldi	r22, 0x05	; 5
     fdc:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_send_data>
}
     fe0:	0f 91       	pop	r16
     fe2:	08 95       	ret

00000fe4 <uart_send_time_stamp_spc_ext>:
  buf[11] = ' ';
  uart_send_data(buf,12);
}

void uart_send_time_stamp_spc_ext(u32 ts)
{
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
  dword_to_dec(ts, buf, 10, 4);
     fea:	0f 2e       	mov	r0, r31
     fec:	f1 e5       	ldi	r31, 0x51	; 81
     fee:	ef 2e       	mov	r14, r31
     ff0:	f1 e0       	ldi	r31, 0x01	; 1
     ff2:	ff 2e       	mov	r15, r31
     ff4:	f0 2d       	mov	r31, r0
     ff6:	a7 01       	movw	r20, r14
     ff8:	2a e0       	ldi	r18, 0x0A	; 10
     ffa:	04 e0       	ldi	r16, 0x04	; 4
     ffc:	0e 94 ce 08 	call	0x119c	; 0x119c <dword_to_dec>
  buf[11] = ' ';
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	f7 01       	movw	r30, r14
    1004:	83 87       	std	Z+11, r24	; 0x0b
  uart_send_data(buf,12);
    1006:	c7 01       	movw	r24, r14
    1008:	6c e0       	ldi	r22, 0x0C	; 12
    100a:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_send_data>
}
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	08 95       	ret

00001016 <uart_send_time_stamp_spc>:
}

static u08 buf[12];

void uart_send_time_stamp_spc(void)
{
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	0f 93       	push	r16
  u32 ts = time_stamp;
    101c:	60 91 a2 01 	lds	r22, 0x01A2
    1020:	70 91 a3 01 	lds	r23, 0x01A3
    1024:	80 91 a4 01 	lds	r24, 0x01A4
    1028:	90 91 a5 01 	lds	r25, 0x01A5
  dword_to_dec(ts, buf, 10, 4);
    102c:	0f 2e       	mov	r0, r31
    102e:	f1 e5       	ldi	r31, 0x51	; 81
    1030:	ef 2e       	mov	r14, r31
    1032:	f1 e0       	ldi	r31, 0x01	; 1
    1034:	ff 2e       	mov	r15, r31
    1036:	f0 2d       	mov	r31, r0
    1038:	a7 01       	movw	r20, r14
    103a:	2a e0       	ldi	r18, 0x0A	; 10
    103c:	04 e0       	ldi	r16, 0x04	; 4
    103e:	0e 94 ce 08 	call	0x119c	; 0x119c <dword_to_dec>
  buf[11] = ' ';
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	f7 01       	movw	r30, r14
    1046:	83 87       	std	Z+11, r24	; 0x0b
  uart_send_data(buf,12);
    1048:	c7 01       	movw	r24, r14
    104a:	6c e0       	ldi	r22, 0x0C	; 12
    104c:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_send_data>
}
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	08 95       	ret

00001058 <uart_send_string>:
    data++;
  }
}

void uart_send_string(const char *str)
{
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	ec 01       	movw	r28, r24
  while(*str) {
    105e:	88 81       	ld	r24, Y
    1060:	88 23       	and	r24, r24
    1062:	31 f0       	breq	.+12     	; 0x1070 <uart_send_string+0x18>
    uart_send((u08)*str);
    1064:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    str++;
    1068:	21 96       	adiw	r28, 0x01	; 1
  }
}

void uart_send_string(const char *str)
{
  while(*str) {
    106a:	88 81       	ld	r24, Y
    106c:	88 23       	and	r24, r24
    106e:	d1 f7       	brne	.-12     	; 0x1064 <uart_send_string+0xc>
    uart_send((u08)*str);
    str++;
  }
}
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <uart_send_pstring>:
#include "util.h"
#include "uartutil.h"
#include "timer.h"

void uart_send_pstring(PGM_P data)
{
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	ec 01       	movw	r28, r24
  while(1) {
    u08 c = pgm_read_byte_near(data);
    107c:	fc 01       	movw	r30, r24
    107e:	84 91       	lpm	r24, Z+
    if(c == 0) {
    1080:	88 23       	and	r24, r24
    1082:	39 f0       	breq	.+14     	; 0x1092 <uart_send_pstring+0x1c>
      break;
    }
    uart_send(c);
    1084:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    data++;
    1088:	21 96       	adiw	r28, 0x01	; 1
#include "timer.h"

void uart_send_pstring(PGM_P data)
{
  while(1) {
    u08 c = pgm_read_byte_near(data);
    108a:	fe 01       	movw	r30, r28
    108c:	84 91       	lpm	r24, Z+
    if(c == 0) {
    108e:	88 23       	and	r24, r24
    1090:	c9 f7       	brne	.-14     	; 0x1084 <uart_send_pstring+0xe>
      break;
    }
    uart_send(c);
    data++;
  }
}
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <uart_send_rate_kbs>:
  buf[11] = ' ';
  uart_send_data(buf,12);
}

void uart_send_rate_kbs(u16 kbs)
{
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
  dword_to_dec(kbs, buf, 6, 2);
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	0f 2e       	mov	r0, r31
    10a4:	f1 e5       	ldi	r31, 0x51	; 81
    10a6:	ef 2e       	mov	r14, r31
    10a8:	f1 e0       	ldi	r31, 0x01	; 1
    10aa:	ff 2e       	mov	r15, r31
    10ac:	f0 2d       	mov	r31, r0
    10ae:	bc 01       	movw	r22, r24
    10b0:	cd 01       	movw	r24, r26
    10b2:	a7 01       	movw	r20, r14
    10b4:	26 e0       	ldi	r18, 0x06	; 6
    10b6:	02 e0       	ldi	r16, 0x02	; 2
    10b8:	0e 94 ce 08 	call	0x119c	; 0x119c <dword_to_dec>
  uart_send_data(buf,7);
    10bc:	c7 01       	movw	r24, r14
    10be:	67 e0       	ldi	r22, 0x07	; 7
    10c0:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_send_data>
  uart_send_pstring(PSTR(" KB/s"));
    10c4:	84 e3       	ldi	r24, 0x34	; 52
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
}
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	08 95       	ret

000010d4 <uart_send_crlf>:
    uart_send(data[i]);
}

void uart_send_crlf(void)
{
  uart_send_pstring(PSTR("\r\n"));
    10d4:	8a e3       	ldi	r24, 0x3A	; 58
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
}
    10dc:	08 95       	ret

000010de <nybble_to_hex>:

// convert to hex

u08 nybble_to_hex(u08 in)
{
  if(in<10)
    10de:	8a 30       	cpi	r24, 0x0A	; 10
    10e0:	10 f4       	brcc	.+4      	; 0x10e6 <nybble_to_hex+0x8>
    return '0' + in;
    10e2:	80 5d       	subi	r24, 0xD0	; 208
    10e4:	08 95       	ret
  else
    return 'A' + in - 10;
    10e6:	89 5c       	subi	r24, 0xC9	; 201
}
    10e8:	08 95       	ret

000010ea <byte_to_hex>:

void byte_to_hex(u08 in,u08 *out)
{
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	f8 2e       	mov	r15, r24
    10f2:	8b 01       	movw	r16, r22
  out[0] = nybble_to_hex(in >> 4);
    10f4:	82 95       	swap	r24
    10f6:	8f 70       	andi	r24, 0x0F	; 15
    10f8:	0e 94 6f 08 	call	0x10de	; 0x10de <nybble_to_hex>
    10fc:	f8 01       	movw	r30, r16
    10fe:	80 83       	st	Z, r24
  out[1] = nybble_to_hex(in & 0xf);
    1100:	8f 2d       	mov	r24, r15
    1102:	8f 70       	andi	r24, 0x0F	; 15
    1104:	0e 94 6f 08 	call	0x10de	; 0x10de <nybble_to_hex>
    1108:	f8 01       	movw	r30, r16
    110a:	81 83       	std	Z+1, r24	; 0x01
}
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	08 95       	ret

00001114 <word_to_hex>:

void word_to_hex(u16 in,u08 *out)
{
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	f8 2e       	mov	r15, r24
    111c:	8b 01       	movw	r16, r22
  byte_to_hex((u08)(in>>8),out);
    111e:	89 2f       	mov	r24, r25
    1120:	0e 94 75 08 	call	0x10ea	; 0x10ea <byte_to_hex>
  byte_to_hex((u08)(in&0xff),out+2);
    1124:	0e 5f       	subi	r16, 0xFE	; 254
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	8f 2d       	mov	r24, r15
    112a:	b8 01       	movw	r22, r16
    112c:	0e 94 75 08 	call	0x10ea	; 0x10ea <byte_to_hex>
}
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	08 95       	ret

00001138 <dword_to_hex>:

void dword_to_hex(u32 addr,u08 *out)
{
    1138:	cf 92       	push	r12
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	6b 01       	movw	r12, r22
    1146:	7c 01       	movw	r14, r24
    1148:	8a 01       	movw	r16, r20
  word_to_hex((u16)(addr>>16),out);
    114a:	aa 27       	eor	r26, r26
    114c:	bb 27       	eor	r27, r27
    114e:	ba 01       	movw	r22, r20
    1150:	0e 94 8a 08 	call	0x1114	; 0x1114 <word_to_hex>
  word_to_hex((u16)(addr&0xffff),out+4);
    1154:	0c 5f       	subi	r16, 0xFC	; 252
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	c6 01       	movw	r24, r12
    115a:	b8 01       	movw	r22, r16
    115c:	0e 94 8a 08 	call	0x1114	; 0x1114 <word_to_hex>
}
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret

0000116e <byte_to_dec>:

void byte_to_dec(u08 value, u08 *out)
{
    116e:	28 2f       	mov	r18, r24
    1170:	fb 01       	movw	r30, r22
  u08 h = value / 100;
  u08 t = value % 100;
    1172:	64 e6       	ldi	r22, 0x64	; 100
    1174:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodqi4>
    1178:	39 2f       	mov	r19, r25
  u08 o = t % 10;
  t = t / 10;
  out[0] = '0' + h;
    117a:	82 2f       	mov	r24, r18
    117c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodqi4>
    1180:	80 5d       	subi	r24, 0xD0	; 208
    1182:	80 83       	st	Z, r24
  out[1] = '0' + t;
    1184:	83 2f       	mov	r24, r19
    1186:	6a e0       	ldi	r22, 0x0A	; 10
    1188:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodqi4>
    118c:	80 5d       	subi	r24, 0xD0	; 208
    118e:	81 83       	std	Z+1, r24	; 0x01
  out[2] = '0' + o;
    1190:	83 2f       	mov	r24, r19
    1192:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodqi4>
    1196:	90 5d       	subi	r25, 0xD0	; 208
    1198:	92 83       	std	Z+2, r25	; 0x02
}
    119a:	08 95       	ret

0000119c <dword_to_dec>:

void dword_to_dec(u32 value, u08 *out, u08 num_digits, u08 point_pos)
{
    119c:	af 92       	push	r10
    119e:	bf 92       	push	r11
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	c6 2e       	mov	r12, r22
    11b2:	d7 2e       	mov	r13, r23
    11b4:	e8 2e       	mov	r14, r24
    11b6:	f9 2e       	mov	r15, r25
    11b8:	b2 2e       	mov	r11, r18
	u08 i;
  // start backwards
  u08 *pos = out + num_digits - 1;
    11ba:	82 2f       	mov	r24, r18
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	ea 01       	movw	r28, r20
    11c2:	c8 0f       	add	r28, r24
    11c4:	d9 1f       	adc	r29, r25
  if(point_pos < num_digits) {
    11c6:	02 17       	cp	r16, r18
    11c8:	08 f4       	brcc	.+2      	; 0x11cc <dword_to_dec+0x30>
    pos++;
    11ca:	21 96       	adiw	r28, 0x01	; 1
  }
  for(i=0;i<num_digits;i++) {
    11cc:	bb 20       	and	r11, r11
    11ce:	41 f1       	breq	.+80     	; 0x1220 <dword_to_dec+0x84>
    11d0:	10 e0       	ldi	r17, 0x00	; 0
    if(i == point_pos) {
      *pos = '.';
    11d2:	0f 2e       	mov	r0, r31
    11d4:	fe e2       	ldi	r31, 0x2E	; 46
    11d6:	af 2e       	mov	r10, r31
    11d8:	f0 2d       	mov	r31, r0
  u08 *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
    if(i == point_pos) {
    11da:	10 17       	cp	r17, r16
    11dc:	11 f4       	brne	.+4      	; 0x11e2 <dword_to_dec+0x46>
      *pos = '.';
    11de:	a8 82       	st	Y, r10
      pos--;
    11e0:	21 97       	sbiw	r28, 0x01	; 1
    }
    u08 dec = value % 10;
    *pos = '0' + dec;
    11e2:	6c 2d       	mov	r22, r12
    11e4:	7d 2d       	mov	r23, r13
    11e6:	8e 2d       	mov	r24, r14
    11e8:	9f 2d       	mov	r25, r15
    11ea:	2a e0       	ldi	r18, 0x0A	; 10
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__udivmodsi4>
    11f6:	60 5d       	subi	r22, 0xD0	; 208
    11f8:	68 83       	st	Y, r22
  // start backwards
  u08 *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
    11fa:	1f 5f       	subi	r17, 0xFF	; 255
    11fc:	1b 15       	cp	r17, r11
    11fe:	80 f4       	brcc	.+32     	; 0x1220 <dword_to_dec+0x84>
      *pos = '.';
      pos--;
    }
    u08 dec = value % 10;
    *pos = '0' + dec;
    pos--;
    1200:	21 97       	sbiw	r28, 0x01	; 1
    value /= 10;
    1202:	6c 2d       	mov	r22, r12
    1204:	7d 2d       	mov	r23, r13
    1206:	8e 2d       	mov	r24, r14
    1208:	9f 2d       	mov	r25, r15
    120a:	2a e0       	ldi	r18, 0x0A	; 10
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e0       	ldi	r20, 0x00	; 0
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__udivmodsi4>
    1216:	c2 2e       	mov	r12, r18
    1218:	d3 2e       	mov	r13, r19
    121a:	e4 2e       	mov	r14, r20
    121c:	f5 2e       	mov	r15, r21
    121e:	dd cf       	rjmp	.-70     	; 0x11da <dword_to_dec+0x3e>
  }
}
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	08 95       	ret

00001236 <parse_nybble>:

// parse

u08 parse_nybble(u08 c,u08 *value)
{
    1236:	98 2f       	mov	r25, r24
    1238:	fb 01       	movw	r30, r22
  if((c>='a')&&(c<='f')) {
    123a:	81 56       	subi	r24, 0x61	; 97
    123c:	86 30       	cpi	r24, 0x06	; 6
    123e:	20 f4       	brcc	.+8      	; 0x1248 <parse_nybble+0x12>
    *value = c + 10 - 'a';
    1240:	86 5f       	subi	r24, 0xF6	; 246
    1242:	80 83       	st	Z, r24
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	08 95       	ret
    return 1;
  }
  else if((c>='A')&&(c<='F')) {
    1248:	89 2f       	mov	r24, r25
    124a:	81 54       	subi	r24, 0x41	; 65
    124c:	86 30       	cpi	r24, 0x06	; 6
    124e:	20 f4       	brcc	.+8      	; 0x1258 <parse_nybble+0x22>
    *value = c + 10 - 'A';
    1250:	86 5f       	subi	r24, 0xF6	; 246
    1252:	80 83       	st	Z, r24
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	08 95       	ret
    return 1;
  }
  else if((c>='0')&&(c<='9')) {
    1258:	89 2f       	mov	r24, r25
    125a:	80 53       	subi	r24, 0x30	; 48
    125c:	8a 30       	cpi	r24, 0x0A	; 10
    125e:	10 f0       	brcs	.+4      	; 0x1264 <parse_nybble+0x2e>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	08 95       	ret
    *value = c - '0';
    1264:	80 83       	st	Z, r24
    1266:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
  }
  else
    return 0;
}
    1268:	08 95       	ret

0000126a <parse_byte>:

u08 parse_byte(const u08 *str,u08 *value)
{
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	0f 92       	push	r0
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	8c 01       	movw	r16, r24
    127e:	7b 01       	movw	r14, r22
  u08 val;
  if(!parse_nybble(str[0],&val))
    1280:	fc 01       	movw	r30, r24
    1282:	80 81       	ld	r24, Z
    1284:	be 01       	movw	r22, r28
    1286:	6f 5f       	subi	r22, 0xFF	; 255
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	0e 94 1b 09 	call	0x1236	; 0x1236 <parse_nybble>
    128e:	88 23       	and	r24, r24
    1290:	91 f0       	breq	.+36     	; 0x12b6 <parse_byte+0x4c>
    return 0;
  val <<= 4;
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	82 95       	swap	r24
    1296:	80 7f       	andi	r24, 0xF0	; 240
    1298:	89 83       	std	Y+1, r24	; 0x01
  if(!parse_nybble(str[1],value))
    129a:	f8 01       	movw	r30, r16
    129c:	81 81       	ldd	r24, Z+1	; 0x01
    129e:	b7 01       	movw	r22, r14
    12a0:	0e 94 1b 09 	call	0x1236	; 0x1236 <parse_nybble>
    12a4:	88 23       	and	r24, r24
    12a6:	39 f0       	breq	.+14     	; 0x12b6 <parse_byte+0x4c>
    return 0;
  *value |= val;
    12a8:	f7 01       	movw	r30, r14
    12aa:	80 81       	ld	r24, Z
    12ac:	99 81       	ldd	r25, Y+1	; 0x01
    12ae:	89 2b       	or	r24, r25
    12b0:	80 83       	st	Z, r24
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <parse_byte+0x4e>
  return 1;
    12b6:	80 e0       	ldi	r24, 0x00	; 0
}
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	08 95       	ret

000012c8 <parse_word>:

u08 parse_word(const u08 *str,u16 *value)
{
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <parse_word+0xe>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	8c 01       	movw	r16, r24
    12dc:	7b 01       	movw	r14, r22
  u08 val;
  if(!parse_byte(&str[0],&val))
    12de:	be 01       	movw	r22, r28
    12e0:	6f 5f       	subi	r22, 0xFF	; 255
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	0e 94 35 09 	call	0x126a	; 0x126a <parse_byte>
    12e8:	88 23       	and	r24, r24
    12ea:	a1 f0       	breq	.+40     	; 0x1314 <parse_word+0x4c>
    return 0;
  u08 val2;
  if(!parse_byte(&str[2],&val2))
    12ec:	c8 01       	movw	r24, r16
    12ee:	02 96       	adiw	r24, 0x02	; 2
    12f0:	be 01       	movw	r22, r28
    12f2:	6e 5f       	subi	r22, 0xFE	; 254
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	0e 94 35 09 	call	0x126a	; 0x126a <parse_byte>
    12fa:	88 23       	and	r24, r24
    12fc:	59 f0       	breq	.+22     	; 0x1314 <parse_word+0x4c>
    return 0;
  *value = (u16)val << 8 | val2;
    12fe:	99 81       	ldd	r25, Y+1	; 0x01
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	2a 81       	ldd	r18, Y+2	; 0x02
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	82 2b       	or	r24, r18
    1308:	93 2b       	or	r25, r19
    130a:	f7 01       	movw	r30, r14
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	80 83       	st	Z, r24
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <parse_word+0x4e>
  return 1;
    1314:	80 e0       	ldi	r24, 0x00	; 0
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	ff 90       	pop	r15
    1324:	ef 90       	pop	r14
    1326:	08 95       	ret

00001328 <parse_dword>:

u08 parse_dword(const u08 *str,u32 *value)
{
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <parse_dword+0xe>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <parse_dword+0x10>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	8c 01       	movw	r16, r24
    133e:	7b 01       	movw	r14, r22
  u08 val;
  if(!parse_byte(&str[0],&val))
    1340:	be 01       	movw	r22, r28
    1342:	6f 5f       	subi	r22, 0xFF	; 255
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	0e 94 35 09 	call	0x126a	; 0x126a <parse_byte>
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <parse_dword+0x28>
    134e:	4a c0       	rjmp	.+148    	; 0x13e4 <parse_dword+0xbc>
    return 0;
  u08 val2;
  if(!parse_byte(&str[2],&val2))
    1350:	c8 01       	movw	r24, r16
    1352:	02 96       	adiw	r24, 0x02	; 2
    1354:	be 01       	movw	r22, r28
    1356:	6e 5f       	subi	r22, 0xFE	; 254
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	0e 94 35 09 	call	0x126a	; 0x126a <parse_byte>
    135e:	88 23       	and	r24, r24
    1360:	09 f4       	brne	.+2      	; 0x1364 <parse_dword+0x3c>
    1362:	40 c0       	rjmp	.+128    	; 0x13e4 <parse_dword+0xbc>
    return 0;
  u08 val3;
  if(!parse_byte(&str[4],&val3))
    1364:	c8 01       	movw	r24, r16
    1366:	04 96       	adiw	r24, 0x04	; 4
    1368:	be 01       	movw	r22, r28
    136a:	6d 5f       	subi	r22, 0xFD	; 253
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	0e 94 35 09 	call	0x126a	; 0x126a <parse_byte>
    1372:	88 23       	and	r24, r24
    1374:	b9 f1       	breq	.+110    	; 0x13e4 <parse_dword+0xbc>
    return 0;
  u08 val4;
  if(!parse_byte(&str[6],&val4))
    1376:	c8 01       	movw	r24, r16
    1378:	06 96       	adiw	r24, 0x06	; 6
    137a:	be 01       	movw	r22, r28
    137c:	6c 5f       	subi	r22, 0xFC	; 252
    137e:	7f 4f       	sbci	r23, 0xFF	; 255
    1380:	0e 94 35 09 	call	0x126a	; 0x126a <parse_byte>
    1384:	88 23       	and	r24, r24
    1386:	71 f1       	breq	.+92     	; 0x13e4 <parse_dword+0xbc>
    return 0;
  *value = (u32)val << 24 | (u32)val2 << 16 | (u32)val3 << 8 | val4;
    1388:	29 81       	ldd	r18, Y+1	; 0x01
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	52 2f       	mov	r21, r18
    1392:	44 27       	eor	r20, r20
    1394:	33 27       	eor	r19, r19
    1396:	22 27       	eor	r18, r18
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a0 e0       	ldi	r26, 0x00	; 0
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	dc 01       	movw	r26, r24
    13a2:	99 27       	eor	r25, r25
    13a4:	88 27       	eor	r24, r24
    13a6:	28 2b       	or	r18, r24
    13a8:	39 2b       	or	r19, r25
    13aa:	4a 2b       	or	r20, r26
    13ac:	5b 2b       	or	r21, r27
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	a0 e0       	ldi	r26, 0x00	; 0
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	28 2b       	or	r18, r24
    13b8:	39 2b       	or	r19, r25
    13ba:	4a 2b       	or	r20, r26
    13bc:	5b 2b       	or	r21, r27
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a0 e0       	ldi	r26, 0x00	; 0
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ba 2f       	mov	r27, r26
    13c8:	a9 2f       	mov	r26, r25
    13ca:	98 2f       	mov	r25, r24
    13cc:	88 27       	eor	r24, r24
    13ce:	28 2b       	or	r18, r24
    13d0:	39 2b       	or	r19, r25
    13d2:	4a 2b       	or	r20, r26
    13d4:	5b 2b       	or	r21, r27
    13d6:	f7 01       	movw	r30, r14
    13d8:	20 83       	st	Z, r18
    13da:	31 83       	std	Z+1, r19	; 0x01
    13dc:	42 83       	std	Z+2, r20	; 0x02
    13de:	53 83       	std	Z+3, r21	; 0x03
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <parse_dword+0xbe>
  return 1;
    13e4:	80 e0       	ldi	r24, 0x00	; 0
}
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	08 95       	ret

000013fc <parse_byte_dec>:

u08 parse_byte_dec(const u08 *buf, u08 *out)
{
    13fc:	db 01       	movw	r26, r22
    13fe:	fc 01       	movw	r30, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	20 e0       	ldi	r18, 0x00	; 0
    u08 c = buf[digits];
    if((c<'0')||(c>'9')) {
      break;
    }
    c -= '0';
    value *= 10;
    1404:	4a e0       	ldi	r20, 0x0A	; 10
{
  u08 value = 0;
  u08 digits = 0;
  while(digits < 3) {
    u08 c = buf[digits];
    if((c<'0')||(c>'9')) {
    1406:	80 81       	ld	r24, Z
    1408:	98 2f       	mov	r25, r24
    140a:	90 53       	subi	r25, 0x30	; 48
    140c:	9a 30       	cpi	r25, 0x0A	; 10
    140e:	50 f4       	brcc	.+20     	; 0x1424 <parse_byte_dec+0x28>
      break;
    }
    c -= '0';
    value *= 10;
    1410:	34 9f       	mul	r19, r20
    1412:	80 2d       	mov	r24, r0
    1414:	11 24       	eor	r1, r1
    value += c;
    1416:	38 2f       	mov	r19, r24
    1418:	39 0f       	add	r19, r25
    digits++;
    141a:	2f 5f       	subi	r18, 0xFF	; 255
    141c:	31 96       	adiw	r30, 0x01	; 1

u08 parse_byte_dec(const u08 *buf, u08 *out)
{
  u08 value = 0;
  u08 digits = 0;
  while(digits < 3) {
    141e:	23 30       	cpi	r18, 0x03	; 3
    1420:	91 f7       	brne	.-28     	; 0x1406 <parse_byte_dec+0xa>
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <parse_byte_dec+0x2a>
    c -= '0';
    value *= 10;
    value += c;
    digits++;
  }
  if(digits > 0) {
    1424:	21 11       	cpse	r18, r1
    *out = value;
    1426:	3c 93       	st	X, r19
  }
  return digits;
}
    1428:	82 2f       	mov	r24, r18
    142a:	08 95       	ret

0000142c <board_init>:
#include "../board.h"

void board_init(void)
{
   // disable watchdog
   cli();                          /// Disable all interrupts
    142c:	f8 94       	cli
   MCUSR &= ~_BV(WDRF);            /// Reset watchdog status flag so watchdog can be disabled
    142e:	e4 e5       	ldi	r30, 0x54	; 84
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	87 7f       	andi	r24, 0xF7	; 247
    1436:	80 83       	st	Z, r24
   WDTCSR |= _BV(WDCE) | _BV(WDE); /// Enable watchdog alteration for next cycle
    1438:	e0 e6       	ldi	r30, 0x60	; 96
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	88 61       	ori	r24, 0x18	; 24
    1440:	80 83       	st	Z, r24
   WDTCSR = 0;                     /// Disable watchdog
    1442:	10 82       	st	Z, r1
   sei();
    1444:	78 94       	sei
}
    1446:	08 95       	ret

00001448 <trigger_request>:
static u08 flags;
static u08 req_is_pending;

static void trigger_request(void)
{
  if(!req_is_pending) {
    1448:	80 91 5e 01 	lds	r24, 0x015E
    144c:	88 23       	and	r24, r24
    144e:	81 f4       	brne	.+32     	; 0x1470 <trigger_request+0x28>
    req_is_pending = 1;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	80 93 5e 01 	sts	0x015E, r24
    pb_proto_request_recv();
    1456:	0e 94 3e 19 	call	0x327c	; 0x327c <pb_proto_request_recv>
    if(global_verbose) {
    145a:	80 91 67 01 	lds	r24, 0x0167
    145e:	88 23       	and	r24, r24
    1460:	89 f0       	breq	.+34     	; 0x1484 <trigger_request+0x3c>
      uart_send_time_stamp_spc();
    1462:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
      uart_send_pstring(PSTR("REQ\r\n"));
    1466:	8a e9       	ldi	r24, 0x9A	; 154
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    146e:	08 95       	ret
    }
  } else {
    if(global_verbose) {
    1470:	80 91 67 01 	lds	r24, 0x0167
    1474:	88 23       	and	r24, r24
    1476:	31 f0       	breq	.+12     	; 0x1484 <trigger_request+0x3c>
      uart_send_time_stamp_spc();
    1478:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
      uart_send_pstring(PSTR("req ign\r\n"));
    147c:	80 e9       	ldi	r24, 0x90	; 144
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1484:	08 95       	ret

00001486 <bridge_loop>:
}

// ---------- loop ----------

u08 bridge_loop(void)
{
    1486:	2f 92       	push	r2
    1488:	3f 92       	push	r3
    148a:	4f 92       	push	r4
    148c:	5f 92       	push	r5
    148e:	6f 92       	push	r6
    1490:	7f 92       	push	r7
    1492:	8f 92       	push	r8
    1494:	9f 92       	push	r9
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <bridge_loop+0x26>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
  u08 result = CMD_WORKER_IDLE;

  uart_send_time_stamp_spc();
    14b0:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[BRIDGE] on\r\n"));
    14b4:	82 e8       	ldi	r24, 0x82	; 130
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  pb_proto_init(fill_pkt, proc_pkt, pkt_buf, PKT_BUF_SIZE);
    14bc:	88 e7       	ldi	r24, 0x78	; 120
    14be:	9b e0       	ldi	r25, 0x0B	; 11
    14c0:	63 e1       	ldi	r22, 0x13	; 19
    14c2:	7b e0       	ldi	r23, 0x0B	; 11
    14c4:	4d ec       	ldi	r20, 0xCD	; 205
    14c6:	51 e0       	ldi	r21, 0x01	; 1
    14c8:	2a ee       	ldi	r18, 0xEA	; 234
    14ca:	35 e0       	ldi	r19, 0x05	; 5
    14cc:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <pb_proto_init>
  pio_init(param.mac_addr, pio_util_get_init_flags());
    14d0:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <pio_util_get_init_flags>
    14d4:	68 2f       	mov	r22, r24
    14d6:	0a ea       	ldi	r16, 0xAA	; 170
    14d8:	11 e0       	ldi	r17, 0x01	; 1
    14da:	c8 01       	movw	r24, r16
    14dc:	0e 94 23 1b 	call	0x3646	; 0x3646 <pio_init>
  stats_reset();
    14e0:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <stats_reset>

  // online flag
  flags = 0;
    14e4:	10 92 5d 01 	sts	0x015D, r1
  req_is_pending = 0;
    14e8:	10 92 5e 01 	sts	0x015E, r1

  u08 flow_control = param.flow_ctl;
    14ec:	f8 01       	movw	r30, r16
    14ee:	e6 80       	ldd	r14, Z+6	; 0x06
    14f0:	10 e0       	ldi	r17, 0x00	; 0
    14f2:	ff 24       	eor	r15, r15
    14f4:	dd 24       	eor	r13, r13
    14f6:	d3 94       	inc	r13
        trigger_request();
      }
      // offline: get and drop pio packet
      else {
        u16 size;
        pio_util_recv_packet(&size);
    14f8:	4e 01       	movw	r8, r28
    14fa:	08 94       	sec
    14fc:	81 1c       	adc	r8, r1
    14fe:	91 1c       	adc	r9, r1
        uart_send_time_stamp_spc();
        uart_send_pstring(PSTR("OFFLINE DROP: "));
    1500:	0f 2e       	mov	r0, r31
    1502:	f1 e6       	ldi	r31, 0x61	; 97
    1504:	af 2e       	mov	r10, r31
    1506:	f1 e0       	ldi	r31, 0x01	; 1
    1508:	bf 2e       	mov	r11, r31
    150a:	f0 2d       	mov	r31, r0
    if(n>0) {
      // show first incoming packet
      if(first) {
        first = 0;
        uart_send_time_stamp_spc();
        uart_send_pstring(PSTR("FIRST INCOMING!\r\n"));
    150c:	0f 2e       	mov	r0, r31
    150e:	f0 e7       	ldi	r31, 0x70	; 112
    1510:	6f 2e       	mov	r6, r31
    1512:	f1 e0       	ldi	r31, 0x01	; 1
    1514:	7f 2e       	mov	r7, r31
    1516:	f0 2d       	mov	r31, r0
    1518:	cc 24       	eor	r12, r12
        if(n>1) {
          pio_control(PIO_CONTROL_FLOW, 1);
          limit_flow = 1;
          if(global_verbose) {
            uart_send_time_stamp_spc();
            uart_send_pstring(PSTR("FLOW on\r\n"));
    151a:	0f 2e       	mov	r0, r31
    151c:	fc e4       	ldi	r31, 0x4C	; 76
    151e:	4f 2e       	mov	r4, r31
    1520:	f1 e0       	ldi	r31, 0x01	; 1
    1522:	5f 2e       	mov	r5, r31
    1524:	f0 2d       	mov	r31, r0
        if(n==0) {
          pio_control(PIO_CONTROL_FLOW, 0);
          limit_flow = 0;
          if(global_verbose) {
            uart_send_time_stamp_spc();
            uart_send_pstring(PSTR("FLOW off\r\n"));
    1526:	0f 2e       	mov	r0, r31
    1528:	f6 e5       	ldi	r31, 0x56	; 86
    152a:	2f 2e       	mov	r2, r31
    152c:	f1 e0       	ldi	r31, 0x01	; 1
    152e:	3f 2e       	mov	r3, r31
    1530:	f0 2d       	mov	r31, r0
    1532:	54 c0       	rjmp	.+168    	; 0x15dc <bridge_loop+0x156>
  u08 flow_control = param.flow_ctl;
  u08 limit_flow = 0;
  u08 first = 1;
  while(run_mode == RUN_MODE_BRIDGE) {
    // handle commands
    result = cmd_worker();
    1534:	0e 94 79 04 	call	0x8f2	; 0x8f2 <cmd_worker>
    1538:	18 2f       	mov	r17, r24
    if(result & CMD_WORKER_RESET) {
    153a:	81 fd       	sbrc	r24, 1
    153c:	54 c0       	rjmp	.+168    	; 0x15e6 <bridge_loop+0x160>
      break;
    }

    // handle pbproto
    pb_util_handle();
    153e:	0e 94 a7 1a 	call	0x354e	; 0x354e <pb_util_handle>

    // incoming packet via PIO available?
    u08 n = pio_has_recv();
    1542:	0e 94 ef 1a 	call	0x35de	; 0x35de <pio_has_recv>
    1546:	08 2f       	mov	r16, r24
    if(n>0) {
    1548:	88 23       	and	r24, r24
    154a:	e9 f0       	breq	.+58     	; 0x1586 <bridge_loop+0x100>
      // show first incoming packet
      if(first) {
    154c:	dd 20       	and	r13, r13
    154e:	31 f0       	breq	.+12     	; 0x155c <bridge_loop+0xd6>
        first = 0;
        uart_send_time_stamp_spc();
    1550:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
        uart_send_pstring(PSTR("FIRST INCOMING!\r\n"));
    1554:	c3 01       	movw	r24, r6
    1556:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    155a:	dc 2c       	mov	r13, r12
      }

      // if we are online then request the packet receiption
      if(flags & FLAG_ONLINE) {
    155c:	80 91 5d 01 	lds	r24, 0x015D
    1560:	80 ff       	sbrs	r24, 0
    1562:	03 c0       	rjmp	.+6      	; 0x156a <bridge_loop+0xe4>
        // if no request is pending then request it
        trigger_request();
    1564:	0e 94 24 0a 	call	0x1448	; 0x1448 <trigger_request>
    1568:	0e c0       	rjmp	.+28     	; 0x1586 <bridge_loop+0x100>
      }
      // offline: get and drop pio packet
      else {
        u16 size;
        pio_util_recv_packet(&size);
    156a:	c4 01       	movw	r24, r8
    156c:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <pio_util_recv_packet>
        uart_send_time_stamp_spc();
    1570:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
        uart_send_pstring(PSTR("OFFLINE DROP: "));
    1574:	c5 01       	movw	r24, r10
    1576:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
        uart_send_hex_word(size);
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	9a 81       	ldd	r25, Y+2	; 0x02
    157e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
        uart_send_crlf();
    1582:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
      }
    }

    // flow control
    if(flow_control) {
    1586:	ee 20       	and	r14, r14
    1588:	49 f1       	breq	.+82     	; 0x15dc <bridge_loop+0x156>
      // flow limited
      if(limit_flow) {
    158a:	ff 20       	and	r15, r15
    158c:	99 f0       	breq	.+38     	; 0x15b4 <bridge_loop+0x12e>
        // disable again?
        if(n==0) {
    158e:	00 23       	and	r16, r16
    1590:	29 f5       	brne	.+74     	; 0x15dc <bridge_loop+0x156>
          pio_control(PIO_CONTROL_FLOW, 0);
    1592:	8c 2d       	mov	r24, r12
    1594:	6c 2d       	mov	r22, r12
    1596:	0e 94 06 1b 	call	0x360c	; 0x360c <pio_control>
          limit_flow = 0;
          if(global_verbose) {
    159a:	80 91 67 01 	lds	r24, 0x0167
    159e:	88 23       	and	r24, r24
    15a0:	11 f4       	brne	.+4      	; 0x15a6 <bridge_loop+0x120>
    15a2:	fc 2c       	mov	r15, r12
    15a4:	1b c0       	rjmp	.+54     	; 0x15dc <bridge_loop+0x156>
            uart_send_time_stamp_spc();
    15a6:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
            uart_send_pstring(PSTR("FLOW off\r\n"));
    15aa:	c1 01       	movw	r24, r2
    15ac:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    15b0:	fc 2c       	mov	r15, r12
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <bridge_loop+0x156>
        }
      }
      // no flow limit
      else {
        // enable?
        if(n>1) {
    15b4:	02 30       	cpi	r16, 0x02	; 2
    15b6:	90 f0       	brcs	.+36     	; 0x15dc <bridge_loop+0x156>
          pio_control(PIO_CONTROL_FLOW, 1);
    15b8:	8c 2d       	mov	r24, r12
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	0e 94 06 1b 	call	0x360c	; 0x360c <pio_control>
          limit_flow = 1;
          if(global_verbose) {
    15c0:	80 91 67 01 	lds	r24, 0x0167
    15c4:	88 23       	and	r24, r24
    15c6:	19 f4       	brne	.+6      	; 0x15ce <bridge_loop+0x148>
    15c8:	ff 24       	eor	r15, r15
    15ca:	f3 94       	inc	r15
    15cc:	07 c0       	rjmp	.+14     	; 0x15dc <bridge_loop+0x156>
            uart_send_time_stamp_spc();
    15ce:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
            uart_send_pstring(PSTR("FLOW on\r\n"));
    15d2:	c2 01       	movw	r24, r4
    15d4:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    15d8:	ff 24       	eor	r15, r15
    15da:	f3 94       	inc	r15
  req_is_pending = 0;

  u08 flow_control = param.flow_ctl;
  u08 limit_flow = 0;
  u08 first = 1;
  while(run_mode == RUN_MODE_BRIDGE) {
    15dc:	80 91 66 01 	lds	r24, 0x0166
    15e0:	88 23       	and	r24, r24
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <bridge_loop+0x160>
    15e4:	a7 cf       	rjmp	.-178    	; 0x1534 <bridge_loop+0xae>
        }
      }
    }
  }

  stats_dump_all();
    15e6:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <stats_dump_all>
  pio_exit();
    15ea:	0e 94 12 1b 	call	0x3624	; 0x3624 <pio_exit>

  uart_send_time_stamp_spc();
    15ee:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[BRIDGE] off\r\n"));
    15f2:	8d e3       	ldi	r24, 0x3D	; 61
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  return result;
}
    15fa:	81 2f       	mov	r24, r17
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	bf 90       	pop	r11
    1612:	af 90       	pop	r10
    1614:	9f 90       	pop	r9
    1616:	8f 90       	pop	r8
    1618:	7f 90       	pop	r7
    161a:	6f 90       	pop	r6
    161c:	5f 90       	pop	r5
    161e:	4f 90       	pop	r4
    1620:	3f 90       	pop	r3
    1622:	2f 90       	pop	r2
    1624:	08 95       	ret

00001626 <proc_pkt>:
  return PBPROTO_STATUS_OK;
}

// handle incoming packet from Amiga
static u08 proc_pkt(const u08 *buf, u16 size)
{
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	ec 01       	movw	r28, r24
    1630:	8b 01       	movw	r16, r22
#define ETH_TYPE_MAGIC_OFFLINE  0xfffe
#define ETH_TYPE_MAGIC_LOOPBACK 0xfffd

inline const u08* eth_get_tgt_mac(const u08 *pkt) { return pkt + ETH_OFF_TGT_MAC; }
inline const u08 *eth_get_src_mac(const u08 *pkt) { return pkt + ETH_OFF_SRC_MAC; }
inline u16 eth_get_pkt_type(const u08 *pkt) { return net_get_word(pkt + ETH_OFF_TYPE); }
    1632:	0c 96       	adiw	r24, 0x0c	; 12
    1634:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
  // get eth type
  u16 eth_type = eth_get_pkt_type(buf);
  switch(eth_type) {
    1638:	2f ef       	ldi	r18, 0xFF	; 255
    163a:	8e 3f       	cpi	r24, 0xFE	; 254
    163c:	92 07       	cpc	r25, r18
    163e:	51 f1       	breq	.+84     	; 0x1694 <proc_pkt+0x6e>
    1640:	2f ef       	ldi	r18, 0xFF	; 255
    1642:	8f 3f       	cpi	r24, 0xFF	; 255
    1644:	92 07       	cpc	r25, r18
    1646:	20 f4       	brcc	.+8      	; 0x1650 <proc_pkt+0x2a>
    1648:	8d 5f       	subi	r24, 0xFD	; 253
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	b9 f5       	brne	.+110    	; 0x16bc <proc_pkt+0x96>
    164e:	2e c0       	rjmp	.+92     	; 0x16ac <proc_pkt+0x86>

// ----- magic packets -----

static void magic_online(const u08 *buf)
{
  uart_send_time_stamp_spc();
    1650:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[MAGIC] online\r\n"));
    1654:	80 ea       	ldi	r24, 0xA0	; 160
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  flags |= FLAG_ONLINE | FLAG_FIRST_TRANSFER;
    165c:	80 91 5d 01 	lds	r24, 0x015D
    1660:	85 60       	ori	r24, 0x05	; 5
    1662:	80 93 5d 01 	sts	0x015D, r24
#define ETH_TYPE_MAGIC_ONLINE	0xffff
#define ETH_TYPE_MAGIC_OFFLINE  0xfffe
#define ETH_TYPE_MAGIC_LOOPBACK 0xfffd

inline const u08* eth_get_tgt_mac(const u08 *pkt) { return pkt + ETH_OFF_TGT_MAC; }
inline const u08 *eth_get_src_mac(const u08 *pkt) { return pkt + ETH_OFF_SRC_MAC; }
    1666:	26 96       	adiw	r28, 0x06	; 6

  // validate mac address and if it does not match then reconfigure PIO
  const u08 *src_mac = eth_get_src_mac(buf);
  if(!net_compare_mac(param.mac_addr, src_mac)) {
    1668:	8a ea       	ldi	r24, 0xAA	; 170
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	be 01       	movw	r22, r28
    166e:	0e 94 de 13 	call	0x27bc	; 0x27bc <net_compare_mac>
    1672:	88 23       	and	r24, r24
    1674:	b9 f5       	brne	.+110    	; 0x16e4 <proc_pkt+0xbe>
    // update mac param and save
    net_copy_mac(src_mac, param.mac_addr);
    1676:	0a ea       	ldi	r16, 0xAA	; 170
    1678:	11 e0       	ldi	r17, 0x01	; 1
    167a:	ce 01       	movw	r24, r28
    167c:	b8 01       	movw	r22, r16
    167e:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>
    param_save();
    1682:	0e 94 56 15 	call	0x2aac	; 0x2aac <param_save>

    // re-configure PIO
    pio_exit();
    1686:	0e 94 12 1b 	call	0x3624	; 0x3624 <pio_exit>
    pio_init(param.mac_addr, PIO_INIT_BROAD_CAST);
    168a:	c8 01       	movw	r24, r16
    168c:	64 e0       	ldi	r22, 0x04	; 4
    168e:	0e 94 23 1b 	call	0x3646	; 0x3646 <pio_init>
    1692:	28 c0       	rjmp	.+80     	; 0x16e4 <proc_pkt+0xbe>
  }
}

static void magic_offline(void)
{
  uart_send_time_stamp_spc();
    1694:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[MAGIC] offline\r\n"));
    1698:	81 eb       	ldi	r24, 0xB1	; 177
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  flags &= ~FLAG_ONLINE;
    16a0:	80 91 5d 01 	lds	r24, 0x015D
    16a4:	8e 7f       	andi	r24, 0xFE	; 254
    16a6:	80 93 5d 01 	sts	0x015D, r24
    16aa:	1c c0       	rjmp	.+56     	; 0x16e4 <proc_pkt+0xbe>
}

static void magic_loopback(u16 size)
{
  flags |= FLAG_SEND_MAGIC;
    16ac:	80 91 5d 01 	lds	r24, 0x015D
    16b0:	82 60       	ori	r24, 0x02	; 2
    16b2:	80 93 5d 01 	sts	0x015D, r24
  trigger_request();
    16b6:	0e 94 24 0a 	call	0x1448	; 0x1448 <trigger_request>
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <proc_pkt+0xbe>
    case ETH_TYPE_MAGIC_LOOPBACK:
      magic_loopback(size);
      break;
    default:
      // send packet via pio
      pio_util_send_packet(size);
    16bc:	c8 01       	movw	r24, r16
    16be:	0e 94 83 1c 	call	0x3906	; 0x3906 <pio_util_send_packet>
      // if a packet arrived and we are not online then request online state
      if((flags & FLAG_ONLINE)==0) {
    16c2:	80 91 5d 01 	lds	r24, 0x015D
    16c6:	80 fd       	sbrc	r24, 0
    16c8:	0d c0       	rjmp	.+26     	; 0x16e4 <proc_pkt+0xbe>
  trigger_request();
}

static void request_magic(void)
{
  uart_send_time_stamp_spc();
    16ca:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[MAGIC] request\r\n"));
    16ce:	83 ec       	ldi	r24, 0xC3	; 195
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  // request receive
  flags |= FLAG_SEND_MAGIC | FLAG_FIRST_TRANSFER;
    16d6:	80 91 5d 01 	lds	r24, 0x015D
    16da:	86 60       	ori	r24, 0x06	; 6
    16dc:	80 93 5d 01 	sts	0x015D, r24
  trigger_request();
    16e0:	0e 94 24 0a 	call	0x1448	; 0x1448 <trigger_request>
        request_magic();
      }
      break;
  }
  return PBPROTO_STATUS_OK;
}
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	08 95       	ret

000016f0 <fill_pkt>:

// ----- packet callbacks -----

// the Amiga requests a new packet
static u08 fill_pkt(u08 *buf, u16 max_size, u16 *size)
{
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ea 01       	movw	r28, r20
  // need to send a magic?
  if((flags & FLAG_SEND_MAGIC) == FLAG_SEND_MAGIC) {
    16fa:	80 91 5d 01 	lds	r24, 0x015D
    16fe:	81 ff       	sbrs	r24, 1
    1700:	1c c0       	rjmp	.+56     	; 0x173a <fill_pkt+0x4a>
    flags &= ~FLAG_SEND_MAGIC;
    1702:	8d 7f       	andi	r24, 0xFD	; 253
    1704:	80 93 5d 01 	sts	0x015D, r24
extern const u08 net_zero_mac[6];
extern const u08 net_zero_ip[4];
extern const u08 net_ones_ip[4];

/* convenience functions */
inline void net_copy_bcast_mac(u08 *out) { net_copy_mac(net_bcast_mac, out); }
    1708:	0d ec       	ldi	r16, 0xCD	; 205
    170a:	11 e0       	ldi	r17, 0x01	; 1
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	b8 01       	movw	r22, r16
    1712:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>

    // build magic packet
    net_copy_bcast_mac(pkt_buf + ETH_OFF_TGT_MAC);
    net_copy_mac(param.mac_addr, pkt_buf + ETH_OFF_SRC_MAC);
    1716:	b8 01       	movw	r22, r16
    1718:	6a 5f       	subi	r22, 0xFA	; 250
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	8a ea       	ldi	r24, 0xAA	; 170
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>
    net_put_word(pkt_buf + ETH_OFF_TYPE, ETH_TYPE_MAGIC_ONLINE);
    1724:	c8 01       	movw	r24, r16
    1726:	0c 96       	adiw	r24, 0x0c	; 12
    1728:	6f ef       	ldi	r22, 0xFF	; 255
    172a:	7f ef       	ldi	r23, 0xFF	; 255
    172c:	0e 94 9c 13 	call	0x2738	; 0x2738 <net_put_word>

    *size = ETH_HDR_SIZE;
    1730:	8e e0       	ldi	r24, 0x0E	; 14
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	99 83       	std	Y+1, r25	; 0x01
    1736:	88 83       	st	Y, r24
    1738:	10 c0       	rjmp	.+32     	; 0x175a <fill_pkt+0x6a>
  } else {
    // pending PIO packet?
    pio_util_recv_packet(size);
    173a:	ca 01       	movw	r24, r20
    173c:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <pio_util_recv_packet>

    // report first packet transfer
    if(flags & FLAG_FIRST_TRANSFER) {
    1740:	80 91 5d 01 	lds	r24, 0x015D
    1744:	82 ff       	sbrs	r24, 2
    1746:	09 c0       	rjmp	.+18     	; 0x175a <fill_pkt+0x6a>
      flags &= ~FLAG_FIRST_TRANSFER;
    1748:	8b 7f       	andi	r24, 0xFB	; 251
    174a:	80 93 5d 01 	sts	0x015D, r24
      uart_send_time_stamp_spc();
    174e:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
      uart_send_pstring(PSTR("FIRST TRANSFER!\r\n"));
    1752:	85 ed       	ldi	r24, 0xD5	; 213
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    }
  }

  req_is_pending = 0;
    175a:	10 92 5e 01 	sts	0x015E, r1

  return PBPROTO_STATUS_OK;
}
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	08 95       	ret

0000176a <bridge_test_loop>:

  return PBPROTO_STATUS_OK;
}

u08 bridge_test_loop(void)
{
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	1f 93       	push	r17
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <bridge_test_loop+0x10>
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
  u08 result = CMD_WORKER_IDLE;

  uart_send_time_stamp_spc();
    177e:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[BRIDGE_TEST] on\r\n"));
    1782:	89 e0       	ldi	r24, 0x09	; 9
    1784:	92 e0       	ldi	r25, 0x02	; 2
    1786:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  pb_proto_init(fill_pkt, proc_pkt, pkt_buf, PKT_BUF_SIZE);
    178a:	8a e2       	ldi	r24, 0x2A	; 42
    178c:	9c e0       	ldi	r25, 0x0C	; 12
    178e:	67 e4       	ldi	r22, 0x47	; 71
    1790:	7c e0       	ldi	r23, 0x0C	; 12
    1792:	4d ec       	ldi	r20, 0xCD	; 205
    1794:	51 e0       	ldi	r21, 0x01	; 1
    1796:	2a ee       	ldi	r18, 0xEA	; 234
    1798:	35 e0       	ldi	r19, 0x05	; 5
    179a:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <pb_proto_init>
  pio_init(param.mac_addr, pio_util_get_init_flags());
    179e:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <pio_util_get_init_flags>
    17a2:	68 2f       	mov	r22, r24
    17a4:	8a ea       	ldi	r24, 0xAA	; 170
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	0e 94 23 1b 	call	0x3646	; 0x3646 <pio_init>
  stats_reset();
    17ac:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <stats_reset>
    17b0:	10 e0       	ldi	r17, 0x00	; 0
    pb_util_handle();

    // incoming packet via PIO?
    if(pio_has_recv()) {
      u16 size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
    17b2:	7e 01       	movw	r14, r28
    17b4:	08 94       	sec
    17b6:	e1 1c       	adc	r14, r1
    17b8:	f1 1c       	adc	r15, r1
          // is it a UDP test packet?
          if(pio_util_handle_udp_test(size)) {

            // oops! overwrite??
            if(pio_pkt_size != 0) {
              uart_send_pstring(PSTR("OVERWRITE?!\r\n"));
    17ba:	0f 2e       	mov	r0, r31
    17bc:	fb ef       	ldi	r31, 0xFB	; 251
    17be:	cf 2e       	mov	r12, r31
    17c0:	f1 e0       	ldi	r31, 0x01	; 1
    17c2:	df 2e       	mov	r13, r31
    17c4:	f0 2d       	mov	r31, r0
    17c6:	2d c0       	rjmp	.+90     	; 0x1822 <bridge_test_loop+0xb8>
  pio_init(param.mac_addr, pio_util_get_init_flags());
  stats_reset();

  while(run_mode == RUN_MODE_BRIDGE_TEST) {
    // handle commands
    result = cmd_worker();
    17c8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <cmd_worker>
    17cc:	18 2f       	mov	r17, r24
    if(result & CMD_WORKER_RESET) {
    17ce:	81 fd       	sbrc	r24, 1
    17d0:	2c c0       	rjmp	.+88     	; 0x182a <bridge_test_loop+0xc0>
      break;
    }

    // handle pbproto
    pb_util_handle();
    17d2:	0e 94 a7 1a 	call	0x354e	; 0x354e <pb_util_handle>

    // incoming packet via PIO?
    if(pio_has_recv()) {
    17d6:	0e 94 ef 1a 	call	0x35de	; 0x35de <pio_has_recv>
    17da:	88 23       	and	r24, r24
    17dc:	11 f1       	breq	.+68     	; 0x1822 <bridge_test_loop+0xb8>
      u16 size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
    17de:	c7 01       	movw	r24, r14
    17e0:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <pio_util_recv_packet>
    17e4:	88 23       	and	r24, r24
    17e6:	e9 f4       	brne	.+58     	; 0x1822 <bridge_test_loop+0xb8>
        // handle ARP?
        if(!pio_util_handle_arp(size)) {
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	9a 81       	ldd	r25, Y+2	; 0x02
    17ec:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <pio_util_handle_arp>
    17f0:	88 23       	and	r24, r24
    17f2:	b9 f4       	brne	.+46     	; 0x1822 <bridge_test_loop+0xb8>
          // is it a UDP test packet?
          if(pio_util_handle_udp_test(size)) {
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	0e 94 04 1c 	call	0x3808	; 0x3808 <pio_util_handle_udp_test>
    17fc:	88 23       	and	r24, r24
    17fe:	89 f0       	breq	.+34     	; 0x1822 <bridge_test_loop+0xb8>

            // oops! overwrite??
            if(pio_pkt_size != 0) {
    1800:	80 91 5f 01 	lds	r24, 0x015F
    1804:	90 91 60 01 	lds	r25, 0x0160
    1808:	89 2b       	or	r24, r25
    180a:	19 f0       	breq	.+6      	; 0x1812 <bridge_test_loop+0xa8>
              uart_send_pstring(PSTR("OVERWRITE?!\r\n"));
    180c:	c6 01       	movw	r24, r12
    180e:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
            }

            // request receive
            pio_pkt_size = size;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	90 93 60 01 	sts	0x0160, r25
    181a:	80 93 5f 01 	sts	0x015F, r24
            pb_proto_request_recv();
    181e:	0e 94 3e 19 	call	0x327c	; 0x327c <pb_proto_request_recv>

  pb_proto_init(fill_pkt, proc_pkt, pkt_buf, PKT_BUF_SIZE);
  pio_init(param.mac_addr, pio_util_get_init_flags());
  stats_reset();

  while(run_mode == RUN_MODE_BRIDGE_TEST) {
    1822:	80 91 66 01 	lds	r24, 0x0166
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	79 f2       	breq	.-98     	; 0x17c8 <bridge_test_loop+0x5e>
        }
      }
    }
  }

  stats_dump_all();
    182a:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <stats_dump_all>
  pio_exit();
    182e:	0e 94 12 1b 	call	0x3624	; 0x3624 <pio_exit>

  uart_send_time_stamp_spc();
    1832:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[BRIDGE_TEST] off\r\n"));
    1836:	87 ee       	ldi	r24, 0xE7	; 231
    1838:	91 e0       	ldi	r25, 0x01	; 1
    183a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  return result;
}
    183e:	81 2f       	mov	r24, r17
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	1f 91       	pop	r17
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	08 95       	ret

00001854 <fill_pkt>:
/* a RECV command arrived from Amiga.
   this should only happen if we got a packet here from PIO
   in the first place
*/
static u08 fill_pkt(u08 *buf, u16 max_size, u16 *size)
{
    1854:	9c 01       	movw	r18, r24
    1856:	fa 01       	movw	r30, r20
  *size = pio_pkt_size;
    1858:	80 91 5f 01 	lds	r24, 0x015F
    185c:	90 91 60 01 	lds	r25, 0x0160
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
  if(*size > max_size) {
    1864:	68 17       	cp	r22, r24
    1866:	79 07       	cpc	r23, r25
    1868:	10 f4       	brcc	.+4      	; 0x186e <fill_pkt+0x1a>
    186a:	85 e0       	ldi	r24, 0x05	; 5
    186c:	08 95       	ret
    return PBPROTO_STATUS_PACKET_TOO_LARGE;
  }

  // in test mode 0 send via internal device loopback
  if(param.test_mode == 0) {
    186e:	80 91 bc 01 	lds	r24, 0x01BC
    1872:	88 23       	and	r24, r24
    1874:	31 f4       	brne	.+12     	; 0x1882 <fill_pkt+0x2e>
    // switch eth type to magic for loop back
    net_put_word(buf + ETH_OFF_TYPE, ETH_TYPE_MAGIC_LOOPBACK);
    1876:	c9 01       	movw	r24, r18
    1878:	0c 96       	adiw	r24, 0x0c	; 12
    187a:	6d ef       	ldi	r22, 0xFD	; 253
    187c:	7f ef       	ldi	r23, 0xFF	; 255
    187e:	0e 94 9c 13 	call	0x2738	; 0x2738 <net_put_word>
  }

  // consumed packet
  pio_pkt_size = 0;
    1882:	10 92 60 01 	sts	0x0160, r1
    1886:	10 92 5f 01 	sts	0x015F, r1
    188a:	81 e0       	ldi	r24, 0x01	; 1

  return PBPROTO_STATUS_OK;
}
    188c:	08 95       	ret

0000188e <proc_pkt>:

/* a SEND command arrvied from Amiga.
   we got our packet back. forward to PIO
*/
static u08 proc_pkt(const u08 *buf, u16 size)
{
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	eb 01       	movw	r28, r22
  // make sure its the expected packet type
  u16 type = net_get_word(pkt_buf + ETH_OFF_TYPE);
    1894:	89 ed       	ldi	r24, 0xD9	; 217
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
    189c:	9c 01       	movw	r18, r24

  // in test mode 0 packet was sent by internal device loopback
  if(param.test_mode == 0) {
    189e:	80 91 bc 01 	lds	r24, 0x01BC
    18a2:	88 23       	and	r24, r24
    18a4:	79 f4       	brne	.+30     	; 0x18c4 <proc_pkt+0x36>
    if(type != ETH_TYPE_MAGIC_LOOPBACK) {
    18a6:	2d 5f       	subi	r18, 0xFD	; 253
    18a8:	3f 4f       	sbci	r19, 0xFF	; 255
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <proc_pkt+0x28>
      uart_send_pstring(PSTR("NO MAGIC!!\r\n"));
    18ac:	88 e2       	ldi	r24, 0x28	; 40
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    18b4:	12 c0       	rjmp	.+36     	; 0x18da <proc_pkt+0x4c>
      return PBPROTO_STATUS_OK;
    } else {
      // switch eth type back to IPv4
      net_put_word(pkt_buf + ETH_OFF_TYPE, ETH_TYPE_IPV4);
    18b6:	89 ed       	ldi	r24, 0xD9	; 217
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	78 e0       	ldi	r23, 0x08	; 8
    18be:	0e 94 9c 13 	call	0x2738	; 0x2738 <net_put_word>
    18c2:	08 c0       	rjmp	.+16     	; 0x18d4 <proc_pkt+0x46>
    }
  } else {
    if(type != ETH_TYPE_IPV4) {
    18c4:	20 50       	subi	r18, 0x00	; 0
    18c6:	38 40       	sbci	r19, 0x08	; 8
    18c8:	29 f0       	breq	.+10     	; 0x18d4 <proc_pkt+0x46>
      uart_send_pstring(PSTR("NO IPV4!!\r\n"));
    18ca:	8c e1       	ldi	r24, 0x1C	; 28
    18cc:	92 e0       	ldi	r25, 0x02	; 2
    18ce:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <proc_pkt+0x4c>
      return PBPROTO_STATUS_OK;
    }
  }

  // send packet via pio
  pio_util_send_packet(size);
    18d4:	ce 01       	movw	r24, r28
    18d6:	0e 94 83 1c 	call	0x3906	; 0x3906 <pio_util_send_packet>

  return PBPROTO_STATUS_OK;
}
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <cmd_quit>:
#include "stats.h"

COMMAND(cmd_quit)
{
  return CMD_QUIT;
}
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	08 95       	ret

000018e6 <cmd_device_reset>:

COMMAND(cmd_device_reset)
{
  return CMD_RESET;
}
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	08 95       	ret

000018ea <cmd_param_ip_addr>:
    return CMD_PARSE_ERROR;
  }
}

COMMAND(cmd_param_ip_addr)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <cmd_param_ip_addr+0x6>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <cmd_param_ip_addr+0x8>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	fb 01       	movw	r30, r22
  u08 ip[4];

  if(net_parse_ip(argv[1], ip)) {
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	93 81       	ldd	r25, Z+3	; 0x03
    18fc:	be 01       	movw	r22, r28
    18fe:	6f 5f       	subi	r22, 0xFF	; 255
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	0e 94 6d 14 	call	0x28da	; 0x28da <net_parse_ip>
    1906:	88 23       	and	r24, r24
    1908:	11 f4       	brne	.+4      	; 0x190e <cmd_param_ip_addr+0x24>
    190a:	81 e1       	ldi	r24, 0x11	; 17
    190c:	07 c0       	rjmp	.+14     	; 0x191c <cmd_param_ip_addr+0x32>
    net_copy_ip(ip, param.test_ip);
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	66 eb       	ldi	r22, 0xB6	; 182
    1914:	71 e0       	ldi	r23, 0x01	; 1
    1916:	0e 94 81 13 	call	0x2702	; 0x2702 <net_copy_ip>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <cmd_param_word>:
  }
  return result;
}

COMMAND(cmd_param_word)
{
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <cmd_param_word+0xa>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	28 2f       	mov	r18, r24
    193a:	db 01       	movw	r26, r22
  u08 group = argv[0][0];
    193c:	ed 91       	ld	r30, X+
    193e:	fc 91       	ld	r31, X
    1940:	11 97       	sbiw	r26, 0x01	; 1
  u08 type = argv[0][1];
    1942:	91 81       	ldd	r25, Z+1	; 0x01
  u16 *val = 0;

  if(group == 't') {
    1944:	80 81       	ld	r24, Z
    1946:	84 37       	cpi	r24, 0x74	; 116
    1948:	19 f5       	brne	.+70     	; 0x1990 <cmd_param_word+0x66>
    switch(type) {
    194a:	90 37       	cpi	r25, 0x70	; 112
    194c:	59 f0       	breq	.+22     	; 0x1964 <cmd_param_word+0x3a>
    194e:	94 37       	cpi	r25, 0x74	; 116
    1950:	19 f0       	breq	.+6      	; 0x1958 <cmd_param_word+0x2e>
    1952:	9c 36       	cpi	r25, 0x6C	; 108
    1954:	e9 f4       	brne	.+58     	; 0x1990 <cmd_param_word+0x66>
    1956:	03 c0       	rjmp	.+6      	; 0x195e <cmd_param_word+0x34>
    1958:	04 eb       	ldi	r16, 0xB4	; 180
    195a:	11 e0       	ldi	r17, 0x01	; 1
    195c:	05 c0       	rjmp	.+10     	; 0x1968 <cmd_param_word+0x3e>
    195e:	02 eb       	ldi	r16, 0xB2	; 178
    1960:	11 e0       	ldi	r17, 0x01	; 1
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <cmd_param_word+0x3e>
    1964:	0a eb       	ldi	r16, 0xBA	; 186
    1966:	11 e0       	ldi	r17, 0x01	; 1
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
    1968:	21 30       	cpi	r18, 0x01	; 1
    196a:	91 f0       	breq	.+36     	; 0x1990 <cmd_param_word+0x66>
    return CMD_PARSE_ERROR;
  } else {
    u16 new_val;
    if(parse_word(argv[1],&new_val)) {
    196c:	12 96       	adiw	r26, 0x02	; 2
    196e:	8d 91       	ld	r24, X+
    1970:	9c 91       	ld	r25, X
    1972:	13 97       	sbiw	r26, 0x03	; 3
    1974:	be 01       	movw	r22, r28
    1976:	6f 5f       	subi	r22, 0xFF	; 255
    1978:	7f 4f       	sbci	r23, 0xFF	; 255
    197a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <parse_word>
    197e:	88 23       	and	r24, r24
    1980:	39 f0       	breq	.+14     	; 0x1990 <cmd_param_word+0x66>
      *val = new_val;
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	f8 01       	movw	r30, r16
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <cmd_param_word+0x68>
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return CMD_OK;
    1990:	81 e1       	ldi	r24, 0x11	; 17
}
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	08 95       	ret

000019a0 <cmd_param_toggle>:
  param_reset();
  return CMD_OK;
}

COMMAND(cmd_param_toggle)
{
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	1f 93       	push	r17
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	0f 92       	push	r0
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	db 01       	movw	r26, r22
  u08 group = argv[0][0];
    19b2:	ed 91       	ld	r30, X+
    19b4:	fc 91       	ld	r31, X
    19b6:	11 97       	sbiw	r26, 0x01	; 1
    19b8:	90 81       	ld	r25, Z
  u08 type = argv[0][1];
    19ba:	21 81       	ldd	r18, Z+1	; 0x01
  u08 *val = 0;
  u08 result = CMD_OK;

  if(group == 't') {
    19bc:	94 37       	cpi	r25, 0x74	; 116
    19be:	41 f4       	brne	.+16     	; 0x19d0 <cmd_param_toggle+0x30>
    switch(type) {
    19c0:	2d 36       	cpi	r18, 0x6D	; 109
    19c2:	71 f5       	brne	.+92     	; 0x1a20 <cmd_param_toggle+0x80>
    19c4:	ec eb       	ldi	r30, 0xBC	; 188
    19c6:	f1 e0       	ldi	r31, 0x01	; 1
    19c8:	90 81       	ld	r25, Z
    19ca:	7f 01       	movw	r14, r30
    19cc:	10 e0       	ldi	r17, 0x00	; 0
    19ce:	11 c0       	rjmp	.+34     	; 0x19f2 <cmd_param_toggle+0x52>
      case 'm': val = &param.test_mode; break;
      default: return CMD_PARSE_ERROR;
    }
  }
  else if(group == 'f') {
    19d0:	96 36       	cpi	r25, 0x66	; 102
    19d2:	31 f5       	brne	.+76     	; 0x1a20 <cmd_param_toggle+0x80>
    switch(type) {
    19d4:	23 36       	cpi	r18, 0x63	; 99
    19d6:	41 f0       	breq	.+16     	; 0x19e8 <cmd_param_toggle+0x48>
    19d8:	24 36       	cpi	r18, 0x64	; 100
    19da:	11 f5       	brne	.+68     	; 0x1a20 <cmd_param_toggle+0x80>
    19dc:	e1 eb       	ldi	r30, 0xB1	; 177
    19de:	f1 e0       	ldi	r31, 0x01	; 1
    19e0:	90 81       	ld	r25, Z
    19e2:	7f 01       	movw	r14, r30
    19e4:	13 e0       	ldi	r17, 0x03	; 3
    19e6:	05 c0       	rjmp	.+10     	; 0x19f2 <cmd_param_toggle+0x52>
    19e8:	e0 eb       	ldi	r30, 0xB0	; 176
    19ea:	f1 e0       	ldi	r31, 0x01	; 1
    19ec:	90 81       	ld	r25, Z
    19ee:	7f 01       	movw	r14, r30
    19f0:	13 e0       	ldi	r17, 0x03	; 3
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	31 f4       	brne	.+12     	; 0x1a02 <cmd_param_toggle+0x62>
    // toggle value if no argument is given
    *val = *val ? 0 : 1;
    19f6:	f7 01       	movw	r30, r14
    19f8:	10 82       	st	Z, r1
    19fa:	99 23       	and	r25, r25
    19fc:	91 f4       	brne	.+36     	; 0x1a22 <cmd_param_toggle+0x82>
    19fe:	80 83       	st	Z, r24
    1a00:	10 c0       	rjmp	.+32     	; 0x1a22 <cmd_param_toggle+0x82>
  } else {
    u08 new_val;
    if(parse_byte(argv[1],&new_val)) {
    1a02:	12 96       	adiw	r26, 0x02	; 2
    1a04:	8d 91       	ld	r24, X+
    1a06:	9c 91       	ld	r25, X
    1a08:	13 97       	sbiw	r26, 0x03	; 3
    1a0a:	be 01       	movw	r22, r28
    1a0c:	6f 5f       	subi	r22, 0xFF	; 255
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	0e 94 35 09 	call	0x126a	; 0x126a <parse_byte>
    1a14:	88 23       	and	r24, r24
    1a16:	21 f0       	breq	.+8      	; 0x1a20 <cmd_param_toggle+0x80>
      *val = new_val;
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	f7 01       	movw	r30, r14
    1a1c:	80 83       	st	Z, r24
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <cmd_param_toggle+0x82>
    1a20:	11 e1       	ldi	r17, 0x11	; 17
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return result;
}
    1a22:	81 2f       	mov	r24, r17
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	1f 91       	pop	r17
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	08 95       	ret

00001a32 <cmd_param_mac_addr>:
  }
  return CMD_OK;
}

COMMAND(cmd_param_mac_addr)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <cmd_param_mac_addr+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <cmd_param_mac_addr+0x8>
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <cmd_param_mac_addr+0xa>
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	fb 01       	movw	r30, r22
  u08 mac[6];

  if(net_parse_mac(argv[1], mac)) {
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	be 01       	movw	r22, r28
    1a48:	6f 5f       	subi	r22, 0xFF	; 255
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4c:	0e 94 34 14 	call	0x2868	; 0x2868 <net_parse_mac>
    1a50:	88 23       	and	r24, r24
    1a52:	11 f4       	brne	.+4      	; 0x1a58 <cmd_param_mac_addr+0x26>
    1a54:	81 e1       	ldi	r24, 0x11	; 17
    1a56:	07 c0       	rjmp	.+14     	; 0x1a66 <cmd_param_mac_addr+0x34>
    net_copy_mac(mac, param.mac_addr);
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	6a ea       	ldi	r22, 0xAA	; 170
    1a5e:	71 e0       	ldi	r23, 0x01	; 1
    1a60:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
    1a66:	26 96       	adiw	r28, 0x06	; 6
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <cmd_stats_reset>:
  return CMD_OK;
}

COMMAND(cmd_stats_reset)
{
  stats_reset();
    1a78:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <stats_reset>
  return CMD_OK;
}
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	08 95       	ret

00001a80 <cmd_stats_dump>:
  }
}

COMMAND(cmd_stats_dump)
{
  stats_dump_all();
    1a80:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <stats_dump_all>
  return CMD_OK;
}
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	08 95       	ret

00001a88 <cmd_param_reset>:
  }
}

COMMAND(cmd_param_reset)
{
  param_reset();
    1a88:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <param_reset>
  return CMD_OK;
}
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	08 95       	ret

00001a90 <cmd_param_load>:
  }
}

COMMAND(cmd_param_load)
{
  u08 result = param_load();
    1a90:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <param_load>
  if(result == PARAM_OK) {
    1a94:	81 11       	cpse	r24, r1
    return CMD_OK;
  } else {
    return CMD_MASK_ERROR | result;
    1a96:	80 62       	ori	r24, 0x20	; 32
  }
}
    1a98:	08 95       	ret

00001a9a <cmd_param_save>:
  return CMD_OK;
}

COMMAND(cmd_param_save)
{
  u08 result = param_save();
    1a9a:	0e 94 56 15 	call	0x2aac	; 0x2aac <param_save>
  if(result == PARAM_OK) {
    1a9e:	81 11       	cpse	r24, r1
    return CMD_OK;
  } else {
    return CMD_MASK_ERROR | result;
    1aa0:	80 62       	ori	r24, 0x20	; 32
  }
}
    1aa2:	08 95       	ret

00001aa4 <cmd_param_dump>:
  return CMD_OK;
}

COMMAND(cmd_param_dump)
{
  param_dump();
    1aa4:	0e 94 89 15 	call	0x2b12	; 0x2b12 <param_dump>
  return CMD_OK;
}
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	08 95       	ret

00001aac <cmd_version>:
  return CMD_RESET;
}

COMMAND(cmd_version)
{
  uart_send_pstring(PSTR(VERSION " " BUILD_DATE "\r\n"));
    1aac:	81 ea       	ldi	r24, 0xA1	; 161
    1aae:	92 e0       	ldi	r25, 0x02	; 2
    1ab0:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  return CMD_OK;
}
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	08 95       	ret

00001ab8 <cmd_enter_pb_test_mode>:
  stats_reset();
}

COMMAND_KEY(cmd_enter_pb_test_mode)
{
  run_mode = RUN_MODE_PB_TEST;
    1ab8:	82 e0       	ldi	r24, 0x02	; 2
    1aba:	80 93 66 01 	sts	0x0166, r24
}
    1abe:	08 95       	ret

00001ac0 <cmd_enter_pio_test_mode>:

COMMAND_KEY(cmd_enter_pio_test_mode)
{
  run_mode = RUN_MODE_PIO_TEST;
    1ac0:	83 e0       	ldi	r24, 0x03	; 3
    1ac2:	80 93 66 01 	sts	0x0166, r24
}
    1ac6:	08 95       	ret

00001ac8 <cmd_enter_bridge_mode>:

COMMAND_KEY(cmd_enter_bridge_mode)
{
  run_mode = RUN_MODE_BRIDGE;
    1ac8:	10 92 66 01 	sts	0x0166, r1
}
    1acc:	08 95       	ret

00001ace <cmd_enter_bridge_test_mode>:

COMMAND_KEY(cmd_enter_bridge_test_mode)
{
  run_mode = RUN_MODE_BRIDGE_TEST;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	80 93 66 01 	sts	0x0166, r24
}
    1ad4:	08 95       	ret

00001ad6 <cmd_toggle_auto_mode>:
  pb_test_send_packet(1);
}

COMMAND_KEY(cmd_toggle_auto_mode)
{
  pb_test_toggle_auto();
    1ad6:	0e 94 57 19 	call	0x32ae	; 0x32ae <pb_test_toggle_auto>
}
    1ada:	08 95       	ret

00001adc <cmd_send_test_packet_silent>:
  pb_test_send_packet(0);
}

COMMAND_KEY(cmd_send_test_packet_silent)
{
  pb_test_send_packet(1);
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	0e 94 52 19 	call	0x32a4	; 0x32a4 <pb_test_send_packet>
}
    1ae2:	08 95       	ret

00001ae4 <cmd_send_test_packet>:
  run_mode = RUN_MODE_BRIDGE_TEST;
}

COMMAND_KEY(cmd_send_test_packet)
{
  pb_test_send_packet(0);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	0e 94 52 19 	call	0x32a4	; 0x32a4 <pb_test_send_packet>
}
    1aea:	08 95       	ret

00001aec <cmd_toggle_verbose>:
  pb_test_toggle_auto();
}

COMMAND_KEY(cmd_toggle_verbose)
{
  global_verbose = !global_verbose;
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	80 91 67 01 	lds	r24, 0x0167
    1af2:	88 23       	and	r24, r24
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <cmd_toggle_verbose+0xc>
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	90 93 67 01 	sts	0x0167, r25
  uart_send_pstring(PSTR("VERBOSE: "));
    1afc:	83 e9       	ldi	r24, 0x93	; 147
    1afe:	94 e0       	ldi	r25, 0x04	; 4
    1b00:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  uart_send_pstring(global_verbose ? PSTR("ON\r\n") : PSTR("OFF\r\n"));
    1b04:	80 91 67 01 	lds	r24, 0x0167
    1b08:	88 23       	and	r24, r24
    1b0a:	19 f4       	brne	.+6      	; 0x1b12 <cmd_toggle_verbose+0x26>
    1b0c:	88 e8       	ldi	r24, 0x88	; 136
    1b0e:	94 e0       	ldi	r25, 0x04	; 4
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <cmd_toggle_verbose+0x2a>
    1b12:	8e e8       	ldi	r24, 0x8E	; 142
    1b14:	94 e0       	ldi	r25, 0x04	; 4
    1b16:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
}
    1b1a:	08 95       	ret

00001b1c <cmd_reset_stats>:
  stats_dump_all();
}

COMMAND_KEY(cmd_reset_stats)
{
  stats_reset();
    1b1c:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <stats_reset>
}
    1b20:	08 95       	ret

00001b22 <cmd_dump_stats>:
#include "main.h"
#include "base/uartutil.h"

COMMAND_KEY(cmd_dump_stats)
{
  stats_dump_all();
    1b22:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <stats_dump_all>
}
    1b26:	08 95       	ret

00001b28 <dump_pb_cmd>:
    dump_ip_protocol(ip_buf);
  }
}

void dump_pb_cmd(const pb_proto_stat_t *ps)
{
    1b28:	cf 92       	push	r12
    1b2a:	df 92       	push	r13
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <dump_pb_cmd+0x12>
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <dump_pb_cmd+0x14>
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	6c 01       	movw	r12, r24
  u08 buf[4];

  uart_send_time_stamp_spc();
    1b42:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>

  // show command
  u08 cmd = ps->cmd;
    1b46:	f6 01       	movw	r30, r12
    1b48:	00 81       	ld	r16, Z
  u08 is_valid = 1;
  switch(cmd) {
    1b4a:	02 32       	cpi	r16, 0x22	; 34
    1b4c:	59 f0       	breq	.+22     	; 0x1b64 <dump_pb_cmd+0x3c>
    1b4e:	03 32       	cpi	r16, 0x23	; 35
    1b50:	20 f4       	brcc	.+8      	; 0x1b5a <dump_pb_cmd+0x32>
    1b52:	01 31       	cpi	r16, 0x11	; 17
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <dump_pb_cmd+0x30>
    1b56:	65 c0       	rjmp	.+202    	; 0x1c22 <dump_pb_cmd+0xfa>
    1b58:	05 c0       	rjmp	.+10     	; 0x1b64 <dump_pb_cmd+0x3c>
    1b5a:	03 33       	cpi	r16, 0x33	; 51
    1b5c:	19 f0       	breq	.+6      	; 0x1b64 <dump_pb_cmd+0x3c>
    1b5e:	04 34       	cpi	r16, 0x44	; 68
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <dump_pb_cmd+0x3c>
    1b62:	5f c0       	rjmp	.+190    	; 0x1c22 <dump_pb_cmd+0xfa>
    default:
      is_valid = 0;
      break;
  }

  u08 status = ps->status;
    1b64:	f6 01       	movw	r30, r12
    1b66:	11 81       	ldd	r17, Z+1	; 0x01
    uart_send_hex_byte(status);
    uart_send_crlf();
    return;
  }

  PGM_P str = ps->is_send ? PSTR("[TX:") : PSTR("[RX:");
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	88 23       	and	r24, r24
    1b6c:	19 f4       	brne	.+6      	; 0x1b74 <dump_pb_cmd+0x4c>
    1b6e:	8e ea       	ldi	r24, 0xAE	; 174
    1b70:	95 e0       	ldi	r25, 0x05	; 5
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <dump_pb_cmd+0x50>
    1b74:	83 eb       	ldi	r24, 0xB3	; 179
    1b76:	95 e0       	ldi	r25, 0x05	; 5
  uart_send_pstring(str);
    1b78:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  uart_send_hex_byte(cmd);
    1b7c:	80 2f       	mov	r24, r16
    1b7e:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>

  // result
  if(status == PBPROTO_STATUS_OK) {
    1b82:	11 30       	cpi	r17, 0x01	; 1
    1b84:	29 f4       	brne	.+10     	; 0x1b90 <dump_pb_cmd+0x68>
    uart_send_pstring(PSTR("] ok"));
    1b86:	89 ea       	ldi	r24, 0xA9	; 169
    1b88:	95 e0       	ldi	r25, 0x05	; 5
    1b8a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1b8e:	07 c0       	rjmp	.+14     	; 0x1b9e <dump_pb_cmd+0x76>
  } else {
    uart_send_pstring(PSTR("] ERR:"));
    1b90:	82 ea       	ldi	r24, 0xA2	; 162
    1b92:	95 e0       	ldi	r25, 0x05	; 5
    1b94:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_hex_byte(status);
    1b98:	81 2f       	mov	r24, r17
    1b9a:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
  }

  // packet size
  uart_send_pstring(PSTR(" n="));
    1b9e:	8e e9       	ldi	r24, 0x9E	; 158
    1ba0:	95 e0       	ldi	r25, 0x05	; 5
    1ba2:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  dword_to_dec(ps->size, buf, 4, 4);
    1ba6:	f6 01       	movw	r30, r12
    1ba8:	64 81       	ldd	r22, Z+4	; 0x04
    1baa:	75 81       	ldd	r23, Z+5	; 0x05
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	7e 01       	movw	r14, r28
    1bb2:	08 94       	sec
    1bb4:	e1 1c       	adc	r14, r1
    1bb6:	f1 1c       	adc	r15, r1
    1bb8:	a7 01       	movw	r20, r14
    1bba:	24 e0       	ldi	r18, 0x04	; 4
    1bbc:	04 e0       	ldi	r16, 0x04	; 4
    1bbe:	0e 94 ce 08 	call	0x119c	; 0x119c <dword_to_dec>
  uart_send_data(buf,4);
    1bc2:	c7 01       	movw	r24, r14
    1bc4:	64 e0       	ldi	r22, 0x04	; 4
    1bc6:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_send_data>

  // packet delta
  uart_send_pstring(PSTR(" d="));
    1bca:	8a e9       	ldi	r24, 0x9A	; 154
    1bcc:	95 e0       	ldi	r25, 0x05	; 5
    1bce:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  dword_to_dec(ps->delta, buf, 4, 4);
    1bd2:	f6 01       	movw	r30, r12
    1bd4:	66 81       	ldd	r22, Z+6	; 0x06
    1bd6:	77 81       	ldd	r23, Z+7	; 0x07
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a7 01       	movw	r20, r14
    1bde:	24 e0       	ldi	r18, 0x04	; 4
    1be0:	0e 94 ce 08 	call	0x119c	; 0x119c <dword_to_dec>
  uart_send_data(buf,4);
    1be4:	c7 01       	movw	r24, r14
    1be6:	64 e0       	ldi	r22, 0x04	; 4
    1be8:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_send_data>

  // speed
  uart_send_pstring(PSTR(" v="));
    1bec:	86 e9       	ldi	r24, 0x96	; 150
    1bee:	95 e0       	ldi	r25, 0x05	; 5
    1bf0:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  uart_send_rate_kbs(ps->rate);
    1bf4:	f6 01       	movw	r30, r12
    1bf6:	80 85       	ldd	r24, Z+8	; 0x08
    1bf8:	91 85       	ldd	r25, Z+9	; 0x09
    1bfa:	0e 94 4c 08 	call	0x1098	; 0x1098 <uart_send_rate_kbs>

  // request delay
  if(!ps->is_send) {
    1bfe:	f6 01       	movw	r30, r12
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	88 23       	and	r24, r24
    1c04:	59 f4       	brne	.+22     	; 0x1c1c <dump_pb_cmd+0xf4>
    uart_send_pstring(PSTR("  +req="));
    1c06:	8e e8       	ldi	r24, 0x8E	; 142
    1c08:	95 e0       	ldi	r25, 0x05	; 5
    1c0a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_delta(ps->recv_delta);
    1c0e:	f6 01       	movw	r30, r12
    1c10:	62 85       	ldd	r22, Z+10	; 0x0a
    1c12:	73 85       	ldd	r23, Z+11	; 0x0b
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 b9 07 	call	0xf72	; 0xf72 <uart_send_delta>
  }
  uart_send_crlf();
    1c1c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
    1c20:	12 c0       	rjmp	.+36     	; 0x1c46 <dump_pb_cmd+0x11e>
    default:
      is_valid = 0;
      break;
  }

  u08 status = ps->status;
    1c22:	f6 01       	movw	r30, r12
    1c24:	11 81       	ldd	r17, Z+1	; 0x01

  // invalid command
  if(!is_valid) {
    uart_send_pstring(PSTR("cmd="));
    1c26:	80 ec       	ldi	r24, 0xC0	; 192
    1c28:	95 e0       	ldi	r25, 0x05	; 5
    1c2a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_hex_byte(cmd);
    1c2e:	80 2f       	mov	r24, r16
    1c30:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
    uart_send_pstring(PSTR("?? ERR:"));
    1c34:	88 eb       	ldi	r24, 0xB8	; 184
    1c36:	95 e0       	ldi	r25, 0x05	; 5
    1c38:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_hex_byte(status);
    1c3c:	81 2f       	mov	r24, r17
    1c3e:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
    uart_send_crlf();
    1c42:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
  if(!ps->is_send) {
    uart_send_pstring(PSTR("  +req="));
    uart_send_delta(ps->recv_delta);
  }
  uart_send_crlf();
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	ff 90       	pop	r15
    1c58:	ef 90       	pop	r14
    1c5a:	df 90       	pop	r13
    1c5c:	cf 90       	pop	r12
    1c5e:	08 95       	ret

00001c60 <dump_udp_port>:
  uart_send(']');
  uart_send(' ');
}

static void dump_udp_port(u16 port)
{
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	ec 01       	movw	r28, r24
  if(port == 67) {
    1c66:	83 34       	cpi	r24, 0x43	; 67
    1c68:	91 05       	cpc	r25, r1
    1c6a:	29 f4       	brne	.+10     	; 0x1c76 <dump_udp_port+0x16>
    uart_send_pstring(PSTR("BOOTPS"));
    1c6c:	8c ee       	ldi	r24, 0xEC	; 236
    1c6e:	95 e0       	ldi	r25, 0x05	; 5
    1c70:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1c74:	11 c0       	rjmp	.+34     	; 0x1c98 <dump_udp_port+0x38>
  } else if(port == 68) {
    1c76:	84 34       	cpi	r24, 0x44	; 68
    1c78:	91 05       	cpc	r25, r1
    1c7a:	29 f4       	brne	.+10     	; 0x1c86 <dump_udp_port+0x26>
    uart_send_pstring(PSTR("BOOTPC"));
    1c7c:	85 ee       	ldi	r24, 0xE5	; 229
    1c7e:	95 e0       	ldi	r25, 0x05	; 5
    1c80:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <dump_udp_port+0x38>
  } else {
    uart_send(' ');
    1c86:	80 e2       	ldi	r24, 0x20	; 32
    1c88:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    uart_send_hex_word(port);
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
    uart_send(' ');
    1c92:	80 e2       	ldi	r24, 0x20	; 32
    1c94:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  }
}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	08 95       	ret

00001c9e <dump_tcp_port>:

static void dump_tcp_port(u16 port)
{
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	ec 01       	movw	r28, r24
  if(port == 21) {
    1ca4:	85 31       	cpi	r24, 0x15	; 21
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	29 f4       	brne	.+10     	; 0x1cb4 <dump_tcp_port+0x16>
    uart_send_pstring(PSTR("FTPctl"));
    1caa:	8a ef       	ldi	r24, 0xFA	; 250
    1cac:	95 e0       	ldi	r25, 0x05	; 5
    1cae:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1cb2:	11 c0       	rjmp	.+34     	; 0x1cd6 <dump_tcp_port+0x38>
  } else if(port == 20) {
    1cb4:	84 31       	cpi	r24, 0x14	; 20
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	29 f4       	brne	.+10     	; 0x1cc4 <dump_tcp_port+0x26>
    uart_send_pstring(PSTR("FTPdat"));
    1cba:	83 ef       	ldi	r24, 0xF3	; 243
    1cbc:	95 e0       	ldi	r25, 0x05	; 5
    1cbe:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1cc2:	09 c0       	rjmp	.+18     	; 0x1cd6 <dump_tcp_port+0x38>
  } else {
    uart_send(' ');
    1cc4:	80 e2       	ldi	r24, 0x20	; 32
    1cc6:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    uart_send_hex_word(port);
    1cca:	ce 01       	movw	r24, r28
    1ccc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
    uart_send(' ');
    1cd0:	80 e2       	ldi	r24, 0x20	; 32
    1cd2:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  }
}
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	08 95       	ret

00001cdc <dump_ip_protocol>:

extern void dump_ip_protocol(const u08 *ip_buf)
{
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	fc 01       	movw	r30, r24
  const u08 *proto_buf = ip_buf + ip_get_hdr_length(ip_buf);
    1cea:	80 81       	ld	r24, Z
    1cec:	88 0f       	add	r24, r24
    1cee:	88 0f       	add	r24, r24
    1cf0:	8c 73       	andi	r24, 0x3C	; 60
    1cf2:	ef 01       	movw	r28, r30
    1cf4:	c8 0f       	add	r28, r24
    1cf6:	d1 1d       	adc	r29, r1

inline const u08 *ip_get_src_ip(const u08 *buf) { return buf + 12; }
inline const u08 *ip_get_tgt_ip(const u08 *buf) { return buf + 16; }
inline u16 ip_get_total_length(const u08 *buf) { return (u16)buf[2] << 8 | (u16)buf[3]; }
inline u08 ip_get_hdr_length(const u08 *buf) { return (buf[0] & 0xf) * 4; }
inline u08 ip_get_protocol(const u08 *buf) { return buf[9]; }
    1cf8:	81 85       	ldd	r24, Z+9	; 0x09
  u08 proto = ip_get_protocol(ip_buf);
  if(proto == IP_PROTOCOL_UDP) {
    1cfa:	81 31       	cpi	r24, 0x11	; 17
    1cfc:	e9 f4       	brne	.+58     	; 0x1d38 <dump_ip_protocol+0x5c>
    uart_send_pstring(PSTR("[UDP:"));
    1cfe:	8f ed       	ldi	r24, 0xDF	; 223
    1d00:	95 e0       	ldi	r25, 0x05	; 5
    1d02:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
#define UDP_LENGTH_OFF    4
#define UDP_CHECKSUM_OFF  6
#define UDP_DATA_OFF      8

inline const u08 *udp_get_data_ptr(const u08 *udp_buf) { return udp_buf + UDP_DATA_OFF; }
inline u16  udp_get_src_port(const u08 *udp_buf) { return net_get_word(udp_buf + UDP_SRC_PORT_OFF); }
    1d06:	ce 01       	movw	r24, r28
    1d08:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
    1d0c:	8c 01       	movw	r16, r24
inline u16  udp_get_tgt_port(const u08 *udp_buf) { return net_get_word(udp_buf + UDP_TGT_PORT_OFF); }
    1d0e:	ce 01       	movw	r24, r28
    1d10:	02 96       	adiw	r24, 0x02	; 2
    1d12:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
    1d16:	7c 01       	movw	r14, r24
    u16 src_port = udp_get_src_port(proto_buf);
    u16 tgt_port = udp_get_tgt_port(proto_buf);
    dump_udp_port(src_port);
    1d18:	c8 01       	movw	r24, r16
    1d1a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dump_udp_port>
    uart_send('>');
    1d1e:	8e e3       	ldi	r24, 0x3E	; 62
    1d20:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    dump_udp_port(tgt_port);
    1d24:	c7 01       	movw	r24, r14
    1d26:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dump_udp_port>
    uart_send(']');
    1d2a:	8d e5       	ldi	r24, 0x5D	; 93
    1d2c:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    uart_send(' ');
    1d30:	80 e2       	ldi	r24, 0x20	; 32
    1d32:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    1d36:	47 c0       	rjmp	.+142    	; 0x1dc6 <dump_ip_protocol+0xea>
  }
  else if(proto == IP_PROTOCOL_TCP) {
    1d38:	86 30       	cpi	r24, 0x06	; 6
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <dump_ip_protocol+0x62>
    1d3c:	44 c0       	rjmp	.+136    	; 0x1dc6 <dump_ip_protocol+0xea>
    uart_send_pstring(PSTR("[TCP:"));
    1d3e:	89 ed       	ldi	r24, 0xD9	; 217
    1d40:	95 e0       	ldi	r25, 0x05	; 5
    1d42:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
#define TCP_FLAGS_ECE     0x040
#define TCP_FLAGS_CWR     0x080
#define TCP_FLAGS_NS      0x100

inline const u08 *tcp_get_data_ptr(const u08 *tcp_buf) { return tcp_buf + (tcp_buf[TCP_DATA_SIZE_OFF] >> 4) * 4; }
inline u16  tcp_get_src_port(const u08 *tcp_buf) { return net_get_word(tcp_buf + TCP_SRC_PORT_OFF); }
    1d46:	ce 01       	movw	r24, r28
    1d48:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
    1d4c:	8c 01       	movw	r16, r24
inline u16  tcp_get_tgt_port(const u08 *tcp_buf) { return net_get_word(tcp_buf + TCP_TGT_PORT_OFF); }
    1d4e:	ce 01       	movw	r24, r28
    1d50:	02 96       	adiw	r24, 0x02	; 2
    1d52:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
    1d56:	7c 01       	movw	r14, r24
    u16 src_port = tcp_get_src_port(proto_buf);
    u16 tgt_port = tcp_get_tgt_port(proto_buf);
    dump_tcp_port(src_port);
    1d58:	c8 01       	movw	r24, r16
    1d5a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <dump_tcp_port>
    uart_send('>');
    1d5e:	8e e3       	ldi	r24, 0x3E	; 62
    1d60:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    dump_tcp_port(tgt_port);
    1d64:	c7 01       	movw	r24, r14
    1d66:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <dump_tcp_port>
inline u32  tcp_get_seq_num(const u08 *tcp_buf) { return net_get_long(tcp_buf + TCP_SEQ_NUM_OFF); }
inline u32  tcp_get_ack_num(const u08 *tcp_buf) { return net_get_long(tcp_buf + TCP_ACK_NUM_OFF); }
inline u16  tcp_get_flags(const u08 *tcp_buf) { return net_get_word(tcp_buf + TCP_FLAGS_OFF) & 0x1ff; }
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	0c 96       	adiw	r24, 0x0c	; 12
    1d6e:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
    1d72:	7c 01       	movw	r14, r24
    1d74:	8c 01       	movw	r16, r24
    1d76:	11 70       	andi	r17, 0x01	; 1

    u16 flags = tcp_get_flags(proto_buf);
    uart_send_pstring(PSTR(",flags="));
    1d78:	81 ed       	ldi	r24, 0xD1	; 209
    1d7a:	95 e0       	ldi	r25, 0x05	; 5
    1d7c:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_hex_word(flags);
    1d80:	c8 01       	movw	r24, r16
    1d82:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>

    uart_send_pstring(PSTR(",seq="));
    1d86:	8b ec       	ldi	r24, 0xCB	; 203
    1d88:	95 e0       	ldi	r25, 0x05	; 5
    1d8a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
#define TCP_FLAGS_NS      0x100

inline const u08 *tcp_get_data_ptr(const u08 *tcp_buf) { return tcp_buf + (tcp_buf[TCP_DATA_SIZE_OFF] >> 4) * 4; }
inline u16  tcp_get_src_port(const u08 *tcp_buf) { return net_get_word(tcp_buf + TCP_SRC_PORT_OFF); }
inline u16  tcp_get_tgt_port(const u08 *tcp_buf) { return net_get_word(tcp_buf + TCP_TGT_PORT_OFF); }
inline u32  tcp_get_seq_num(const u08 *tcp_buf) { return net_get_long(tcp_buf + TCP_SEQ_NUM_OFF); }
    1d8e:	ce 01       	movw	r24, r28
    1d90:	04 96       	adiw	r24, 0x04	; 4
    1d92:	0e 94 a0 13 	call	0x2740	; 0x2740 <net_get_long>
    u32 seq = tcp_get_seq_num(proto_buf);
    uart_send_hex_dword(seq);
    1d96:	0e 94 8f 07 	call	0xf1e	; 0xf1e <uart_send_hex_dword>

    if(flags & TCP_FLAGS_ACK) {
    1d9a:	e4 fe       	sbrs	r14, 4
    1d9c:	0e c0       	rjmp	.+28     	; 0x1dba <dump_ip_protocol+0xde>
inline u32  tcp_get_ack_num(const u08 *tcp_buf) { return net_get_long(tcp_buf + TCP_ACK_NUM_OFF); }
    1d9e:	ce 01       	movw	r24, r28
    1da0:	08 96       	adiw	r24, 0x08	; 8
    1da2:	0e 94 a0 13 	call	0x2740	; 0x2740 <net_get_long>
    1da6:	7b 01       	movw	r14, r22
    1da8:	8c 01       	movw	r16, r24
      u32 ack = tcp_get_ack_num(proto_buf);
      uart_send_pstring(PSTR(",ack="));
    1daa:	85 ec       	ldi	r24, 0xC5	; 197
    1dac:	95 e0       	ldi	r25, 0x05	; 5
    1dae:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      uart_send_hex_dword(ack);
    1db2:	c8 01       	movw	r24, r16
    1db4:	b7 01       	movw	r22, r14
    1db6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <uart_send_hex_dword>
    }

    uart_send(']');
    1dba:	8d e5       	ldi	r24, 0x5D	; 93
    1dbc:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    uart_send(' ');
    1dc0:	80 e2       	ldi	r24, 0x20	; 32
    1dc2:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  }
}
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	08 95       	ret

00001dd4 <dump_ip_pkt>:
  uart_send(']');
  uart_send(' ');
}

void dump_ip_pkt(const u08 *ip_buf)
{
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	ec 01       	movw	r28, r24
  uart_send_pstring(PSTR("[IP4:"));
    1ddc:	83 e1       	ldi	r24, 0x13	; 19
    1dde:	96 e0       	ldi	r25, 0x06	; 6
    1de0:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  // size
  uart_send_hex_word(ip_get_total_length(ip_buf));
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	82 2b       	or	r24, r18
    1dee:	93 2b       	or	r25, r19
    1df0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
    1df4:	19 85       	ldd	r17, Y+9	; 0x09

  // ip proto
  u08 proto = ip_get_protocol(ip_buf);
  if(proto == IP_PROTOCOL_ICMP) {
    1df6:	11 30       	cpi	r17, 0x01	; 1
    1df8:	29 f4       	brne	.+10     	; 0x1e04 <dump_ip_pkt+0x30>
    uart_send_pstring(PSTR(",ICMP"));
    1dfa:	8d e0       	ldi	r24, 0x0D	; 13
    1dfc:	96 e0       	ldi	r25, 0x06	; 6
    1dfe:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1e02:	15 c0       	rjmp	.+42     	; 0x1e2e <dump_ip_pkt+0x5a>
  } else if(proto == IP_PROTOCOL_TCP) {
    1e04:	16 30       	cpi	r17, 0x06	; 6
    1e06:	29 f4       	brne	.+10     	; 0x1e12 <dump_ip_pkt+0x3e>
    uart_send_pstring(PSTR(",TCP "));
    1e08:	87 e0       	ldi	r24, 0x07	; 7
    1e0a:	96 e0       	ldi	r25, 0x06	; 6
    1e0c:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1e10:	0e c0       	rjmp	.+28     	; 0x1e2e <dump_ip_pkt+0x5a>
  } else if(proto == IP_PROTOCOL_UDP) {
    1e12:	11 31       	cpi	r17, 0x11	; 17
    1e14:	29 f4       	brne	.+10     	; 0x1e20 <dump_ip_pkt+0x4c>
    uart_send_pstring(PSTR(",UDP "));
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	96 e0       	ldi	r25, 0x06	; 6
    1e1a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1e1e:	07 c0       	rjmp	.+14     	; 0x1e2e <dump_ip_pkt+0x5a>
  } else {
    uart_send(',');
    1e20:	8c e2       	ldi	r24, 0x2C	; 44
    1e22:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
    uart_send_hex_word(proto);
    1e26:	81 2f       	mov	r24, r17
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
  }

  // src/tgt ip
  uart_send(',');
    1e2e:	8c e2       	ldi	r24, 0x2C	; 44
    1e30:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  net_dump_ip(ip_get_src_ip(ip_buf));
    1e34:	ce 01       	movw	r24, r28
    1e36:	0c 96       	adiw	r24, 0x0c	; 12
    1e38:	0e 94 0a 14 	call	0x2814	; 0x2814 <net_dump_ip>
  uart_send('>');
    1e3c:	8e e3       	ldi	r24, 0x3E	; 62
    1e3e:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  net_dump_ip(ip_get_tgt_ip(ip_buf)),
    1e42:	ce 01       	movw	r24, r28
    1e44:	40 96       	adiw	r24, 0x10	; 16
    1e46:	0e 94 0a 14 	call	0x2814	; 0x2814 <net_dump_ip>
    1e4a:	8d e5       	ldi	r24, 0x5D	; 93
    1e4c:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>

  uart_send(']');
  uart_send(' ');
    1e50:	80 e2       	ldi	r24, 0x20	; 32
    1e52:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
}
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	08 95       	ret

00001e5e <dump_arp_pkt>:
  uart_send(']');
  uart_send(' ');
}

void dump_arp_pkt(const u08 *arp_buf)
{
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	ec 01       	movw	r28, r24
  uart_send_pstring(PSTR("[ARP:"));
    1e64:	83 e2       	ldi	r24, 0x23	; 35
    1e66:	96 e0       	ldi	r25, 0x06	; 6
    1e68:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

extern u08 arp_is_ipv4(const u08 *buf, u16 len);
extern void arp_make_reply(u08 *buf, const u08 *my_mac, const u08 *my_ip);

/* getter */
inline u16 arp_get_op(const u08 *buf) { return net_get_word(buf + ARP_OFF_OP); }
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	06 96       	adiw	r24, 0x06	; 6
    1e70:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>

  // ARP op
  u16 op = arp_get_op(arp_buf);
  if(op == ARP_REQUEST) {
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	91 05       	cpc	r25, r1
    1e78:	29 f4       	brne	.+10     	; 0x1e84 <dump_arp_pkt+0x26>
    uart_send_pstring(PSTR("REQ "));
    1e7a:	8e e1       	ldi	r24, 0x1E	; 30
    1e7c:	96 e0       	ldi	r25, 0x06	; 6
    1e7e:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1e82:	0a c0       	rjmp	.+20     	; 0x1e98 <dump_arp_pkt+0x3a>
  } else if(op == ARP_REPLY) {
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	91 05       	cpc	r25, r1
    1e88:	29 f4       	brne	.+10     	; 0x1e94 <dump_arp_pkt+0x36>
    uart_send_pstring(PSTR("REPL"));
    1e8a:	89 e1       	ldi	r24, 0x19	; 25
    1e8c:	96 e0       	ldi	r25, 0x06	; 6
    1e8e:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <dump_arp_pkt+0x3a>
  } else {
    uart_send_hex_word(op);
    1e94:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
  }
  uart_send(',');
    1e98:	8c e2       	ldi	r24, 0x2C	; 44
    1e9a:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>

  // src pair
  uart_send('(');
    1e9e:	88 e2       	ldi	r24, 0x28	; 40
    1ea0:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  net_dump_mac(arp_get_src_mac(arp_buf));
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	08 96       	adiw	r24, 0x08	; 8
    1ea8:	0e 94 a8 14 	call	0x2950	; 0x2950 <net_dump_mac>
  uart_send(',');
    1eac:	8c e2       	ldi	r24, 0x2C	; 44
    1eae:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  net_dump_ip(arp_get_src_ip(arp_buf));
    1eb2:	ce 01       	movw	r24, r28
    1eb4:	0e 96       	adiw	r24, 0x0e	; 14
    1eb6:	0e 94 0a 14 	call	0x2814	; 0x2814 <net_dump_ip>
  uart_send(')');
    1eba:	89 e2       	ldi	r24, 0x29	; 41
    1ebc:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  uart_send('>');
    1ec0:	8e e3       	ldi	r24, 0x3E	; 62
    1ec2:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>

  // tgt pair
  uart_send('(');
    1ec6:	88 e2       	ldi	r24, 0x28	; 40
    1ec8:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  net_dump_mac(arp_get_tgt_mac(arp_buf));
    1ecc:	ce 01       	movw	r24, r28
    1ece:	42 96       	adiw	r24, 0x12	; 18
    1ed0:	0e 94 a8 14 	call	0x2950	; 0x2950 <net_dump_mac>
  uart_send(',');
    1ed4:	8c e2       	ldi	r24, 0x2C	; 44
    1ed6:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  net_dump_ip(arp_get_tgt_ip(arp_buf));
    1eda:	ce 01       	movw	r24, r28
    1edc:	48 96       	adiw	r24, 0x18	; 24
    1ede:	0e 94 0a 14 	call	0x2814	; 0x2814 <net_dump_ip>
  uart_send(')');
    1ee2:	89 e2       	ldi	r24, 0x29	; 41
    1ee4:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>

  uart_send(']');
    1ee8:	8d e5       	ldi	r24, 0x5D	; 93
    1eea:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  uart_send(' ');
    1eee:	80 e2       	ldi	r24, 0x20	; 32
    1ef0:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
}
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	08 95       	ret

00001efa <dump_eth_pkt>:
#include "param.h"
#include "base/util.h"
#include "pb_proto.h"

void dump_eth_pkt(const u08 *eth_buf, u16 size)
{
    1efa:	af 92       	push	r10
    1efc:	bf 92       	push	r11
    1efe:	cf 92       	push	r12
    1f00:	df 92       	push	r13
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <dump_eth_pkt+0x14>
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <dump_eth_pkt+0x16>
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	7c 01       	movw	r14, r24
    1f16:	5b 01       	movw	r10, r22
  u08 buf[4];

  uart_send('[');
    1f18:	8b e5       	ldi	r24, 0x5B	; 91
    1f1a:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  dword_to_dec(size, buf, 4, 4);
    1f1e:	cc 24       	eor	r12, r12
    1f20:	dd 24       	eor	r13, r13
    1f22:	c6 01       	movw	r24, r12
    1f24:	b5 01       	movw	r22, r10
    1f26:	6e 01       	movw	r12, r28
    1f28:	08 94       	sec
    1f2a:	c1 1c       	adc	r12, r1
    1f2c:	d1 1c       	adc	r13, r1
    1f2e:	a6 01       	movw	r20, r12
    1f30:	24 e0       	ldi	r18, 0x04	; 4
    1f32:	04 e0       	ldi	r16, 0x04	; 4
    1f34:	0e 94 ce 08 	call	0x119c	; 0x119c <dword_to_dec>
  uart_send_data(buf,4);
    1f38:	c6 01       	movw	r24, r12
    1f3a:	64 e0       	ldi	r22, 0x04	; 4
    1f3c:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_send_data>
  uart_send(',');
    1f40:	8c e2       	ldi	r24, 0x2C	; 44
    1f42:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
inline u16 eth_get_pkt_type(const u08 *pkt) { return net_get_word(pkt + ETH_OFF_TYPE); }
    1f46:	c7 01       	movw	r24, r14
    1f48:	0c 96       	adiw	r24, 0x0c	; 12
    1f4a:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
  uart_send_hex_word(eth_get_pkt_type(eth_buf));
    1f4e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
  uart_send(',');
    1f52:	8c e2       	ldi	r24, 0x2C	; 44
    1f54:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  net_dump_mac(eth_get_src_mac(eth_buf));
    1f58:	c7 01       	movw	r24, r14
    1f5a:	06 96       	adiw	r24, 0x06	; 6
    1f5c:	0e 94 a8 14 	call	0x2950	; 0x2950 <net_dump_mac>
  uart_send('>');
    1f60:	8e e3       	ldi	r24, 0x3E	; 62
    1f62:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  net_dump_mac(eth_get_tgt_mac(eth_buf));
    1f66:	c7 01       	movw	r24, r14
    1f68:	0e 94 a8 14 	call	0x2950	; 0x2950 <net_dump_mac>
  uart_send(']');
    1f6c:	8d e5       	ldi	r24, 0x5D	; 93
    1f6e:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
  uart_send(' ');
    1f72:	80 e2       	ldi	r24, 0x20	; 32
    1f74:	0e 94 6b 07 	call	0xed6	; 0xed6 <uart_send>
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	bf 90       	pop	r11
    1f90:	af 90       	pop	r10
    1f92:	08 95       	ret

00001f94 <dump_line>:
    uart_send(' ');
  }
}

extern void dump_line(const u08 *eth_buf, u16 size)
{
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	8c 01       	movw	r16, r24
  dump_eth_pkt(eth_buf, size);
    1f9e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <dump_eth_pkt>

  const u08 *ip_buf = eth_buf + ETH_HDR_SIZE;
    1fa2:	e8 01       	movw	r28, r16
    1fa4:	2e 96       	adiw	r28, 0x0e	; 14
    1fa6:	c8 01       	movw	r24, r16
    1fa8:	0c 96       	adiw	r24, 0x0c	; 12
    1faa:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
  u16 type = eth_get_pkt_type(eth_buf);
  if(type == ETH_TYPE_ARP) {
    1fae:	28 e0       	ldi	r18, 0x08	; 8
    1fb0:	86 30       	cpi	r24, 0x06	; 6
    1fb2:	92 07       	cpc	r25, r18
    1fb4:	21 f4       	brne	.+8      	; 0x1fbe <dump_line+0x2a>
    dump_arp_pkt(ip_buf);
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <dump_arp_pkt>
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <dump_line+0x3c>
  } else if(type == ETH_TYPE_IPV4) {
    1fbe:	80 50       	subi	r24, 0x00	; 0
    1fc0:	98 40       	sbci	r25, 0x08	; 8
    1fc2:	31 f4       	brne	.+12     	; 0x1fd0 <dump_line+0x3c>
    dump_ip_pkt(ip_buf);
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <dump_ip_pkt>
    dump_ip_protocol(ip_buf);
    1fca:	ce 01       	movw	r24, r28
    1fcc:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <dump_ip_protocol>
  }
}
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	1f 91       	pop	r17
    1fd6:	0f 91       	pop	r16
    1fd8:	08 95       	ret

00001fda <readOp>:
    1fda:	e5 e2       	ldi	r30, 0x25	; 37
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	90 81       	ld	r25, Z
    1fe0:	9d 7f       	andi	r25, 0xFD	; 253
    1fe2:	90 83       	st	Z, r25
static u08 is_full_duplex;
static u08 rev;

static uint8_t readOp (uint8_t op, uint8_t address) {
    spi_enable_eth();
    spi_out(op | (address & ADDR_MASK));
    1fe4:	96 2f       	mov	r25, r22
    1fe6:	9f 71       	andi	r25, 0x1F	; 31
    1fe8:	98 2b       	or	r25, r24
    1fea:	9e bd       	out	0x2e, r25	; 46
    1fec:	ed e4       	ldi	r30, 0x4D	; 77
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	88 23       	and	r24, r24
    1ff4:	ec f7       	brge	.-6      	; 0x1ff0 <readOp+0x16>
    if (address & 0x80)
    1ff6:	66 23       	and	r22, r22
    1ff8:	34 f4       	brge	.+12     	; 0x2006 <readOp+0x2c>
    1ffa:	1e bc       	out	0x2e, r1	; 46
    1ffc:	ed e4       	ldi	r30, 0x4D	; 77
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	88 23       	and	r24, r24
    2004:	ec f7       	brge	.-6      	; 0x2000 <readOp+0x26>
    2006:	1e bc       	out	0x2e, r1	; 46
    2008:	ed e4       	ldi	r30, 0x4D	; 77
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	88 23       	and	r24, r24
    2010:	ec f7       	brge	.-6      	; 0x200c <readOp+0x32>
    2012:	8e b5       	in	r24, 0x2e	; 46
    2014:	e5 e2       	ldi	r30, 0x25	; 37
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	90 81       	ld	r25, Z
    201a:	92 60       	ori	r25, 0x02	; 2
    201c:	90 83       	st	Z, r25
        spi_out(0x00);
    uint8_t result = spi_in();
    spi_disable_eth();
    return result;
}
    201e:	08 95       	ret

00002020 <writeOp>:
    2020:	e5 e2       	ldi	r30, 0x25	; 37
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	90 81       	ld	r25, Z
    2026:	9d 7f       	andi	r25, 0xFD	; 253
    2028:	90 83       	st	Z, r25

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
    spi_enable_eth();
    spi_out(op | (address & ADDR_MASK));
    202a:	6f 71       	andi	r22, 0x1F	; 31
    202c:	68 2b       	or	r22, r24
    202e:	6e bd       	out	0x2e, r22	; 46
    2030:	ed e4       	ldi	r30, 0x4D	; 77
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	88 23       	and	r24, r24
    2038:	ec f7       	brge	.-6      	; 0x2034 <writeOp+0x14>
    203a:	4e bd       	out	0x2e, r20	; 46
    203c:	ed e4       	ldi	r30, 0x4D	; 77
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	88 23       	and	r24, r24
    2044:	ec f7       	brge	.-6      	; 0x2040 <writeOp+0x20>
    2046:	e5 e2       	ldi	r30, 0x25	; 37
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	82 60       	ori	r24, 0x02	; 2
    204e:	80 83       	st	Z, r24
    spi_out(data);
    spi_disable_eth();
}
    2050:	08 95       	ret

00002052 <readBuf>:

static void readBuf(uint16_t len, uint8_t* data) {
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	9c 01       	movw	r18, r24
    2058:	db 01       	movw	r26, r22
    205a:	e5 e2       	ldi	r30, 0x25	; 37
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8d 7f       	andi	r24, 0xFD	; 253
    2062:	80 83       	st	Z, r24
    2064:	8a e3       	ldi	r24, 0x3A	; 58
    2066:	8e bd       	out	0x2e, r24	; 46
    2068:	ed e4       	ldi	r30, 0x4D	; 77
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	88 23       	and	r24, r24
    2070:	ec f7       	brge	.-6      	; 0x206c <readBuf+0x1a>
    spi_enable_eth();
    spi_out(ENC28J60_READ_BUF_MEM);
    while (len--) {
    2072:	21 15       	cp	r18, r1
    2074:	31 05       	cpc	r19, r1
    2076:	79 f0       	breq	.+30     	; 0x2096 <readBuf+0x44>
    2078:	ce e4       	ldi	r28, 0x4E	; 78
    207a:	d0 e0       	ldi	r29, 0x00	; 0
    207c:	ed e4       	ldi	r30, 0x4D	; 77
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	18 82       	st	Y, r1
    2082:	80 81       	ld	r24, Z
    2084:	88 23       	and	r24, r24
    2086:	ec f7       	brge	.-6      	; 0x2082 <readBuf+0x30>
    2088:	88 81       	ld	r24, Y
        *data++ = spi_in();
    208a:	8c 93       	st	X, r24
    208c:	21 50       	subi	r18, 0x01	; 1
    208e:	30 40       	sbci	r19, 0x00	; 0
}

static void readBuf(uint16_t len, uint8_t* data) {
    spi_enable_eth();
    spi_out(ENC28J60_READ_BUF_MEM);
    while (len--) {
    2090:	11 f0       	breq	.+4      	; 0x2096 <readBuf+0x44>
        *data++ = spi_in();
    2092:	11 96       	adiw	r26, 0x01	; 1
    2094:	f5 cf       	rjmp	.-22     	; 0x2080 <readBuf+0x2e>
    2096:	e5 e2       	ldi	r30, 0x25	; 37
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	82 60       	ori	r24, 0x02	; 2
    209e:	80 83       	st	Z, r24
    }
    spi_disable_eth();
}
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	08 95       	ret

000020a6 <SetBank>:

static void SetBank (uint8_t address) {
    20a6:	1f 93       	push	r17
    20a8:	18 2f       	mov	r17, r24
    if ((address & BANK_MASK) != Enc28j60Bank) {
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	20 76       	andi	r18, 0x60	; 96
    20b0:	30 70       	andi	r19, 0x00	; 0
    20b2:	80 91 61 01 	lds	r24, 0x0161
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	28 17       	cp	r18, r24
    20ba:	39 07       	cpc	r19, r25
    20bc:	81 f0       	breq	.+32     	; 0x20de <SetBank+0x38>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
    20be:	80 ea       	ldi	r24, 0xA0	; 160
    20c0:	6f e1       	ldi	r22, 0x1F	; 31
    20c2:	43 e0       	ldi	r20, 0x03	; 3
    20c4:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
        Enc28j60Bank = address & BANK_MASK;
    20c8:	41 2f       	mov	r20, r17
    20ca:	40 76       	andi	r20, 0x60	; 96
    20cc:	40 93 61 01 	sts	0x0161, r20
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
    20d0:	42 95       	swap	r20
    20d2:	46 95       	lsr	r20
    20d4:	47 70       	andi	r20, 0x07	; 7
    20d6:	80 e8       	ldi	r24, 0x80	; 128
    20d8:	6f e1       	ldi	r22, 0x1F	; 31
    20da:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
    }
}
    20de:	1f 91       	pop	r17
    20e0:	08 95       	ret

000020e2 <readRegByte>:

static uint8_t readRegByte (uint8_t address) {
    20e2:	1f 93       	push	r17
    20e4:	18 2f       	mov	r17, r24
    SetBank(address);
    20e6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <SetBank>
    return readOp(ENC28J60_READ_CTRL_REG, address);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	61 2f       	mov	r22, r17
    20ee:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <readOp>
}
    20f2:	1f 91       	pop	r17
    20f4:	08 95       	ret

000020f6 <writeRegByte>:
static uint16_t readReg(uint8_t address) {
	return readRegByte(address) + (readRegByte(address+1) << 8);
}
#endif

static void writeRegByte (uint8_t address, uint8_t data) {
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	18 2f       	mov	r17, r24
    20fc:	06 2f       	mov	r16, r22
    SetBank(address);
    20fe:	0e 94 53 10 	call	0x20a6	; 0x20a6 <SetBank>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
    2102:	80 e4       	ldi	r24, 0x40	; 64
    2104:	61 2f       	mov	r22, r17
    2106:	40 2f       	mov	r20, r16
    2108:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
}
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	08 95       	ret

00002112 <writeReg>:

static void writeReg(uint8_t address, uint16_t data) {
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	18 2f       	mov	r17, r24
    2118:	07 2f       	mov	r16, r23
    writeRegByte(address, data);
    211a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
    writeRegByte(address + 1, data >> 8);
    211e:	81 2f       	mov	r24, r17
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	60 2f       	mov	r22, r16
    2124:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
}
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	08 95       	ret

0000212e <writePhy>:
        ;
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	98 2f       	mov	r25, r24
    2134:	8b 01       	movw	r16, r22
    writeRegByte(MIREGADR, address);
    2136:	84 ed       	ldi	r24, 0xD4	; 212
    2138:	69 2f       	mov	r22, r25
    213a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
    writeReg(MIWR, data);
    213e:	86 ed       	ldi	r24, 0xD6	; 214
    2140:	b8 01       	movw	r22, r16
    2142:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
    2146:	8a ee       	ldi	r24, 0xEA	; 234
    2148:	0e 94 71 10 	call	0x20e2	; 0x20e2 <readRegByte>
    214c:	80 fd       	sbrc	r24, 0
    214e:	fb cf       	rjmp	.-10     	; 0x2146 <writePhy+0x18>
        ;
}
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	08 95       	ret

00002156 <enc28j60_exit>:

// ---------- exit ----------

static void enc28j60_exit(void)
{
  SetBank(ECON1);
    2156:	8f e1       	ldi	r24, 0x1F	; 31
    2158:	0e 94 53 10 	call	0x20a6	; 0x20a6 <SetBank>
  writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_RXEN);
    215c:	80 ea       	ldi	r24, 0xA0	; 160
    215e:	6f e1       	ldi	r22, 0x1F	; 31
    2160:	44 e0       	ldi	r20, 0x04	; 4
    2162:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
}
    2166:	08 95       	ret

00002168 <enc28j60_control>:

// ---------- control ----------

static u08 enc28j60_control(u08 control_id, u08 value)
{
  switch(control_id) {
    2168:	88 23       	and	r24, r24
    216a:	11 f0       	breq	.+4      	; 0x2170 <enc28j60_control+0x8>
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	08 95       	ret
    case PIO_CONTROL_FLOW:
      {
        u08 flag;
        if(is_full_duplex) {
    2170:	80 91 64 01 	lds	r24, 0x0164
    2174:	88 23       	and	r24, r24
    2176:	31 f0       	breq	.+12     	; 0x2184 <enc28j60_control+0x1c>
          flag = value ? 2 : 3;
    2178:	66 23       	and	r22, r22
    217a:	11 f4       	brne	.+4      	; 0x2180 <enc28j60_control+0x18>
    217c:	63 e0       	ldi	r22, 0x03	; 3
    217e:	04 c0       	rjmp	.+8      	; 0x2188 <enc28j60_control+0x20>
    2180:	62 e0       	ldi	r22, 0x02	; 2
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <enc28j60_control+0x20>
        } else {
          flag = value ? 1 : 0;
    2184:	61 11       	cpse	r22, r1
    2186:	61 e0       	ldi	r22, 0x01	; 1
        }
        writeRegByte(EFLOCON, flag);
    2188:	87 e7       	ldi	r24, 0x77	; 119
    218a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
    218e:	80 e0       	ldi	r24, 0x00	; 0
        return PIO_OK;
      }
    default:
      return PIO_NOT_FOUND;
  }
}
    2190:	08 95       	ret

00002192 <enc28j60_status>:

// ---------- status ----------

static u08 enc28j60_status(u08 status_id, u08 *value)
{
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	eb 01       	movw	r28, r22
  switch(status_id) {
    2198:	88 23       	and	r24, r24
    219a:	19 f0       	breq	.+6      	; 0x21a2 <enc28j60_status+0x10>
    219c:	81 30       	cpi	r24, 0x01	; 1
    219e:	19 f5       	brne	.+70     	; 0x21e6 <enc28j60_status+0x54>
    21a0:	05 c0       	rjmp	.+10     	; 0x21ac <enc28j60_status+0x1a>
    case PIO_STATUS_VERSION:
      *value = rev;
    21a2:	80 91 65 01 	lds	r24, 0x0165
    21a6:	88 83       	st	Y, r24
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	1f c0       	rjmp	.+62     	; 0x21ea <enc28j60_status+0x58>
    writeRegByte(address, data);
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    21ac:	84 ed       	ldi	r24, 0xD4	; 212
    21ae:	61 e1       	ldi	r22, 0x11	; 17
    21b0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
    writeRegByte(MICMD, MICMD_MIIRD);
    21b4:	82 ed       	ldi	r24, 0xD2	; 210
    21b6:	61 e0       	ldi	r22, 0x01	; 1
    21b8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
    21bc:	8a ee       	ldi	r24, 0xEA	; 234
    21be:	0e 94 71 10 	call	0x20e2	; 0x20e2 <readRegByte>
    21c2:	80 fd       	sbrc	r24, 0
    21c4:	fb cf       	rjmp	.-10     	; 0x21bc <enc28j60_status+0x2a>
        ;
    writeRegByte(MICMD, 0x00);
    21c6:	82 ed       	ldi	r24, 0xD2	; 210
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
    return readRegByte(MIRD+1);
    21ce:	89 ed       	ldi	r24, 0xD9	; 217
    21d0:	0e 94 71 10 	call	0x20e2	; 0x20e2 <readRegByte>
  switch(status_id) {
    case PIO_STATUS_VERSION:
      *value = rev;
      return PIO_OK;
    case PIO_STATUS_LINK_UP:
      *value = (readPhyByte(PHSTAT2) >> 2) & 1;
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	96 95       	lsr	r25
    21d8:	87 95       	ror	r24
    21da:	96 95       	lsr	r25
    21dc:	87 95       	ror	r24
    21de:	81 70       	andi	r24, 0x01	; 1
    21e0:	88 83       	st	Y, r24
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <enc28j60_status+0x58>
      return PIO_OK;
    default:
      *value = 0;
    21e6:	18 82       	st	Y, r1
    21e8:	81 e0       	ldi	r24, 0x01	; 1
      return PIO_NOT_FOUND;
  }
}
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	08 95       	ret

000021f0 <enc28j60_send>:
#endif

// ---------- send ----------

static u08 enc28j60_send(const u08 *data, u16 size)
{
    21f0:	0f 93       	push	r16
    21f2:	1f 93       	push	r17
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	ec 01       	movw	r28, r24
    21fa:	8b 01       	movw	r16, r22
  // prepare tx buffer write
  writeReg(EWRPT, TXSTART_INIT);
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	7a e1       	ldi	r23, 0x1A	; 26
    2202:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
  writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    2206:	8a e7       	ldi	r24, 0x7A	; 122
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
    2210:	e5 e2       	ldi	r30, 0x25	; 37
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	8d 7f       	andi	r24, 0xFD	; 253
    2218:	80 83       	st	Z, r24
    221a:	8a e7       	ldi	r24, 0x7A	; 122
    221c:	8e bd       	out	0x2e, r24	; 46
    221e:	ed e4       	ldi	r30, 0x4D	; 77
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	88 23       	and	r24, r24
    2226:	ec f7       	brge	.-6      	; 0x2222 <enc28j60_send+0x32>
    2228:	98 01       	movw	r18, r16
    222a:	ae e4       	ldi	r26, 0x4E	; 78
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	ed e4       	ldi	r30, 0x4D	; 77
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	08 c0       	rjmp	.+16     	; 0x2244 <enc28j60_send+0x54>
  // fill buffer
  u16 num = size;
  spi_enable_eth(),
  spi_out(ENC28J60_WRITE_BUF_MEM);
  while(num--) {
    spi_out(*data++);
    2234:	88 81       	ld	r24, Y
    2236:	8c 93       	st	X, r24
    2238:	80 81       	ld	r24, Z
    223a:	88 23       	and	r24, r24
    223c:	ec f7       	brge	.-6      	; 0x2238 <enc28j60_send+0x48>
    223e:	21 96       	adiw	r28, 0x01	; 1
    2240:	21 50       	subi	r18, 0x01	; 1
    2242:	30 40       	sbci	r19, 0x00	; 0

  // fill buffer
  u16 num = size;
  spi_enable_eth(),
  spi_out(ENC28J60_WRITE_BUF_MEM);
  while(num--) {
    2244:	21 15       	cp	r18, r1
    2246:	31 05       	cpc	r19, r1
    2248:	a9 f7       	brne	.-22     	; 0x2234 <enc28j60_send+0x44>
    224a:	e5 e2       	ldi	r30, 0x25	; 37
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	82 60       	ori	r24, 0x02	; 2
    2252:	80 83       	st	Z, r24
    2254:	0f c0       	rjmp	.+30     	; 0x2274 <enc28j60_send+0x84>
  }
  spi_disable_eth();

  // wait for tx ready
  while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
      if (readRegByte(EIR) & EIR_TXERIF) {
    2256:	8c e1       	ldi	r24, 0x1C	; 28
    2258:	0e 94 71 10 	call	0x20e2	; 0x20e2 <readRegByte>
    225c:	81 ff       	sbrs	r24, 1
    225e:	0a c0       	rjmp	.+20     	; 0x2274 <enc28j60_send+0x84>
          writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
    2260:	80 e8       	ldi	r24, 0x80	; 128
    2262:	6f e1       	ldi	r22, 0x1F	; 31
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
          writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
    226a:	80 ea       	ldi	r24, 0xA0	; 160
    226c:	6f e1       	ldi	r22, 0x1F	; 31
    226e:	40 e8       	ldi	r20, 0x80	; 128
    2270:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
    spi_out(*data++);
  }
  spi_disable_eth();

  // wait for tx ready
  while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	6f e1       	ldi	r22, 0x1F	; 31
    2278:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <readOp>
    227c:	83 fd       	sbrc	r24, 3
    227e:	eb cf       	rjmp	.-42     	; 0x2256 <enc28j60_send+0x66>
          writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
          writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
      }

  // initiate send
  writeReg(ETXND, TXSTART_INIT+size);
    2280:	b8 01       	movw	r22, r16
    2282:	60 50       	subi	r22, 0x00	; 0
    2284:	76 4e       	sbci	r23, 0xE6	; 230
    2286:	86 e0       	ldi	r24, 0x06	; 6
    2288:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
    228c:	80 e8       	ldi	r24, 0x80	; 128
    228e:	6f e1       	ldi	r22, 0x1F	; 31
    2290:	48 e0       	ldi	r20, 0x08	; 8
    2292:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
  return PIO_OK;
}
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	1f 91       	pop	r17
    229e:	0f 91       	pop	r16
    22a0:	08 95       	ret

000022a2 <enc28j60_has_recv>:

// ---------- has_recv ----------

static u08 enc28j60_has_recv(void)
{
  return readRegByte(EPKTCNT);
    22a2:	89 e3       	ldi	r24, 0x39	; 57
    22a4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <readRegByte>
}
    22a8:	08 95       	ret

000022aa <enc28j60_init>:
{
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/);
}

static u08 enc28j60_init(const u08 macaddr[6], u08 flags)
{
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	8c 01       	movw	r16, r24
    22b6:	f6 2e       	mov	r15, r22
  spi_init();
    22b8:	0e 94 b4 12 	call	0x2568	; 0x2568 <spi_init>
    22bc:	e5 e2       	ldi	r30, 0x25	; 37
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	82 60       	ori	r24, 0x02	; 2
    22c4:	80 83       	st	Z, r24
  spi_disable_eth();

  is_full_duplex = (flags & PIO_INIT_FULL_DUPLEX) == PIO_INIT_FULL_DUPLEX;
    22c6:	8f 2d       	mov	r24, r15
    22c8:	81 70       	andi	r24, 0x01	; 1
    22ca:	80 93 64 01 	sts	0x0164, r24

  // soft reset cpu
  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
    22ce:	8f ef       	ldi	r24, 0xFF	; 255
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	4f ef       	ldi	r20, 0xFF	; 255
    22d4:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
  timer_delay_100us(20); // errata B7/2
    22d8:	84 e1       	ldi	r24, 0x14	; 20
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <timer_delay_100us>
    22e0:	c0 e0       	ldi	r28, 0x00	; 0
    22e2:	d0 e0       	ldi	r29, 0x00	; 0
    22e4:	07 c0       	rjmp	.+14     	; 0x22f4 <enc28j60_init+0x4a>

  // wait or error
  u16 count = 0;
  while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY) {
    count ++;
    22e6:	21 96       	adiw	r28, 0x01	; 1
    if(count == 0xfff) {
    22e8:	8f e0       	ldi	r24, 0x0F	; 15
    22ea:	cf 3f       	cpi	r28, 0xFF	; 255
    22ec:	d8 07       	cpc	r29, r24
    22ee:	11 f4       	brne	.+4      	; 0x22f4 <enc28j60_init+0x4a>
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	ba c0       	rjmp	.+372    	; 0x2468 <enc28j60_init+0x1be>
  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
  timer_delay_100us(20); // errata B7/2

  // wait or error
  u16 count = 0;
  while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY) {
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	6d e1       	ldi	r22, 0x1D	; 29
    22f8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <readOp>
    22fc:	88 23       	and	r24, r24
    22fe:	99 f3       	breq	.-26     	; 0x22e6 <enc28j60_init+0x3c>
      return PIO_NOT_FOUND;
    }
  }

  // set packet pointers
  gNextPacketPtr = RXSTART_INIT;
    2300:	10 92 63 01 	sts	0x0163, r1
    2304:	10 92 62 01 	sts	0x0162, r1
  writeReg(ERXST, RXSTART_INIT);
    2308:	88 e0       	ldi	r24, 0x08	; 8
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
  writeReg(ERXRDPT, RXSTART_INIT);
    2312:	8c e0       	ldi	r24, 0x0C	; 12
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
  writeReg(ERXND, RXSTOP_INIT);
    231c:	8a e0       	ldi	r24, 0x0A	; 10
    231e:	6f ef       	ldi	r22, 0xFF	; 255
    2320:	79 e1       	ldi	r23, 0x19	; 25
    2322:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
  writeReg(ETXST, TXSTART_INIT);
    2326:	84 e0       	ldi	r24, 0x04	; 4
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	7a e1       	ldi	r23, 0x1A	; 26
    232c:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
  writeReg(ETXND, TXSTOP_INIT);
    2330:	86 e0       	ldi	r24, 0x06	; 6
    2332:	6f ef       	ldi	r22, 0xFF	; 255
    2334:	7f e1       	ldi	r23, 0x1F	; 31
    2336:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>

  // set packet filter
  if(flags & PIO_INIT_BROAD_CAST) {
    233a:	f2 fe       	sbrs	r15, 2
    233c:	05 c0       	rjmp	.+10     	; 0x2348 <enc28j60_init+0x9e>

// Functions to enable/disable broadcast filter bits
// With the bit set, broadcast packets are filtered.
static inline void enc28j60_enable_broadcast ( void )
{
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/|ERXFCON_BCEN);
    233e:	88 e3       	ldi	r24, 0x38	; 56
    2340:	61 ea       	ldi	r22, 0xA1	; 161
    2342:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
    2346:	04 c0       	rjmp	.+8      	; 0x2350 <enc28j60_init+0xa6>
}

static inline void enc28j60_disable_broadcast ( void )
{
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/);
    2348:	88 e3       	ldi	r24, 0x38	; 56
    234a:	60 ea       	ldi	r22, 0xA0	; 160
    234c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
  } else {
    enc28j60_disable_broadcast(); // change to add ERXFCON_BCEN recommended by epam
  }

  // BIST pattern generator?
  writeReg(EPMM0, 0x303f);
    2350:	88 e2       	ldi	r24, 0x28	; 40
    2352:	6f e3       	ldi	r22, 0x3F	; 63
    2354:	70 e3       	ldi	r23, 0x30	; 48
    2356:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
  writeReg(EPMCS, 0xf7f9);
    235a:	80 e3       	ldi	r24, 0x30	; 48
    235c:	69 ef       	ldi	r22, 0xF9	; 249
    235e:	77 ef       	ldi	r23, 0xF7	; 247
    2360:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>

  // MAC init (with flow control)
  writeRegByte(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
    2364:	80 ec       	ldi	r24, 0xC0	; 192
    2366:	6d e0       	ldi	r22, 0x0D	; 13
    2368:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
  writeRegByte(MACON2, 0x00);
    236c:	81 ec       	ldi	r24, 0xC1	; 193
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
  u08 mac3val = MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN;
  if(is_full_duplex) {
    2374:	80 91 64 01 	lds	r24, 0x0164
    2378:	88 23       	and	r24, r24
    237a:	11 f0       	breq	.+4      	; 0x2380 <enc28j60_init+0xd6>
    237c:	63 e3       	ldi	r22, 0x33	; 51
    237e:	01 c0       	rjmp	.+2      	; 0x2382 <enc28j60_init+0xd8>
    2380:	62 e3       	ldi	r22, 0x32	; 50
    mac3val |= MACON3_FULDPX;
  }
  writeRegByte(MACON3, mac3val);
    2382:	82 ec       	ldi	r24, 0xC2	; 194
    2384:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>

  if(is_full_duplex) {
    2388:	80 91 64 01 	lds	r24, 0x0164
    238c:	88 23       	and	r24, r24
    238e:	51 f0       	breq	.+20     	; 0x23a4 <enc28j60_init+0xfa>
    writeRegByte(MABBIPG, 0x15);
    2390:	84 ec       	ldi	r24, 0xC4	; 196
    2392:	65 e1       	ldi	r22, 0x15	; 21
    2394:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
    writeReg(MAIPG, 0x0012);
    2398:	86 ec       	ldi	r24, 0xC6	; 198
    239a:	62 e1       	ldi	r22, 0x12	; 18
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
    23a2:	09 c0       	rjmp	.+18     	; 0x23b6 <enc28j60_init+0x10c>
  } else {
    writeRegByte(MABBIPG, 0x12);
    23a4:	84 ec       	ldi	r24, 0xC4	; 196
    23a6:	62 e1       	ldi	r22, 0x12	; 18
    23a8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
    writeReg(MAIPG, 0x0C12);
    23ac:	86 ec       	ldi	r24, 0xC6	; 198
    23ae:	62 e1       	ldi	r22, 0x12	; 18
    23b0:	7c e0       	ldi	r23, 0x0C	; 12
    23b2:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
  }
  writeReg(MAMXFL, MAX_FRAMELEN);
    23b6:	8a ec       	ldi	r24, 0xCA	; 202
    23b8:	6e ee       	ldi	r22, 0xEE	; 238
    23ba:	75 e0       	ldi	r23, 0x05	; 5
    23bc:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>

  // PHY init
  if(is_full_duplex) {
    23c0:	80 91 64 01 	lds	r24, 0x0164
    23c4:	88 23       	and	r24, r24
    23c6:	59 f0       	breq	.+22     	; 0x23de <enc28j60_init+0x134>
    writePhy(PHCON1, PHCON1_PDPXMD);
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	71 e0       	ldi	r23, 0x01	; 1
    23ce:	0e 94 97 10 	call	0x212e	; 0x212e <writePhy>
    writePhy(PHCON2, 0);
    23d2:	80 e1       	ldi	r24, 0x10	; 16
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	0e 94 97 10 	call	0x212e	; 0x212e <writePhy>
    23dc:	0a c0       	rjmp	.+20     	; 0x23f2 <enc28j60_init+0x148>
  } else {
    writePhy(PHCON1, 0);
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	0e 94 97 10 	call	0x212e	; 0x212e <writePhy>
    writePhy(PHCON2, PHCON2_HDLDIS);
    23e8:	80 e1       	ldi	r24, 0x10	; 16
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	71 e0       	ldi	r23, 0x01	; 1
    23ee:	0e 94 97 10 	call	0x212e	; 0x212e <writePhy>
  }

  // prepare flow control
  writeReg(EPAUS, 20 * 100); // 100ms
    23f2:	88 e7       	ldi	r24, 0x78	; 120
    23f4:	60 ed       	ldi	r22, 0xD0	; 208
    23f6:	77 e0       	ldi	r23, 0x07	; 7
    23f8:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>

  // return rev
  rev = readRegByte(EREVID);
    23fc:	82 e7       	ldi	r24, 0x72	; 114
    23fe:	0e 94 71 10 	call	0x20e2	; 0x20e2 <readRegByte>
    2402:	80 93 65 01 	sts	0x0165, r24
  // microchip forgot to step the number on the silcon when they
  // released the revision B7. 6 is now rev B7. We still have
  // to see what they do when they release B8. At the moment
  // there is no B8 out yet
  if (rev > 5) ++rev;
    2406:	86 30       	cpi	r24, 0x06	; 6
    2408:	18 f0       	brcs	.+6      	; 0x2410 <enc28j60_init+0x166>
    240a:	8f 5f       	subi	r24, 0xFF	; 255
    240c:	80 93 65 01 	sts	0x0165, r24

  // set mac
  writeRegByte(MAADR5, macaddr[0]);
    2410:	84 ee       	ldi	r24, 0xE4	; 228
    2412:	f8 01       	movw	r30, r16
    2414:	60 81       	ld	r22, Z
    2416:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
  writeRegByte(MAADR4, macaddr[1]);
    241a:	85 ee       	ldi	r24, 0xE5	; 229
    241c:	f8 01       	movw	r30, r16
    241e:	61 81       	ldd	r22, Z+1	; 0x01
    2420:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
  writeRegByte(MAADR3, macaddr[2]);
    2424:	82 ee       	ldi	r24, 0xE2	; 226
    2426:	f8 01       	movw	r30, r16
    2428:	62 81       	ldd	r22, Z+2	; 0x02
    242a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
  writeRegByte(MAADR2, macaddr[3]);
    242e:	83 ee       	ldi	r24, 0xE3	; 227
    2430:	f8 01       	movw	r30, r16
    2432:	63 81       	ldd	r22, Z+3	; 0x03
    2434:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
  writeRegByte(MAADR1, macaddr[4]);
    2438:	80 ee       	ldi	r24, 0xE0	; 224
    243a:	f8 01       	movw	r30, r16
    243c:	64 81       	ldd	r22, Z+4	; 0x04
    243e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>
  writeRegByte(MAADR0, macaddr[5]);
    2442:	81 ee       	ldi	r24, 0xE1	; 225
    2444:	f8 01       	movw	r30, r16
    2446:	65 81       	ldd	r22, Z+5	; 0x05
    2448:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <writeRegByte>

  SetBank(ECON1);
    244c:	8f e1       	ldi	r24, 0x1F	; 31
    244e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <SetBank>
  writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
    2452:	80 e8       	ldi	r24, 0x80	; 128
    2454:	6b e1       	ldi	r22, 0x1B	; 27
    2456:	40 ec       	ldi	r20, 0xC0	; 192
    2458:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
    245c:	80 e8       	ldi	r24, 0x80	; 128
    245e:	6f e1       	ldi	r22, 0x1F	; 31
    2460:	44 e0       	ldi	r20, 0x04	; 4
    2462:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
    2466:	80 e0       	ldi	r24, 0x00	; 0

  return PIO_OK;
}
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	ff 90       	pop	r15
    2472:	08 95       	ret

00002474 <enc28j60_recv>:
  *got_size = header.byteCount - 4; //remove the CRC count
  return header.status;
}

static u08 enc28j60_recv(u08 *data, u16 max_size, u16 *got_size)
{
    2474:	af 92       	push	r10
    2476:	bf 92       	push	r11
    2478:	cf 92       	push	r12
    247a:	df 92       	push	r13
    247c:	ef 92       	push	r14
    247e:	ff 92       	push	r15
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	00 d0       	rcall	.+0      	; 0x248a <enc28j60_recv+0x16>
    248a:	00 d0       	rcall	.+0      	; 0x248c <enc28j60_recv+0x18>
    248c:	00 d0       	rcall	.+0      	; 0x248e <enc28j60_recv+0x1a>
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	5c 01       	movw	r10, r24
    2494:	6b 01       	movw	r12, r22
    2496:	8a 01       	movw	r16, r20
  writeReg(ERDPT, gNextPacketPtr);
    2498:	60 91 62 01 	lds	r22, 0x0162
    249c:	70 91 63 01 	lds	r23, 0x0163
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
      uint16_t nextPacket;
      uint16_t byteCount;
      uint16_t status;
  } header;

  readBuf(sizeof header, (uint8_t*) &header);
    24a6:	86 e0       	ldi	r24, 0x06	; 6
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	be 01       	movw	r22, r28
    24ac:	6f 5f       	subi	r22, 0xFF	; 255
    24ae:	7f 4f       	sbci	r23, 0xFF	; 255
    24b0:	0e 94 29 10 	call	0x2052	; 0x2052 <readBuf>

  gNextPacketPtr  = header.nextPacket;
    24b4:	e9 80       	ldd	r14, Y+1	; 0x01
    24b6:	fa 80       	ldd	r15, Y+2	; 0x02
    24b8:	f0 92 63 01 	sts	0x0163, r15
    24bc:	e0 92 62 01 	sts	0x0162, r14
  *got_size = header.byteCount - 4; //remove the CRC count
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	9c 81       	ldd	r25, Y+4	; 0x04
    24c4:	9c 01       	movw	r18, r24
    24c6:	24 50       	subi	r18, 0x04	; 4
    24c8:	30 40       	sbci	r19, 0x00	; 0
    24ca:	f8 01       	movw	r30, r16
    24cc:	31 83       	std	Z+1, r19	; 0x01
    24ce:	20 83       	st	Z, r18

  // read chip's packet header
  u08 status = read_hdr(got_size);

  // was a receive error?
  if ((status & 0x80)==0) {
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	88 23       	and	r24, r24
    24d4:	bc f0       	brlt	.+46     	; 0x2504 <enc28j60_recv+0x90>

// ---------- recv ----------

inline static void next_pkt(void)
{
  if (gNextPacketPtr - 1 > RXSTOP_INIT)
    24d6:	b7 01       	movw	r22, r14
    24d8:	61 50       	subi	r22, 0x01	; 1
    24da:	70 40       	sbci	r23, 0x00	; 0
    24dc:	fa e1       	ldi	r31, 0x1A	; 26
    24de:	60 30       	cpi	r22, 0x00	; 0
    24e0:	7f 07       	cpc	r23, r31
    24e2:	30 f0       	brcs	.+12     	; 0x24f0 <enc28j60_recv+0x7c>
      writeReg(ERXRDPT, RXSTOP_INIT);
    24e4:	8c e0       	ldi	r24, 0x0C	; 12
    24e6:	6f ef       	ldi	r22, 0xFF	; 255
    24e8:	79 e1       	ldi	r23, 0x19	; 25
    24ea:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <enc28j60_recv+0x82>
  else
      writeReg(ERXRDPT, gNextPacketPtr - 1);
    24f0:	8c e0       	ldi	r24, 0x0C	; 12
    24f2:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    24f6:	80 e8       	ldi	r24, 0x80	; 128
    24f8:	6e e1       	ldi	r22, 0x1E	; 30
    24fa:	40 e4       	ldi	r20, 0x40	; 64
    24fc:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
    2500:	03 e0       	ldi	r16, 0x03	; 3
    2502:	20 c0       	rjmp	.+64     	; 0x2544 <enc28j60_recv+0xd0>
  }

  // check size
  u16 len = *got_size;
  u08 result = PIO_OK;
  if(len > max_size) {
    2504:	c2 16       	cp	r12, r18
    2506:	d3 06       	cpc	r13, r19
    2508:	18 f4       	brcc	.+6      	; 0x2510 <enc28j60_recv+0x9c>
    250a:	96 01       	movw	r18, r12
    250c:	02 e0       	ldi	r16, 0x02	; 2
    250e:	01 c0       	rjmp	.+2      	; 0x2512 <enc28j60_recv+0x9e>
    2510:	00 e0       	ldi	r16, 0x00	; 0
    len = max_size;
    result = PIO_TOO_LARGE;
  }

  // read packet
  readBuf(len, data);
    2512:	c9 01       	movw	r24, r18
    2514:	b5 01       	movw	r22, r10
    2516:	0e 94 29 10 	call	0x2052	; 0x2052 <readBuf>

// ---------- recv ----------

inline static void next_pkt(void)
{
  if (gNextPacketPtr - 1 > RXSTOP_INIT)
    251a:	b7 01       	movw	r22, r14
    251c:	61 50       	subi	r22, 0x01	; 1
    251e:	70 40       	sbci	r23, 0x00	; 0
    2520:	8a e1       	ldi	r24, 0x1A	; 26
    2522:	60 30       	cpi	r22, 0x00	; 0
    2524:	78 07       	cpc	r23, r24
    2526:	30 f0       	brcs	.+12     	; 0x2534 <enc28j60_recv+0xc0>
      writeReg(ERXRDPT, RXSTOP_INIT);
    2528:	8c e0       	ldi	r24, 0x0C	; 12
    252a:	6f ef       	ldi	r22, 0xFF	; 255
    252c:	79 e1       	ldi	r23, 0x19	; 25
    252e:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
    2532:	03 c0       	rjmp	.+6      	; 0x253a <enc28j60_recv+0xc6>
  else
      writeReg(ERXRDPT, gNextPacketPtr - 1);
    2534:	8c e0       	ldi	r24, 0x0C	; 12
    2536:	0e 94 89 10 	call	0x2112	; 0x2112 <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    253a:	80 e8       	ldi	r24, 0x80	; 128
    253c:	6e e1       	ldi	r22, 0x1E	; 30
    253e:	40 e4       	ldi	r20, 0x40	; 64
    2540:	0e 94 10 10 	call	0x2020	; 0x2020 <writeOp>
  // read packet
  readBuf(len, data);

  next_pkt();
  return result;
}
    2544:	80 2f       	mov	r24, r16
    2546:	26 96       	adiw	r28, 0x06	; 6
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	ff 90       	pop	r15
    255c:	ef 90       	pop	r14
    255e:	df 90       	pop	r13
    2560:	cf 90       	pop	r12
    2562:	bf 90       	pop	r11
    2564:	af 90       	pop	r10
    2566:	08 95       	ret

00002568 <spi_init>:
#include "spi.h"

void spi_init(void)
{
	// output: SS, MOSI, SCK
	DDRB |= SPI_SS_MASK | SPI_MOSI_MASK | SPI_SCK_MASK;
    2568:	e4 e2       	ldi	r30, 0x24	; 36
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	87 60       	ori	r24, 0x07	; 7
    2570:	80 83       	st	Z, r24
	// input: MISO
	DDRB &= ~(SPI_MISO_MASK);
    2572:	80 81       	ld	r24, Z
    2574:	8b 7f       	andi	r24, 0xFB	; 251
    2576:	80 83       	st	Z, r24
	
	// MOSI, SCK = 0
	PORTB &= ~(SPI_MOSI_MASK | SPI_SCK_MASK);
    2578:	e5 e2       	ldi	r30, 0x25	; 37
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	88 7f       	andi	r24, 0xF8	; 248
    2580:	80 83       	st	Z, r24
	// SS = 1
	PORTB |= SPI_SS_MASK;
    2582:	80 81       	ld	r24, Z
    2584:	82 60       	ori	r24, 0x02	; 2
    2586:	80 83       	st	Z, r24

  SPCR = _BV(SPE) | _BV(MSTR); // 8 MHz @ 16
    2588:	80 e5       	ldi	r24, 0x50	; 80
    258a:	8c bd       	out	0x2c, r24	; 44
	SPSR = _BV(SPI2X); 
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	8d bd       	out	0x2d, r24	; 45
}
    2590:	08 95       	ret

00002592 <main>:
  uart_init();    // Setup serial interface
  par_low_init(); // Setup parallel interface
}

int main(void)
{
    2592:	ef 92       	push	r14
    2594:	ff 92       	push	r15
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	cf 93       	push	r28
    259c:	df 93       	push	r29
  while(1) {
		init_hw();

		// send welcome
		uart_send_pstring(PSTR("\r\nWelcome to plipbox " VERSION " " BUILD_DATE "\r\n"));
    259e:	0f 2e       	mov	r0, r31
    25a0:	fc e8       	ldi	r31, 0x8C	; 140
    25a2:	ef 2e       	mov	r14, r31
    25a4:	f6 e0       	ldi	r31, 0x06	; 6
    25a6:	ff 2e       	mov	r15, r31
    25a8:	f0 2d       	mov	r31, r0
		param_init();
		param_dump();
		uart_send_crlf();

		// help info
		uart_send_pstring(PSTR("Press <return> to enter command mode or <?> for key help\r\n"));
    25aa:	c1 e5       	ldi	r28, 0x51	; 81
    25ac:	d6 e0       	ldi	r29, 0x06	; 6
					result = bridge_loop();
					break;
			}

		// wait a bit
		uart_send_pstring(PSTR("resetting...\r\n"));
    25ae:	02 e4       	ldi	r16, 0x42	; 66
    25b0:	16 e0       	ldi	r17, 0x06	; 6
 *   Other minor changes
*/

static void init_hw(void)
{
  board_init();   // Disable watchdog
    25b2:	0e 94 16 0a 	call	0x142c	; 0x142c <board_init>
  timer_init();   // Setup timer
    25b6:	0e 94 4b 06 	call	0xc96	; 0xc96 <timer_init>
  uart_init();    // Setup serial interface
    25ba:	0e 94 00 07 	call	0xe00	; 0xe00 <uart_init>
  par_low_init(); // Setup parallel interface
    25be:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <par_low_init>
{
  while(1) {
		init_hw();

		// send welcome
		uart_send_pstring(PSTR("\r\nWelcome to plipbox " VERSION " " BUILD_DATE "\r\n"));
    25c2:	c7 01       	movw	r24, r14
    25c4:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

		// param init
		param_init();
    25c8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <param_init>
		param_dump();
    25cc:	0e 94 89 15 	call	0x2b12	; 0x2b12 <param_dump>
		uart_send_crlf();
    25d0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>

		// help info
		uart_send_pstring(PSTR("Press <return> to enter command mode or <?> for key help\r\n"));
    25d4:	ce 01       	movw	r24, r28
    25d6:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
		#endif

		// select main loop depending on current run mode
		u08 result = CMD_WORKER_IDLE;
		while(result != CMD_WORKER_RESET)
			switch(run_mode) {
    25da:	80 91 66 01 	lds	r24, 0x0166
    25de:	82 30       	cpi	r24, 0x02	; 2
    25e0:	29 f0       	breq	.+10     	; 0x25ec <main+0x5a>
    25e2:	83 30       	cpi	r24, 0x03	; 3
    25e4:	31 f0       	breq	.+12     	; 0x25f2 <main+0x60>
    25e6:	81 30       	cpi	r24, 0x01	; 1
    25e8:	51 f4       	brne	.+20     	; 0x25fe <main+0x6c>
    25ea:	06 c0       	rjmp	.+12     	; 0x25f8 <main+0x66>
				case RUN_MODE_PB_TEST:
					result = pb_test_loop();
    25ec:	0e 94 7e 19 	call	0x32fc	; 0x32fc <pb_test_loop>
    25f0:	08 c0       	rjmp	.+16     	; 0x2602 <main+0x70>
					break;
				case RUN_MODE_PIO_TEST:
					result = pio_test_loop();
    25f2:	0e 94 92 1b 	call	0x3724	; 0x3724 <pio_test_loop>
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <main+0x70>
					break;
				case RUN_MODE_BRIDGE_TEST:
					result = bridge_test_loop();
    25f8:	0e 94 b5 0b 	call	0x176a	; 0x176a <bridge_test_loop>
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <main+0x70>
					break;
				case RUN_MODE_BRIDGE:
				default:
					result = bridge_loop();
    25fe:	0e 94 43 0a 	call	0x1486	; 0x1486 <bridge_loop>
			uart_send_free_stack();
		#endif

		// select main loop depending on current run mode
		u08 result = CMD_WORKER_IDLE;
		while(result != CMD_WORKER_RESET)
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	51 f7       	brne	.-44     	; 0x25da <main+0x48>
					result = bridge_loop();
					break;
			}

		// wait a bit
		uart_send_pstring(PSTR("resetting...\r\n"));
    2606:	c8 01       	movw	r24, r16
    2608:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
		timer_delay_10ms(10);
    260c:	8a e0       	ldi	r24, 0x0A	; 10
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 c2 06 	call	0xd84	; 0xd84 <timer_delay_10ms>
    2614:	ce cf       	rjmp	.-100    	; 0x25b2 <main+0x20>

00002616 <arp_make_reply>:
  
  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
}

void arp_make_reply(u08 *buf, const u08 *my_mac, const u08 *my_ip)
{
    2616:	8f 92       	push	r8
    2618:	9f 92       	push	r9
    261a:	af 92       	push	r10
    261c:	bf 92       	push	r11
    261e:	cf 92       	push	r12
    2620:	df 92       	push	r13
    2622:	ef 92       	push	r14
    2624:	ff 92       	push	r15
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	8c 01       	movw	r16, r24
    262c:	5b 01       	movw	r10, r22
    262e:	4a 01       	movw	r8, r20
	// make a reply
	net_put_word(buf + ARP_OFF_OP, ARP_REPLY);
    2630:	06 96       	adiw	r24, 0x06	; 6
    2632:	62 e0       	ldi	r22, 0x02	; 2
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	0e 94 9c 13 	call	0x2738	; 0x2738 <net_put_word>
	net_copy_mac(buf + ARP_OFF_SRC_MAC, buf + ARP_OFF_TGT_MAC);
    263a:	cc 24       	eor	r12, r12
    263c:	dd 24       	eor	r13, r13
    263e:	68 94       	set
    2640:	c3 f8       	bld	r12, 3
    2642:	c0 0e       	add	r12, r16
    2644:	d1 1e       	adc	r13, r17
    2646:	b8 01       	movw	r22, r16
    2648:	6e 5e       	subi	r22, 0xEE	; 238
    264a:	7f 4f       	sbci	r23, 0xFF	; 255
    264c:	c6 01       	movw	r24, r12
    264e:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>
	net_copy_ip(buf + ARP_OFF_SRC_IP, buf + ARP_OFF_TGT_IP);
    2652:	0f 2e       	mov	r0, r31
    2654:	fe e0       	ldi	r31, 0x0E	; 14
    2656:	ef 2e       	mov	r14, r31
    2658:	ff 24       	eor	r15, r15
    265a:	f0 2d       	mov	r31, r0
    265c:	e0 0e       	add	r14, r16
    265e:	f1 1e       	adc	r15, r17
    2660:	08 5e       	subi	r16, 0xE8	; 232
    2662:	1f 4f       	sbci	r17, 0xFF	; 255
    2664:	c7 01       	movw	r24, r14
    2666:	b8 01       	movw	r22, r16
    2668:	0e 94 81 13 	call	0x2702	; 0x2702 <net_copy_ip>
	net_copy_mac(my_mac, buf + ARP_OFF_SRC_MAC);
    266c:	c5 01       	movw	r24, r10
    266e:	b6 01       	movw	r22, r12
    2670:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>
	net_copy_ip(my_ip, buf + ARP_OFF_SRC_IP);
    2674:	c4 01       	movw	r24, r8
    2676:	b7 01       	movw	r22, r14
    2678:	0e 94 81 13 	call	0x2702	; 0x2702 <net_copy_ip>
}
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	ff 90       	pop	r15
    2682:	ef 90       	pop	r14
    2684:	df 90       	pop	r13
    2686:	cf 90       	pop	r12
    2688:	bf 90       	pop	r11
    268a:	af 90       	pop	r10
    268c:	9f 90       	pop	r9
    268e:	8f 90       	pop	r8
    2690:	08 95       	ret

00002692 <arp_is_ipv4>:

#include "arp.h"
#include "net.h"

u08 arp_is_ipv4(const u08 *buf, u16 len)
{
    2692:	0f 93       	push	r16
    2694:	1f 93       	push	r17
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	ec 01       	movw	r28, r24
  if(len < ARP_SIZE) {
    269c:	6c 31       	cpi	r22, 0x1C	; 28
    269e:	71 05       	cpc	r23, r1
    26a0:	10 f4       	brcc	.+4      	; 0x26a6 <arp_is_ipv4+0x14>
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	1a c0       	rjmp	.+52     	; 0x26da <arp_is_ipv4+0x48>
    return 0;
  }
  
  u16 hw_type = net_get_word(buf + ARP_OFF_HW_TYPE);
    26a6:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
    26aa:	8c 01       	movw	r16, r24
  u16 pt_type = net_get_word(buf + ARP_OFF_PROT_TYPE);
    26ac:	ce 01       	movw	r24, r28
    26ae:	02 96       	adiw	r24, 0x02	; 2
    26b0:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
  u08 hw_size = buf[ARP_OFF_HW_SIZE];
    26b4:	2c 81       	ldd	r18, Y+4	; 0x04
  u08 pt_size = buf[ARP_OFF_PROT_SIZE];
    26b6:	3d 81       	ldd	r19, Y+5	; 0x05
  
  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
    26b8:	01 30       	cpi	r16, 0x01	; 1
    26ba:	11 05       	cpc	r17, r1
    26bc:	61 f4       	brne	.+24     	; 0x26d6 <arp_is_ipv4+0x44>
    26be:	80 50       	subi	r24, 0x00	; 0
    26c0:	98 40       	sbci	r25, 0x08	; 8
    26c2:	49 f4       	brne	.+18     	; 0x26d6 <arp_is_ipv4+0x44>
    26c4:	26 30       	cpi	r18, 0x06	; 6
    26c6:	39 f4       	brne	.+14     	; 0x26d6 <arp_is_ipv4+0x44>
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	34 30       	cpi	r19, 0x04	; 4
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <arp_is_ipv4+0x3e>
    26ce:	91 e0       	ldi	r25, 0x01	; 1
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	89 27       	eor	r24, r25
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <arp_is_ipv4+0x48>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
}
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	0f 91       	pop	r16
    26e2:	08 95       	ret

000026e4 <net_copy_mac>:
const u08 net_bcast_mac[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
const u08 net_zero_mac[6] = { 0,0,0,0,0,0 };
const u08 net_zero_ip[4] = { 0,0,0,0 };
const u08 net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const u08 *in, u08 *out) {
    26e4:	ac 01       	movw	r20, r24
    26e6:	25 e0       	ldi	r18, 0x05	; 5
	u08 i;
  for(i=6; i--;)
    out[i] = in[i];
    26e8:	82 2f       	mov	r24, r18
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	db 01       	movw	r26, r22
    26ee:	a8 0f       	add	r26, r24
    26f0:	b9 1f       	adc	r27, r25
    26f2:	fa 01       	movw	r30, r20
    26f4:	e8 0f       	add	r30, r24
    26f6:	f9 1f       	adc	r31, r25
    26f8:	80 81       	ld	r24, Z
    26fa:	8c 93       	st	X, r24
const u08 net_zero_ip[4] = { 0,0,0,0 };
const u08 net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const u08 *in, u08 *out) {
	u08 i;
  for(i=6; i--;)
    26fc:	21 50       	subi	r18, 0x01	; 1
    26fe:	a0 f7       	brcc	.-24     	; 0x26e8 <net_copy_mac+0x4>
    out[i] = in[i];
}
    2700:	08 95       	ret

00002702 <net_copy_ip>:

void net_copy_ip(const u08 *in, u08 *out) {
    2702:	fc 01       	movw	r30, r24
    2704:	db 01       	movw	r26, r22
	u08 i;
  for(i = 4; i--;)
		out[i] = in[i];
    2706:	83 81       	ldd	r24, Z+3	; 0x03
    2708:	13 96       	adiw	r26, 0x03	; 3
    270a:	8c 93       	st	X, r24
    270c:	13 97       	sbiw	r26, 0x03	; 3
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	12 96       	adiw	r26, 0x02	; 2
    2712:	8c 93       	st	X, r24
    2714:	12 97       	sbiw	r26, 0x02	; 2
    2716:	81 81       	ldd	r24, Z+1	; 0x01
    2718:	11 96       	adiw	r26, 0x01	; 1
    271a:	8c 93       	st	X, r24
    271c:	11 97       	sbiw	r26, 0x01	; 1
    271e:	80 81       	ld	r24, Z
    2720:	8c 93       	st	X, r24
}
    2722:	08 95       	ret

00002724 <net_get_word>:

u16  net_get_word(const u08 *buf) {
    2724:	fc 01       	movw	r30, r24
    2726:	21 81       	ldd	r18, Z+1	; 0x01
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	90 81       	ld	r25, Z
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	28 2b       	or	r18, r24
    2730:	39 2b       	or	r19, r25
  return (u16)buf[0] << 8 | (u16)buf[1];
}
    2732:	82 2f       	mov	r24, r18
    2734:	93 2f       	mov	r25, r19
    2736:	08 95       	ret

00002738 <net_put_word>:

void net_put_word(u08 *buf, u16 value)
{
    2738:	fc 01       	movw	r30, r24
  buf[0] = (u08)(value >> 8);
    273a:	70 83       	st	Z, r23
  buf[1] = (u08)(value & 0xff);
    273c:	61 83       	std	Z+1, r22	; 0x01
}
    273e:	08 95       	ret

00002740 <net_get_long>:

u32  net_get_long(const u08 *buf)
{
    2740:	fc 01       	movw	r30, r24
    2742:	23 81       	ldd	r18, Z+3	; 0x03
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a0 e0       	ldi	r26, 0x00	; 0
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	b8 2f       	mov	r27, r24
    2754:	aa 27       	eor	r26, r26
    2756:	99 27       	eor	r25, r25
    2758:	88 27       	eor	r24, r24
    275a:	28 2b       	or	r18, r24
    275c:	39 2b       	or	r19, r25
    275e:	4a 2b       	or	r20, r26
    2760:	5b 2b       	or	r21, r27
    2762:	81 81       	ldd	r24, Z+1	; 0x01
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 e0       	ldi	r26, 0x00	; 0
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	dc 01       	movw	r26, r24
    276c:	99 27       	eor	r25, r25
    276e:	88 27       	eor	r24, r24
    2770:	28 2b       	or	r18, r24
    2772:	39 2b       	or	r19, r25
    2774:	4a 2b       	or	r20, r26
    2776:	5b 2b       	or	r21, r27
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	a0 e0       	ldi	r26, 0x00	; 0
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	ba 2f       	mov	r27, r26
    2782:	a9 2f       	mov	r26, r25
    2784:	98 2f       	mov	r25, r24
    2786:	88 27       	eor	r24, r24
    2788:	28 2b       	or	r18, r24
    278a:	39 2b       	or	r19, r25
    278c:	4a 2b       	or	r20, r26
    278e:	5b 2b       	or	r21, r27
  return (u32)buf[0] << 24 | (u32)buf[1] << 16 | (u32)buf[2] << 8 | (u32)buf[3];
}
    2790:	62 2f       	mov	r22, r18
    2792:	73 2f       	mov	r23, r19
    2794:	84 2f       	mov	r24, r20
    2796:	95 2f       	mov	r25, r21
    2798:	08 95       	ret

0000279a <net_put_long>:

void net_put_long(u08 *buf, u32 value)
{
    279a:	fc 01       	movw	r30, r24
  buf[0] = (u08)(value >> 24);
    279c:	87 2f       	mov	r24, r23
    279e:	99 27       	eor	r25, r25
    27a0:	aa 27       	eor	r26, r26
    27a2:	bb 27       	eor	r27, r27
    27a4:	80 83       	st	Z, r24
  buf[1] = (u08)((value >> 16) & 0xff);
    27a6:	cb 01       	movw	r24, r22
    27a8:	aa 27       	eor	r26, r26
    27aa:	bb 27       	eor	r27, r27
    27ac:	81 83       	std	Z+1, r24	; 0x01
  buf[2] = (u08)((value >> 8) & 0xff);
    27ae:	bb 27       	eor	r27, r27
    27b0:	a7 2f       	mov	r26, r23
    27b2:	96 2f       	mov	r25, r22
    27b4:	85 2f       	mov	r24, r21
    27b6:	82 83       	std	Z+2, r24	; 0x02
  buf[3] = (u08)(value & 0xff);
    27b8:	43 83       	std	Z+3, r20	; 0x03
}
    27ba:	08 95       	ret

000027bc <net_compare_mac>:
    pos += 4;
  }
  uart_send_string(ip_str);
}

u08  net_compare_mac(const u08 *a, const u08 *b) {
    27bc:	ac 01       	movw	r20, r24
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
	u08 i;
  for(i=0;i<6;i++)
    if(a[i] != b[i])
    27c2:	fa 01       	movw	r30, r20
    27c4:	e2 0f       	add	r30, r18
    27c6:	f3 1f       	adc	r31, r19
    27c8:	db 01       	movw	r26, r22
    27ca:	a2 0f       	add	r26, r18
    27cc:	b3 1f       	adc	r27, r19
    27ce:	90 81       	ld	r25, Z
    27d0:	8c 91       	ld	r24, X
    27d2:	98 17       	cp	r25, r24
    27d4:	11 f0       	breq	.+4      	; 0x27da <net_compare_mac+0x1e>
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	08 95       	ret
    27da:	2f 5f       	subi	r18, 0xFF	; 255
    27dc:	3f 4f       	sbci	r19, 0xFF	; 255
  uart_send_string(ip_str);
}

u08  net_compare_mac(const u08 *a, const u08 *b) {
	u08 i;
  for(i=0;i<6;i++)
    27de:	26 30       	cpi	r18, 0x06	; 6
    27e0:	31 05       	cpc	r19, r1
    27e2:	79 f7       	brne	.-34     	; 0x27c2 <net_compare_mac+0x6>
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
    27e6:	08 95       	ret

000027e8 <net_compare_ip>:

u08  net_compare_ip(const u08 *a, const u08 *b) {
    27e8:	ac 01       	movw	r20, r24
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
	u08 i;
  for(i=0;i<4;i++)
    if(a[i] != b[i])
    27ee:	fa 01       	movw	r30, r20
    27f0:	e2 0f       	add	r30, r18
    27f2:	f3 1f       	adc	r31, r19
    27f4:	db 01       	movw	r26, r22
    27f6:	a2 0f       	add	r26, r18
    27f8:	b3 1f       	adc	r27, r19
    27fa:	90 81       	ld	r25, Z
    27fc:	8c 91       	ld	r24, X
    27fe:	98 17       	cp	r25, r24
    2800:	11 f0       	breq	.+4      	; 0x2806 <net_compare_ip+0x1e>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	08 95       	ret
    2806:	2f 5f       	subi	r18, 0xFF	; 255
    2808:	3f 4f       	sbci	r19, 0xFF	; 255
  return 1;
}

u08  net_compare_ip(const u08 *a, const u08 *b) {
	u08 i;
  for(i=0;i<4;i++)
    280a:	24 30       	cpi	r18, 0x04	; 4
    280c:	31 05       	cpc	r19, r1
    280e:	79 f7       	brne	.-34     	; 0x27ee <net_compare_ip+0x6>
    2810:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
    2812:	08 95       	ret

00002814 <net_dump_ip>:
    mac[i] = value;
  }
  return 1;
}

void net_dump_ip(const u08 *in) {
    2814:	cf 92       	push	r12
    2816:	df 92       	push	r13
    2818:	ef 92       	push	r14
    281a:	ff 92       	push	r15
    281c:	0f 93       	push	r16
    281e:	1f 93       	push	r17
    2820:	cf 93       	push	r28
    2822:	df 93       	push	r29
  u08 pos = 0;
  u08 i;
  for(i=0;i<4;i++) {
    byte_to_dec(in[i],(u08 *)(ip_str+pos));
    2824:	c0 90 24 01 	lds	r12, 0x0124
    2828:	d0 90 25 01 	lds	r13, 0x0125
    282c:	8c 01       	movw	r16, r24
    282e:	e6 01       	movw	r28, r12
}

void net_dump_ip(const u08 *in) {
  u08 pos = 0;
  u08 i;
  for(i=0;i<4;i++) {
    2830:	ee 24       	eor	r14, r14
    2832:	ff 24       	eor	r15, r15
    2834:	68 94       	set
    2836:	e4 f8       	bld	r14, 4
    2838:	ec 0c       	add	r14, r12
    283a:	fd 1c       	adc	r15, r13
    byte_to_dec(in[i],(u08 *)(ip_str+pos));
    283c:	f8 01       	movw	r30, r16
    283e:	81 91       	ld	r24, Z+
    2840:	8f 01       	movw	r16, r30
    2842:	be 01       	movw	r22, r28
    2844:	0e 94 b7 08 	call	0x116e	; 0x116e <byte_to_dec>
    2848:	24 96       	adiw	r28, 0x04	; 4
}

void net_dump_ip(const u08 *in) {
  u08 pos = 0;
  u08 i;
  for(i=0;i<4;i++) {
    284a:	ce 15       	cp	r28, r14
    284c:	df 05       	cpc	r29, r15
    284e:	b1 f7       	brne	.-20     	; 0x283c <net_dump_ip+0x28>
    byte_to_dec(in[i],(u08 *)(ip_str+pos));
    pos += 4;
  }
  uart_send_string(ip_str);
    2850:	c6 01       	movw	r24, r12
    2852:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_send_string>
}
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	08 95       	ret

00002868 <net_parse_mac>:
    ip[i] = value;
  }
  return 1;
}

u08 net_parse_mac(const u08 *buf, u08 *mac) {
    2868:	af 92       	push	r10
    286a:	bf 92       	push	r11
    286c:	cf 92       	push	r12
    286e:	df 92       	push	r13
    2870:	ef 92       	push	r14
    2872:	ff 92       	push	r15
    2874:	0f 93       	push	r16
    2876:	1f 93       	push	r17
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	0f 92       	push	r0
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	7c 01       	movw	r14, r24
    2884:	6b 01       	movw	r12, r22
    2886:	00 e0       	ldi	r16, 0x00	; 0
    2888:	10 e0       	ldi	r17, 0x00	; 0
	u08 i;
  for(i=0;i<6;i++) {
    u08 value;
    if(!parse_byte(buf, &value)) {
    288a:	5e 01       	movw	r10, r28
    288c:	08 94       	sec
    288e:	a1 1c       	adc	r10, r1
    2890:	b1 1c       	adc	r11, r1
    2892:	c7 01       	movw	r24, r14
    2894:	b5 01       	movw	r22, r10
    2896:	0e 94 35 09 	call	0x126a	; 0x126a <parse_byte>
    289a:	88 23       	and	r24, r24
    289c:	89 f0       	breq	.+34     	; 0x28c0 <net_parse_mac+0x58>
      return 0;
    }
    buf += 3;
    mac[i] = value;
    289e:	f6 01       	movw	r30, r12
    28a0:	e0 0f       	add	r30, r16
    28a2:	f1 1f       	adc	r31, r17
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	80 83       	st	Z, r24
    28a8:	0f 5f       	subi	r16, 0xFF	; 255
    28aa:	1f 4f       	sbci	r17, 0xFF	; 255
  return 1;
}

u08 net_parse_mac(const u08 *buf, u08 *mac) {
	u08 i;
  for(i=0;i<6;i++) {
    28ac:	06 30       	cpi	r16, 0x06	; 6
    28ae:	11 05       	cpc	r17, r1
    28b0:	11 f4       	brne	.+4      	; 0x28b6 <net_parse_mac+0x4e>
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	06 c0       	rjmp	.+12     	; 0x28c2 <net_parse_mac+0x5a>
    u08 value;
    if(!parse_byte(buf, &value)) {
      return 0;
    }
    buf += 3;
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	e8 0e       	add	r14, r24
    28bc:	f9 1e       	adc	r15, r25
    28be:	e9 cf       	rjmp	.-46     	; 0x2892 <net_parse_mac+0x2a>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    mac[i] = value;
  }
  return 1;
}
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	1f 91       	pop	r17
    28ca:	0f 91       	pop	r16
    28cc:	ff 90       	pop	r15
    28ce:	ef 90       	pop	r14
    28d0:	df 90       	pop	r13
    28d2:	cf 90       	pop	r12
    28d4:	bf 90       	pop	r11
    28d6:	af 90       	pop	r10
    28d8:	08 95       	ret

000028da <net_parse_ip>:
    pos += 3;
  }
  uart_send_string(mac_str);
}

u08 net_parse_ip(const u08 *buf, u08 *ip) {
    28da:	af 92       	push	r10
    28dc:	bf 92       	push	r11
    28de:	cf 92       	push	r12
    28e0:	df 92       	push	r13
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	0f 92       	push	r0
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	7c 01       	movw	r14, r24
    28f6:	6b 01       	movw	r12, r22
    28f8:	00 e0       	ldi	r16, 0x00	; 0
    28fa:	10 e0       	ldi	r17, 0x00	; 0
	u08 i;
  for(i=0;i<4;i++) {
    u08 value;
    u08 digits = parse_byte_dec(buf,&value);
    28fc:	5e 01       	movw	r10, r28
    28fe:	08 94       	sec
    2900:	a1 1c       	adc	r10, r1
    2902:	b1 1c       	adc	r11, r1
    2904:	c7 01       	movw	r24, r14
    2906:	b5 01       	movw	r22, r10
    2908:	0e 94 fe 09 	call	0x13fc	; 0x13fc <parse_byte_dec>
    290c:	98 2f       	mov	r25, r24
    if(digits == 0)
    290e:	88 23       	and	r24, r24
    2910:	91 f0       	breq	.+36     	; 0x2936 <net_parse_ip+0x5c>
      return 0;
    buf += digits + 1;
    ip[i] = value;
    2912:	f6 01       	movw	r30, r12
    2914:	e0 0f       	add	r30, r16
    2916:	f1 1f       	adc	r31, r17
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	80 83       	st	Z, r24
    291c:	0f 5f       	subi	r16, 0xFF	; 255
    291e:	1f 4f       	sbci	r17, 0xFF	; 255
  uart_send_string(mac_str);
}

u08 net_parse_ip(const u08 *buf, u08 *ip) {
	u08 i;
  for(i=0;i<4;i++) {
    2920:	04 30       	cpi	r16, 0x04	; 4
    2922:	11 05       	cpc	r17, r1
    2924:	11 f4       	brne	.+4      	; 0x292a <net_parse_ip+0x50>
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	07 c0       	rjmp	.+14     	; 0x2938 <net_parse_ip+0x5e>
    u08 value;
    u08 digits = parse_byte_dec(buf,&value);
    if(digits == 0)
      return 0;
    buf += digits + 1;
    292a:	89 2f       	mov	r24, r25
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	01 96       	adiw	r24, 0x01	; 1
    2930:	e8 0e       	add	r14, r24
    2932:	f9 1e       	adc	r15, r25
    2934:	e7 cf       	rjmp	.-50     	; 0x2904 <net_parse_ip+0x2a>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    ip[i] = value;
  }
  return 1;
}
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	ff 90       	pop	r15
    2944:	ef 90       	pop	r14
    2946:	df 90       	pop	r13
    2948:	cf 90       	pop	r12
    294a:	bf 90       	pop	r11
    294c:	af 90       	pop	r10
    294e:	08 95       	ret

00002950 <net_dump_mac>:
}

static char *mac_str = "00:00:00:00:00:00";
static char *ip_str = "000.000.000.000";

void net_dump_mac(const u08 *in) {
    2950:	cf 92       	push	r12
    2952:	df 92       	push	r13
    2954:	ef 92       	push	r14
    2956:	ff 92       	push	r15
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
  int pos = 0;
  u08 i;
  for(i=0;i<6;i++) {
    byte_to_hex(in[i],(u08 *)(mac_str+pos));
    2960:	c0 90 38 01 	lds	r12, 0x0138
    2964:	d0 90 39 01 	lds	r13, 0x0139
    2968:	8c 01       	movw	r16, r24
    296a:	e6 01       	movw	r28, r12
static char *ip_str = "000.000.000.000";

void net_dump_mac(const u08 *in) {
  int pos = 0;
  u08 i;
  for(i=0;i<6;i++) {
    296c:	0f 2e       	mov	r0, r31
    296e:	f2 e1       	ldi	r31, 0x12	; 18
    2970:	ef 2e       	mov	r14, r31
    2972:	ff 24       	eor	r15, r15
    2974:	f0 2d       	mov	r31, r0
    2976:	ec 0c       	add	r14, r12
    2978:	fd 1c       	adc	r15, r13
    byte_to_hex(in[i],(u08 *)(mac_str+pos));
    297a:	f8 01       	movw	r30, r16
    297c:	81 91       	ld	r24, Z+
    297e:	8f 01       	movw	r16, r30
    2980:	be 01       	movw	r22, r28
    2982:	0e 94 75 08 	call	0x10ea	; 0x10ea <byte_to_hex>
    2986:	23 96       	adiw	r28, 0x03	; 3
static char *ip_str = "000.000.000.000";

void net_dump_mac(const u08 *in) {
  int pos = 0;
  u08 i;
  for(i=0;i<6;i++) {
    2988:	ce 15       	cp	r28, r14
    298a:	df 05       	cpc	r29, r15
    298c:	b1 f7       	brne	.-20     	; 0x297a <net_dump_mac+0x2a>
    byte_to_hex(in[i],(u08 *)(mac_str+pos));
    pos += 3;
  }
  uart_send_string(mac_str);
    298e:	c6 01       	movw	r24, r12
    2990:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_send_string>
}
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	ff 90       	pop	r15
    299e:	ef 90       	pop	r14
    29a0:	df 90       	pop	r13
    29a2:	cf 90       	pop	r12
    29a4:	08 95       	ret

000029a6 <par_low_init>:
#include <util/delay_basic.h>


void par_low_init(void) {
	// Zero status direction and pin state
  PAR_STATUS_DDR &= ~PAR_STATUS_MASK;
    29a6:	a7 e2       	ldi	r26, 0x27	; 39
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	8c 91       	ld	r24, X
    29ac:	80 7e       	andi	r24, 0xE0	; 224
    29ae:	8c 93       	st	X, r24
  PAR_STATUS_PORT &= ~PAR_STATUS_MASK;
    29b0:	e8 e2       	ldi	r30, 0x28	; 40
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	80 7e       	andi	r24, 0xE0	; 224
    29b8:	80 83       	st	Z, r24
	// NStrobe: input, pulled high
	// Select: input, pulled high
	// Busy: output, default: 0
	// POut: input, pulled high
	// NAck: output, default: 1
  PAR_STATUS_DDR |= BUSY | NACK;
    29ba:	8c 91       	ld	r24, X
    29bc:	86 60       	ori	r24, 0x06	; 6
    29be:	8c 93       	st	X, r24
  PAR_STATUS_PORT |= NSTROBE | SEL | POUT | NACK;
    29c0:	80 81       	ld	r24, Z
    29c2:	8b 61       	ori	r24, 0x1B	; 27
    29c4:	80 83       	st	Z, r24

  PAR_DATA_DDR = 0xFF;
    29c6:	8f ef       	ldi	r24, 0xFF	; 255
    29c8:	8a b9       	out	0x0a, r24	; 10
}
    29ca:	08 95       	ret

000029cc <par_low_pulse_ack>:

// data bus

void par_low_pulse_ack(u08 delay)
{
  PAR_STATUS_PORT &= ~NACK;
    29cc:	e8 e2       	ldi	r30, 0x28	; 40
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	90 81       	ld	r25, Z
    29d2:	9d 7f       	andi	r25, 0xFD	; 253
    29d4:	90 83       	st	Z, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29d6:	8a 95       	dec	r24
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <par_low_pulse_ack+0xa>
  _delay_loop_1(delay);
  PAR_STATUS_PORT |= NACK;
    29da:	80 81       	ld	r24, Z
    29dc:	82 60       	ori	r24, 0x02	; 2
    29de:	80 83       	st	Z, r24
}
    29e0:	08 95       	ret

000029e2 <calc_crc16>:

// build check sum for parameter block
static u16 calc_crc16(param_t *p)
{
  u16 crc16 = 0xffff;
  u08 *data = (u08 *)p;
    29e2:	fc 01       	movw	r30, r24
    29e4:	4f ef       	ldi	r20, 0xFF	; 255
    29e6:	5f ef       	ldi	r21, 0xFF	; 255
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    29ec:	81 91       	ld	r24, Z+
    29ee:	48 27       	eor	r20, r24
    29f0:	84 2f       	mov	r24, r20
    29f2:	82 95       	swap	r24
    29f4:	84 27       	eor	r24, r20
    29f6:	08 2e       	mov	r0, r24
    29f8:	86 95       	lsr	r24
    29fa:	86 95       	lsr	r24
    29fc:	80 25       	eor	r24, r0
    29fe:	08 2e       	mov	r0, r24
    2a00:	86 95       	lsr	r24
    2a02:	80 25       	eor	r24, r0
    2a04:	87 70       	andi	r24, 0x07	; 7
    2a06:	04 2e       	mov	r0, r20
    2a08:	45 2f       	mov	r20, r21
    2a0a:	86 95       	lsr	r24
    2a0c:	07 94       	ror	r0
    2a0e:	87 95       	ror	r24
    2a10:	50 2d       	mov	r21, r0
    2a12:	48 27       	eor	r20, r24
    2a14:	06 94       	lsr	r0
    2a16:	87 95       	ror	r24
    2a18:	50 25       	eor	r21, r0
    2a1a:	48 27       	eor	r20, r24
  u16 i;
  for(i=0;i<sizeof(param_t);i++) {
    2a1c:	2f 5f       	subi	r18, 0xFF	; 255
    2a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a20:	23 31       	cpi	r18, 0x13	; 19
    2a22:	31 05       	cpc	r19, r1
    2a24:	19 f7       	brne	.-58     	; 0x29ec <calc_crc16+0xa>
    crc16 = _crc16_update(crc16,*data);
    data++;
  }
  return crc16;
}
    2a26:	84 2f       	mov	r24, r20
    2a28:	95 2f       	mov	r25, r21
    2a2a:	08 95       	ret

00002a2c <param_reset>:

  return PARAM_OK;
}

void param_reset(void)
{
    2a2c:	aa ea       	ldi	r26, 0xAA	; 170
    2a2e:	b1 e0       	ldi	r27, 0x01	; 1
    2a30:	22 eb       	ldi	r18, 0xB2	; 178
    2a32:	36 e0       	ldi	r19, 0x06	; 6
	u08 i;
  // restore default param
  u08 *out = (u08 *)&param;
  const u08 *in = (const u08 *)&default_param;
  for(i=0;i<sizeof(param_t);i++) {
    2a34:	4d eb       	ldi	r20, 0xBD	; 189
    2a36:	51 e0       	ldi	r21, 0x01	; 1

  return PARAM_OK;
}

void param_reset(void)
{
    2a38:	f9 01       	movw	r30, r18
	u08 i;
  // restore default param
  u08 *out = (u08 *)&param;
  const u08 *in = (const u08 *)&default_param;
  for(i=0;i<sizeof(param_t);i++) {
    *(out++) = pgm_read_byte_near(in++);
    2a3a:	2f 5f       	subi	r18, 0xFF	; 255
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	e4 91       	lpm	r30, Z+
    2a40:	ed 93       	st	X+, r30
{
	u08 i;
  // restore default param
  u08 *out = (u08 *)&param;
  const u08 *in = (const u08 *)&default_param;
  for(i=0;i<sizeof(param_t);i++) {
    2a42:	a4 17       	cp	r26, r20
    2a44:	b5 07       	cpc	r27, r21
    2a46:	c1 f7       	brne	.-16     	; 0x2a38 <param_reset+0xc>
    *(out++) = pgm_read_byte_near(in++);
  }
}
    2a48:	08 95       	ret

00002a4a <param_load>:

  return PARAM_OK;
}

u08 param_load(void)
{
    2a4a:	ef 92       	push	r14
    2a4c:	ff 92       	push	r15
    2a4e:	0f 93       	push	r16
    2a50:	1f 93       	push	r17
  // check that eeprom is readable
  if(!eeprom_is_ready())
    2a52:	f9 9b       	sbis	0x1f, 1	; 31
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <param_load+0x10>
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	1d c0       	rjmp	.+58     	; 0x2a94 <param_load+0x4a>
    return PARAM_EEPROM_NOT_READY;

  // read param
  eeprom_read_block(&param,&eeprom_param,sizeof(param_t));
    2a5a:	0f 2e       	mov	r0, r31
    2a5c:	fa ea       	ldi	r31, 0xAA	; 170
    2a5e:	ef 2e       	mov	r14, r31
    2a60:	f1 e0       	ldi	r31, 0x01	; 1
    2a62:	ff 2e       	mov	r15, r31
    2a64:	f0 2d       	mov	r31, r0
    2a66:	c7 01       	movw	r24, r14
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	43 e1       	ldi	r20, 0x13	; 19
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__eerd_block_m328p>

  // read crc16
  uint16_t crc16 = eeprom_read_word(&eeprom_crc16);
    2a74:	83 e1       	ldi	r24, 0x13	; 19
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__eerd_word_m328p>
    2a7c:	8c 01       	movw	r16, r24
  uint16_t my_crc16 = calc_crc16(&param);
    2a7e:	c7 01       	movw	r24, r14
    2a80:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <calc_crc16>
  if(crc16 != my_crc16) {
    2a84:	08 17       	cp	r16, r24
    2a86:	19 07       	cpc	r17, r25
    2a88:	11 f4       	brne	.+4      	; 0x2a8e <param_load+0x44>
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	03 c0       	rjmp	.+6      	; 0x2a94 <param_load+0x4a>
    param_reset();
    2a8e:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <param_reset>
    2a92:	82 e0       	ldi	r24, 0x02	; 2
    return PARAM_EEPROM_CRC_MISMATCH;
  }

  return PARAM_OK;
}
    2a94:	1f 91       	pop	r17
    2a96:	0f 91       	pop	r16
    2a98:	ff 90       	pop	r15
    2a9a:	ef 90       	pop	r14
    2a9c:	08 95       	ret

00002a9e <param_init>:
  }
}

void param_init(void)
{
  if(param_load()!=PARAM_OK)
    2a9e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <param_load>
    2aa2:	88 23       	and	r24, r24
    2aa4:	11 f0       	breq	.+4      	; 0x2aaa <param_init+0xc>
    param_reset();
    2aa6:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <param_reset>
    2aaa:	08 95       	ret

00002aac <param_save>:
  }
  return crc16;
}

u08 param_save(void)
{
    2aac:	0f 93       	push	r16
    2aae:	1f 93       	push	r17
  // check that eeprom is writable
  if(!eeprom_is_ready())
    2ab0:	f9 9b       	sbis	0x1f, 1	; 31
    2ab2:	02 c0       	rjmp	.+4      	; 0x2ab8 <param_save+0xc>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	12 c0       	rjmp	.+36     	; 0x2adc <param_save+0x30>
    return PARAM_EEPROM_NOT_READY;

  // write current param to eeprom
  eeprom_write_block(&param,&eeprom_param,sizeof(param_t));
    2ab8:	0a ea       	ldi	r16, 0xAA	; 170
    2aba:	11 e0       	ldi	r17, 0x01	; 1
    2abc:	c8 01       	movw	r24, r16
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	43 e1       	ldi	r20, 0x13	; 19
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eewr_block_m328p>

  // calc current parameter crc
  uint16_t crc16 = calc_crc16(&param);
    2aca:	c8 01       	movw	r24, r16
    2acc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <calc_crc16>
    2ad0:	bc 01       	movw	r22, r24
  eeprom_write_word(&eeprom_crc16,crc16);
    2ad2:	83 e1       	ldi	r24, 0x13	; 19
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__eewr_word_m328p>
    2ada:	80 e0       	ldi	r24, 0x00	; 0

  return PARAM_OK;
}
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	08 95       	ret

00002ae2 <dump_word>:
  uart_send_hex_byte(val);
  uart_send_crlf();
}

static void dump_word(PGM_P str, const u16 val)
{
    2ae2:	0f 93       	push	r16
    2ae4:	1f 93       	push	r17
    2ae6:	8b 01       	movw	r16, r22
  uart_send_pstring(str);
    2ae8:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  uart_send_hex_word(val);
    2aec:	c8 01       	movw	r24, r16
    2aee:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
  uart_send_crlf();
    2af2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
}
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	08 95       	ret

00002afc <dump_byte>:
  .test_port = 6800,
  .test_mode = 0
};

static void dump_byte(PGM_P str, const u08 val)
{
    2afc:	1f 93       	push	r17
    2afe:	16 2f       	mov	r17, r22
  uart_send_pstring(str);
    2b00:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  uart_send_hex_byte(val);
    2b04:	81 2f       	mov	r24, r17
    2b06:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
  uart_send_crlf();
    2b0a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
}
    2b0e:	1f 91       	pop	r17
    2b10:	08 95       	ret

00002b12 <param_dump>:
  uart_send_crlf();
}

// dump all params
void param_dump(void)
{
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
  // mac address
  uart_send_pstring(PSTR("m: mac address   "));
    2b16:	83 e4       	ldi	r24, 0x43	; 67
    2b18:	97 e0       	ldi	r25, 0x07	; 7
    2b1a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  net_dump_mac(param.mac_addr);
    2b1e:	0a ea       	ldi	r16, 0xAA	; 170
    2b20:	11 e0       	ldi	r17, 0x01	; 1
    2b22:	c8 01       	movw	r24, r16
    2b24:	0e 94 a8 14 	call	0x2950	; 0x2950 <net_dump_mac>
  uart_send_crlf();
    2b28:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>

  // options
  uart_send_crlf();
    2b2c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
  dump_byte(PSTR("fd: full duplex  "), param.full_duplex);
    2b30:	81 e3       	ldi	r24, 0x31	; 49
    2b32:	97 e0       	ldi	r25, 0x07	; 7
    2b34:	f8 01       	movw	r30, r16
    2b36:	67 81       	ldd	r22, Z+7	; 0x07
    2b38:	0e 94 7e 15 	call	0x2afc	; 0x2afc <dump_byte>
  dump_byte(PSTR("fc: flow control "), param.flow_ctl);
    2b3c:	8f e1       	ldi	r24, 0x1F	; 31
    2b3e:	97 e0       	ldi	r25, 0x07	; 7
    2b40:	f8 01       	movw	r30, r16
    2b42:	66 81       	ldd	r22, Z+6	; 0x06
    2b44:	0e 94 7e 15 	call	0x2afc	; 0x2afc <dump_byte>

  // test
  uart_send_crlf();
    2b48:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
  dump_word(PSTR("tl: packet len   "), param.test_plen);
    2b4c:	f8 01       	movw	r30, r16
    2b4e:	60 85       	ldd	r22, Z+8	; 0x08
    2b50:	71 85       	ldd	r23, Z+9	; 0x09
    2b52:	8d e0       	ldi	r24, 0x0D	; 13
    2b54:	97 e0       	ldi	r25, 0x07	; 7
    2b56:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <dump_word>
  dump_word(PSTR("tt: packet type  "), param.test_ptype);
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	62 85       	ldd	r22, Z+10	; 0x0a
    2b5e:	73 85       	ldd	r23, Z+11	; 0x0b
    2b60:	8b ef       	ldi	r24, 0xFB	; 251
    2b62:	96 e0       	ldi	r25, 0x06	; 6
    2b64:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <dump_word>
  uart_send_pstring(PSTR("ti: ip address   "));
    2b68:	89 ee       	ldi	r24, 0xE9	; 233
    2b6a:	96 e0       	ldi	r25, 0x06	; 6
    2b6c:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  net_dump_ip(param.test_ip);
    2b70:	c8 01       	movw	r24, r16
    2b72:	0c 96       	adiw	r24, 0x0c	; 12
    2b74:	0e 94 0a 14 	call	0x2814	; 0x2814 <net_dump_ip>
  uart_send_crlf();
    2b78:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
  dump_word(PSTR("tp: udp port     "), param.test_port);
    2b7c:	f8 01       	movw	r30, r16
    2b7e:	60 89       	ldd	r22, Z+16	; 0x10
    2b80:	71 89       	ldd	r23, Z+17	; 0x11
    2b82:	87 ed       	ldi	r24, 0xD7	; 215
    2b84:	96 e0       	ldi	r25, 0x06	; 6
    2b86:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <dump_word>
  dump_byte(PSTR("tm: test mode    "), param.test_mode);
    2b8a:	85 ec       	ldi	r24, 0xC5	; 197
    2b8c:	96 e0       	ldi	r25, 0x06	; 6
    2b8e:	f8 01       	movw	r30, r16
    2b90:	62 89       	ldd	r22, Z+18	; 0x12
    2b92:	0e 94 7e 15 	call	0x2afc	; 0x2afc <dump_byte>
}
    2b96:	1f 91       	pop	r17
    2b98:	0f 91       	pop	r16
    2b9a:	08 95       	ret

00002b9c <pb_proto_init>:

// ----- Init -----

void pb_proto_init(pb_proto_fill_func ff, pb_proto_proc_func pf, u08 *buf, u16 buf_size)
{
  fill_func = ff;
    2b9c:	90 93 69 01 	sts	0x0169, r25
    2ba0:	80 93 68 01 	sts	0x0168, r24
  proc_func = pf;
    2ba4:	70 93 6b 01 	sts	0x016B, r23
    2ba8:	60 93 6a 01 	sts	0x016A, r22
  pb_buf = buf;
    2bac:	50 93 6d 01 	sts	0x016D, r21
    2bb0:	40 93 6c 01 	sts	0x016C, r20
  pb_buf_size = buf_size;
    2bb4:	30 93 6f 01 	sts	0x016F, r19
    2bb8:	20 93 6e 01 	sts	0x016E, r18

  // init signals
  PAR_DATA_DDR = 0x00;
    2bbc:	1a b8       	out	0x0a, r1	; 10
  PAR_STATUS_PIN &= ~BUSY;
    2bbe:	e6 e2       	ldi	r30, 0x26	; 38
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8b 7f       	andi	r24, 0xFB	; 251
    2bc6:	80 83       	st	Z, r24
}
    2bc8:	08 95       	ret

00002bca <pb_proto_get_line_status>:

u08 pb_proto_get_line_status(void) {
  u08 strobe = PAR_STATUS_PIN & NSTROBE;
    2bca:	e6 e2       	ldi	r30, 0x26	; 38
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	20 81       	ld	r18, Z
  u08 select = PAR_STATUS_PIN & SEL;
    2bd0:	90 81       	ld	r25, Z
  u08 pout = PAR_STATUS_PIN & POUT;
    2bd2:	80 81       	ld	r24, Z
    2bd4:	88 70       	andi	r24, 0x08	; 8
    2bd6:	86 95       	lsr	r24
    2bd8:	90 71       	andi	r25, 0x10	; 16
    2bda:	96 95       	lsr	r25
    2bdc:	96 95       	lsr	r25
    2bde:	96 95       	lsr	r25
    2be0:	89 2b       	or	r24, r25
    2be2:	21 70       	andi	r18, 0x01	; 1
  return ((pout >> (POUT_PIN-2)) | (select >> (SEL_PIN-1)) | (strobe >> NSTROBE_PIN));
}
    2be4:	82 2b       	or	r24, r18
    2be6:	08 95       	ret

00002be8 <wait_req>:
  trigger_ts = time_stamp;
}

// ----- HELPER -----

static u08 wait_req(u08 toggle_expect, u08 state_flag) {
    2be8:	48 2f       	mov	r20, r24
  // wait for new REQ value
  timer_100us = 0;
    2bea:	10 92 a9 01 	sts	0x01A9, r1
    2bee:	10 92 a8 01 	sts	0x01A8, r1
  while(timer_100us < pb_proto_timeout) {
    2bf2:	20 91 3a 01 	lds	r18, 0x013A
    2bf6:	30 91 3b 01 	lds	r19, 0x013B
    u08 pout = (PAR_STATUS_PIN & POUT) >> POUT_PIN;
    2bfa:	e6 e2       	ldi	r30, 0x26	; 38
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	17 c0       	rjmp	.+46     	; 0x2c2e <wait_req+0x46>
    2c00:	80 81       	ld	r24, Z
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	88 70       	andi	r24, 0x08	; 8
    2c06:	90 70       	andi	r25, 0x00	; 0
    2c08:	95 95       	asr	r25
    2c0a:	87 95       	ror	r24
    2c0c:	95 95       	asr	r25
    2c0e:	87 95       	ror	r24
    2c10:	95 95       	asr	r25
    2c12:	87 95       	ror	r24
    if((toggle_expect && pout) || (!toggle_expect && !pout))
    2c14:	44 23       	and	r20, r20
    2c16:	19 f0       	breq	.+6      	; 0x2c1e <wait_req+0x36>
    2c18:	88 23       	and	r24, r24
    2c1a:	19 f0       	breq	.+6      	; 0x2c22 <wait_req+0x3a>
    2c1c:	12 c0       	rjmp	.+36     	; 0x2c42 <wait_req+0x5a>
    2c1e:	88 23       	and	r24, r24
    2c20:	81 f0       	breq	.+32     	; 0x2c42 <wait_req+0x5a>
      return PBPROTO_STATUS_OK;
    // during transfer client aborted and removed SEL
    if(!(PAR_STATUS_PIN & SEL))
    2c22:	80 81       	ld	r24, Z
    2c24:	84 fd       	sbrc	r24, 4
    2c26:	03 c0       	rjmp	.+6      	; 0x2c2e <wait_req+0x46>
      return PBPROTO_STATUS_LOST_SELECT | state_flag;
    2c28:	86 2f       	mov	r24, r22
    2c2a:	83 60       	ori	r24, 0x03	; 3
    2c2c:	08 95       	ret
// ----- HELPER -----

static u08 wait_req(u08 toggle_expect, u08 state_flag) {
  // wait for new REQ value
  timer_100us = 0;
  while(timer_100us < pb_proto_timeout) {
    2c2e:	80 91 a8 01 	lds	r24, 0x01A8
    2c32:	90 91 a9 01 	lds	r25, 0x01A9
    2c36:	82 17       	cp	r24, r18
    2c38:	93 07       	cpc	r25, r19
    2c3a:	10 f3       	brcs	.-60     	; 0x2c00 <wait_req+0x18>
      return PBPROTO_STATUS_OK;
    // during transfer client aborted and removed SEL
    if(!(PAR_STATUS_PIN & SEL))
      return PBPROTO_STATUS_LOST_SELECT | state_flag;
  }
  return PBPROTO_STATUS_TIMEOUT | state_flag;
    2c3c:	86 2f       	mov	r24, r22
    2c3e:	82 60       	ori	r24, 0x02	; 2
    2c40:	08 95       	ret
    2c42:	81 e0       	ldi	r24, 0x01	; 1
}
    2c44:	08 95       	ret

00002c46 <pb_proto_handle>:
  *ret_size = i << 1;
  return result;
}

u08 pb_proto_handle(void)
{
    2c46:	2f 92       	push	r2
    2c48:	3f 92       	push	r3
    2c4a:	4f 92       	push	r4
    2c4c:	5f 92       	push	r5
    2c4e:	6f 92       	push	r6
    2c50:	7f 92       	push	r7
    2c52:	8f 92       	push	r8
    2c54:	9f 92       	push	r9
    2c56:	af 92       	push	r10
    2c58:	bf 92       	push	r11
    2c5a:	cf 92       	push	r12
    2c5c:	df 92       	push	r13
    2c5e:	ef 92       	push	r14
    2c60:	ff 92       	push	r15
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	00 d0       	rcall	.+0      	; 0x2c6c <pb_proto_handle+0x26>
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
  u08 result;
  pb_proto_stat_t *ps = &pb_proto_stat;

  // handle server side of plipbox protocol
  ps->cmd = 0;
    2c70:	10 92 bd 01 	sts	0x01BD, r1

  // make sure that SEL == 1
  if(!(PAR_STATUS_PIN & SEL)) {
    2c74:	34 99       	sbic	0x06, 4	; 6
    2c76:	04 c0       	rjmp	.+8      	; 0x2c80 <pb_proto_handle+0x3a>
    ps->status = PBPROTO_STATUS_IDLE;
    2c78:	10 92 be 01 	sts	0x01BE, r1
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	cb c2       	rjmp	.+1430   	; 0x3216 <pb_proto_handle+0x5d0>
    return PBPROTO_STATUS_IDLE;
  }

  // make sure that REQ == 0
  if(!(PAR_STATUS_PIN & POUT)) {
    2c80:	33 99       	sbic	0x06, 3	; 6
    2c82:	04 c0       	rjmp	.+8      	; 0x2c8c <pb_proto_handle+0x46>
    ps->status = PBPROTO_STATUS_IDLE;
    2c84:	10 92 be 01 	sts	0x01BE, r1
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	c5 c2       	rjmp	.+1418   	; 0x3216 <pb_proto_handle+0x5d0>
    return PBPROTO_STATUS_IDLE;
  }

  // read command byte and execute it
  u08 cmd = PAR_DATA_PIN;
    2c8c:	a9 b0       	in	r10, 0x09	; 9

  // fill buffer for recv command
  u16 pkt_size = 0;
    2c8e:	1a 82       	std	Y+2, r1	; 0x02
    2c90:	19 82       	std	Y+1, r1	; 0x01
  if((cmd == PBPROTO_CMD_RECV) || (cmd == PBPROTO_CMD_RECV_BURST)) {
    2c92:	82 e2       	ldi	r24, 0x22	; 34
    2c94:	a8 16       	cp	r10, r24
    2c96:	19 f0       	breq	.+6      	; 0x2c9e <pb_proto_handle+0x58>
    2c98:	a4 e4       	ldi	r26, 0x44	; 68
    2c9a:	aa 16       	cp	r10, r26
    2c9c:	a9 f4       	brne	.+42     	; 0x2cc8 <pb_proto_handle+0x82>
    u08 res = fill_func(pb_buf, pb_buf_size, &pkt_size);
    2c9e:	60 91 6e 01 	lds	r22, 0x016E
    2ca2:	70 91 6f 01 	lds	r23, 0x016F
    2ca6:	e0 91 68 01 	lds	r30, 0x0168
    2caa:	f0 91 69 01 	lds	r31, 0x0169
    2cae:	80 91 6c 01 	lds	r24, 0x016C
    2cb2:	90 91 6d 01 	lds	r25, 0x016D
    2cb6:	ae 01       	movw	r20, r28
    2cb8:	4f 5f       	subi	r20, 0xFF	; 255
    2cba:	5f 4f       	sbci	r21, 0xFF	; 255
    2cbc:	09 95       	icall
    if(res != PBPROTO_STATUS_OK) {
    2cbe:	81 30       	cpi	r24, 0x01	; 1
    2cc0:	19 f0       	breq	.+6      	; 0x2cc8 <pb_proto_handle+0x82>
      ps->status = res;
    2cc2:	80 93 be 01 	sts	0x01BE, r24
    2cc6:	a7 c2       	rjmp	.+1358   	; 0x3216 <pb_proto_handle+0x5d0>
      return res;
    }
  }

  // start timer
  u32 ts = time_stamp;
    2cc8:	60 90 a2 01 	lds	r6, 0x01A2
    2ccc:	70 90 a3 01 	lds	r7, 0x01A3
    2cd0:	80 90 a4 01 	lds	r8, 0x01A4
    2cd4:	90 90 a5 01 	lds	r9, 0x01A5
    2cd8:	10 92 85 00 	sts	0x0085, r1
    2cdc:	10 92 84 00 	sts	0x0084, r1
  timer_hw_reset();

  // confirm cmd with RAK = 1
  PAR_STATUS_PORT |= BUSY;
    2ce0:	e8 e2       	ldi	r30, 0x28	; 40
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	84 60       	ori	r24, 0x04	; 4
    2ce8:	80 83       	st	Z, r24

  u16 ret_size = 0;
  switch(cmd) {
    2cea:	b2 e2       	ldi	r27, 0x22	; 34
    2cec:	ab 16       	cp	r10, r27
    2cee:	a1 f0       	breq	.+40     	; 0x2d18 <pb_proto_handle+0xd2>
    2cf0:	ba 15       	cp	r27, r10
    2cf2:	20 f0       	brcs	.+8      	; 0x2cfc <pb_proto_handle+0xb6>
    2cf4:	e1 e1       	ldi	r30, 0x11	; 17
    2cf6:	ae 16       	cp	r10, r30
    2cf8:	49 f4       	brne	.+18     	; 0x2d0c <pb_proto_handle+0xc6>
    2cfa:	74 c0       	rjmp	.+232    	; 0x2de4 <pb_proto_handle+0x19e>
    2cfc:	f3 e3       	ldi	r31, 0x33	; 51
    2cfe:	af 16       	cp	r10, r31
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <pb_proto_handle+0xbe>
    2d02:	7c c1       	rjmp	.+760    	; 0x2ffc <pb_proto_handle+0x3b6>
    2d04:	84 e4       	ldi	r24, 0x44	; 68
    2d06:	a8 16       	cp	r10, r24
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <pb_proto_handle+0xc6>
    2d0a:	dd c0       	rjmp	.+442    	; 0x2ec6 <pb_proto_handle+0x280>
    2d0c:	bb 24       	eor	r11, r11
    2d0e:	68 94       	set
    2d10:	b2 f8       	bld	r11, 2
    2d12:	cc 24       	eor	r12, r12
    2d14:	dd 24       	eor	r13, r13
    2d16:	07 c2       	rjmp	.+1038   	; 0x3126 <pb_proto_handle+0x4e0>
    case PBPROTO_CMD_RECV:
      result = cmd_recv(pkt_size, &ret_size);
    2d18:	c9 80       	ldd	r12, Y+1	; 0x01
    2d1a:	da 80       	ldd	r13, Y+2	; 0x02
// amiga wants to receive a packet
static u08 cmd_recv(u16 uwSize, u16 *pWriteSize)
{
	u08 ubStatus;

  PAR_DATA_DDR = 0xFF;
    2d1c:	8f ef       	ldi	r24, 0xFF	; 255
    2d1e:	8a b9       	out	0x0a, r24	; 10

  // Send packet size - high part
  ubStatus = wait_req(1, PBPROTO_STAGE_SIZE_HI);
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	60 e2       	ldi	r22, 0x20	; 32
    2d24:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    2d28:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    2d2a:	a1 e0       	ldi	r26, 0x01	; 1
    2d2c:	8a 17       	cp	r24, r26
    2d2e:	09 f0       	breq	.+2      	; 0x2d32 <pb_proto_handle+0xec>
    2d30:	56 c0       	rjmp	.+172    	; 0x2dde <pb_proto_handle+0x198>
    return ubStatus;
    // NOTE: return without DDR switchback
  }
  PAR_DATA_PORT = uwSize >> 8;
    2d32:	db b8       	out	0x0b, r13	; 11
  PAR_STATUS_PORT &= ~BUSY;
    2d34:	e8 e2       	ldi	r30, 0x28	; 40
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	8b 7f       	andi	r24, 0xFB	; 251
    2d3c:	80 83       	st	Z, r24

  // Send packet size - low part
  ubStatus = wait_req(0, PBPROTO_STAGE_SIZE_LO);
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	60 e3       	ldi	r22, 0x30	; 48
    2d42:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    2d46:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    2d48:	b1 e0       	ldi	r27, 0x01	; 1
    2d4a:	8b 17       	cp	r24, r27
    2d4c:	09 f0       	breq	.+2      	; 0x2d50 <pb_proto_handle+0x10a>
    2d4e:	47 c0       	rjmp	.+142    	; 0x2dde <pb_proto_handle+0x198>
    return ubStatus;
    // NOTE: return without DDR switchback
  }
  PAR_DATA_PORT = uwSize & 0xFF;
    2d50:	cb b8       	out	0x0b, r12	; 11
  PAR_STATUS_PORT ^= BUSY;
    2d52:	e8 e2       	ldi	r30, 0x28	; 40
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	94 e0       	ldi	r25, 0x04	; 4
    2d5a:	89 27       	eor	r24, r25
    2d5c:	80 83       	st	Z, r24

  // --- data ---
  u16 uwWriteSize = 0;
  const u08 *ptr = pb_buf;
    2d5e:	e0 90 6c 01 	lds	r14, 0x016C
    2d62:	f0 90 6d 01 	lds	r15, 0x016D
  u08 ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO: Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    2d66:	c6 01       	movw	r24, r12
    2d68:	01 96       	adiw	r24, 0x01	; 1
    2d6a:	0f 2e       	mov	r0, r31
    2d6c:	fe ef       	ldi	r31, 0xFE	; 254
    2d6e:	2f 2e       	mov	r2, r31
    2d70:	ff ef       	ldi	r31, 0xFF	; 255
    2d72:	3f 2e       	mov	r3, r31
    2d74:	f0 2d       	mov	r31, r0
    2d76:	28 22       	and	r2, r24
    2d78:	39 22       	and	r3, r25
  while(uwSize--) {
    2d7a:	21 14       	cp	r2, r1
    2d7c:	31 04       	cpc	r3, r1
    2d7e:	31 f1       	breq	.+76     	; 0x2dcc <pb_proto_handle+0x186>
    2d80:	01 e0       	ldi	r16, 0x01	; 1
    2d82:	cc 24       	eor	r12, r12
    2d84:	dd 24       	eor	r13, r13
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    PAR_STATUS_PORT ^= BUSY;
    2d86:	0f 2e       	mov	r0, r31
    2d88:	f8 e2       	ldi	r31, 0x28	; 40
    2d8a:	4f 2e       	mov	r4, r31
    2d8c:	55 24       	eor	r5, r5
    2d8e:	f0 2d       	mov	r31, r0
    2d90:	14 e0       	ldi	r17, 0x04	; 4
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO: Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    2d92:	80 2f       	mov	r24, r16
    2d94:	60 e4       	ldi	r22, 0x40	; 64
    2d96:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    2d9a:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    2d9c:	e1 e0       	ldi	r30, 0x01	; 1
    2d9e:	8e 17       	cp	r24, r30
    2da0:	e1 f4       	brne	.+56     	; 0x2dda <pb_proto_handle+0x194>
      break;
    PAR_DATA_PORT = *(ptr++);
    2da2:	d7 01       	movw	r26, r14
    2da4:	8c 91       	ld	r24, X
    2da6:	eb e2       	ldi	r30, 0x2B	; 43
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 83       	st	Z, r24
    PAR_STATUS_PORT ^= BUSY;
    2dac:	d2 01       	movw	r26, r4
    2dae:	8c 91       	ld	r24, X
    2db0:	81 27       	eor	r24, r17
    2db2:	8c 93       	st	X, r24
    ++uwWriteSize;
    2db4:	08 94       	sec
    2db6:	c1 1c       	adc	r12, r1
    2db8:	d1 1c       	adc	r13, r1
  u08 ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO: Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    2dba:	2c 14       	cp	r2, r12
    2dbc:	3d 04       	cpc	r3, r13
    2dbe:	41 f0       	breq	.+16     	; 0x2dd0 <pb_proto_handle+0x18a>
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    2dc0:	08 94       	sec
    2dc2:	e1 1c       	adc	r14, r1
    2dc4:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= BUSY;
    ++uwWriteSize;
    ubPOutWait ^= 1;
    2dc6:	b1 e0       	ldi	r27, 0x01	; 1
    2dc8:	0b 27       	eor	r16, r27
    2dca:	e3 cf       	rjmp	.-58     	; 0x2d92 <pb_proto_handle+0x14c>
    2dcc:	cc 24       	eor	r12, r12
    2dce:	dd 24       	eor	r13, r13
  }

  // Final wait
  if(ubStatus == PBPROTO_STATUS_OK)
    ubStatus = wait_req(1, PBPROTO_STAGE_LAST_DATA);
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	60 e5       	ldi	r22, 0x50	; 80
    2dd4:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    2dd8:	b8 2e       	mov	r11, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    2dda:	1a b8       	out	0x0a, r1	; 10
    2ddc:	a4 c1       	rjmp	.+840    	; 0x3126 <pb_proto_handle+0x4e0>
    2dde:	cc 24       	eor	r12, r12
    2de0:	dd 24       	eor	r13, r13
    2de2:	a1 c1       	rjmp	.+834    	; 0x3126 <pb_proto_handle+0x4e0>
{
  u08 ubStatus;
  u16 uwSize;

  // --- get size hi ---
  ubStatus = wait_req(1, PBPROTO_STAGE_SIZE_HI);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	60 e2       	ldi	r22, 0x20	; 32
    2de8:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    2dec:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    2dee:	e1 e0       	ldi	r30, 0x01	; 1
    2df0:	8e 17       	cp	r24, r30
    2df2:	09 f0       	breq	.+2      	; 0x2df6 <pb_proto_handle+0x1b0>
    2df4:	65 c0       	rjmp	.+202    	; 0x2ec0 <pb_proto_handle+0x27a>
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    2df6:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~BUSY;
    2df8:	e8 e2       	ldi	r30, 0x28	; 40
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	8b 7f       	andi	r24, 0xFB	; 251
    2e00:	80 83       	st	Z, r24

  // --- get size lo ---
  ubStatus = wait_req(0, PBPROTO_STAGE_SIZE_LO);
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	60 e3       	ldi	r22, 0x30	; 48
    2e06:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    2e0a:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    2e0c:	f1 e0       	ldi	r31, 0x01	; 1
    2e0e:	8f 17       	cp	r24, r31
    2e10:	09 f0       	breq	.+2      	; 0x2e14 <pb_proto_handle+0x1ce>
    2e12:	56 c0       	rjmp	.+172    	; 0x2ec0 <pb_proto_handle+0x27a>
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    2e14:	29 b1       	in	r18, 0x09	; 9

  // --- get size hi ---
  ubStatus = wait_req(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    2e16:	90 2f       	mov	r25, r16
    2e18:	80 e0       	ldi	r24, 0x00	; 0

  // --- get size lo ---
  ubStatus = wait_req(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	28 2b       	or	r18, r24
    2e1e:	39 2b       	or	r19, r25
  PAR_STATUS_PORT ^= BUSY;
    2e20:	e8 e2       	ldi	r30, 0x28	; 40
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	94 e0       	ldi	r25, 0x04	; 4
    2e28:	89 27       	eor	r24, r25
    2e2a:	80 83       	st	Z, r24

  // Check with buffer size
  if(uwSize > pb_buf_size) {
    2e2c:	80 91 6e 01 	lds	r24, 0x016E
    2e30:	90 91 6f 01 	lds	r25, 0x016F
    2e34:	82 17       	cp	r24, r18
    2e36:	93 07       	cpc	r25, r19
    2e38:	38 f4       	brcc	.+14     	; 0x2e48 <pb_proto_handle+0x202>
    2e3a:	0f 2e       	mov	r0, r31
    2e3c:	f5 e0       	ldi	r31, 0x05	; 5
    2e3e:	bf 2e       	mov	r11, r31
    2e40:	f0 2d       	mov	r31, r0
    2e42:	cc 24       	eor	r12, r12
    2e44:	dd 24       	eor	r13, r13
    2e46:	6f c1       	rjmp	.+734    	; 0x3126 <pb_proto_handle+0x4e0>
  }

  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO: Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    2e48:	c9 01       	movw	r24, r18
    2e4a:	01 96       	adiw	r24, 0x01	; 1
    2e4c:	0f 2e       	mov	r0, r31
    2e4e:	fe ef       	ldi	r31, 0xFE	; 254
    2e50:	2f 2e       	mov	r2, r31
    2e52:	ff ef       	ldi	r31, 0xFF	; 255
    2e54:	3f 2e       	mov	r3, r31
    2e56:	f0 2d       	mov	r31, r0
    2e58:	28 22       	and	r2, r24
    2e5a:	39 22       	and	r3, r25

  // Packet read loop
  u16 uwReadSize = 0;
  u08 *ptr = pb_buf;
    2e5c:	e0 90 6c 01 	lds	r14, 0x016C
    2e60:	f0 90 6d 01 	lds	r15, 0x016D
  u08 ubPOutWait = 1;
  while(uwSize--) {
    2e64:	21 14       	cp	r2, r1
    2e66:	31 04       	cpc	r3, r1
    2e68:	41 f1       	breq	.+80     	; 0x2eba <pb_proto_handle+0x274>
    2e6a:	01 e0       	ldi	r16, 0x01	; 1
    2e6c:	cc 24       	eor	r12, r12
    2e6e:	dd 24       	eor	r13, r13
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    PAR_STATUS_PORT ^= BUSY;
    2e70:	0f 2e       	mov	r0, r31
    2e72:	f8 e2       	ldi	r31, 0x28	; 40
    2e74:	4f 2e       	mov	r4, r31
    2e76:	55 24       	eor	r5, r5
    2e78:	f0 2d       	mov	r31, r0
    2e7a:	14 e0       	ldi	r17, 0x04	; 4
  // Packet read loop
  u16 uwReadSize = 0;
  u08 *ptr = pb_buf;
  u08 ubPOutWait = 1;
  while(uwSize--) {
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    2e7c:	80 2f       	mov	r24, r16
    2e7e:	60 e4       	ldi	r22, 0x40	; 64
    2e80:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    2e84:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	b8 16       	cp	r11, r24
    2e8a:	09 f0       	breq	.+2      	; 0x2e8e <pb_proto_handle+0x248>
    2e8c:	4c c1       	rjmp	.+664    	; 0x3126 <pb_proto_handle+0x4e0>
      break;
    *(ptr++) = PAR_DATA_PIN;
    2e8e:	a9 e2       	ldi	r26, 0x29	; 41
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	8c 91       	ld	r24, X
    2e94:	f7 01       	movw	r30, r14
    2e96:	80 83       	st	Z, r24
    PAR_STATUS_PORT ^= BUSY;
    2e98:	d2 01       	movw	r26, r4
    2e9a:	8c 91       	ld	r24, X
    2e9c:	81 27       	eor	r24, r17
    2e9e:	8c 93       	st	X, r24
    ubPOutWait ^= 1;
    uwReadSize++;
    2ea0:	08 94       	sec
    2ea2:	c1 1c       	adc	r12, r1
    2ea4:	d1 1c       	adc	r13, r1

  // Packet read loop
  u16 uwReadSize = 0;
  u08 *ptr = pb_buf;
  u08 ubPOutWait = 1;
  while(uwSize--) {
    2ea6:	2c 14       	cp	r2, r12
    2ea8:	3d 04       	cpc	r3, r13
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <pb_proto_handle+0x268>
    2eac:	3c c1       	rjmp	.+632    	; 0x3126 <pb_proto_handle+0x4e0>
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    2eae:	08 94       	sec
    2eb0:	e1 1c       	adc	r14, r1
    2eb2:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= BUSY;
    ubPOutWait ^= 1;
    2eb4:	b1 e0       	ldi	r27, 0x01	; 1
    2eb6:	0b 27       	eor	r16, r27
    2eb8:	e1 cf       	rjmp	.-62     	; 0x2e7c <pb_proto_handle+0x236>
    2eba:	cc 24       	eor	r12, r12
    2ebc:	dd 24       	eor	r13, r13
    2ebe:	33 c1       	rjmp	.+614    	; 0x3126 <pb_proto_handle+0x4e0>
    2ec0:	cc 24       	eor	r12, r12
    2ec2:	dd 24       	eor	r13, r13
    2ec4:	30 c1       	rjmp	.+608    	; 0x3126 <pb_proto_handle+0x4e0>
      break;
    case PBPROTO_CMD_SEND:
      result = cmd_send(&ret_size);
      break;
    case PBPROTO_CMD_RECV_BURST:
      result = cmd_recv_burst(pkt_size, &ret_size);
    2ec6:	e9 80       	ldd	r14, Y+1	; 0x01
    2ec8:	fa 80       	ldd	r15, Y+2	; 0x02
static u08 cmd_recv_burst(u16 size, u16 *ret_size)
{
  u08 status;

  // --- set packet size hi
  status = wait_req(1, PBPROTO_STAGE_SIZE_HI);
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	60 e2       	ldi	r22, 0x20	; 32
    2ece:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    2ed2:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    2ed4:	e1 e0       	ldi	r30, 0x01	; 1
    2ed6:	8e 17       	cp	r24, r30
    2ed8:	09 f0       	breq	.+2      	; 0x2edc <pb_proto_handle+0x296>
    2eda:	8d c0       	rjmp	.+282    	; 0x2ff6 <pb_proto_handle+0x3b0>
    return status;

	PAR_DATA_DDR = 0xFF;
    2edc:	8f ef       	ldi	r24, 0xFF	; 255
    2ede:	8a b9       	out	0x0a, r24	; 10
	PAR_DATA_PORT = size >> 8;
    2ee0:	fb b8       	out	0x0b, r15	; 11
	PAR_STATUS_PORT &= ~BUSY;
    2ee2:	e8 e2       	ldi	r30, 0x28	; 40
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	80 81       	ld	r24, Z
    2ee8:	8b 7f       	andi	r24, 0xFB	; 251
    2eea:	80 83       	st	Z, r24

  // --- set packet size lo ---
  status = wait_req(0, PBPROTO_STAGE_SIZE_LO);
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	60 e3       	ldi	r22, 0x30	; 48
    2ef0:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    2ef4:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    2ef6:	f1 e0       	ldi	r31, 0x01	; 1
    2ef8:	8f 17       	cp	r24, r31
    2efa:	09 f0       	breq	.+2      	; 0x2efe <pb_proto_handle+0x2b8>
    2efc:	7c c0       	rjmp	.+248    	; 0x2ff6 <pb_proto_handle+0x3b0>
    return status;

	PAR_DATA_PORT = size & 0xFF;
    2efe:	eb b8       	out	0x0b, r14	; 11
	PAR_STATUS_PORT ^= BUSY;
    2f00:	e8 e2       	ldi	r30, 0x28	; 40
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	94 e0       	ldi	r25, 0x04	; 4
    2f08:	89 27       	eor	r24, r25
    2f0a:	80 83       	st	Z, r24

  // --- burst ready? ---
  status = wait_req(1, PBPROTO_STAGE_DATA);
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	60 e4       	ldi	r22, 0x40	; 64
    2f10:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    2f14:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	b8 16       	cp	r11, r24
    2f1a:	09 f0       	breq	.+2      	; 0x2f1e <pb_proto_handle+0x2d8>
    2f1c:	6c c0       	rjmp	.+216    	; 0x2ff6 <pb_proto_handle+0x3b0>
    return status;

  // round to even and convert to words
  u16 words = (size + 1) >> 1;
    2f1e:	c7 01       	movw	r24, r14
    2f20:	01 96       	adiw	r24, 0x01	; 1
    2f22:	9c 01       	movw	r18, r24
    2f24:	36 95       	lsr	r19
    2f26:	27 95       	ror	r18
  u08 result = PBPROTO_STATUS_OK;
  u16 i;
  u08 *ptr = pb_buf;
    2f28:	00 91 6c 01 	lds	r16, 0x016C
    2f2c:	10 91 6d 01 	lds	r17, 0x016D

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    2f30:	f8 94       	cli
	PAR_STATUS_PORT ^= BUSY;
    2f32:	e8 e2       	ldi	r30, 0x28	; 40
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	94 e0       	ldi	r25, 0x04	; 4
    2f3a:	89 27       	eor	r24, r25
    2f3c:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    2f3e:	21 15       	cp	r18, r1
    2f40:	31 05       	cpc	r19, r1
    2f42:	81 f1       	breq	.+96     	; 0x2fa4 <pb_proto_handle+0x35e>
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	96 e0       	ldi	r25, 0x06	; 6
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    2f4a:	4b e2       	ldi	r20, 0x2B	; 43
    2f4c:	50 e0       	ldi	r21, 0x00	; 0

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    2f4e:	e6 e2       	ldi	r30, 0x26	; 38
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	89 2f       	mov	r24, r25
    2f54:	8a 95       	dec	r24
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <pb_proto_handle+0x30e>
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= BUSY;
  for(i=0;i<words;i++) {
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    2f58:	d8 01       	movw	r26, r16
    2f5a:	8c 91       	ld	r24, X
    2f5c:	da 01       	movw	r26, r20
    2f5e:	8c 93       	st	X, r24

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    2f60:	80 81       	ld	r24, Z
    2f62:	83 ff       	sbrs	r24, 3
    2f64:	03 c0       	rjmp	.+6      	; 0x2f6c <pb_proto_handle+0x326>
    2f66:	80 81       	ld	r24, Z
    2f68:	84 fd       	sbrc	r24, 4
    2f6a:	fa cf       	rjmp	.-12     	; 0x2f60 <pb_proto_handle+0x31a>
		if(!(PAR_STATUS_PIN & SEL))
    2f6c:	80 81       	ld	r24, Z
    2f6e:	84 ff       	sbrs	r24, 4
    2f70:	1b c0       	rjmp	.+54     	; 0x2fa8 <pb_proto_handle+0x362>
    2f72:	89 2f       	mov	r24, r25
    2f74:	8a 95       	dec	r24
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <pb_proto_handle+0x32e>
			break;

    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    2f78:	d8 01       	movw	r26, r16
    2f7a:	11 96       	adiw	r26, 0x01	; 1
    2f7c:	8c 91       	ld	r24, X
    2f7e:	da 01       	movw	r26, r20
    2f80:	8c 93       	st	X, r24

    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    2f82:	80 81       	ld	r24, Z
    2f84:	83 fd       	sbrc	r24, 3
    2f86:	03 c0       	rjmp	.+6      	; 0x2f8e <pb_proto_handle+0x348>
    2f88:	80 81       	ld	r24, Z
    2f8a:	84 fd       	sbrc	r24, 4
    2f8c:	fa cf       	rjmp	.-12     	; 0x2f82 <pb_proto_handle+0x33c>
		if(!(PAR_STATUS_PIN & SEL))
    2f8e:	80 81       	ld	r24, Z
    2f90:	84 ff       	sbrs	r24, 4
    2f92:	0a c0       	rjmp	.+20     	; 0x2fa8 <pb_proto_handle+0x362>

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= BUSY;
  for(i=0;i<words;i++) {
    2f94:	6f 5f       	subi	r22, 0xFF	; 255
    2f96:	7f 4f       	sbci	r23, 0xFF	; 255
    2f98:	62 17       	cp	r22, r18
    2f9a:	73 07       	cpc	r23, r19
    2f9c:	28 f4       	brcc	.+10     	; 0x2fa8 <pb_proto_handle+0x362>
  *ret_size = i << 1;
  return result;
}

u08 pb_proto_handle(void)
{
    2f9e:	0e 5f       	subi	r16, 0xFE	; 254
    2fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa2:	d7 cf       	rjmp	.-82     	; 0x2f52 <pb_proto_handle+0x30c>
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
  sei();
  // END TIME CRITICAL

	// TODO: WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    2fa8:	e6 e2       	ldi	r30, 0x26	; 38
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;
    2fac:	a8 e2       	ldi	r26, 0x28	; 40
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
		if(!(PAR_STATUS_PIN & SEL))
			break;
  }
  recv_burst_exit:
  sei();
    2fb0:	78 94       	sei
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <pb_proto_handle+0x374>
  // END TIME CRITICAL

	// TODO: WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    if(!(PAR_STATUS_PIN & SEL))
    2fb4:	80 81       	ld	r24, Z
    2fb6:	84 ff       	sbrs	r24, 4
    2fb8:	fb cf       	rjmp	.-10     	; 0x2fb0 <pb_proto_handle+0x36a>
  sei();
  // END TIME CRITICAL

	// TODO: WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    2fba:	80 81       	ld	r24, Z
    2fbc:	83 fd       	sbrc	r24, 3
    2fbe:	fa cf       	rjmp	.-12     	; 0x2fb4 <pb_proto_handle+0x36e>
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;
    2fc0:	8c 91       	ld	r24, X
    2fc2:	84 60       	ori	r24, 0x04	; 4
    2fc4:	8c 93       	st	X, r24
    2fc6:	03 c0       	rjmp	.+6      	; 0x2fce <pb_proto_handle+0x388>

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & POUT))
    if(!(PAR_STATUS_PIN & SEL))
    2fc8:	80 81       	ld	r24, Z
    2fca:	84 ff       	sbrs	r24, 4
    2fcc:	f1 cf       	rjmp	.-30     	; 0x2fb0 <pb_proto_handle+0x36a>
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & POUT))
    2fce:	80 81       	ld	r24, Z
    2fd0:	83 ff       	sbrs	r24, 3
    2fd2:	fa cf       	rjmp	.-12     	; 0x2fc8 <pb_proto_handle+0x382>
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

  // error?
  if(i<words)
    2fd4:	62 17       	cp	r22, r18
    2fd6:	73 07       	cpc	r23, r19
    2fd8:	20 f4       	brcc	.+8      	; 0x2fe2 <pb_proto_handle+0x39c>
    2fda:	0f 2e       	mov	r0, r31
    2fdc:	f2 e4       	ldi	r31, 0x42	; 66
    2fde:	bf 2e       	mov	r11, r31
    2fe0:	f0 2d       	mov	r31, r0
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT &= ~BUSY;
    2fe2:	e8 e2       	ldi	r30, 0x28	; 40
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	8b 7f       	andi	r24, 0xFB	; 251
    2fea:	80 83       	st	Z, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    2fec:	1a b8       	out	0x0a, r1	; 10

  *ret_size = i << 1;
    2fee:	6b 01       	movw	r12, r22
    2ff0:	cc 0c       	add	r12, r12
    2ff2:	dd 1c       	adc	r13, r13
    2ff4:	98 c0       	rjmp	.+304    	; 0x3126 <pb_proto_handle+0x4e0>
    2ff6:	cc 24       	eor	r12, r12
    2ff8:	dd 24       	eor	r13, r13
    2ffa:	95 c0       	rjmp	.+298    	; 0x3126 <pb_proto_handle+0x4e0>
{
  u16 uwSize;
  u08 ubStatus;

  // --- packet size hi ---
  ubStatus = wait_req(1, PBPROTO_STAGE_SIZE_HI);
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	60 e2       	ldi	r22, 0x20	; 32
    3000:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    3004:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    3006:	b1 e0       	ldi	r27, 0x01	; 1
    3008:	8b 17       	cp	r24, r27
    300a:	09 f0       	breq	.+2      	; 0x300e <pb_proto_handle+0x3c8>
    300c:	8a c0       	rjmp	.+276    	; 0x3122 <pb_proto_handle+0x4dc>
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    300e:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~BUSY;
    3010:	e8 e2       	ldi	r30, 0x28	; 40
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	8b 7f       	andi	r24, 0xFB	; 251
    3018:	80 83       	st	Z, r24

  // --- packet size lo ---
  ubStatus = wait_req(0, PBPROTO_STAGE_SIZE_LO);
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	60 e3       	ldi	r22, 0x30	; 48
    301e:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <wait_req>
    3022:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    3024:	e1 e0       	ldi	r30, 0x01	; 1
    3026:	8e 17       	cp	r24, r30
    3028:	09 f0       	breq	.+2      	; 0x302c <pb_proto_handle+0x3e6>
    302a:	7b c0       	rjmp	.+246    	; 0x3122 <pb_proto_handle+0x4dc>
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    302c:	89 b1       	in	r24, 0x09	; 9
  // --- packet size hi ---
  ubStatus = wait_req(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    302e:	30 2f       	mov	r19, r16
    3030:	20 e0       	ldi	r18, 0x00	; 0
  // --- packet size lo ---
  ubStatus = wait_req(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	28 2b       	or	r18, r24
    3036:	39 2b       	or	r19, r25
  // delay SET_RAK until burst begin...

  // check size
  if(uwSize > pb_buf_size)
    3038:	80 91 6e 01 	lds	r24, 0x016E
    303c:	90 91 6f 01 	lds	r25, 0x016F
    3040:	82 17       	cp	r24, r18
    3042:	93 07       	cpc	r25, r19
    3044:	38 f4       	brcc	.+14     	; 0x3054 <pb_proto_handle+0x40e>
    3046:	0f 2e       	mov	r0, r31
    3048:	f5 e0       	ldi	r31, 0x05	; 5
    304a:	bf 2e       	mov	r11, r31
    304c:	f0 2d       	mov	r31, r0
    304e:	cc 24       	eor	r12, r12
    3050:	dd 24       	eor	r13, r13
    3052:	69 c0       	rjmp	.+210    	; 0x3126 <pb_proto_handle+0x4e0>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;

  // round to even and convert to words
  u16 words = (uwSize +1) >> 1;
    3054:	c9 01       	movw	r24, r18
    3056:	01 96       	adiw	r24, 0x01	; 1
    3058:	9c 01       	movw	r18, r24
    305a:	36 95       	lsr	r19
    305c:	27 95       	ror	r18
  u16 i;
  u08 result = PBPROTO_STATUS_OK;
  u08 *ptr = pb_buf;
    305e:	00 91 6c 01 	lds	r16, 0x016C
    3062:	10 91 6d 01 	lds	r17, 0x016D

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    3066:	f8 94       	cli
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
    3068:	e8 e2       	ldi	r30, 0x28	; 40
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	94 e0       	ldi	r25, 0x04	; 4
    3070:	89 27       	eor	r24, r25
    3072:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    3074:	21 15       	cp	r18, r1
    3076:	31 05       	cpc	r19, r1
    3078:	29 f4       	brne	.+10     	; 0x3084 <pb_proto_handle+0x43e>
    307a:	2e c0       	rjmp	.+92     	; 0x30d8 <pb_proto_handle+0x492>
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
    307c:	80 81       	ld	r24, Z
    307e:	84 fd       	sbrc	r24, 4
    3080:	0a c0       	rjmp	.+20     	; 0x3096 <pb_proto_handle+0x450>
    3082:	0f c0       	rjmp	.+30     	; 0x30a2 <pb_proto_handle+0x45c>
    3084:	40 e0       	ldi	r20, 0x00	; 0
    3086:	50 e0       	ldi	r21, 0x00	; 0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    3088:	e6 e2       	ldi	r30, 0x26	; 38
    308a:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    308c:	0f 2e       	mov	r0, r31
    308e:	f9 e2       	ldi	r31, 0x29	; 41
    3090:	ef 2e       	mov	r14, r31
    3092:	ff 24       	eor	r15, r15
    3094:	f0 2d       	mov	r31, r0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    3096:	80 81       	ld	r24, Z
    3098:	83 fd       	sbrc	r24, 3
    309a:	03 c0       	rjmp	.+6      	; 0x30a2 <pb_proto_handle+0x45c>
    309c:	80 81       	ld	r24, Z
    309e:	84 fd       	sbrc	r24, 4
    30a0:	ed cf       	rjmp	.-38     	; 0x307c <pb_proto_handle+0x436>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    30a2:	d7 01       	movw	r26, r14
    30a4:	8c 91       	ld	r24, X
    30a6:	d8 01       	movw	r26, r16
    30a8:	8c 93       	st	X, r24
    30aa:	03 c0       	rjmp	.+6      	; 0x30b2 <pb_proto_handle+0x46c>

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
    30ac:	80 81       	ld	r24, Z
    30ae:	84 ff       	sbrs	r24, 4
    30b0:	06 c0       	rjmp	.+12     	; 0x30be <pb_proto_handle+0x478>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    30b2:	80 81       	ld	r24, Z
    30b4:	83 ff       	sbrs	r24, 3
    30b6:	03 c0       	rjmp	.+6      	; 0x30be <pb_proto_handle+0x478>
    30b8:	80 81       	ld	r24, Z
    30ba:	84 fd       	sbrc	r24, 4
    30bc:	f7 cf       	rjmp	.-18     	; 0x30ac <pb_proto_handle+0x466>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    30be:	d7 01       	movw	r26, r14
    30c0:	8c 91       	ld	r24, X
    30c2:	d8 01       	movw	r26, r16
    30c4:	11 96       	adiw	r26, 0x01	; 1
    30c6:	8c 93       	st	X, r24

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    30c8:	4f 5f       	subi	r20, 0xFF	; 255
    30ca:	5f 4f       	sbci	r21, 0xFF	; 255
    30cc:	42 17       	cp	r20, r18
    30ce:	53 07       	cpc	r21, r19
    30d0:	18 f4       	brcc	.+6      	; 0x30d8 <pb_proto_handle+0x492>
  *ret_size = i << 1;
  return result;
}

u08 pb_proto_handle(void)
{
    30d2:	0e 5f       	subi	r16, 0xFE	; 254
    30d4:	1f 4f       	sbci	r17, 0xFF	; 255
    30d6:	df cf       	rjmp	.-66     	; 0x3096 <pb_proto_handle+0x450>
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
  }
  sei();
    30d8:	78 94       	sei
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    30da:	e6 e2       	ldi	r30, 0x26	; 38
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & SEL))
			continue;

		PAR_STATUS_PORT ^= BUSY;
    30de:	a8 e2       	ldi	r26, 0x28	; 40
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	94 e0       	ldi	r25, 0x04	; 4
  sei();
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    30e4:	80 81       	ld	r24, Z
    30e6:	83 fd       	sbrc	r24, 3
    30e8:	03 c0       	rjmp	.+6      	; 0x30f0 <pb_proto_handle+0x4aa>
    30ea:	80 81       	ld	r24, Z
    30ec:	84 fd       	sbrc	r24, 4
    30ee:	fa cf       	rjmp	.-12     	; 0x30e4 <pb_proto_handle+0x49e>
		if(!(PAR_STATUS_PIN & SEL))
    30f0:	80 81       	ld	r24, Z
    30f2:	84 ff       	sbrs	r24, 4
    30f4:	09 c0       	rjmp	.+18     	; 0x3108 <pb_proto_handle+0x4c2>
			continue;

		PAR_STATUS_PORT ^= BUSY;
    30f6:	8c 91       	ld	r24, X
    30f8:	89 27       	eor	r24, r25
    30fa:	8c 93       	st	X, r24
		// Wait for POUT == 0
		while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    30fc:	80 81       	ld	r24, Z
    30fe:	83 ff       	sbrs	r24, 3
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <pb_proto_handle+0x4c2>
    3102:	80 81       	ld	r24, Z
    3104:	84 fd       	sbrc	r24, 4
    3106:	fa cf       	rjmp	.-12     	; 0x30fc <pb_proto_handle+0x4b6>
  } while(!(PAR_STATUS_PIN & SEL));
    3108:	80 81       	ld	r24, Z
    310a:	84 ff       	sbrs	r24, 4
    310c:	eb cf       	rjmp	.-42     	; 0x30e4 <pb_proto_handle+0x49e>
  // error?
  if(i<words)
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT ^= BUSY;
    310e:	e8 e2       	ldi	r30, 0x28	; 40
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	94 e0       	ldi	r25, 0x04	; 4
    3116:	89 27       	eor	r24, r25
    3118:	80 83       	st	Z, r24

  *ret_size = i << 1;
    311a:	69 01       	movw	r12, r18
    311c:	cc 0c       	add	r12, r12
    311e:	dd 1c       	adc	r13, r13
    3120:	02 c0       	rjmp	.+4      	; 0x3126 <pb_proto_handle+0x4e0>
    3122:	cc 24       	eor	r12, r12
    3124:	dd 24       	eor	r13, r13
  }
  return PBPROTO_STATUS_TIMEOUT | state_flag;
}

static u08 wait_sel(u08 select_state, u08 state_flag) {
  timer_100us = 0;
    3126:	10 92 a9 01 	sts	0x01A9, r1
    312a:	10 92 a8 01 	sts	0x01A8, r1
  while(timer_100us < pb_proto_timeout) {
    312e:	20 91 3a 01 	lds	r18, 0x013A
    3132:	30 91 3b 01 	lds	r19, 0x013B
    if((PAR_STATUS_PIN & SEL) >> SEL_PIN == select_state)
    3136:	e6 e2       	ldi	r30, 0x26	; 38
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	03 c0       	rjmp	.+6      	; 0x3142 <pb_proto_handle+0x4fc>
    313c:	80 81       	ld	r24, Z
    313e:	84 ff       	sbrs	r24, 4
    3140:	07 c0       	rjmp	.+14     	; 0x3150 <pb_proto_handle+0x50a>
  return PBPROTO_STATUS_TIMEOUT | state_flag;
}

static u08 wait_sel(u08 select_state, u08 state_flag) {
  timer_100us = 0;
  while(timer_100us < pb_proto_timeout) {
    3142:	80 91 a8 01 	lds	r24, 0x01A8
    3146:	90 91 a9 01 	lds	r25, 0x01A9
    314a:	82 17       	cp	r24, r18
    314c:	93 07       	cpc	r25, r19
    314e:	b0 f3       	brcs	.-20     	; 0x313c <pb_proto_handle+0x4f6>

  // wait for SEL == 0
  wait_sel(0, PBPROTO_STAGE_END_SELECT);

  // reset RAK = 0
  PAR_STATUS_PORT &= ~BUSY;
    3150:	e8 e2       	ldi	r30, 0x28	; 40
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	8b 7f       	andi	r24, 0xFB	; 251
    3158:	80 83       	st	Z, r24
    315a:	e0 90 84 00 	lds	r14, 0x0084
    315e:	f0 90 85 00 	lds	r15, 0x0085

  // read timer
  u16 delta = timer_hw_get();

  // process buffer for send command
  if(result == PBPROTO_STATUS_OK) {
    3162:	b1 e0       	ldi	r27, 0x01	; 1
    3164:	bb 16       	cp	r11, r27
    3166:	91 f4       	brne	.+36     	; 0x318c <pb_proto_handle+0x546>
    if((cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST)) {
    3168:	e1 e1       	ldi	r30, 0x11	; 17
    316a:	ae 16       	cp	r10, r30
    316c:	21 f0       	breq	.+8      	; 0x3176 <pb_proto_handle+0x530>
    316e:	f3 e3       	ldi	r31, 0x33	; 51
    3170:	af 16       	cp	r10, r31
    3172:	09 f0       	breq	.+2      	; 0x3176 <pb_proto_handle+0x530>
    3174:	65 c0       	rjmp	.+202    	; 0x3240 <pb_proto_handle+0x5fa>
      result = proc_func(pb_buf, ret_size);
    3176:	e0 91 6a 01 	lds	r30, 0x016A
    317a:	f0 91 6b 01 	lds	r31, 0x016B
    317e:	80 91 6c 01 	lds	r24, 0x016C
    3182:	90 91 6d 01 	lds	r25, 0x016D
    3186:	b6 01       	movw	r22, r12
    3188:	09 95       	icall
    318a:	b8 2e       	mov	r11, r24
    }
  }

  // fill in stats
  ps->cmd = cmd;
    318c:	0d eb       	ldi	r16, 0xBD	; 189
    318e:	11 e0       	ldi	r17, 0x01	; 1
    3190:	f8 01       	movw	r30, r16
    3192:	a1 92       	st	Z+, r10
  ps->status = result;
    3194:	b0 82       	st	Z, r11
  ps->size = ret_size;
    3196:	d8 01       	movw	r26, r16
    3198:	15 96       	adiw	r26, 0x05	; 5
    319a:	dc 92       	st	X, r13
    319c:	ce 92       	st	-X, r12
    319e:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = delta;
    31a0:	17 96       	adiw	r26, 0x07	; 7
    31a2:	fc 92       	st	X, r15
    31a4:	ee 92       	st	-X, r14
    31a6:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timer_hw_calc_rate_kbs(ret_size, delta);
    31a8:	c6 01       	movw	r24, r12
    31aa:	b7 01       	movw	r22, r14
    31ac:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <timer_hw_calc_rate_kbs>
    31b0:	f8 01       	movw	r30, r16
    31b2:	91 87       	std	Z+9, r25	; 0x09
    31b4:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    31b6:	d8 01       	movw	r26, r16
    31b8:	1c 96       	adiw	r26, 0x0c	; 12
    31ba:	6d 92       	st	X+, r6
    31bc:	7d 92       	st	X+, r7
    31be:	8d 92       	st	X+, r8
    31c0:	9c 92       	st	X, r9
    31c2:	1f 97       	sbiw	r26, 0x0f	; 15
  ps->is_send = (cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST);
    31c4:	b1 e1       	ldi	r27, 0x11	; 17
    31c6:	ab 16       	cp	r10, r27
    31c8:	31 f0       	breq	.+12     	; 0x31d6 <pb_proto_handle+0x590>
    31ca:	e3 e3       	ldi	r30, 0x33	; 51
    31cc:	ae 16       	cp	r10, r30
    31ce:	19 f0       	breq	.+6      	; 0x31d6 <pb_proto_handle+0x590>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <pb_proto_handle+0x594>
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	ef eb       	ldi	r30, 0xBF	; 191
    31dc:	f1 e0       	ldi	r31, 0x01	; 1
    31de:	81 93       	st	Z+, r24
  ps->stats_id = ps->is_send ? STATS_ID_PB_TX : STATS_ID_PB_RX;
    31e0:	10 82       	st	Z, r1
    31e2:	88 23       	and	r24, r24
    31e4:	11 f0       	breq	.+4      	; 0x31ea <pb_proto_handle+0x5a4>
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	80 83       	st	Z, r24
  ps->recv_delta = ps->is_send ? 0 : (u16)(ps->ts - trigger_ts);
    31ea:	80 91 bf 01 	lds	r24, 0x01BF
    31ee:	88 23       	and	r24, r24
    31f0:	19 f0       	breq	.+6      	; 0x31f8 <pb_proto_handle+0x5b2>
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	0a c0       	rjmp	.+20     	; 0x320c <pb_proto_handle+0x5c6>
    31f8:	20 91 c9 01 	lds	r18, 0x01C9
    31fc:	30 91 ca 01 	lds	r19, 0x01CA
    3200:	80 91 70 01 	lds	r24, 0x0170
    3204:	90 91 71 01 	lds	r25, 0x0171
    3208:	28 1b       	sub	r18, r24
    320a:	39 0b       	sbc	r19, r25
    320c:	30 93 c8 01 	sts	0x01C8, r19
    3210:	20 93 c7 01 	sts	0x01C7, r18
    3214:	8b 2d       	mov	r24, r11
  return result;
}
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	1f 91       	pop	r17
    3220:	0f 91       	pop	r16
    3222:	ff 90       	pop	r15
    3224:	ef 90       	pop	r14
    3226:	df 90       	pop	r13
    3228:	cf 90       	pop	r12
    322a:	bf 90       	pop	r11
    322c:	af 90       	pop	r10
    322e:	9f 90       	pop	r9
    3230:	8f 90       	pop	r8
    3232:	7f 90       	pop	r7
    3234:	6f 90       	pop	r6
    3236:	5f 90       	pop	r5
    3238:	4f 90       	pop	r4
    323a:	3f 90       	pop	r3
    323c:	2f 90       	pop	r2
    323e:	08 95       	ret
      result = proc_func(pb_buf, ret_size);
    }
  }

  // fill in stats
  ps->cmd = cmd;
    3240:	0d eb       	ldi	r16, 0xBD	; 189
    3242:	11 e0       	ldi	r17, 0x01	; 1
    3244:	f8 01       	movw	r30, r16
    3246:	a1 92       	st	Z+, r10
  ps->status = result;
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	80 83       	st	Z, r24
  ps->size = ret_size;
    324c:	d8 01       	movw	r26, r16
    324e:	15 96       	adiw	r26, 0x05	; 5
    3250:	dc 92       	st	X, r13
    3252:	ce 92       	st	-X, r12
    3254:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = delta;
    3256:	17 96       	adiw	r26, 0x07	; 7
    3258:	fc 92       	st	X, r15
    325a:	ee 92       	st	-X, r14
    325c:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timer_hw_calc_rate_kbs(ret_size, delta);
    325e:	c6 01       	movw	r24, r12
    3260:	b7 01       	movw	r22, r14
    3262:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <timer_hw_calc_rate_kbs>
    3266:	f8 01       	movw	r30, r16
    3268:	91 87       	std	Z+9, r25	; 0x09
    326a:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    326c:	d8 01       	movw	r26, r16
    326e:	1c 96       	adiw	r26, 0x0c	; 12
    3270:	6d 92       	st	X+, r6
    3272:	7d 92       	st	X+, r7
    3274:	8d 92       	st	X+, r8
    3276:	9c 92       	st	X, r9
    3278:	1f 97       	sbiw	r26, 0x0f	; 15
    327a:	aa cf       	rjmp	.-172    	; 0x31d0 <pb_proto_handle+0x58a>

0000327c <pb_proto_request_recv>:
  return ((pout >> (POUT_PIN-2)) | (select >> (SEL_PIN-1)) | (strobe >> NSTROBE_PIN));
}

void pb_proto_request_recv(void)
{
  par_low_pulse_ack(1);
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <par_low_pulse_ack>
  trigger_ts = time_stamp;
    3282:	80 91 a2 01 	lds	r24, 0x01A2
    3286:	90 91 a3 01 	lds	r25, 0x01A3
    328a:	a0 91 a4 01 	lds	r26, 0x01A4
    328e:	b0 91 a5 01 	lds	r27, 0x01A5
    3292:	80 93 70 01 	sts	0x0170, r24
    3296:	90 93 71 01 	sts	0x0171, r25
    329a:	a0 93 72 01 	sts	0x0172, r26
    329e:	b0 93 73 01 	sts	0x0173, r27
}
    32a2:	08 95       	ret

000032a4 <pb_test_send_packet>:
  return result;
}

void pb_test_send_packet(u08 silent)
{
  silent_mode = silent;
    32a4:	80 93 76 01 	sts	0x0176, r24
  pb_proto_request_recv();
    32a8:	0e 94 3e 19 	call	0x327c	; 0x327c <pb_proto_request_recv>
}
    32ac:	08 95       	ret

000032ae <pb_test_toggle_auto>:

void pb_test_toggle_auto(void)
{
  auto_mode = !auto_mode;
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	80 91 75 01 	lds	r24, 0x0175
    32b4:	88 23       	and	r24, r24
    32b6:	09 f4       	brne	.+2      	; 0x32ba <pb_test_toggle_auto+0xc>
    32b8:	91 e0       	ldi	r25, 0x01	; 1
    32ba:	90 93 75 01 	sts	0x0175, r25

  uart_send_time_stamp_spc();
    32be:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[AUTO] "));
    32c2:	8c e5       	ldi	r24, 0x5C	; 92
    32c4:	97 e0       	ldi	r25, 0x07	; 7
    32c6:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  if(auto_mode) {
    32ca:	80 91 75 01 	lds	r24, 0x0175
    32ce:	88 23       	and	r24, r24
    32d0:	29 f0       	breq	.+10     	; 0x32dc <pb_test_toggle_auto+0x2e>
    uart_send_pstring(PSTR("on"));
    32d2:	89 e5       	ldi	r24, 0x59	; 89
    32d4:	97 e0       	ldi	r25, 0x07	; 7
    32d6:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <pb_test_toggle_auto+0x36>
  } else {
    uart_send_pstring(PSTR("off"));
    32dc:	85 e5       	ldi	r24, 0x55	; 85
    32de:	97 e0       	ldi	r25, 0x07	; 7
    32e0:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  }
  uart_send_crlf();
    32e4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>

  if(auto_mode) {
    32e8:	80 91 75 01 	lds	r24, 0x0175
    32ec:	88 23       	and	r24, r24
    32ee:	29 f0       	breq	.+10     	; 0x32fa <pb_test_toggle_auto+0x4c>
    // send first packet
    pb_test_send_packet(1);
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	0e 94 52 19 	call	0x32a4	; 0x32a4 <pb_test_send_packet>
    // clear stats
    stats_reset();
    32f6:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <stats_reset>
    32fa:	08 95       	ret

000032fc <pb_test_loop>:
    }
  }
}

u08 pb_test_loop(void)
{
    32fc:	ef 92       	push	r14
    32fe:	ff 92       	push	r15
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
  uart_send_time_stamp_spc();
    3306:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[PB_TEST] on\r\n"));
    330a:	84 e7       	ldi	r24, 0x74	; 116
    330c:	97 e0       	ldi	r25, 0x07	; 7
    330e:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  stats_reset();
    3312:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <stats_reset>

  // setup handlers for pb testing
  pb_proto_init(fill_pkt, proc_pkt, pkt_buf, PKT_BUF_SIZE);
    3316:	83 e6       	ldi	r24, 0x63	; 99
    3318:	9a e1       	ldi	r25, 0x1A	; 26
    331a:	60 ee       	ldi	r22, 0xE0	; 224
    331c:	79 e1       	ldi	r23, 0x19	; 25
    331e:	4d ec       	ldi	r20, 0xCD	; 205
    3320:	51 e0       	ldi	r21, 0x01	; 1
    3322:	2a ee       	ldi	r18, 0xEA	; 234
    3324:	35 e0       	ldi	r19, 0x05	; 5
    3326:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <pb_proto_init>
  auto_mode = 0;
    332a:	10 92 75 01 	sts	0x0175, r1
  toggle_request = 0;
    332e:	10 92 74 01 	sts	0x0174, r1
  silent_mode = 0;
    3332:	10 92 76 01 	sts	0x0176, r1
    3336:	10 e0       	ldi	r17, 0x00	; 0
    if(!silent_mode) {
      dump_pb_cmd(&pb_proto_stat);
    }

    // next iteration?
    if(pb_proto_stat.is_send) {
    3338:	cf eb       	ldi	r28, 0xBF	; 191
    333a:	d1 e0       	ldi	r29, 0x01	; 1
  // ok!
  if(status == PBPROTO_STATUS_OK) {

    // always dump I/O
    if(!silent_mode) {
      dump_pb_cmd(&pb_proto_stat);
    333c:	0f 2e       	mov	r0, r31
    333e:	fd eb       	ldi	r31, 0xBD	; 189
    3340:	ef 2e       	mov	r14, r31
    3342:	f1 e0       	ldi	r31, 0x01	; 1
    3344:	ff 2e       	mov	r15, r31
    3346:	f0 2d       	mov	r31, r0
    3348:	26 c0       	rjmp	.+76     	; 0x3396 <pb_test_loop+0x9a>

  // test loop
  u08 result = CMD_WORKER_IDLE;
  while(run_mode == RUN_MODE_PB_TEST) {
    // command line handling
    result = cmd_worker();
    334a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <cmd_worker>
    334e:	18 2f       	mov	r17, r24
    if(result & CMD_WORKER_RESET) {
    3350:	81 fd       	sbrc	r24, 1
    3352:	25 c0       	rjmp	.+74     	; 0x339e <pb_test_loop+0xa2>

// ----- function table -----

static void pb_test_worker(void)
{
  u08 status = pb_util_handle();
    3354:	0e 94 a7 1a 	call	0x354e	; 0x354e <pb_util_handle>

  // ok!
  if(status == PBPROTO_STATUS_OK) {
    3358:	81 30       	cpi	r24, 0x01	; 1
    335a:	a9 f4       	brne	.+42     	; 0x3386 <pb_test_loop+0x8a>

    // always dump I/O
    if(!silent_mode) {
    335c:	80 91 76 01 	lds	r24, 0x0176
    3360:	88 23       	and	r24, r24
    3362:	19 f4       	brne	.+6      	; 0x336a <pb_test_loop+0x6e>
      dump_pb_cmd(&pb_proto_stat);
    3364:	c7 01       	movw	r24, r14
    3366:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <dump_pb_cmd>
    }

    // next iteration?
    if(pb_proto_stat.is_send) {
    336a:	88 81       	ld	r24, Y
    336c:	88 23       	and	r24, r24
    336e:	99 f0       	breq	.+38     	; 0x3396 <pb_test_loop+0x9a>
      if(auto_mode) {
    3370:	80 91 75 01 	lds	r24, 0x0175
    3374:	88 23       	and	r24, r24
    3376:	21 f0       	breq	.+8      	; 0x3380 <pb_test_loop+0x84>
        // next iteration after
        pb_test_send_packet(1);
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <pb_test_send_packet>
    337e:	0b c0       	rjmp	.+22     	; 0x3396 <pb_test_loop+0x9a>
      } else {
        silent_mode = 0;
    3380:	10 92 76 01 	sts	0x0176, r1
    3384:	08 c0       	rjmp	.+16     	; 0x3396 <pb_test_loop+0x9a>
      }
    }
  }
  // pb proto failed with an error
  else if(status != PBPROTO_STATUS_IDLE) {
    3386:	88 23       	and	r24, r24
    3388:	31 f0       	breq	.+12     	; 0x3396 <pb_test_loop+0x9a>
    // disable auto mode
    if(auto_mode) {
    338a:	80 91 75 01 	lds	r24, 0x0175
    338e:	88 23       	and	r24, r24
    3390:	11 f0       	breq	.+4      	; 0x3396 <pb_test_loop+0x9a>
      pb_test_toggle_auto();
    3392:	0e 94 57 19 	call	0x32ae	; 0x32ae <pb_test_toggle_auto>
  toggle_request = 0;
  silent_mode = 0;

  // test loop
  u08 result = CMD_WORKER_IDLE;
  while(run_mode == RUN_MODE_PB_TEST) {
    3396:	80 91 66 01 	lds	r24, 0x0166
    339a:	82 30       	cpi	r24, 0x02	; 2
    339c:	b1 f2       	breq	.-84     	; 0x334a <pb_test_loop+0x4e>
    }

    pb_test_worker();
  }

  stats_dump(1,0);
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	60 e0       	ldi	r22, 0x00	; 0
    33a2:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <stats_dump>

  uart_send_time_stamp_spc();
    33a6:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[PB_TEST] off\r\n"));
    33aa:	84 e6       	ldi	r24, 0x64	; 100
    33ac:	97 e0       	ldi	r25, 0x07	; 7
    33ae:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  return result;
}
    33b2:	81 2f       	mov	r24, r17
    33b4:	df 91       	pop	r29
    33b6:	cf 91       	pop	r28
    33b8:	1f 91       	pop	r17
    33ba:	ff 90       	pop	r15
    33bc:	ef 90       	pop	r14
    33be:	08 95       	ret

000033c0 <proc_pkt>:

  return PBPROTO_STATUS_OK;
}

static u08 proc_pkt(const u08 *buf, u16 size)
{
    33c0:	af 92       	push	r10
    33c2:	bf 92       	push	r11
    33c4:	df 92       	push	r13
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	ec 01       	movw	r28, r24
    33d4:	8b 01       	movw	r16, r22
  u16 errors = 0;

  // check packet size
  if(size != param.test_plen) {
    33d6:	80 91 b2 01 	lds	r24, 0x01B2
    33da:	90 91 b3 01 	lds	r25, 0x01B3
    33de:	86 17       	cp	r24, r22
    33e0:	97 07       	cpc	r25, r23
    33e2:	19 f4       	brne	.+6      	; 0x33ea <proc_pkt+0x2a>
    33e4:	ee 24       	eor	r14, r14
    33e6:	ff 24       	eor	r15, r15
    33e8:	07 c0       	rjmp	.+14     	; 0x33f8 <proc_pkt+0x38>
    errors = 1;
    uart_send_pstring(PSTR("ERR: size\r\n"));
    33ea:	8b ec       	ldi	r24, 0xCB	; 203
    33ec:	97 e0       	ldi	r25, 0x07	; 7
    33ee:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    33f2:	ee 24       	eor	r14, r14
    33f4:	ff 24       	eor	r15, r15
    33f6:	e3 94       	inc	r14
  }

  // +0: check dst mac
  if(!net_compare_mac(buf, net_bcast_mac)) {
    33f8:	ce 01       	movw	r24, r28
    33fa:	60 e0       	ldi	r22, 0x00	; 0
    33fc:	71 e0       	ldi	r23, 0x01	; 1
    33fe:	0e 94 de 13 	call	0x27bc	; 0x27bc <net_compare_mac>
    3402:	88 23       	and	r24, r24
    3404:	39 f4       	brne	.+14     	; 0x3414 <proc_pkt+0x54>
    errors++;
    3406:	08 94       	sec
    3408:	e1 1c       	adc	r14, r1
    340a:	f1 1c       	adc	r15, r1
    uart_send_pstring(PSTR("ERR: dst mac\r\n"));
    340c:	8c eb       	ldi	r24, 0xBC	; 188
    340e:	97 e0       	ldi	r25, 0x07	; 7
    3410:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  }
  // +6: check src mac
  if(!net_compare_mac(buf+6, param.mac_addr)) {
    3414:	ce 01       	movw	r24, r28
    3416:	06 96       	adiw	r24, 0x06	; 6
    3418:	6a ea       	ldi	r22, 0xAA	; 170
    341a:	71 e0       	ldi	r23, 0x01	; 1
    341c:	0e 94 de 13 	call	0x27bc	; 0x27bc <net_compare_mac>
    3420:	88 23       	and	r24, r24
    3422:	39 f4       	brne	.+14     	; 0x3432 <proc_pkt+0x72>
    errors++;
    3424:	08 94       	sec
    3426:	e1 1c       	adc	r14, r1
    3428:	f1 1c       	adc	r15, r1
    uart_send_pstring(PSTR("ERR: src mac\r\n"));
    342a:	8d ea       	ldi	r24, 0xAD	; 173
    342c:	97 e0       	ldi	r25, 0x07	; 7
    342e:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  }
  // +12,+13: pkt type
  u08 ptype_hi = (u08)(param.test_ptype >> 8);
    3432:	e4 eb       	ldi	r30, 0xB4	; 180
    3434:	f1 e0       	ldi	r31, 0x01	; 1
    3436:	20 81       	ld	r18, Z
    3438:	91 81       	ldd	r25, Z+1	; 0x01
  u08 ptype_lo = (u08)(param.test_ptype & 0xff);
  if((buf[12] != ptype_hi) || (buf[13] != ptype_lo)) {
    343a:	8c 85       	ldd	r24, Y+12	; 0x0c
    343c:	89 17       	cp	r24, r25
    343e:	19 f4       	brne	.+6      	; 0x3446 <proc_pkt+0x86>
    3440:	8d 85       	ldd	r24, Y+13	; 0x0d
    3442:	82 17       	cp	r24, r18
    3444:	39 f0       	breq	.+14     	; 0x3454 <proc_pkt+0x94>
    errors++;
    3446:	08 94       	sec
    3448:	e1 1c       	adc	r14, r1
    344a:	f1 1c       	adc	r15, r1
    uart_send_pstring(PSTR("ERR: pkt type\r\n"));
    344c:	8d e9       	ldi	r24, 0x9D	; 157
    344e:	97 e0       	ldi	r25, 0x07	; 7
    3450:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
  }

  // +14: data
  const u08 *ptr = buf + 14;
  u16 num = size - 14;
    3454:	0e 50       	subi	r16, 0x0E	; 14
    3456:	10 40       	sbci	r17, 0x00	; 0
  u08 val = 0;
  while(num > 0) {
    3458:	e9 f0       	breq	.+58     	; 0x3494 <proc_pkt+0xd4>
    345a:	dc 2e       	mov	r13, r28
    345c:	2c 2f       	mov	r18, r28
    345e:	3d 2f       	mov	r19, r29
    3460:	e9 01       	movw	r28, r18
    if(*ptr != val) {
      uart_send_pstring(PSTR("ERR: data @"));
    3462:	0f 2e       	mov	r0, r31
    3464:	f1 e9       	ldi	r31, 0x91	; 145
    3466:	af 2e       	mov	r10, r31
    3468:	f7 e0       	ldi	r31, 0x07	; 7
    346a:	bf 2e       	mov	r11, r31
    346c:	f0 2d       	mov	r31, r0
  // +14: data
  const u08 *ptr = buf + 14;
  u16 num = size - 14;
  u08 val = 0;
  while(num > 0) {
    if(*ptr != val) {
    346e:	9e 01       	movw	r18, r28
    3470:	2d 19       	sub	r18, r13
    3472:	8e 85       	ldd	r24, Y+14	; 0x0e
    3474:	82 17       	cp	r24, r18
    3476:	41 f0       	breq	.+16     	; 0x3488 <proc_pkt+0xc8>
      uart_send_pstring(PSTR("ERR: data @"));
    3478:	c5 01       	movw	r24, r10
    347a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      uart_send_hex_word(num);
    347e:	c8 01       	movw	r24, r16
    3480:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
      uart_send_crlf();
    3484:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
    }
    val++;
    ptr++;
    num--;
    3488:	01 50       	subi	r16, 0x01	; 1
    348a:	10 40       	sbci	r17, 0x00	; 0
    348c:	21 96       	adiw	r28, 0x01	; 1

  // +14: data
  const u08 *ptr = buf + 14;
  u16 num = size - 14;
  u08 val = 0;
  while(num > 0) {
    348e:	01 15       	cp	r16, r1
    3490:	11 05       	cpc	r17, r1
    3492:	69 f7       	brne	.-38     	; 0x346e <proc_pkt+0xae>
    uart_send_spc();
  }
  uart_send_crlf();
#endif

  if(errors > 0) {
    3494:	e1 14       	cp	r14, r1
    3496:	f1 04       	cpc	r15, r1
    3498:	11 f4       	brne	.+4      	; 0x349e <proc_pkt+0xde>
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	0a c0       	rjmp	.+20     	; 0x34b2 <proc_pkt+0xf2>
    uart_send_pstring(PSTR("TOTAL ERRORS "));
    349e:	83 e8       	ldi	r24, 0x83	; 131
    34a0:	97 e0       	ldi	r25, 0x07	; 7
    34a2:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_hex_word(errors);
    34a6:	c7 01       	movw	r24, r14
    34a8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
    uart_send_crlf();
    34ac:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
    34b0:	86 e0       	ldi	r24, 0x06	; 6
    return PBPROTO_STATUS_ERROR;
  } else {
    return PBPROTO_STATUS_OK;
  }
}
    34b2:	df 91       	pop	r29
    34b4:	cf 91       	pop	r28
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	ff 90       	pop	r15
    34bc:	ef 90       	pop	r14
    34be:	df 90       	pop	r13
    34c0:	bf 90       	pop	r11
    34c2:	af 90       	pop	r10
    34c4:	08 95       	ret

000034c6 <fill_pkt>:
static u08 silent_mode;

// ----- Packet Callbacks -----

static u08 fill_pkt(u08 *buf, u16 max_size, u16 *size)
{
    34c6:	ef 92       	push	r14
    34c8:	ff 92       	push	r15
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	ec 01       	movw	r28, r24
    34d4:	7a 01       	movw	r14, r20
  *size = param.test_plen;
    34d6:	80 91 b2 01 	lds	r24, 0x01B2
    34da:	90 91 b3 01 	lds	r25, 0x01B3
    34de:	fa 01       	movw	r30, r20
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	80 83       	st	Z, r24
  if(*size > max_size) {
    34e4:	68 17       	cp	r22, r24
    34e6:	79 07       	cpc	r23, r25
    34e8:	10 f4       	brcc	.+4      	; 0x34ee <fill_pkt+0x28>
    34ea:	85 e0       	ldi	r24, 0x05	; 5
    34ec:	29 c0       	rjmp	.+82     	; 0x3540 <fill_pkt+0x7a>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;
  }

  net_copy_mac(net_bcast_mac, buf);
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	91 e0       	ldi	r25, 0x01	; 1
    34f2:	be 01       	movw	r22, r28
    34f4:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>
  net_copy_mac(param.mac_addr, buf+6);
    34f8:	0a ea       	ldi	r16, 0xAA	; 170
    34fa:	11 e0       	ldi	r17, 0x01	; 1
    34fc:	be 01       	movw	r22, r28
    34fe:	6a 5f       	subi	r22, 0xFA	; 250
    3500:	7f 4f       	sbci	r23, 0xFF	; 255
    3502:	c8 01       	movw	r24, r16
    3504:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>

  u08 ptype_hi = (u08)(param.test_ptype >> 8);
    3508:	06 5f       	subi	r16, 0xF6	; 246
    350a:	1f 4f       	sbci	r17, 0xFF	; 255
    350c:	f8 01       	movw	r30, r16
    350e:	90 81       	ld	r25, Z
    3510:	81 81       	ldd	r24, Z+1	; 0x01
  u08 ptype_lo = (u08)(param.test_ptype & 0xff);
  buf[12] = ptype_hi;
    3512:	8c 87       	std	Y+12, r24	; 0x0c
  buf[13] = ptype_lo;
    3514:	9d 87       	std	Y+13, r25	; 0x0d

  u08 *ptr = buf + 14;
  u16 num = *size - 14;
    3516:	f7 01       	movw	r30, r14
    3518:	80 81       	ld	r24, Z
    351a:	91 81       	ldd	r25, Z+1	; 0x01
    351c:	ac 01       	movw	r20, r24
    351e:	4e 50       	subi	r20, 0x0E	; 14
    3520:	50 40       	sbci	r21, 0x00	; 0
  u08 val = 0;
  while(num > 0) {
    3522:	69 f0       	breq	.+26     	; 0x353e <fill_pkt+0x78>
    3524:	6c 2f       	mov	r22, r28
    3526:	2c 2f       	mov	r18, r28
    3528:	3d 2f       	mov	r19, r29
    352a:	f9 01       	movw	r30, r18
    *ptr = val;
    352c:	8e 2f       	mov	r24, r30
    352e:	86 1b       	sub	r24, r22
    3530:	86 87       	std	Z+14, r24	; 0x0e
    ptr++;
    val++;
    num--;
    3532:	41 50       	subi	r20, 0x01	; 1
    3534:	50 40       	sbci	r21, 0x00	; 0
    3536:	31 96       	adiw	r30, 0x01	; 1
  buf[13] = ptype_lo;

  u08 *ptr = buf + 14;
  u16 num = *size - 14;
  u08 val = 0;
  while(num > 0) {
    3538:	41 15       	cp	r20, r1
    353a:	51 05       	cpc	r21, r1
    353c:	b9 f7       	brne	.-18     	; 0x352c <fill_pkt+0x66>
    353e:	81 e0       	ldi	r24, 0x01	; 1
    val++;
    num--;
  }

  return PBPROTO_STATUS_OK;
}
    3540:	df 91       	pop	r29
    3542:	cf 91       	pop	r28
    3544:	1f 91       	pop	r17
    3546:	0f 91       	pop	r16
    3548:	ff 90       	pop	r15
    354a:	ef 90       	pop	r14
    354c:	08 95       	ret

0000354e <pb_util_handle>:
#include "stats.h"
#include "dump.h"
#include "main.h"

u08 pb_util_handle(void)
{
    354e:	0f 93       	push	r16
  // call protocol handler (low level transmit)
  u08 status = pb_proto_handle();
    3550:	0e 94 23 16 	call	0x2c46	; 0x2c46 <pb_proto_handle>
    3554:	08 2f       	mov	r16, r24
  // nothing done... return
  if(status == PBPROTO_STATUS_IDLE) {
    3556:	88 23       	and	r24, r24
    3558:	29 f1       	breq	.+74     	; 0x35a4 <pb_util_handle+0x56>
  }

  const pb_proto_stat_t *ps = &pb_proto_stat;

  // ok!
  if(status == PBPROTO_STATUS_OK) {
    355a:	81 30       	cpi	r24, 0x01	; 1
    355c:	91 f4       	brne	.+36     	; 0x3582 <pb_util_handle+0x34>
    // account data
    stats_update_ok(ps->stats_id, ps->size, ps->rate);
    355e:	e0 ec       	ldi	r30, 0xC0	; 192
    3560:	f1 e0       	ldi	r31, 0x01	; 1
    3562:	61 81       	ldd	r22, Z+1	; 0x01
    3564:	72 81       	ldd	r23, Z+2	; 0x02
    3566:	45 81       	ldd	r20, Z+5	; 0x05
    3568:	56 81       	ldd	r21, Z+6	; 0x06
    356a:	80 81       	ld	r24, Z
    356c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <stats_update_ok>
    // dump result?
    if(global_verbose) {
    3570:	80 91 67 01 	lds	r24, 0x0167
    3574:	88 23       	and	r24, r24
    3576:	b1 f0       	breq	.+44     	; 0x35a4 <pb_util_handle+0x56>
      // in interactive mode show result
      dump_pb_cmd(ps);
    3578:	8d eb       	ldi	r24, 0xBD	; 189
    357a:	91 e0       	ldi	r25, 0x01	; 1
    357c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <dump_pb_cmd>
    3580:	11 c0       	rjmp	.+34     	; 0x35a4 <pb_util_handle+0x56>
    }
  }
  // pb proto failed with an error
  else {
    // dump error
    dump_pb_cmd(ps);
    3582:	8d eb       	ldi	r24, 0xBD	; 189
    3584:	91 e0       	ldi	r25, 0x01	; 1
    3586:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <dump_pb_cmd>
    358a:	e0 91 c0 01 	lds	r30, 0x01C0
    358e:	8c e0       	ldi	r24, 0x0C	; 12
    3590:	e8 9f       	mul	r30, r24
    3592:	f0 01       	movw	r30, r0
    3594:	11 24       	eor	r1, r1
    3596:	e9 54       	subi	r30, 0x49	; 73
    3598:	f8 4f       	sbci	r31, 0xF8	; 248
    // account data
    stats_get(ps->stats_id)->err++;
    359a:	86 81       	ldd	r24, Z+6	; 0x06
    359c:	97 81       	ldd	r25, Z+7	; 0x07
    359e:	01 96       	adiw	r24, 0x01	; 1
    35a0:	97 83       	std	Z+7, r25	; 0x07
    35a2:	86 83       	std	Z+6, r24	; 0x06
  }
  return status;
}
    35a4:	80 2f       	mov	r24, r16
    35a6:	0f 91       	pop	r16
    35a8:	08 95       	ret

000035aa <pio_set_device>:
    dev_id = id;
    return 1;
  }
  // invalid device selected
  return 0;
}
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	08 95       	ret

000035ae <pio_send>:
    35ae:	20 91 78 01 	lds	r18, 0x0178
    35b2:	30 91 79 01 	lds	r19, 0x0179
    35b6:	2a 5f       	subi	r18, 0xFA	; 250
    35b8:	3f 4f       	sbci	r19, 0xFF	; 255
    35ba:	f9 01       	movw	r30, r18
    35bc:	45 91       	lpm	r20, Z+
    35be:	54 91       	lpm	r21, Z+
    35c0:	fa 01       	movw	r30, r20
    35c2:	09 95       	icall
}

u08 pio_send(const u08 *buf, u16 size)
{
  return pio_dev_send(cur_dev, buf, size);
}
    35c4:	08 95       	ret

000035c6 <pio_recv>:
    35c6:	20 91 78 01 	lds	r18, 0x0178
    35ca:	30 91 79 01 	lds	r19, 0x0179
    35ce:	28 5f       	subi	r18, 0xF8	; 248
    35d0:	3f 4f       	sbci	r19, 0xFF	; 255
    35d2:	f9 01       	movw	r30, r18
    35d4:	a5 91       	lpm	r26, Z+
    35d6:	b4 91       	lpm	r27, Z+
    35d8:	fd 01       	movw	r30, r26
    35da:	09 95       	icall

u08 pio_recv(u08 *buf, u16 max_size, u16 *got_size)
{
  return pio_dev_recv(cur_dev, buf, max_size, got_size);
}
    35dc:	08 95       	ret

000035de <pio_has_recv>:
    35de:	80 91 78 01 	lds	r24, 0x0178
    35e2:	90 91 79 01 	lds	r25, 0x0179
    35e6:	0a 96       	adiw	r24, 0x0a	; 10
    35e8:	fc 01       	movw	r30, r24
    35ea:	25 91       	lpm	r18, Z+
    35ec:	34 91       	lpm	r19, Z+
    35ee:	f9 01       	movw	r30, r18
    35f0:	09 95       	icall

u08 pio_has_recv(void)
{
  return pio_dev_has_recv(cur_dev);
}
    35f2:	08 95       	ret

000035f4 <pio_status>:
    35f4:	20 91 78 01 	lds	r18, 0x0178
    35f8:	30 91 79 01 	lds	r19, 0x0179
    35fc:	24 5f       	subi	r18, 0xF4	; 244
    35fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3600:	f9 01       	movw	r30, r18
    3602:	45 91       	lpm	r20, Z+
    3604:	54 91       	lpm	r21, Z+
    3606:	fa 01       	movw	r30, r20
    3608:	09 95       	icall

u08 pio_status(u08 status_id, u08 *value)
{
  return pio_dev_status(cur_dev, status_id, value);
}
    360a:	08 95       	ret

0000360c <pio_control>:
    360c:	20 91 78 01 	lds	r18, 0x0178
    3610:	30 91 79 01 	lds	r19, 0x0179
    3614:	22 5f       	subi	r18, 0xF2	; 242
    3616:	3f 4f       	sbci	r19, 0xFF	; 255
    3618:	f9 01       	movw	r30, r18
    361a:	45 91       	lpm	r20, Z+
    361c:	54 91       	lpm	r21, Z+
    361e:	fa 01       	movw	r30, r20
    3620:	09 95       	icall

u08 pio_control(u08 control_id, u08 value)
{
  return pio_dev_control(cur_dev, control_id, value);
}
    3622:	08 95       	ret

00003624 <pio_exit>:
  return result;
}

void pio_exit(void)
{
  uart_send_time_stamp_spc();
    3624:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("pio: exit\r\n"));
    3628:	87 ed       	ldi	r24, 0xD7	; 215
    362a:	97 e0       	ldi	r25, 0x07	; 7
    362c:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    3630:	80 91 78 01 	lds	r24, 0x0178
    3634:	90 91 79 01 	lds	r25, 0x0179
    3638:	04 96       	adiw	r24, 0x04	; 4
    363a:	fc 01       	movw	r30, r24
    363c:	25 91       	lpm	r18, Z+
    363e:	34 91       	lpm	r19, Z+
    3640:	f9 01       	movw	r30, r18
    3642:	09 95       	icall
  pio_dev_exit(cur_dev);
}
    3644:	08 95       	ret

00003646 <pio_init>:
  // invalid device selected
  return 0;
}

u08 pio_init(const u08 mac[6],u08 flags)
{
    3646:	ef 92       	push	r14
    3648:	ff 92       	push	r15
    364a:	0f 93       	push	r16
    364c:	1f 93       	push	r17
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	0f 92       	push	r0
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	7c 01       	movw	r14, r24
    365a:	06 2f       	mov	r16, r22
  // get current device
  cur_dev = (pio_dev_ptr_t)pgm_read_word(devices + dev_id);
    365c:	80 91 77 01 	lds	r24, 0x0177
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	fc 01       	movw	r30, r24
    3668:	ed 51       	subi	r30, 0x1D	; 29
    366a:	f8 4f       	sbci	r31, 0xF8	; 248
    366c:	85 91       	lpm	r24, Z+
    366e:	94 91       	lpm	r25, Z+
    3670:	90 93 79 01 	sts	0x0179, r25
    3674:	80 93 78 01 	sts	0x0178, r24

  // show hello
  uart_send_time_stamp_spc();
    3678:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("pio: init: "));
    367c:	83 e0       	ldi	r24, 0x03	; 3
    367e:	98 e0       	ldi	r25, 0x08	; 8
    3680:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    3684:	e0 91 78 01 	lds	r30, 0x0178
    3688:	f0 91 79 01 	lds	r31, 0x0179
  PGM_P name = pio_dev_name(cur_dev);
  uart_send_pstring(name);
    368c:	85 91       	lpm	r24, Z+
    368e:	94 91       	lpm	r25, Z+
    3690:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    3694:	80 91 78 01 	lds	r24, 0x0178
    3698:	90 91 79 01 	lds	r25, 0x0179
    369c:	02 96       	adiw	r24, 0x02	; 2
    369e:	fc 01       	movw	r30, r24
    36a0:	25 91       	lpm	r18, Z+
    36a2:	34 91       	lpm	r19, Z+
    36a4:	c7 01       	movw	r24, r14
    36a6:	60 2f       	mov	r22, r16
    36a8:	f9 01       	movw	r30, r18
    36aa:	09 95       	icall
    36ac:	18 2f       	mov	r17, r24

  // call init
  u08 result = pio_dev_init(cur_dev, mac, flags);
  if(result == PIO_OK) {
    36ae:	88 23       	and	r24, r24
    36b0:	39 f5       	brne	.+78     	; 0x3700 <pio_init+0xba>
    uart_send_pstring(PSTR(": ok! mac="));
    36b2:	88 ef       	ldi	r24, 0xF8	; 248
    36b4:	97 e0       	ldi	r25, 0x07	; 7
    36b6:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    net_dump_mac(mac);
    36ba:	c7 01       	movw	r24, r14
    36bc:	0e 94 a8 14 	call	0x2950	; 0x2950 <net_dump_mac>
    uart_send_pstring(PSTR(" flags="));
    36c0:	80 ef       	ldi	r24, 0xF0	; 240
    36c2:	97 e0       	ldi	r25, 0x07	; 7
    36c4:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_hex_byte(flags);
    36c8:	80 2f       	mov	r24, r16
    36ca:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
    36ce:	80 91 78 01 	lds	r24, 0x0178
    36d2:	90 91 79 01 	lds	r25, 0x0179
    36d6:	0c 96       	adiw	r24, 0x0c	; 12
    36d8:	fc 01       	movw	r30, r24
    36da:	25 91       	lpm	r18, Z+
    36dc:	34 91       	lpm	r19, Z+
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	be 01       	movw	r22, r28
    36e2:	6f 5f       	subi	r22, 0xFF	; 255
    36e4:	7f 4f       	sbci	r23, 0xFF	; 255
    36e6:	f9 01       	movw	r30, r18
    36e8:	09 95       	icall
    36ea:	18 2f       	mov	r17, r24
    // show revision
    u08 rev;
    result = pio_dev_status(cur_dev, PIO_STATUS_VERSION, &rev);
    if(result == PIO_OK) {
    36ec:	88 23       	and	r24, r24
    36ee:	79 f4       	brne	.+30     	; 0x370e <pio_init+0xc8>
      uart_send_pstring(PSTR(" rev="));
    36f0:	8a ee       	ldi	r24, 0xEA	; 234
    36f2:	97 e0       	ldi	r25, 0x07	; 7
    36f4:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      uart_send_hex_byte(rev);
    36f8:	89 81       	ldd	r24, Y+1	; 0x01
    36fa:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
    36fe:	07 c0       	rjmp	.+14     	; 0x370e <pio_init+0xc8>
    }
  } else {
    uart_send_pstring(PSTR("ERROR:"));
    3700:	83 ee       	ldi	r24, 0xE3	; 227
    3702:	97 e0       	ldi	r25, 0x07	; 7
    3704:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    uart_send_hex_byte(result);
    3708:	81 2f       	mov	r24, r17
    370a:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
  }
  uart_send_crlf();
    370e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
  return result;
}
    3712:	81 2f       	mov	r24, r17
    3714:	0f 90       	pop	r0
    3716:	cf 91       	pop	r28
    3718:	df 91       	pop	r29
    371a:	1f 91       	pop	r17
    371c:	0f 91       	pop	r16
    371e:	ff 90       	pop	r15
    3720:	ef 90       	pop	r14
    3722:	08 95       	ret

00003724 <pio_test_loop>:
#include "main.h"
#include "stats.h"
#include "base/cmd.h"

u08 pio_test_loop(void)
{
    3724:	cf 92       	push	r12
    3726:	df 92       	push	r13
    3728:	ef 92       	push	r14
    372a:	ff 92       	push	r15
    372c:	1f 93       	push	r17
    372e:	df 93       	push	r29
    3730:	cf 93       	push	r28
    3732:	00 d0       	rcall	.+0      	; 0x3734 <pio_test_loop+0x10>
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
  u08 result = CMD_WORKER_IDLE;

  uart_send_time_stamp_spc();
    3738:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[PIO_TEST] on\r\n"));
    373c:	80 e2       	ldi	r24, 0x20	; 32
    373e:	98 e0       	ldi	r25, 0x08	; 8
    3740:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  pio_init(param.mac_addr, pio_util_get_init_flags());
    3744:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <pio_util_get_init_flags>
    3748:	68 2f       	mov	r22, r24
    374a:	8a ea       	ldi	r24, 0xAA	; 170
    374c:	91 e0       	ldi	r25, 0x01	; 1
    374e:	0e 94 23 1b 	call	0x3646	; 0x3646 <pio_init>
  stats_reset();
    3752:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <stats_reset>
    3756:	10 e0       	ldi	r17, 0x00	; 0
    }

    // incoming packet?
    if(pio_has_recv()) {
      u16 size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
    3758:	6e 01       	movw	r12, r28
    375a:	08 94       	sec
    375c:	c1 1c       	adc	r12, r1
    375e:	d1 1c       	adc	r13, r1
            // directly send back test packet
            pio_util_send_packet(size);
          }
        }
      } else {
        stats_get(STATS_ID_PIO_RX)->err++;
    3760:	0f 2e       	mov	r0, r31
    3762:	f5 ed       	ldi	r31, 0xD5	; 213
    3764:	ef 2e       	mov	r14, r31
    3766:	f7 e0       	ldi	r31, 0x07	; 7
    3768:	ff 2e       	mov	r15, r31
    376a:	f0 2d       	mov	r31, r0
    376c:	25 c0       	rjmp	.+74     	; 0x37b8 <pio_test_loop+0x94>
  pio_init(param.mac_addr, pio_util_get_init_flags());
  stats_reset();

  while(run_mode == RUN_MODE_PIO_TEST) {
    // handle commands
    result = cmd_worker();
    376e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <cmd_worker>
    3772:	18 2f       	mov	r17, r24
    if(result & CMD_WORKER_RESET) {
    3774:	81 fd       	sbrc	r24, 1
    3776:	24 c0       	rjmp	.+72     	; 0x37c0 <pio_test_loop+0x9c>
      break;
    }

    // incoming packet?
    if(pio_has_recv()) {
    3778:	0e 94 ef 1a 	call	0x35de	; 0x35de <pio_has_recv>
    377c:	88 23       	and	r24, r24
    377e:	e1 f0       	breq	.+56     	; 0x37b8 <pio_test_loop+0x94>
      u16 size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
    3780:	c6 01       	movw	r24, r12
    3782:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <pio_util_recv_packet>
    3786:	88 23       	and	r24, r24
    3788:	89 f4       	brne	.+34     	; 0x37ac <pio_test_loop+0x88>
        // handle ARP?
        if(!pio_util_handle_arp(size)) {
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	9a 81       	ldd	r25, Y+2	; 0x02
    378e:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <pio_util_handle_arp>
    3792:	88 23       	and	r24, r24
    3794:	89 f4       	brne	.+34     	; 0x37b8 <pio_test_loop+0x94>
          // is it a UDP test packet?
          if(pio_util_handle_udp_test(size)) {
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	9a 81       	ldd	r25, Y+2	; 0x02
    379a:	0e 94 04 1c 	call	0x3808	; 0x3808 <pio_util_handle_udp_test>
    379e:	88 23       	and	r24, r24
    37a0:	59 f0       	breq	.+22     	; 0x37b8 <pio_test_loop+0x94>
            // directly send back test packet
            pio_util_send_packet(size);
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	9a 81       	ldd	r25, Y+2	; 0x02
    37a6:	0e 94 83 1c 	call	0x3906	; 0x3906 <pio_util_send_packet>
    37aa:	06 c0       	rjmp	.+12     	; 0x37b8 <pio_test_loop+0x94>
          }
        }
      } else {
        stats_get(STATS_ID_PIO_RX)->err++;
    37ac:	f7 01       	movw	r30, r14
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	01 96       	adiw	r24, 0x01	; 1
    37b4:	91 83       	std	Z+1, r25	; 0x01
    37b6:	80 83       	st	Z, r24
  uart_send_pstring(PSTR("[PIO_TEST] on\r\n"));

  pio_init(param.mac_addr, pio_util_get_init_flags());
  stats_reset();

  while(run_mode == RUN_MODE_PIO_TEST) {
    37b8:	80 91 66 01 	lds	r24, 0x0166
    37bc:	83 30       	cpi	r24, 0x03	; 3
    37be:	b9 f2       	breq	.-82     	; 0x376e <pio_test_loop+0x4a>
        stats_get(STATS_ID_PIO_RX)->err++;
      }
    }
  }

  stats_dump(0,1);
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	61 e0       	ldi	r22, 0x01	; 1
    37c4:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <stats_dump>
  pio_exit();
    37c8:	0e 94 12 1b 	call	0x3624	; 0x3624 <pio_exit>

  uart_send_time_stamp_spc();
    37cc:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
  uart_send_pstring(PSTR("[PIO_TEST] off\r\n"));
    37d0:	8f e0       	ldi	r24, 0x0F	; 15
    37d2:	98 e0       	ldi	r25, 0x08	; 8
    37d4:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  return result;
}
    37d8:	81 2f       	mov	r24, r17
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	cf 91       	pop	r28
    37e0:	df 91       	pop	r29
    37e2:	1f 91       	pop	r17
    37e4:	ff 90       	pop	r15
    37e6:	ef 90       	pop	r14
    37e8:	df 90       	pop	r13
    37ea:	cf 90       	pop	r12
    37ec:	08 95       	ret

000037ee <pio_util_get_init_flags>:

u08 pio_util_get_init_flags()
{
  u08 flags = PIO_INIT_BROAD_CAST;

  if(param.flow_ctl) {
    37ee:	80 91 b0 01 	lds	r24, 0x01B0
    37f2:	88 23       	and	r24, r24
    37f4:	11 f0       	breq	.+4      	; 0x37fa <pio_util_get_init_flags+0xc>
    37f6:	9c e0       	ldi	r25, 0x0C	; 12
    37f8:	01 c0       	rjmp	.+2      	; 0x37fc <pio_util_get_init_flags+0xe>
    37fa:	94 e0       	ldi	r25, 0x04	; 4
    flags |= PIO_INIT_FLOW_CONTROL;
  }
  if(param.full_duplex) {
    37fc:	80 91 b1 01 	lds	r24, 0x01B1
    3800:	81 11       	cpse	r24, r1
    flags |= PIO_INIT_FULL_DUPLEX;
    3802:	91 60       	ori	r25, 0x01	; 1
  }

  return flags;
}
    3804:	89 2f       	mov	r24, r25
    3806:	08 95       	ret

00003808 <pio_util_handle_udp_test>:

  return 1;
}

u08 pio_util_handle_udp_test(u16 size)
{
    3808:	8f 92       	push	r8
    380a:	9f 92       	push	r9
    380c:	af 92       	push	r10
    380e:	bf 92       	push	r11
    3810:	cf 92       	push	r12
    3812:	df 92       	push	r13
    3814:	ef 92       	push	r14
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
  u08 *ip_buf = pkt_buf + ETH_HDR_SIZE;
  u08 *udp_buf = ip_buf + ip_get_hdr_length(ip_buf);
    3820:	0b ed       	ldi	r16, 0xDB	; 219
    3822:	11 e0       	ldi	r17, 0x01	; 1
    3824:	f8 01       	movw	r30, r16
    3826:	80 81       	ld	r24, Z
    3828:	88 0f       	add	r24, r24
    382a:	88 0f       	add	r24, r24
    382c:	8c 73       	andi	r24, 0x3C	; 60
    382e:	58 01       	movw	r10, r16
    3830:	a8 0e       	add	r10, r24
    3832:	b1 1c       	adc	r11, r1
    3834:	c5 01       	movw	r24, r10
    3836:	02 96       	adiw	r24, 0x02	; 2
    3838:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
    383c:	ec 01       	movw	r28, r24
  const u08 *dst_ip = ip_get_tgt_ip(ip_buf);
  u16 dst_port = udp_get_tgt_port(udp_buf);
  const u08 *data_ptr = udp_get_data_ptr(udp_buf);

  // for us?
  if(net_compare_ip(param.test_ip, dst_ip) && (dst_port == param.test_port)) {
    383e:	00 5f       	subi	r16, 0xF0	; 240
    3840:	1f 4f       	sbci	r17, 0xFF	; 255
    3842:	86 eb       	ldi	r24, 0xB6	; 182
    3844:	91 e0       	ldi	r25, 0x01	; 1
    3846:	b8 01       	movw	r22, r16
    3848:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <net_compare_ip>
    384c:	88 23       	and	r24, r24
    384e:	09 f4       	brne	.+2      	; 0x3852 <pio_util_handle_udp_test+0x4a>
    3850:	4c c0       	rjmp	.+152    	; 0x38ea <pio_util_handle_udp_test+0xe2>
    3852:	80 90 ba 01 	lds	r8, 0x01BA
    3856:	90 90 bb 01 	lds	r9, 0x01BB
    385a:	8c 16       	cp	r8, r28
    385c:	9d 06       	cpc	r9, r29
    385e:	09 f0       	breq	.+2      	; 0x3862 <pio_util_handle_udp_test+0x5a>
    3860:	44 c0       	rjmp	.+136    	; 0x38ea <pio_util_handle_udp_test+0xe2>
    if(global_verbose) {
    3862:	80 91 67 01 	lds	r24, 0x0167
    3866:	88 23       	and	r24, r24
    3868:	61 f0       	breq	.+24     	; 0x3882 <pio_util_handle_udp_test+0x7a>
      uart_send_time_stamp_spc();
    386a:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
      uart_send_pstring(PSTR("UDP: "));
    386e:	80 e3       	ldi	r24, 0x30	; 48
    3870:	98 e0       	ldi	r25, 0x08	; 8
    3872:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      uart_send_hex_byte(*data_ptr);
    3876:	f5 01       	movw	r30, r10
    3878:	80 85       	ldd	r24, Z+8	; 0x08
    387a:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
      uart_send_crlf();
    387e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
    }

    // send UDP packet back again
    // flip IP/UDP
    const u08 *src_ip = ip_get_src_ip(ip_buf);
    net_copy_ip(src_ip, ip_buf + 16); // set tgt ip
    3882:	07 ee       	ldi	r16, 0xE7	; 231
    3884:	11 e0       	ldi	r17, 0x01	; 1
    3886:	b8 01       	movw	r22, r16
    3888:	6c 5f       	subi	r22, 0xFC	; 252
    388a:	7f 4f       	sbci	r23, 0xFF	; 255
    388c:	c8 01       	movw	r24, r16
    388e:	0e 94 81 13 	call	0x2702	; 0x2702 <net_copy_ip>
    net_copy_ip(param.test_ip, ip_buf + 12); // set src ip
    3892:	0f 2e       	mov	r0, r31
    3894:	f6 eb       	ldi	r31, 0xB6	; 182
    3896:	cf 2e       	mov	r12, r31
    3898:	f1 e0       	ldi	r31, 0x01	; 1
    389a:	df 2e       	mov	r13, r31
    389c:	f0 2d       	mov	r31, r0
    389e:	c6 01       	movw	r24, r12
    38a0:	b8 01       	movw	r22, r16
    38a2:	0e 94 81 13 	call	0x2702	; 0x2702 <net_copy_ip>
#define UDP_LENGTH_OFF    4
#define UDP_CHECKSUM_OFF  6
#define UDP_DATA_OFF      8

inline const u08 *udp_get_data_ptr(const u08 *udp_buf) { return udp_buf + UDP_DATA_OFF; }
inline u16  udp_get_src_port(const u08 *udp_buf) { return net_get_word(udp_buf + UDP_SRC_PORT_OFF); }
    38a6:	c5 01       	movw	r24, r10
    38a8:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
    38ac:	7c 01       	movw	r14, r24
    u16 src_port = udp_get_src_port(udp_buf);
    net_put_word(udp_buf + UDP_SRC_PORT_OFF, dst_port);
    38ae:	c5 01       	movw	r24, r10
    38b0:	b4 01       	movw	r22, r8
    38b2:	0e 94 9c 13 	call	0x2738	; 0x2738 <net_put_word>
    net_put_word(udp_buf + UDP_TGT_PORT_OFF, src_port);
    38b6:	c5 01       	movw	r24, r10
    38b8:	02 96       	adiw	r24, 0x02	; 2
    38ba:	b7 01       	movw	r22, r14
    38bc:	0e 94 9c 13 	call	0x2738	; 0x2738 <net_put_word>

    // flip eth
    net_copy_mac(pkt_buf + ETH_OFF_SRC_MAC, pkt_buf + ETH_OFF_TGT_MAC);
    38c0:	0f 2e       	mov	r0, r31
    38c2:	fc ee       	ldi	r31, 0xEC	; 236
    38c4:	ef 2e       	mov	r14, r31
    38c6:	ff ef       	ldi	r31, 0xFF	; 255
    38c8:	ff 2e       	mov	r15, r31
    38ca:	f0 2d       	mov	r31, r0
    38cc:	e0 0e       	add	r14, r16
    38ce:	f1 1e       	adc	r15, r17
    38d0:	0a 51       	subi	r16, 0x1A	; 26
    38d2:	10 40       	sbci	r17, 0x00	; 0
    38d4:	c7 01       	movw	r24, r14
    38d6:	b8 01       	movw	r22, r16
    38d8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>
    net_copy_mac(param.mac_addr, pkt_buf + ETH_OFF_SRC_MAC);
    38dc:	c6 01       	movw	r24, r12
    38de:	0c 97       	sbiw	r24, 0x0c	; 12
    38e0:	b7 01       	movw	r22, r14
    38e2:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	01 c0       	rjmp	.+2      	; 0x38ec <pio_util_handle_udp_test+0xe4>

    return 1;
    38ea:	80 e0       	ldi	r24, 0x00	; 0
 } else {
 	return 0;
 }
}
    38ec:	df 91       	pop	r29
    38ee:	cf 91       	pop	r28
    38f0:	1f 91       	pop	r17
    38f2:	0f 91       	pop	r16
    38f4:	ff 90       	pop	r15
    38f6:	ef 90       	pop	r14
    38f8:	df 90       	pop	r13
    38fa:	cf 90       	pop	r12
    38fc:	bf 90       	pop	r11
    38fe:	af 90       	pop	r10
    3900:	9f 90       	pop	r9
    3902:	8f 90       	pop	r8
    3904:	08 95       	ret

00003906 <pio_util_send_packet>:
  }
  return result;
}

u08 pio_util_send_packet(u16 size)
{
    3906:	ff 92       	push	r15
    3908:	0f 93       	push	r16
    390a:	1f 93       	push	r17
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
    3910:	ec 01       	movw	r28, r24
extern void timer_delay_100us(u16 timeout);

// ----- hardware timer -----

// 16 bit hw timer with 4us resolution
inline void timer_hw_reset(void) { TCNT1 = 0; }
    3912:	04 e8       	ldi	r16, 0x84	; 132
    3914:	10 e0       	ldi	r17, 0x00	; 0
    3916:	f8 01       	movw	r30, r16
    3918:	11 82       	std	Z+1, r1	; 0x01
    391a:	10 82       	st	Z, r1
  timer_hw_reset();
  u08 result = pio_send(pkt_buf, size);
    391c:	8d ec       	ldi	r24, 0xCD	; 205
    391e:	91 e0       	ldi	r25, 0x01	; 1
    3920:	be 01       	movw	r22, r28
    3922:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <pio_send>
    3926:	f8 2e       	mov	r15, r24
inline u16  timer_hw_get(void) { return TCNT1; }
    3928:	f8 01       	movw	r30, r16
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
  u16 delta = timer_hw_get();

  u16 rate = timer_hw_calc_rate_kbs(size, delta);
    392e:	ce 01       	movw	r24, r28
    3930:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <timer_hw_calc_rate_kbs>
    3934:	8c 01       	movw	r16, r24
  if(result == PIO_OK) {
    3936:	ff 20       	and	r15, r15
    3938:	31 f4       	brne	.+12     	; 0x3946 <pio_util_send_packet+0x40>
    stats_update_ok(STATS_ID_PIO_TX, size, rate);
    393a:	83 e0       	ldi	r24, 0x03	; 3
    393c:	be 01       	movw	r22, r28
    393e:	a8 01       	movw	r20, r16
    3940:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <stats_update_ok>
    3944:	07 c0       	rjmp	.+14     	; 0x3954 <pio_util_send_packet+0x4e>
  } else {
    stats_get(STATS_ID_PIO_TX)->err++;
    3946:	e1 ee       	ldi	r30, 0xE1	; 225
    3948:	f7 e0       	ldi	r31, 0x07	; 7
    394a:	80 81       	ld	r24, Z
    394c:	91 81       	ldd	r25, Z+1	; 0x01
    394e:	01 96       	adiw	r24, 0x01	; 1
    3950:	91 83       	std	Z+1, r25	; 0x01
    3952:	80 83       	st	Z, r24
  }

  if(global_verbose) {
    3954:	80 91 67 01 	lds	r24, 0x0167
    3958:	88 23       	and	r24, r24
    395a:	11 f1       	breq	.+68     	; 0x39a0 <pio_util_send_packet+0x9a>
    uart_send_time_stamp_spc();
    395c:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
    uart_send_pstring(PSTR("pio tx: "));
    3960:	8e e5       	ldi	r24, 0x5E	; 94
    3962:	98 e0       	ldi	r25, 0x08	; 8
    3964:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    if(result == PIO_OK) {
    3968:	ff 20       	and	r15, r15
    396a:	89 f4       	brne	.+34     	; 0x398e <pio_util_send_packet+0x88>
      // speed
      uart_send_pstring(PSTR("v="));
    396c:	8b e5       	ldi	r24, 0x5B	; 91
    396e:	98 e0       	ldi	r25, 0x08	; 8
    3970:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      uart_send_rate_kbs(rate);
    3974:	c8 01       	movw	r24, r16
    3976:	0e 94 4c 08 	call	0x1098	; 0x1098 <uart_send_rate_kbs>

      // size
      uart_send_pstring(PSTR(" n="));
    397a:	87 e5       	ldi	r24, 0x57	; 87
    397c:	98 e0       	ldi	r25, 0x08	; 8
    397e:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      uart_send_hex_word(size);
    3982:	ce 01       	movw	r24, r28
    3984:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
      uart_send_crlf();
    3988:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
    398c:	09 c0       	rjmp	.+18     	; 0x39a0 <pio_util_send_packet+0x9a>
    } else {
      uart_send_pstring(PSTR("ERROR="));
    398e:	80 e5       	ldi	r24, 0x50	; 80
    3990:	98 e0       	ldi	r25, 0x08	; 8
    3992:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      uart_send_hex_byte(result);
    3996:	8f 2d       	mov	r24, r15
    3998:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
      uart_send_crlf();
    399c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
    }
  }
  return result;
}
    39a0:	8f 2d       	mov	r24, r15
    39a2:	df 91       	pop	r29
    39a4:	cf 91       	pop	r28
    39a6:	1f 91       	pop	r17
    39a8:	0f 91       	pop	r16
    39aa:	ff 90       	pop	r15
    39ac:	08 95       	ret

000039ae <pio_util_handle_arp>:

u08 pio_util_handle_arp(u16 size)
{
    39ae:	ef 92       	push	r14
    39b0:	ff 92       	push	r15
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
    39ba:	ec 01       	movw	r28, r24
    39bc:	89 ed       	ldi	r24, 0xD9	; 217
    39be:	91 e0       	ldi	r25, 0x01	; 1
    39c0:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
  u16 type = eth_get_pkt_type(pkt_buf);
  if(type != ETH_TYPE_ARP) {
    39c4:	86 50       	subi	r24, 0x06	; 6
    39c6:	98 40       	sbci	r25, 0x08	; 8
    39c8:	09 f0       	breq	.+2      	; 0x39cc <pio_util_handle_arp+0x1e>
    39ca:	58 c0       	rjmp	.+176    	; 0x3a7c <pio_util_handle_arp+0xce>
    return 0;
  }
  if(size <= ETH_HDR_SIZE) {
    39cc:	cf 30       	cpi	r28, 0x0F	; 15
    39ce:	d1 05       	cpc	r29, r1
    39d0:	08 f4       	brcc	.+2      	; 0x39d4 <pio_util_handle_arp+0x26>
    39d2:	54 c0       	rjmp	.+168    	; 0x3a7c <pio_util_handle_arp+0xce>
  // payload buf/size
  u08 *pl_buf = pkt_buf + ETH_HDR_SIZE;
  u16 pl_size = size - ETH_HDR_SIZE;

  // is an ARP request
  if(arp_is_ipv4(pl_buf, pl_size) && (arp_get_op(pl_buf) == ARP_REQUEST)) {
    39d4:	be 01       	movw	r22, r28
    39d6:	6e 50       	subi	r22, 0x0E	; 14
    39d8:	70 40       	sbci	r23, 0x00	; 0
    39da:	8b ed       	ldi	r24, 0xDB	; 219
    39dc:	91 e0       	ldi	r25, 0x01	; 1
    39de:	0e 94 49 13 	call	0x2692	; 0x2692 <arp_is_ipv4>
    39e2:	88 23       	and	r24, r24
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <pio_util_handle_arp+0x3a>
    39e6:	4c c0       	rjmp	.+152    	; 0x3a80 <pio_util_handle_arp+0xd2>
    39e8:	81 ee       	ldi	r24, 0xE1	; 225
    39ea:	91 e0       	ldi	r25, 0x01	; 1
    39ec:	0e 94 92 13 	call	0x2724	; 0x2724 <net_get_word>
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	09 f0       	breq	.+2      	; 0x39f6 <pio_util_handle_arp+0x48>
    39f4:	45 c0       	rjmp	.+138    	; 0x3a80 <pio_util_handle_arp+0xd2>
    // is our IP?
    const u08 *tgt_ip = arp_get_tgt_ip(pl_buf);

    if(global_verbose) {
    39f6:	80 91 67 01 	lds	r24, 0x0167
    39fa:	88 23       	and	r24, r24
    39fc:	61 f0       	breq	.+24     	; 0x3a16 <pio_util_handle_arp+0x68>
      uart_send_time_stamp_spc();
    39fe:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
      uart_send_pstring(PSTR("ARP REQ: IP="));
    3a02:	83 e4       	ldi	r24, 0x43	; 67
    3a04:	98 e0       	ldi	r25, 0x08	; 8
    3a06:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      net_dump_ip(tgt_ip);
    3a0a:	83 ef       	ldi	r24, 0xF3	; 243
    3a0c:	91 e0       	ldi	r25, 0x01	; 1
    3a0e:	0e 94 0a 14 	call	0x2814	; 0x2814 <net_dump_ip>
      uart_send_crlf();
    3a12:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
    }

    if(net_compare_ip(tgt_ip, param.test_ip)) {
    3a16:	83 ef       	ldi	r24, 0xF3	; 243
    3a18:	91 e0       	ldi	r25, 0x01	; 1
    3a1a:	66 eb       	ldi	r22, 0xB6	; 182
    3a1c:	71 e0       	ldi	r23, 0x01	; 1
    3a1e:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <net_compare_ip>
    3a22:	88 23       	and	r24, r24
    3a24:	69 f1       	breq	.+90     	; 0x3a80 <pio_util_handle_arp+0xd2>
      arp_make_reply(pl_buf, param.mac_addr, param.test_ip);
    3a26:	0b ed       	ldi	r16, 0xDB	; 219
    3a28:	11 e0       	ldi	r17, 0x01	; 1
    3a2a:	0f 2e       	mov	r0, r31
    3a2c:	fa ea       	ldi	r31, 0xAA	; 170
    3a2e:	ef 2e       	mov	r14, r31
    3a30:	f1 e0       	ldi	r31, 0x01	; 1
    3a32:	ff 2e       	mov	r15, r31
    3a34:	f0 2d       	mov	r31, r0
    3a36:	a7 01       	movw	r20, r14
    3a38:	44 5f       	subi	r20, 0xF4	; 244
    3a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a3c:	c8 01       	movw	r24, r16
    3a3e:	b7 01       	movw	r22, r14
    3a40:	0e 94 0b 13 	call	0x2616	; 0x2616 <arp_make_reply>
inline u08  eth_is_ipv4_pkt(const u08 *pkt) { return eth_get_pkt_type(pkt) == ETH_TYPE_IPV4; }
inline void eth_set_pkt_type(u08 *pkt, u16 type) { net_put_word(pkt + ETH_OFF_TYPE, type); }

inline void eth_make_bcast(u08 *pkt, const u08 *my_mac)
{
	net_copy_mac(net_bcast_mac, pkt + ETH_OFF_TGT_MAC);
    3a44:	0e 50       	subi	r16, 0x0E	; 14
    3a46:	10 40       	sbci	r17, 0x00	; 0
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	91 e0       	ldi	r25, 0x01	; 1
    3a4c:	b8 01       	movw	r22, r16
    3a4e:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>
	net_copy_mac(my_mac, pkt + ETH_OFF_SRC_MAC);
    3a52:	0a 5f       	subi	r16, 0xFA	; 250
    3a54:	1f 4f       	sbci	r17, 0xFF	; 255
    3a56:	c7 01       	movw	r24, r14
    3a58:	b8 01       	movw	r22, r16
    3a5a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <net_copy_mac>
      eth_make_bcast(pkt_buf, param.mac_addr);
      pio_util_send_packet(size);
    3a5e:	ce 01       	movw	r24, r28
    3a60:	0e 94 83 1c 	call	0x3906	; 0x3906 <pio_util_send_packet>

      if(global_verbose) {
    3a64:	80 91 67 01 	lds	r24, 0x0167
    3a68:	88 23       	and	r24, r24
    3a6a:	51 f0       	breq	.+20     	; 0x3a80 <pio_util_handle_arp+0xd2>
        uart_send_time_stamp_spc();
    3a6c:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
        uart_send_pstring(PSTR("ARP REPLY!\r\n"));
    3a70:	86 e3       	ldi	r24, 0x36	; 54
    3a72:	98 e0       	ldi	r25, 0x08	; 8
    3a74:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	03 c0       	rjmp	.+6      	; 0x3a82 <pio_util_handle_arp+0xd4>
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	01 c0       	rjmp	.+2      	; 0x3a82 <pio_util_handle_arp+0xd4>
    3a80:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
  }

  return 1;
}
    3a82:	df 91       	pop	r29
    3a84:	cf 91       	pop	r28
    3a86:	1f 91       	pop	r17
    3a88:	0f 91       	pop	r16
    3a8a:	ff 90       	pop	r15
    3a8c:	ef 90       	pop	r14
    3a8e:	08 95       	ret

00003a90 <pio_util_recv_packet>:

  return flags;
}

u08 pio_util_recv_packet(u16 *size)
{
    3a90:	df 92       	push	r13
    3a92:	ef 92       	push	r14
    3a94:	ff 92       	push	r15
    3a96:	0f 93       	push	r16
    3a98:	1f 93       	push	r17
    3a9a:	cf 93       	push	r28
    3a9c:	df 93       	push	r29
    3a9e:	7c 01       	movw	r14, r24
extern void timer_delay_100us(u16 timeout);

// ----- hardware timer -----

// 16 bit hw timer with 4us resolution
inline void timer_hw_reset(void) { TCNT1 = 0; }
    3aa0:	04 e8       	ldi	r16, 0x84	; 132
    3aa2:	10 e0       	ldi	r17, 0x00	; 0
    3aa4:	f8 01       	movw	r30, r16
    3aa6:	11 82       	std	Z+1, r1	; 0x01
    3aa8:	10 82       	st	Z, r1
  // measure packet receive
  timer_hw_reset();
  u08 result = pio_recv(pkt_buf, PKT_BUF_SIZE, size);
    3aaa:	8d ec       	ldi	r24, 0xCD	; 205
    3aac:	91 e0       	ldi	r25, 0x01	; 1
    3aae:	6a ee       	ldi	r22, 0xEA	; 234
    3ab0:	75 e0       	ldi	r23, 0x05	; 5
    3ab2:	a7 01       	movw	r20, r14
    3ab4:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <pio_recv>
    3ab8:	d8 2e       	mov	r13, r24
inline u16  timer_hw_get(void) { return TCNT1; }
    3aba:	f8 01       	movw	r30, r16
    3abc:	60 81       	ld	r22, Z
    3abe:	71 81       	ldd	r23, Z+1	; 0x01
  u16 delta = timer_hw_get();

  u16 s = *size;
    3ac0:	f7 01       	movw	r30, r14
    3ac2:	e0 80       	ld	r14, Z
    3ac4:	f1 80       	ldd	r15, Z+1	; 0x01
  u16 rate = timer_hw_calc_rate_kbs(s, delta);
    3ac6:	c7 01       	movw	r24, r14
    3ac8:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <timer_hw_calc_rate_kbs>
    3acc:	ec 01       	movw	r28, r24
  if(result == PIO_OK) {
    3ace:	dd 20       	and	r13, r13
    3ad0:	31 f4       	brne	.+12     	; 0x3ade <pio_util_recv_packet+0x4e>
    stats_update_ok(STATS_ID_PIO_RX, s, rate);
    3ad2:	82 e0       	ldi	r24, 0x02	; 2
    3ad4:	b7 01       	movw	r22, r14
    3ad6:	ae 01       	movw	r20, r28
    3ad8:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <stats_update_ok>
    3adc:	07 c0       	rjmp	.+14     	; 0x3aec <pio_util_recv_packet+0x5c>
  } else {
    stats_get(STATS_ID_PIO_RX)->err++;
    3ade:	e5 ed       	ldi	r30, 0xD5	; 213
    3ae0:	f7 e0       	ldi	r31, 0x07	; 7
    3ae2:	80 81       	ld	r24, Z
    3ae4:	91 81       	ldd	r25, Z+1	; 0x01
    3ae6:	01 96       	adiw	r24, 0x01	; 1
    3ae8:	91 83       	std	Z+1, r25	; 0x01
    3aea:	80 83       	st	Z, r24
  }

  if(global_verbose) {
    3aec:	80 91 67 01 	lds	r24, 0x0167
    3af0:	88 23       	and	r24, r24
    3af2:	11 f1       	breq	.+68     	; 0x3b38 <pio_util_recv_packet+0xa8>
    uart_send_time_stamp_spc();
    3af4:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_send_time_stamp_spc>
    uart_send_pstring(PSTR("pio rx: "));
    3af8:	85 e7       	ldi	r24, 0x75	; 117
    3afa:	98 e0       	ldi	r25, 0x08	; 8
    3afc:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
    if(result == PIO_OK) {
    3b00:	dd 20       	and	r13, r13
    3b02:	89 f4       	brne	.+34     	; 0x3b26 <pio_util_recv_packet+0x96>
      // speed
      uart_send_pstring(PSTR("v="));
    3b04:	82 e7       	ldi	r24, 0x72	; 114
    3b06:	98 e0       	ldi	r25, 0x08	; 8
    3b08:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      uart_send_rate_kbs(rate);
    3b0c:	ce 01       	movw	r24, r28
    3b0e:	0e 94 4c 08 	call	0x1098	; 0x1098 <uart_send_rate_kbs>

      // size
      uart_send_pstring(PSTR(" n="));
    3b12:	8e e6       	ldi	r24, 0x6E	; 110
    3b14:	98 e0       	ldi	r25, 0x08	; 8
    3b16:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      uart_send_hex_word(s);
    3b1a:	c7 01       	movw	r24, r14
    3b1c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
      uart_send_crlf();
    3b20:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
    3b24:	09 c0       	rjmp	.+18     	; 0x3b38 <pio_util_recv_packet+0xa8>
    } else {
      uart_send_pstring(PSTR("ERROR="));
    3b26:	87 e6       	ldi	r24, 0x67	; 103
    3b28:	98 e0       	ldi	r25, 0x08	; 8
    3b2a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
      uart_send_hex_byte(result);
    3b2e:	8d 2d       	mov	r24, r13
    3b30:	0e 94 ab 07 	call	0xf56	; 0xf56 <uart_send_hex_byte>
      uart_send_crlf();
    3b34:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
    }
  }
  return result;
}
    3b38:	8d 2d       	mov	r24, r13
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	1f 91       	pop	r17
    3b40:	0f 91       	pop	r16
    3b42:	ff 90       	pop	r15
    3b44:	ef 90       	pop	r14
    3b46:	df 90       	pop	r13
    3b48:	08 95       	ret

00003b4a <stats_reset>:
#include "base/uart.h"

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
    3b4a:	e7 eb       	ldi	r30, 0xB7	; 183
    3b4c:	f7 e0       	ldi	r31, 0x07	; 7
  for(u08 i=0;i<STATS_ID_NUM;i++) {
    3b4e:	27 ee       	ldi	r18, 0xE7	; 231
    3b50:	37 e0       	ldi	r19, 0x07	; 7
    stats_t *s = &stats[i];
    s->bytes = 0;
    3b52:	10 82       	st	Z, r1
    3b54:	11 82       	std	Z+1, r1	; 0x01
    3b56:	12 82       	std	Z+2, r1	; 0x02
    3b58:	13 82       	std	Z+3, r1	; 0x03
    s->cnt = 0;
    3b5a:	15 82       	std	Z+5, r1	; 0x05
    3b5c:	14 82       	std	Z+4, r1	; 0x04
    s->err = 0;
    3b5e:	17 82       	std	Z+7, r1	; 0x07
    3b60:	16 82       	std	Z+6, r1	; 0x06
    s->drop = 0;
    3b62:	11 86       	std	Z+9, r1	; 0x09
    3b64:	10 86       	std	Z+8, r1	; 0x08
    s->max_rate = 0;
    3b66:	13 86       	std	Z+11, r1	; 0x0b
    3b68:	12 86       	std	Z+10, r1	; 0x0a
    3b6a:	3c 96       	adiw	r30, 0x0c	; 12

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
  for(u08 i=0;i<STATS_ID_NUM;i++) {
    3b6c:	e2 17       	cp	r30, r18
    3b6e:	f3 07       	cpc	r31, r19
    3b70:	81 f7       	brne	.-32     	; 0x3b52 <stats_reset+0x8>
    s->cnt = 0;
    s->err = 0;
    s->drop = 0;
    s->max_rate = 0;
  }
}
    3b72:	08 95       	ret

00003b74 <stats_update_ok>:

void stats_update_ok(u08 id, u16 size, u16 rate)
{
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17
  stats_t *s = &stats[id];
    3b78:	9c e0       	ldi	r25, 0x0C	; 12
    3b7a:	89 9f       	mul	r24, r25
    3b7c:	c0 01       	movw	r24, r0
    3b7e:	11 24       	eor	r1, r1
    3b80:	fc 01       	movw	r30, r24
    3b82:	e9 54       	subi	r30, 0x49	; 73
    3b84:	f8 4f       	sbci	r31, 0xF8	; 248
  s->cnt++;
    3b86:	84 81       	ldd	r24, Z+4	; 0x04
    3b88:	95 81       	ldd	r25, Z+5	; 0x05
    3b8a:	01 96       	adiw	r24, 0x01	; 1
    3b8c:	95 83       	std	Z+5, r25	; 0x05
    3b8e:	84 83       	std	Z+4, r24	; 0x04
  s->bytes += size;
    3b90:	8b 01       	movw	r16, r22
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	80 81       	ld	r24, Z
    3b98:	91 81       	ldd	r25, Z+1	; 0x01
    3b9a:	a2 81       	ldd	r26, Z+2	; 0x02
    3b9c:	b3 81       	ldd	r27, Z+3	; 0x03
    3b9e:	80 0f       	add	r24, r16
    3ba0:	91 1f       	adc	r25, r17
    3ba2:	a2 1f       	adc	r26, r18
    3ba4:	b3 1f       	adc	r27, r19
    3ba6:	80 83       	st	Z, r24
    3ba8:	91 83       	std	Z+1, r25	; 0x01
    3baa:	a2 83       	std	Z+2, r26	; 0x02
    3bac:	b3 83       	std	Z+3, r27	; 0x03
  if(rate > s->max_rate) {
    3bae:	82 85       	ldd	r24, Z+10	; 0x0a
    3bb0:	93 85       	ldd	r25, Z+11	; 0x0b
    3bb2:	84 17       	cp	r24, r20
    3bb4:	95 07       	cpc	r25, r21
    3bb6:	10 f4       	brcc	.+4      	; 0x3bbc <stats_update_ok+0x48>
    s->max_rate = rate;
    3bb8:	53 87       	std	Z+11, r21	; 0x0b
    3bba:	42 87       	std	Z+10, r20	; 0x0a
  }
}
    3bbc:	1f 91       	pop	r17
    3bbe:	0f 91       	pop	r16
    3bc0:	08 95       	ret

00003bc2 <dump_header>:
  uart_send_crlf();
}

static void dump_header(void)
{
  uart_send_pstring(PSTR("cnt  bytes    err  drop rate\r\n"));
    3bc2:	8e e7       	ldi	r24, 0x7E	; 126
    3bc4:	98 e0       	ldi	r25, 0x08	; 8
    3bc6:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>
}
    3bca:	08 95       	ret

00003bcc <dump_line>:
    s->max_rate = rate;
  }
}

static void dump_line(u08 id)
{
    3bcc:	ff 92       	push	r15
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
    3bd2:	f8 2e       	mov	r15, r24
  const stats_t *s = &stats[id];
    3bd4:	0c e0       	ldi	r16, 0x0C	; 12
    3bd6:	80 9f       	mul	r24, r16
    3bd8:	80 01       	movw	r16, r0
    3bda:	11 24       	eor	r1, r1
    3bdc:	09 54       	subi	r16, 0x49	; 73
    3bde:	18 4f       	sbci	r17, 0xF8	; 248

  uart_send_hex_word(s->cnt);
    3be0:	f8 01       	movw	r30, r16
    3be2:	84 81       	ldd	r24, Z+4	; 0x04
    3be4:	95 81       	ldd	r25, Z+5	; 0x05
    3be6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
  uart_send_spc();
    3bea:	0e 94 74 07 	call	0xee8	; 0xee8 <uart_send_spc>
  uart_send_hex_dword(s->bytes);
    3bee:	f8 01       	movw	r30, r16
    3bf0:	60 81       	ld	r22, Z
    3bf2:	71 81       	ldd	r23, Z+1	; 0x01
    3bf4:	82 81       	ldd	r24, Z+2	; 0x02
    3bf6:	93 81       	ldd	r25, Z+3	; 0x03
    3bf8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <uart_send_hex_dword>
  uart_send_spc();
    3bfc:	0e 94 74 07 	call	0xee8	; 0xee8 <uart_send_spc>
  uart_send_hex_word(s->err);
    3c00:	f8 01       	movw	r30, r16
    3c02:	86 81       	ldd	r24, Z+6	; 0x06
    3c04:	97 81       	ldd	r25, Z+7	; 0x07
    3c06:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
  uart_send_spc();
    3c0a:	0e 94 74 07 	call	0xee8	; 0xee8 <uart_send_spc>
  uart_send_hex_word(s->drop);
    3c0e:	f8 01       	movw	r30, r16
    3c10:	80 85       	ldd	r24, Z+8	; 0x08
    3c12:	91 85       	ldd	r25, Z+9	; 0x09
    3c14:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_send_hex_word>
  uart_send_spc();
    3c18:	0e 94 74 07 	call	0xee8	; 0xee8 <uart_send_spc>
  uart_send_rate_kbs(s->max_rate);
    3c1c:	f8 01       	movw	r30, r16
    3c1e:	82 85       	ldd	r24, Z+10	; 0x0a
    3c20:	93 85       	ldd	r25, Z+11	; 0x0b
    3c22:	0e 94 4c 08 	call	0x1098	; 0x1098 <uart_send_rate_kbs>
  uart_send_spc();
    3c26:	0e 94 74 07 	call	0xee8	; 0xee8 <uart_send_spc>

  PGM_P str;
  switch(id) {
    3c2a:	f1 e0       	ldi	r31, 0x01	; 1
    3c2c:	ff 16       	cp	r15, r31
    3c2e:	79 f0       	breq	.+30     	; 0x3c4e <dump_line+0x82>
    3c30:	ff 16       	cp	r15, r31
    3c32:	50 f0       	brcs	.+20     	; 0x3c48 <dump_line+0x7c>
    3c34:	82 e0       	ldi	r24, 0x02	; 2
    3c36:	f8 16       	cp	r15, r24
    3c38:	21 f0       	breq	.+8      	; 0x3c42 <dump_line+0x76>
    3c3a:	e3 e0       	ldi	r30, 0x03	; 3
    3c3c:	fe 16       	cp	r15, r30
    3c3e:	51 f4       	brne	.+20     	; 0x3c54 <dump_line+0x88>
    3c40:	06 c0       	rjmp	.+12     	; 0x3c4e <dump_line+0x82>
    case STATS_ID_PB_RX:
      str = PSTR("rx plipbox");
      break;
    case STATS_ID_PIO_RX:
      str = PSTR("rx pio");
    3c42:	82 ea       	ldi	r24, 0xA2	; 162
    3c44:	98 e0       	ldi	r25, 0x08	; 8
    3c46:	08 c0       	rjmp	.+16     	; 0x3c58 <dump_line+0x8c>
  uart_send_spc();

  PGM_P str;
  switch(id) {
    case STATS_ID_PB_RX:
      str = PSTR("rx plipbox");
    3c48:	89 ea       	ldi	r24, 0xA9	; 169
    3c4a:	98 e0       	ldi	r25, 0x08	; 8
    3c4c:	05 c0       	rjmp	.+10     	; 0x3c58 <dump_line+0x8c>
    case STATS_ID_PIO_RX:
      str = PSTR("rx pio");
      break;
    case STATS_ID_PB_TX:
    case STATS_ID_PIO_TX:
      str = PSTR("tx");
    3c4e:	8f e9       	ldi	r24, 0x9F	; 159
    3c50:	98 e0       	ldi	r25, 0x08	; 8
    3c52:	02 c0       	rjmp	.+4      	; 0x3c58 <dump_line+0x8c>
      break;
    default:
      str = PSTR("?");
    3c54:	8d e9       	ldi	r24, 0x9D	; 157
    3c56:	98 e0       	ldi	r25, 0x08	; 8
      break;
  }
  uart_send_pstring(str);
    3c58:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_pstring>

  uart_send_crlf();
    3c5c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_send_crlf>
}
    3c60:	1f 91       	pop	r17
    3c62:	0f 91       	pop	r16
    3c64:	ff 90       	pop	r15
    3c66:	08 95       	ret

00003c68 <stats_dump>:
    dump_line(i);
  }
}

void stats_dump(u08 pb, u08 pio)
{
    3c68:	0f 93       	push	r16
    3c6a:	1f 93       	push	r17
    3c6c:	18 2f       	mov	r17, r24
    3c6e:	06 2f       	mov	r16, r22
  dump_header();
    3c70:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <dump_header>
  if(pb) {
    3c74:	11 23       	and	r17, r17
    3c76:	31 f0       	breq	.+12     	; 0x3c84 <stats_dump+0x1c>
    dump_line(STATS_ID_PB_RX);
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <dump_line>
    dump_line(STATS_ID_PB_TX);
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <dump_line>
  }
  if(pio) {
    3c84:	00 23       	and	r16, r16
    3c86:	31 f0       	breq	.+12     	; 0x3c94 <stats_dump+0x2c>
    dump_line(STATS_ID_PIO_RX);
    3c88:	82 e0       	ldi	r24, 0x02	; 2
    3c8a:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <dump_line>
    dump_line(STATS_ID_PIO_TX);
    3c8e:	83 e0       	ldi	r24, 0x03	; 3
    3c90:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <dump_line>
  }
}
    3c94:	1f 91       	pop	r17
    3c96:	0f 91       	pop	r16
    3c98:	08 95       	ret

00003c9a <stats_dump_all>:
{
  uart_send_pstring(PSTR("cnt  bytes    err  drop rate\r\n"));
}

void stats_dump_all(void)
{
    3c9a:	1f 93       	push	r17
  dump_header();
    3c9c:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <dump_header>
    3ca0:	10 e0       	ldi	r17, 0x00	; 0
  for(u08 i=0;i<STATS_ID_NUM;i++) {
    dump_line(i);
    3ca2:	81 2f       	mov	r24, r17
    3ca4:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <dump_line>
}

void stats_dump_all(void)
{
  dump_header();
  for(u08 i=0;i<STATS_ID_NUM;i++) {
    3ca8:	1f 5f       	subi	r17, 0xFF	; 255
    3caa:	14 30       	cpi	r17, 0x04	; 4
    3cac:	d1 f7       	brne	.-12     	; 0x3ca2 <stats_dump_all+0x8>
    dump_line(i);
  }
}
    3cae:	1f 91       	pop	r17
    3cb0:	08 95       	ret

00003cb2 <__mulsi3>:
    3cb2:	62 9f       	mul	r22, r18
    3cb4:	d0 01       	movw	r26, r0
    3cb6:	73 9f       	mul	r23, r19
    3cb8:	f0 01       	movw	r30, r0
    3cba:	82 9f       	mul	r24, r18
    3cbc:	e0 0d       	add	r30, r0
    3cbe:	f1 1d       	adc	r31, r1
    3cc0:	64 9f       	mul	r22, r20
    3cc2:	e0 0d       	add	r30, r0
    3cc4:	f1 1d       	adc	r31, r1
    3cc6:	92 9f       	mul	r25, r18
    3cc8:	f0 0d       	add	r31, r0
    3cca:	83 9f       	mul	r24, r19
    3ccc:	f0 0d       	add	r31, r0
    3cce:	74 9f       	mul	r23, r20
    3cd0:	f0 0d       	add	r31, r0
    3cd2:	65 9f       	mul	r22, r21
    3cd4:	f0 0d       	add	r31, r0
    3cd6:	99 27       	eor	r25, r25
    3cd8:	72 9f       	mul	r23, r18
    3cda:	b0 0d       	add	r27, r0
    3cdc:	e1 1d       	adc	r30, r1
    3cde:	f9 1f       	adc	r31, r25
    3ce0:	63 9f       	mul	r22, r19
    3ce2:	b0 0d       	add	r27, r0
    3ce4:	e1 1d       	adc	r30, r1
    3ce6:	f9 1f       	adc	r31, r25
    3ce8:	bd 01       	movw	r22, r26
    3cea:	cf 01       	movw	r24, r30
    3cec:	11 24       	eor	r1, r1
    3cee:	08 95       	ret

00003cf0 <__udivmodqi4>:
    3cf0:	99 1b       	sub	r25, r25
    3cf2:	79 e0       	ldi	r23, 0x09	; 9
    3cf4:	04 c0       	rjmp	.+8      	; 0x3cfe <__udivmodqi4_ep>

00003cf6 <__udivmodqi4_loop>:
    3cf6:	99 1f       	adc	r25, r25
    3cf8:	96 17       	cp	r25, r22
    3cfa:	08 f0       	brcs	.+2      	; 0x3cfe <__udivmodqi4_ep>
    3cfc:	96 1b       	sub	r25, r22

00003cfe <__udivmodqi4_ep>:
    3cfe:	88 1f       	adc	r24, r24
    3d00:	7a 95       	dec	r23
    3d02:	c9 f7       	brne	.-14     	; 0x3cf6 <__udivmodqi4_loop>
    3d04:	80 95       	com	r24
    3d06:	08 95       	ret

00003d08 <__udivmodsi4>:
    3d08:	a1 e2       	ldi	r26, 0x21	; 33
    3d0a:	1a 2e       	mov	r1, r26
    3d0c:	aa 1b       	sub	r26, r26
    3d0e:	bb 1b       	sub	r27, r27
    3d10:	fd 01       	movw	r30, r26
    3d12:	0d c0       	rjmp	.+26     	; 0x3d2e <__udivmodsi4_ep>

00003d14 <__udivmodsi4_loop>:
    3d14:	aa 1f       	adc	r26, r26
    3d16:	bb 1f       	adc	r27, r27
    3d18:	ee 1f       	adc	r30, r30
    3d1a:	ff 1f       	adc	r31, r31
    3d1c:	a2 17       	cp	r26, r18
    3d1e:	b3 07       	cpc	r27, r19
    3d20:	e4 07       	cpc	r30, r20
    3d22:	f5 07       	cpc	r31, r21
    3d24:	20 f0       	brcs	.+8      	; 0x3d2e <__udivmodsi4_ep>
    3d26:	a2 1b       	sub	r26, r18
    3d28:	b3 0b       	sbc	r27, r19
    3d2a:	e4 0b       	sbc	r30, r20
    3d2c:	f5 0b       	sbc	r31, r21

00003d2e <__udivmodsi4_ep>:
    3d2e:	66 1f       	adc	r22, r22
    3d30:	77 1f       	adc	r23, r23
    3d32:	88 1f       	adc	r24, r24
    3d34:	99 1f       	adc	r25, r25
    3d36:	1a 94       	dec	r1
    3d38:	69 f7       	brne	.-38     	; 0x3d14 <__udivmodsi4_loop>
    3d3a:	60 95       	com	r22
    3d3c:	70 95       	com	r23
    3d3e:	80 95       	com	r24
    3d40:	90 95       	com	r25
    3d42:	9b 01       	movw	r18, r22
    3d44:	ac 01       	movw	r20, r24
    3d46:	bd 01       	movw	r22, r26
    3d48:	cf 01       	movw	r24, r30
    3d4a:	08 95       	ret

00003d4c <strcmp_P>:
    3d4c:	fb 01       	movw	r30, r22
    3d4e:	dc 01       	movw	r26, r24
    3d50:	8d 91       	ld	r24, X+
    3d52:	05 90       	lpm	r0, Z+
    3d54:	80 19       	sub	r24, r0
    3d56:	01 10       	cpse	r0, r1
    3d58:	d9 f3       	breq	.-10     	; 0x3d50 <strcmp_P+0x4>
    3d5a:	99 0b       	sbc	r25, r25
    3d5c:	08 95       	ret

00003d5e <__eerd_block_m328p>:
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22

00003d62 <__eerd_blraw_m328p>:
    3d62:	fc 01       	movw	r30, r24
    3d64:	f9 99       	sbic	0x1f, 1	; 31
    3d66:	fe cf       	rjmp	.-4      	; 0x3d64 <__eerd_blraw_m328p+0x2>
    3d68:	06 c0       	rjmp	.+12     	; 0x3d76 <__eerd_blraw_m328p+0x14>
    3d6a:	f2 bd       	out	0x22, r31	; 34
    3d6c:	e1 bd       	out	0x21, r30	; 33
    3d6e:	f8 9a       	sbi	0x1f, 0	; 31
    3d70:	31 96       	adiw	r30, 0x01	; 1
    3d72:	00 b4       	in	r0, 0x20	; 32
    3d74:	0d 92       	st	X+, r0
    3d76:	41 50       	subi	r20, 0x01	; 1
    3d78:	50 40       	sbci	r21, 0x00	; 0
    3d7a:	b8 f7       	brcc	.-18     	; 0x3d6a <__eerd_blraw_m328p+0x8>
    3d7c:	08 95       	ret

00003d7e <__eerd_word_m328p>:
    3d7e:	a8 e1       	ldi	r26, 0x18	; 24
    3d80:	b0 e0       	ldi	r27, 0x00	; 0
    3d82:	42 e0       	ldi	r20, 0x02	; 2
    3d84:	50 e0       	ldi	r21, 0x00	; 0
    3d86:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__eerd_blraw_m328p>

00003d8a <__eewr_block_m328p>:
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	03 c0       	rjmp	.+6      	; 0x3d96 <__eewr_block_m328p+0xc>
    3d90:	2d 91       	ld	r18, X+
    3d92:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <__eewr_r18_m328p>
    3d96:	41 50       	subi	r20, 0x01	; 1
    3d98:	50 40       	sbci	r21, 0x00	; 0
    3d9a:	d0 f7       	brcc	.-12     	; 0x3d90 <__eewr_block_m328p+0x6>
    3d9c:	08 95       	ret

00003d9e <__eewr_byte_m328p>:
    3d9e:	26 2f       	mov	r18, r22

00003da0 <__eewr_r18_m328p>:
    3da0:	f9 99       	sbic	0x1f, 1	; 31
    3da2:	fe cf       	rjmp	.-4      	; 0x3da0 <__eewr_r18_m328p>
    3da4:	1f ba       	out	0x1f, r1	; 31
    3da6:	92 bd       	out	0x22, r25	; 34
    3da8:	81 bd       	out	0x21, r24	; 33
    3daa:	20 bd       	out	0x20, r18	; 32
    3dac:	0f b6       	in	r0, 0x3f	; 63
    3dae:	f8 94       	cli
    3db0:	fa 9a       	sbi	0x1f, 2	; 31
    3db2:	f9 9a       	sbi	0x1f, 1	; 31
    3db4:	0f be       	out	0x3f, r0	; 63
    3db6:	01 96       	adiw	r24, 0x01	; 1
    3db8:	08 95       	ret

00003dba <__eewr_word_m328p>:
    3dba:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eewr_byte_m328p>
    3dbe:	27 2f       	mov	r18, r23
    3dc0:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <__eewr_r18_m328p>

00003dc4 <_exit>:
    3dc4:	f8 94       	cli

00003dc6 <__stop_program>:
    3dc6:	ff cf       	rjmp	.-2      	; 0x3dc6 <__stop_program>

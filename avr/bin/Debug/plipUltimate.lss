
bin\Debug\plipUltimate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00001f14  00001fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f14  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000656  0080013c  0080013c  00002024  2**0
                  ALLOC
  3 .eeprom       00000016  00810000  00810000  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  0000203a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .debug_aranges 000001e0  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000006d1  00000000  00000000  0000221d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003879  00000000  00000000  000028ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000145a  00000000  00000000  00006167  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002592  00000000  00000000  000075c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005e0  00000000  00000000  00009b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000118c  00000000  00000000  0000a134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001bd4  00000000  00000000  0000b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  0000ce94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__ctors_end>
       4:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
       8:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
       c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      10:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      14:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      18:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      1c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      20:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      24:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      28:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      2c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_11>
      30:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      34:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      38:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      3c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      40:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      44:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      48:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      4c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      50:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      54:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      58:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      5c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      60:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      64:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>

00000068 <cmd_table>:
      68:	aa 00 7b 05 ad 00 bd 00 77 05 c0 00 d1 00 54 05     ..{.....w.....T.
      78:	d3 00 ef 00 0b 05 f2 00 0b 01 0b 05 0e 01 24 01     ..............$.
      88:	d0 04 27 01 3e 01 d0 04 41 01 5a 01 b0 04 5d 01     ..'.>...A.Z...].
      98:	72 01 d0 04 75 01 87 01 0b 05 8a 01 00 00 00 00     r...u...........
	...

000000aa <cmd_stats_dump_name>:
      aa:	73 64 00                                            sd.

000000ad <cmd_stats_dump_help>:
      ad:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

000000bd <cmd_stats_reset_name>:
      bd:	73 72 00                                            sr.

000000c0 <cmd_stats_reset_help>:
      c0:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

000000d1 <cmd_gen_m_name>:
      d1:	6d 00                                               m.

000000d3 <cmd_gen_m_help>:
      d3:	6d 61 63 20 61 64 64 72 65 73 73 20 6f 66 20 64     mac address of d
      e3:	65 76 69 63 65 20 3c 6d 61 63 3e 00                 evice <mac>.

000000ef <cmd_gen_fd_name>:
      ef:	66 64 00                                            fd.

000000f2 <cmd_gen_fd_help>:
      f2:	73 65 74 20 66 75 6c 6c 20 64 75 70 6c 65 20 6d     set full duple m
     102:	6f 64 65 20 5b 6f 6e 5d 00                          ode [on].

0000010b <cmd_gen_fc_name>:
     10b:	66 63 00                                            fc.

0000010e <cmd_gen_fc_help>:
     10e:	73 65 74 20 66 6c 6f 77 20 63 6f 6e 74 72 6f 6c     set flow control
     11e:	20 5b 6f 6e 5d 00                                    [on].

00000124 <cmd_gen_tl_name>:
     124:	74 6c 00                                            tl.

00000127 <cmd_gen_tl_help>:
     127:	74 65 73 74 20 70 61 63 6b 65 74 20 6c 65 6e 67     test packet leng
     137:	74 68 20 3c 6e 3e 00                                th <n>.

0000013e <cmd_gen_tt_name>:
     13e:	74 74 00                                            tt.

00000141 <cmd_gen_tt_help>:
     141:	74 65 73 74 20 70 61 63 6b 65 74 20 65 74 68 20     test packet eth 
     151:	74 79 70 65 20 3c 6e 3e 00                          type <n>.

0000015a <cmd_gen_ti_name>:
     15a:	74 69 00                                            ti.

0000015d <cmd_gen_ti_help>:
     15d:	74 65 73 74 20 49 50 20 61 64 64 72 65 73 73 20     test IP address 
     16d:	3c 69 70 3e 00                                      <ip>.

00000172 <cmd_gen_tp_name>:
     172:	74 70 00                                            tp.

00000175 <cmd_gen_tp_help>:
     175:	74 65 73 74 20 55 44 50 20 70 6f 72 74 20 3c 6e     test UDP port <n
     185:	3e 00                                               >.

00000187 <cmd_gen_tm_name>:
     187:	74 6d 00                                            tm.

0000018a <cmd_gen_tm_help>:
     18a:	74 65 73 74 20 6d 6f 64 65 20 5b 30 7c 31 5d 00     test mode [0|1].

0000019a <cmdkey_table>:
     19a:	73 7f 05 a4 01 00 00 00 00 00                       s.........

000001a4 <cmd_dump_stats_help>:
     1a4:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

000001b4 <sc_sDefaultConfig>:
     1b4:	1a 11 af a0 47 11 00 00 ea 05 fd ff c0 a8 02 de     ....G...........
     1c4:	90 1a 00 00                                         ....

000001c8 <__ctors_end>:
     1c8:	11 24       	eor	r1, r1
     1ca:	1f be       	out	0x3f, r1	; 63
     1cc:	cf ef       	ldi	r28, 0xFF	; 255
     1ce:	d8 e0       	ldi	r29, 0x08	; 8
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	cd bf       	out	0x3d, r28	; 61

000001d4 <__do_copy_data>:
     1d4:	11 e0       	ldi	r17, 0x01	; 1
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	e4 e1       	ldi	r30, 0x14	; 20
     1dc:	ff e1       	ldi	r31, 0x1F	; 31
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <.do_copy_data_start>

000001e0 <.do_copy_data_loop>:
     1e0:	05 90       	lpm	r0, Z+
     1e2:	0d 92       	st	X+, r0

000001e4 <.do_copy_data_start>:
     1e4:	ac 33       	cpi	r26, 0x3C	; 60
     1e6:	b1 07       	cpc	r27, r17
     1e8:	d9 f7       	brne	.-10     	; 0x1e0 <.do_copy_data_loop>

000001ea <__do_clear_bss>:
     1ea:	17 e0       	ldi	r17, 0x07	; 7
     1ec:	ac e3       	ldi	r26, 0x3C	; 60
     1ee:	b1 e0       	ldi	r27, 0x01	; 1
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <.do_clear_bss_start>

000001f2 <.do_clear_bss_loop>:
     1f2:	1d 92       	st	X+, r1

000001f4 <.do_clear_bss_start>:
     1f4:	a2 39       	cpi	r26, 0x92	; 146
     1f6:	b1 07       	cpc	r27, r17
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <.do_clear_bss_loop>
     1fa:	0e 94 82 05 	call	0xb04	; 0xb04 <main>
     1fe:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <_exit>

00000202 <__bad_interrupt>:
     202:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000206 <timerInit>:
/// 100us is 1/10k of a second
/// NOTE(KaiN#): time was reduced by 1, should it be?
#define T1_100us F_CPU/10000

void timerInit(void) {
  cli();
     206:	f8 94       	cli

	/// Set timer 2 to CTC, prescaler 8 & compare value: 100us
  TCCR1A = _BV(WGM12);  // CTC
     208:	88 e0       	ldi	r24, 0x08	; 8
     20a:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = _BV(CS10);   // Prescaler 1
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	80 93 81 00 	sts	0x0081, r24
  OCR1A = T1_100us;     // Output compare
     214:	80 ed       	ldi	r24, 0xD0	; 208
     216:	97 e0       	ldi	r25, 0x07	; 7
     218:	90 93 89 00 	sts	0x0089, r25
     21c:	80 93 88 00 	sts	0x0088, r24
  TCNT1  = 0;           // Reset timer state
     220:	10 92 85 00 	sts	0x0085, r1
     224:	10 92 84 00 	sts	0x0084, r1
  TIMSK1 = _BV(OCIE1A); // Enable compare interrupt
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	80 93 6f 00 	sts	0x006F, r24

  g_uwTimer100us = 0;
     22e:	10 92 4c 01 	sts	0x014C, r1
     232:	10 92 4b 01 	sts	0x014B, r1
  g_uwTimer10ms = 0;
     236:	10 92 4a 01 	sts	0x014A, r1
     23a:	10 92 49 01 	sts	0x0149, r1
  g_uwTimeStamp = 0;
     23e:	10 92 4d 01 	sts	0x014D, r1
     242:	10 92 4e 01 	sts	0x014E, r1
     246:	10 92 4f 01 	sts	0x014F, r1
     24a:	10 92 50 01 	sts	0x0150, r1
  s_uw10msCounter = 0;
     24e:	10 92 3d 01 	sts	0x013D, r1
     252:	10 92 3c 01 	sts	0x013C, r1

  sei();
     256:	78 94       	sei
}
     258:	08 95       	ret

0000025a <__vector_11>:

/**
 * Timer interrupt handler.
 * Increments time stamp and time interval vars accordingly.
 */
ISR(TIMER1_COMPA_vect) {
     25a:	1f 92       	push	r1
     25c:	0f 92       	push	r0
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	11 24       	eor	r1, r1
     264:	8f 93       	push	r24
     266:	9f 93       	push	r25
     268:	af 93       	push	r26
     26a:	bf 93       	push	r27
	TCNT1 = 0; // Reset timer s_uw10msCounterer
     26c:	10 92 85 00 	sts	0x0085, r1
     270:	10 92 84 00 	sts	0x0084, r1
  ++g_uwTimer100us;
     274:	80 91 4b 01 	lds	r24, 0x014B
     278:	90 91 4c 01 	lds	r25, 0x014C
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	90 93 4c 01 	sts	0x014C, r25
     282:	80 93 4b 01 	sts	0x014B, r24
  ++g_uwTimeStamp;
     286:	80 91 4d 01 	lds	r24, 0x014D
     28a:	90 91 4e 01 	lds	r25, 0x014E
     28e:	a0 91 4f 01 	lds	r26, 0x014F
     292:	b0 91 50 01 	lds	r27, 0x0150
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	a1 1d       	adc	r26, r1
     29a:	b1 1d       	adc	r27, r1
     29c:	80 93 4d 01 	sts	0x014D, r24
     2a0:	90 93 4e 01 	sts	0x014E, r25
     2a4:	a0 93 4f 01 	sts	0x014F, r26
     2a8:	b0 93 50 01 	sts	0x0150, r27
  ++s_uw10msCounter;
     2ac:	80 91 3c 01 	lds	r24, 0x013C
     2b0:	90 91 3d 01 	lds	r25, 0x013D
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	90 93 3d 01 	sts	0x013D, r25
     2ba:	80 93 3c 01 	sts	0x013C, r24
  if(s_uw10msCounter >= 100) {
     2be:	84 36       	cpi	r24, 0x64	; 100
     2c0:	91 05       	cpc	r25, r1
     2c2:	68 f0       	brcs	.+26     	; 0x2de <__vector_11+0x84>
    s_uw10msCounter = 0;
     2c4:	10 92 3d 01 	sts	0x013D, r1
     2c8:	10 92 3c 01 	sts	0x013C, r1
    g_uwTimer10ms++;
     2cc:	80 91 49 01 	lds	r24, 0x0149
     2d0:	90 91 4a 01 	lds	r25, 0x014A
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	90 93 4a 01 	sts	0x014A, r25
     2da:	80 93 49 01 	sts	0x0149, r24
  }
}
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <timerDelay10ms>:

/// Busy-wait for supplied number of 10ms intervals
void timerDelay10ms(uint16_t uwCount) {
     2f0:	9c 01       	movw	r18, r24
	g_uwTimer10ms=0;
     2f2:	10 92 4a 01 	sts	0x014A, r1
     2f6:	10 92 49 01 	sts	0x0149, r1
	while(g_uwTimer10ms<uwCount);
     2fa:	80 91 49 01 	lds	r24, 0x0149
     2fe:	90 91 4a 01 	lds	r25, 0x014A
     302:	82 17       	cp	r24, r18
     304:	93 07       	cpc	r25, r19
     306:	c8 f3       	brcs	.-14     	; 0x2fa <timerDelay10ms+0xa>
}
     308:	08 95       	ret

0000030a <timerDelay100us>:

/// Busy-wait for supplied number of 100us intervals
void timerDelay100us(uint16_t uwCount) {
     30a:	9c 01       	movw	r18, r24
	g_uwTimer100us=0;
     30c:	10 92 4c 01 	sts	0x014C, r1
     310:	10 92 4b 01 	sts	0x014B, r1
	while(g_uwTimer100us<uwCount);
     314:	80 91 4b 01 	lds	r24, 0x014B
     318:	90 91 4c 01 	lds	r25, 0x014C
     31c:	82 17       	cp	r24, r18
     31e:	93 07       	cpc	r25, r19
     320:	c8 f3       	brcs	.-14     	; 0x314 <timerDelay100us+0xa>
}
     322:	08 95       	ret

00000324 <timerCalculateKbps>:

// TODO(KaiN#9): timerCalculateKbps() is completely messed up
/**
 * Calculates bitrate based on transferred byte count and elapsed time.
 */
uint16_t timerCalculateKbps(uint16_t bytes, uint16_t delta) {
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	eb 01       	movw	r28, r22
  if(delta != 0) {
     32a:	61 15       	cp	r22, r1
     32c:	71 05       	cpc	r23, r1
     32e:	19 f4       	brne	.+6      	; 0x336 <timerCalculateKbps+0x12>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	16 c0       	rjmp	.+44     	; 0x362 <timerCalculateKbps+0x3e>
    uint32_t nom = 1000 * (uint32_t)bytes * 100;
    uint32_t denom = (uint32_t)delta * 4;
    uint32_t rate = nom / denom;
    return (uint16_t)rate;
     336:	bc 01       	movw	r22, r24
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	20 ea       	ldi	r18, 0xA0	; 160
     33e:	36 e8       	ldi	r19, 0x86	; 134
     340:	41 e0       	ldi	r20, 0x01	; 1
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__mulsi3>
     348:	9e 01       	movw	r18, r28
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	22 0f       	add	r18, r18
     350:	33 1f       	adc	r19, r19
     352:	44 1f       	adc	r20, r20
     354:	55 1f       	adc	r21, r21
     356:	22 0f       	add	r18, r18
     358:	33 1f       	adc	r19, r19
     35a:	44 1f       	adc	r20, r20
     35c:	55 1f       	adc	r21, r21
     35e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__udivmodsi4>
  }
	else
		return 0;
}
     362:	82 2f       	mov	r24, r18
     364:	93 2f       	mov	r25, r19
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <utilNibbleToHex>:
/**
 * Converts nibble (0..15) value to hex char.
 */
char utilNibbleToHex(uint8_t ubIn)
{
  if(ubIn < 10)
     36c:	8a 30       	cpi	r24, 0x0A	; 10
     36e:	10 f4       	brcc	.+4      	; 0x374 <utilNibbleToHex+0x8>
    return '0' + ubIn;
     370:	80 5d       	subi	r24, 0xD0	; 208
     372:	08 95       	ret
  else
    return 'A' + ubIn - 10;
     374:	89 5c       	subi	r24, 0xC9	; 201
}
     376:	08 95       	ret

00000378 <utilByteToHex>:

/**
 * Converts byte value to hex chars.
 */
void utilByteToHex(uint8_t ubIn, char *pOut)
{
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	f8 2e       	mov	r15, r24
     380:	8b 01       	movw	r16, r22
  pOut[0] = utilNibbleToHex(ubIn >> 4);
     382:	82 95       	swap	r24
     384:	8f 70       	andi	r24, 0x0F	; 15
     386:	0e 94 b6 01 	call	0x36c	; 0x36c <utilNibbleToHex>
     38a:	f8 01       	movw	r30, r16
     38c:	80 83       	st	Z, r24
  pOut[1] = utilNibbleToHex(ubIn & 0xf);
     38e:	8f 2d       	mov	r24, r15
     390:	8f 70       	andi	r24, 0x0F	; 15
     392:	0e 94 b6 01 	call	0x36c	; 0x36c <utilNibbleToHex>
     396:	f8 01       	movw	r30, r16
     398:	81 83       	std	Z+1, r24	; 0x01
}
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	08 95       	ret

000003a2 <utilWordToHex>:

void utilWordToHex(uint16_t uwIn, char *pOut)
{
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	f8 2e       	mov	r15, r24
     3aa:	8b 01       	movw	r16, r22
  utilByteToHex((uint8_t)(uwIn>>8), pOut);
     3ac:	89 2f       	mov	r24, r25
     3ae:	0e 94 bc 01 	call	0x378	; 0x378 <utilByteToHex>
  utilByteToHex((uint8_t)(uwIn&0xff), pOut+2);
     3b2:	0e 5f       	subi	r16, 0xFE	; 254
     3b4:	1f 4f       	sbci	r17, 0xFF	; 255
     3b6:	8f 2d       	mov	r24, r15
     3b8:	b8 01       	movw	r22, r16
     3ba:	0e 94 bc 01 	call	0x378	; 0x378 <utilByteToHex>
}
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	08 95       	ret

000003c6 <utilDwordToHex>:

void utilDwordToHex(uint32_t ulIn, char *pOut)
{
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	6b 01       	movw	r12, r22
     3d4:	7c 01       	movw	r14, r24
     3d6:	8a 01       	movw	r16, r20
  utilWordToHex((uint16_t)(ulIn>>16), pOut);
     3d8:	aa 27       	eor	r26, r26
     3da:	bb 27       	eor	r27, r27
     3dc:	ba 01       	movw	r22, r20
     3de:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <utilWordToHex>
  utilWordToHex((uint16_t)(ulIn&0xffff), pOut+4);
     3e2:	0c 5f       	subi	r16, 0xFC	; 252
     3e4:	1f 4f       	sbci	r17, 0xFF	; 255
     3e6:	c6 01       	movw	r24, r12
     3e8:	b8 01       	movw	r22, r16
     3ea:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <utilWordToHex>
}
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	08 95       	ret

000003fc <utilByteToDec>:

void utilByteToDec(uint8_t value, uint8_t *out)
{
     3fc:	28 2f       	mov	r18, r24
     3fe:	fb 01       	movw	r30, r22
  uint8_t h = value / 100;
  uint8_t t = value % 100;
     400:	64 e6       	ldi	r22, 0x64	; 100
     402:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__udivmodqi4>
     406:	39 2f       	mov	r19, r25
  uint8_t o = t % 10;
  t = t / 10;
  out[0] = '0' + h;
     408:	82 2f       	mov	r24, r18
     40a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__udivmodqi4>
     40e:	80 5d       	subi	r24, 0xD0	; 208
     410:	80 83       	st	Z, r24
  out[1] = '0' + t;
     412:	83 2f       	mov	r24, r19
     414:	6a e0       	ldi	r22, 0x0A	; 10
     416:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__udivmodqi4>
     41a:	80 5d       	subi	r24, 0xD0	; 208
     41c:	81 83       	std	Z+1, r24	; 0x01
  out[2] = '0' + o;
     41e:	83 2f       	mov	r24, r19
     420:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__udivmodqi4>
     424:	90 5d       	subi	r25, 0xD0	; 208
     426:	92 83       	std	Z+2, r25	; 0x02
}
     428:	08 95       	ret

0000042a <utilDwordToDec>:

void utilDwordToDec(uint32_t value, uint8_t *out, uint8_t num_digits, uint8_t point_pos)
{
     42a:	af 92       	push	r10
     42c:	bf 92       	push	r11
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	c6 2e       	mov	r12, r22
     440:	d7 2e       	mov	r13, r23
     442:	e8 2e       	mov	r14, r24
     444:	f9 2e       	mov	r15, r25
     446:	b2 2e       	mov	r11, r18
	uint8_t i;
  // start backwards
  uint8_t *pos = out + num_digits - 1;
     448:	82 2f       	mov	r24, r18
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	ea 01       	movw	r28, r20
     450:	c8 0f       	add	r28, r24
     452:	d9 1f       	adc	r29, r25
  if(point_pos < num_digits) {
     454:	02 17       	cp	r16, r18
     456:	08 f4       	brcc	.+2      	; 0x45a <utilDwordToDec+0x30>
    pos++;
     458:	21 96       	adiw	r28, 0x01	; 1
  }
  for(i=0;i<num_digits;i++) {
     45a:	bb 20       	and	r11, r11
     45c:	41 f1       	breq	.+80     	; 0x4ae <utilDwordToDec+0x84>
     45e:	10 e0       	ldi	r17, 0x00	; 0
    if(i == point_pos) {
      *pos = '.';
     460:	0f 2e       	mov	r0, r31
     462:	fe e2       	ldi	r31, 0x2E	; 46
     464:	af 2e       	mov	r10, r31
     466:	f0 2d       	mov	r31, r0
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
    if(i == point_pos) {
     468:	10 17       	cp	r17, r16
     46a:	11 f4       	brne	.+4      	; 0x470 <utilDwordToDec+0x46>
      *pos = '.';
     46c:	a8 82       	st	Y, r10
      pos--;
     46e:	21 97       	sbiw	r28, 0x01	; 1
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
     470:	6c 2d       	mov	r22, r12
     472:	7d 2d       	mov	r23, r13
     474:	8e 2d       	mov	r24, r14
     476:	9f 2d       	mov	r25, r15
     478:	2a e0       	ldi	r18, 0x0A	; 10
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__udivmodsi4>
     484:	60 5d       	subi	r22, 0xD0	; 208
     486:	68 83       	st	Y, r22
  // start backwards
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
     488:	1f 5f       	subi	r17, 0xFF	; 255
     48a:	1b 15       	cp	r17, r11
     48c:	80 f4       	brcc	.+32     	; 0x4ae <utilDwordToDec+0x84>
      *pos = '.';
      pos--;
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
    pos--;
     48e:	21 97       	sbiw	r28, 0x01	; 1
    value /= 10;
     490:	6c 2d       	mov	r22, r12
     492:	7d 2d       	mov	r23, r13
     494:	8e 2d       	mov	r24, r14
     496:	9f 2d       	mov	r25, r15
     498:	2a e0       	ldi	r18, 0x0A	; 10
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__udivmodsi4>
     4a4:	c2 2e       	mov	r12, r18
     4a6:	d3 2e       	mov	r13, r19
     4a8:	e4 2e       	mov	r14, r20
     4aa:	f5 2e       	mov	r15, r21
     4ac:	dd cf       	rjmp	.-70     	; 0x468 <utilDwordToDec+0x3e>
  }
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	df 90       	pop	r13
     4bc:	cf 90       	pop	r12
     4be:	bf 90       	pop	r11
     4c0:	af 90       	pop	r10
     4c2:	08 95       	ret

000004c4 <utilParseNibbleHex>:

// parse

uint8_t utilParseNibbleHex(char c,uint8_t *value)
{
     4c4:	fb 01       	movw	r30, r22
  if((c>='a')&&(c<='f')) {
     4c6:	98 2f       	mov	r25, r24
     4c8:	81 56       	subi	r24, 0x61	; 97
     4ca:	86 30       	cpi	r24, 0x06	; 6
     4cc:	20 f4       	brcc	.+8      	; 0x4d6 <utilParseNibbleHex+0x12>
    *value = c + 10 - 'a';
     4ce:	86 5f       	subi	r24, 0xF6	; 246
     4d0:	80 83       	st	Z, r24
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	08 95       	ret
    return 1;
  }
  else if((c>='A')&&(c<='F')) {
     4d6:	89 2f       	mov	r24, r25
     4d8:	81 54       	subi	r24, 0x41	; 65
     4da:	86 30       	cpi	r24, 0x06	; 6
     4dc:	20 f4       	brcc	.+8      	; 0x4e6 <utilParseNibbleHex+0x22>
    *value = c + 10 - 'A';
     4de:	86 5f       	subi	r24, 0xF6	; 246
     4e0:	80 83       	st	Z, r24
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	08 95       	ret
    return 1;
  }
  else if((c>='0')&&(c<='9')) {
     4e6:	89 2f       	mov	r24, r25
     4e8:	80 53       	subi	r24, 0x30	; 48
     4ea:	8a 30       	cpi	r24, 0x0A	; 10
     4ec:	10 f0       	brcs	.+4      	; 0x4f2 <utilParseNibbleHex+0x2e>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	08 95       	ret
    *value = c - '0';
     4f2:	80 83       	st	Z, r24
     4f4:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
  }
  else
    return 0;
}
     4f6:	08 95       	ret

000004f8 <utilParseByteHex>:

uint8_t utilParseByteHex(const char *str,uint8_t *value)
{
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	8c 01       	movw	r16, r24
     50c:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseNibbleHex(str[0],&val))
     50e:	fc 01       	movw	r30, r24
     510:	80 81       	ld	r24, Z
     512:	be 01       	movw	r22, r28
     514:	6f 5f       	subi	r22, 0xFF	; 255
     516:	7f 4f       	sbci	r23, 0xFF	; 255
     518:	0e 94 62 02 	call	0x4c4	; 0x4c4 <utilParseNibbleHex>
     51c:	88 23       	and	r24, r24
     51e:	91 f0       	breq	.+36     	; 0x544 <utilParseByteHex+0x4c>
    return 0;
  val <<= 4;
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	82 95       	swap	r24
     524:	80 7f       	andi	r24, 0xF0	; 240
     526:	89 83       	std	Y+1, r24	; 0x01
  if(!utilParseNibbleHex(str[1],value))
     528:	f8 01       	movw	r30, r16
     52a:	81 81       	ldd	r24, Z+1	; 0x01
     52c:	b7 01       	movw	r22, r14
     52e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <utilParseNibbleHex>
     532:	88 23       	and	r24, r24
     534:	39 f0       	breq	.+14     	; 0x544 <utilParseByteHex+0x4c>
    return 0;
  *value |= val;
     536:	f7 01       	movw	r30, r14
     538:	80 81       	ld	r24, Z
     53a:	99 81       	ldd	r25, Y+1	; 0x01
     53c:	89 2b       	or	r24, r25
     53e:	80 83       	st	Z, r24
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	01 c0       	rjmp	.+2      	; 0x546 <utilParseByteHex+0x4e>
  return 1;
     544:	80 e0       	ldi	r24, 0x00	; 0
}
     546:	0f 90       	pop	r0
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	08 95       	ret

00000556 <utilParseWordHex>:

uint8_t utilParseWordHex(const char *str,uint16_t *value)
{
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	00 d0       	rcall	.+0      	; 0x564 <utilParseWordHex+0xe>
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	8c 01       	movw	r16, r24
     56a:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     56c:	be 01       	movw	r22, r28
     56e:	6f 5f       	subi	r22, 0xFF	; 255
     570:	7f 4f       	sbci	r23, 0xFF	; 255
     572:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <utilParseByteHex>
     576:	88 23       	and	r24, r24
     578:	a1 f0       	breq	.+40     	; 0x5a2 <utilParseWordHex+0x4c>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     57a:	c8 01       	movw	r24, r16
     57c:	02 96       	adiw	r24, 0x02	; 2
     57e:	be 01       	movw	r22, r28
     580:	6e 5f       	subi	r22, 0xFE	; 254
     582:	7f 4f       	sbci	r23, 0xFF	; 255
     584:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <utilParseByteHex>
     588:	88 23       	and	r24, r24
     58a:	59 f0       	breq	.+22     	; 0x5a2 <utilParseWordHex+0x4c>
    return 0;
  *value = (uint16_t)val << 8 | val2;
     58c:	99 81       	ldd	r25, Y+1	; 0x01
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	2a 81       	ldd	r18, Y+2	; 0x02
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	82 2b       	or	r24, r18
     596:	93 2b       	or	r25, r19
     598:	f7 01       	movw	r30, r14
     59a:	91 83       	std	Z+1, r25	; 0x01
     59c:	80 83       	st	Z, r24
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <utilParseWordHex+0x4e>
  return 1;
     5a2:	80 e0       	ldi	r24, 0x00	; 0
}
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	cf 91       	pop	r28
     5aa:	df 91       	pop	r29
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	08 95       	ret

000005b6 <utilParseDwordHex>:

uint8_t utilParseDwordHex(const char *str,uint32_t *value)
{
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	df 93       	push	r29
     5c0:	cf 93       	push	r28
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <utilParseDwordHex+0xe>
     5c4:	00 d0       	rcall	.+0      	; 0x5c6 <utilParseDwordHex+0x10>
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	8c 01       	movw	r16, r24
     5cc:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     5ce:	be 01       	movw	r22, r28
     5d0:	6f 5f       	subi	r22, 0xFF	; 255
     5d2:	7f 4f       	sbci	r23, 0xFF	; 255
     5d4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <utilParseByteHex>
     5d8:	88 23       	and	r24, r24
     5da:	09 f4       	brne	.+2      	; 0x5de <utilParseDwordHex+0x28>
     5dc:	4a c0       	rjmp	.+148    	; 0x672 <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     5de:	c8 01       	movw	r24, r16
     5e0:	02 96       	adiw	r24, 0x02	; 2
     5e2:	be 01       	movw	r22, r28
     5e4:	6e 5f       	subi	r22, 0xFE	; 254
     5e6:	7f 4f       	sbci	r23, 0xFF	; 255
     5e8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <utilParseByteHex>
     5ec:	88 23       	and	r24, r24
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <utilParseDwordHex+0x3c>
     5f0:	40 c0       	rjmp	.+128    	; 0x672 <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val3;
  if(!utilParseByteHex(&str[4],&val3))
     5f2:	c8 01       	movw	r24, r16
     5f4:	04 96       	adiw	r24, 0x04	; 4
     5f6:	be 01       	movw	r22, r28
     5f8:	6d 5f       	subi	r22, 0xFD	; 253
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <utilParseByteHex>
     600:	88 23       	and	r24, r24
     602:	b9 f1       	breq	.+110    	; 0x672 <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val4;
  if(!utilParseByteHex(&str[6],&val4))
     604:	c8 01       	movw	r24, r16
     606:	06 96       	adiw	r24, 0x06	; 6
     608:	be 01       	movw	r22, r28
     60a:	6c 5f       	subi	r22, 0xFC	; 252
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <utilParseByteHex>
     612:	88 23       	and	r24, r24
     614:	71 f1       	breq	.+92     	; 0x672 <utilParseDwordHex+0xbc>
    return 0;
  *value = (uint32_t)val << 24 | (uint32_t)val2 << 16 | (uint32_t)val3 << 8 | val4;
     616:	29 81       	ldd	r18, Y+1	; 0x01
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	52 2f       	mov	r21, r18
     620:	44 27       	eor	r20, r20
     622:	33 27       	eor	r19, r19
     624:	22 27       	eor	r18, r18
     626:	8a 81       	ldd	r24, Y+2	; 0x02
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	a0 e0       	ldi	r26, 0x00	; 0
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	dc 01       	movw	r26, r24
     630:	99 27       	eor	r25, r25
     632:	88 27       	eor	r24, r24
     634:	28 2b       	or	r18, r24
     636:	39 2b       	or	r19, r25
     638:	4a 2b       	or	r20, r26
     63a:	5b 2b       	or	r21, r27
     63c:	8c 81       	ldd	r24, Y+4	; 0x04
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	a0 e0       	ldi	r26, 0x00	; 0
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	28 2b       	or	r18, r24
     646:	39 2b       	or	r19, r25
     648:	4a 2b       	or	r20, r26
     64a:	5b 2b       	or	r21, r27
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	a0 e0       	ldi	r26, 0x00	; 0
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	ba 2f       	mov	r27, r26
     656:	a9 2f       	mov	r26, r25
     658:	98 2f       	mov	r25, r24
     65a:	88 27       	eor	r24, r24
     65c:	28 2b       	or	r18, r24
     65e:	39 2b       	or	r19, r25
     660:	4a 2b       	or	r20, r26
     662:	5b 2b       	or	r21, r27
     664:	f7 01       	movw	r30, r14
     666:	20 83       	st	Z, r18
     668:	31 83       	std	Z+1, r19	; 0x01
     66a:	42 83       	std	Z+2, r20	; 0x02
     66c:	53 83       	std	Z+3, r21	; 0x03
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	01 c0       	rjmp	.+2      	; 0x674 <utilParseDwordHex+0xbe>
  return 1;
     672:	80 e0       	ldi	r24, 0x00	; 0
}
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	cf 91       	pop	r28
     67e:	df 91       	pop	r29
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	08 95       	ret

0000068a <utilParseByteDec>:

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
     68a:	db 01       	movw	r26, r22
     68c:	fc 01       	movw	r30, r24
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
      break;
    }
    c -= '0';
    value *= 10;
     692:	4a e0       	ldi	r20, 0x0A	; 10
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
     694:	80 81       	ld	r24, Z
     696:	98 2f       	mov	r25, r24
     698:	90 53       	subi	r25, 0x30	; 48
     69a:	9a 30       	cpi	r25, 0x0A	; 10
     69c:	50 f4       	brcc	.+20     	; 0x6b2 <utilParseByteDec+0x28>
      break;
    }
    c -= '0';
    value *= 10;
     69e:	34 9f       	mul	r19, r20
     6a0:	80 2d       	mov	r24, r0
     6a2:	11 24       	eor	r1, r1
    value += c;
     6a4:	38 2f       	mov	r19, r24
     6a6:	39 0f       	add	r19, r25
    digits++;
     6a8:	2f 5f       	subi	r18, 0xFF	; 255
     6aa:	31 96       	adiw	r30, 0x01	; 1

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
     6ac:	23 30       	cpi	r18, 0x03	; 3
     6ae:	91 f7       	brne	.-28     	; 0x694 <utilParseByteDec+0xa>
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <utilParseByteDec+0x2a>
    c -= '0';
    value *= 10;
    value += c;
    digits++;
  }
  if(digits > 0) {
     6b2:	21 11       	cpse	r18, r1
    *out = value;
     6b4:	3c 93       	st	X, r19
  }
  return digits;
}
     6b6:	82 2f       	mov	r24, r18
     6b8:	08 95       	ret

000006ba <utilReset>:
 * Performs watchdog-based AVR reset, resulting in executing bootloader code
 * in a clean way.
 */
void utilReset(void) {
	// Perform a reset
	cli();
     6ba:	f8 94       	cli
	wdt_enable(WDTO_250MS);
     6bc:	2c e0       	ldi	r18, 0x0C	; 12
     6be:	88 e1       	ldi	r24, 0x18	; 24
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	a8 95       	wdr
     6c8:	80 93 60 00 	sts	0x0060, r24
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	20 93 60 00 	sts	0x0060, r18
     6d2:	ff cf       	rjmp	.-2      	; 0x6d2 <utilReset+0x18>

000006d4 <bridgeRequestResponseRead>:
uint8_t s_ubFlags;
static uint8_t req_is_pending;

static void bridgeRequestResponseRead(void)
{
  if(!req_is_pending) {
     6d4:	80 91 3e 01 	lds	r24, 0x013E
     6d8:	88 23       	and	r24, r24
     6da:	29 f4       	brne	.+10     	; 0x6e6 <bridgeRequestResponseRead+0x12>
    req_is_pending = 1;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 93 3e 01 	sts	0x013E, r24
    parRequestAmiRead();
     6e2:	0e 94 4f 0b 	call	0x169e	; 0x169e <parRequestAmiRead>
     6e6:	08 95       	ret

000006e8 <bridgeLoop>:
/**
 * Main plip loop.
 * Monitors parallel port and ENC28J60 traffic.
 */
void bridgeLoop(void)
{
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	df 93       	push	r29
     6f4:	cf 93       	push	r28
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <bridgeLoop+0x10>
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
  // Associate protocol fns with given ptrs
  parInit();
     6fc:	0e 94 d5 07 	call	0xfaa	; 0xfaa <parInit>

  // Init ENC28j60
  enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
     700:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <pio_util_get_init_flags>
     704:	68 2f       	mov	r22, r24
     706:	04 e5       	ldi	r16, 0x54	; 84
     708:	11 e0       	ldi	r17, 0x01	; 1
     70a:	c8 01       	movw	r24, r16
     70c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <enc28j60_init>

  // Reset stats
  stats_reset();
     710:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <stats_reset>

  // Reset flags & request state
  s_ubFlags = 0;
     714:	10 92 51 01 	sts	0x0151, r1
  req_is_pending = 0;
     718:	10 92 3e 01 	sts	0x013E, r1

  uint8_t flow_control = g_sConfig.flow_ctl;
     71c:	f8 01       	movw	r30, r16
     71e:	f6 80       	ldd	r15, Z+6	; 0x06
     720:	10 e0       	ldi	r17, 0x00	; 0
        bridgeRequestResponseRead();
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     722:	6e 01       	movw	r12, r28
     724:	08 94       	sec
     726:	c1 1c       	adc	r12, r1
     728:	d1 1c       	adc	r13, r1
  uint8_t ubPacketCount;
  while(1) {
    // NOTE: UART command handling was here

    // Calls pb_proto_handle - this is where PAR communication is done
    pb_proto_handle();
     72a:	0e 94 26 08 	call	0x104c	; 0x104c <pb_proto_handle>

    // Handle packets coming from network
		ubPacketCount = enc28j60_has_recv();
     72e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <enc28j60_has_recv>
     732:	08 2f       	mov	r16, r24
    if(ubPacketCount) {
     734:	88 23       	and	r24, r24
     736:	51 f0       	breq	.+20     	; 0x74c <bridgeLoop+0x64>
      if(ubDisplayPacketInfo) {
        // NOTE: UART - time_stamp_spc() FIRST INCOMING!\r\n
        ubDisplayPacketInfo = 0;
      }

      if(s_ubFlags & FLAG_ONLINE) {
     738:	80 91 51 01 	lds	r24, 0x0151
     73c:	80 ff       	sbrs	r24, 0
     73e:	03 c0       	rjmp	.+6      	; 0x746 <bridgeLoop+0x5e>
				// Comm online: let Amiga know about new packet
        bridgeRequestResponseRead();
     740:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <bridgeRequestResponseRead>
     744:	03 c0       	rjmp	.+6      	; 0x74c <bridgeLoop+0x64>
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     746:	c6 01       	movw	r24, r12
     748:	0e 94 ac 0b 	call	0x1758	; 0x1758 <pio_util_recv_packet>
        // NOTE: UART - time_stamp_spc() OFFLINE DROP: hex_word(size)\r\n
      }
    }

    // flow control
    if(flow_control) {
     74c:	ff 20       	and	r15, r15
     74e:	69 f3       	breq	.-38     	; 0x72a <bridgeLoop+0x42>
      // flow limited
      if(limit_flow) {
     750:	11 23       	and	r17, r17
     752:	41 f0       	breq	.+16     	; 0x764 <bridgeLoop+0x7c>
        // disable again?
        if(!ubPacketCount) {
     754:	00 23       	and	r16, r16
     756:	49 f7       	brne	.-46     	; 0x72a <bridgeLoop+0x42>
          enc28j60_control(PIO_CONTROL_FLOW, 0);
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <enc28j60_control>
     760:	10 e0       	ldi	r17, 0x00	; 0
     762:	e3 cf       	rjmp	.-58     	; 0x72a <bridgeLoop+0x42>
        }
      }
      // no flow limit
      else {
        // enable?
        if(ubPacketCount) {
     764:	00 23       	and	r16, r16
     766:	09 f3       	breq	.-62     	; 0x72a <bridgeLoop+0x42>
          enc28j60_control(PIO_CONTROL_FLOW, 1);
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <enc28j60_control>
     770:	11 e0       	ldi	r17, 0x01	; 1
     772:	db cf       	rjmp	.-74     	; 0x72a <bridgeLoop+0x42>

00000774 <bridgeProcessPacket>:
 * by ETH_TYPE_* defines.
 * Custom "Magic" packets are defined as topmost EtherType values.
 * @param uwSize Packet length
 * @return Always PBPROTO_STATUS_OK
 */
uint8_t bridgeProcessPacket(uint16_t uwSize) {
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	ec 01       	movw	r28, r24
 * Returns EtherType field value in given eth frame.
 * @param pkt Pointer to eth frame.
 * @return 2-byte EtherType field value.
 */
inline uint16_t eth_get_pkt_type(const uint8_t *pkt) {
	return net_get_word(pkt + ETH_OFF_TYPE);
     77e:	84 e8       	ldi	r24, 0x84	; 132
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 26 06 	call	0xc4c	; 0xc4c <net_get_word>
  // get eth type
  uint16_t eth_type = eth_get_pkt_type(g_pDataBuffer);
  switch(eth_type) {
     786:	2f ef       	ldi	r18, 0xFF	; 255
     788:	8d 3f       	cpi	r24, 0xFD	; 253
     78a:	92 07       	cpc	r25, r18
     78c:	99 f1       	breq	.+102    	; 0x7f4 <bridgeProcessPacket+0x80>
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	8e 3f       	cpi	r24, 0xFE	; 254
     792:	92 07       	cpc	r25, r18
     794:	28 f4       	brcc	.+10     	; 0x7a0 <bridgeProcessPacket+0x2c>
     796:	8c 5f       	subi	r24, 0xFC	; 252
     798:	9f 4f       	sbci	r25, 0xFF	; 255
     79a:	09 f0       	breq	.+2      	; 0x79e <bridgeProcessPacket+0x2a>
     79c:	40 c0       	rjmp	.+128    	; 0x81e <bridgeProcessPacket+0xaa>
     79e:	32 c0       	rjmp	.+100    	; 0x804 <bridgeProcessPacket+0x90>
     7a0:	2f ef       	ldi	r18, 0xFF	; 255
     7a2:	8e 3f       	cpi	r24, 0xFE	; 254
     7a4:	92 07       	cpc	r25, r18
     7a6:	01 f1       	breq	.+64     	; 0x7e8 <bridgeProcessPacket+0x74>
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	9f 4f       	sbci	r25, 0xFF	; 255
     7ac:	c1 f5       	brne	.+112    	; 0x81e <bridgeProcessPacket+0xaa>
 * @param buf Pointer to magic packet.
 */
static void bridgeCommOnline(const uint8_t *buf)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] online \r\n
  s_ubFlags |= FLAG_ONLINE | FLAG_FIRST_TRANSFER;
     7ae:	80 91 51 01 	lds	r24, 0x0151
     7b2:	85 60       	ori	r24, 0x05	; 5
     7b4:	80 93 51 01 	sts	0x0151, r24

  // validate mac address and if it does not match then reconfigure PIO
  const uint8_t *src_mac = eth_get_src_mac(buf);
  if(!net_compare_mac(g_sConfig.mac_addr, src_mac)) {
     7b8:	84 e5       	ldi	r24, 0x54	; 84
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	6e e7       	ldi	r22, 0x7E	; 126
     7be:	71 e0       	ldi	r23, 0x01	; 1
     7c0:	0e 94 72 06 	call	0xce4	; 0xce4 <net_compare_mac>
     7c4:	88 23       	and	r24, r24
     7c6:	b9 f5       	brne	.+110    	; 0x836 <bridgeProcessPacket+0xc2>
    // update mac param and save
    net_copy_mac(src_mac, g_sConfig.mac_addr);
     7c8:	04 e5       	ldi	r16, 0x54	; 84
     7ca:	11 e0       	ldi	r17, 0x01	; 1
     7cc:	8e e7       	ldi	r24, 0x7E	; 126
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	b8 01       	movw	r22, r16
     7d2:	0e 94 06 06 	call	0xc0c	; 0xc0c <net_copy_mac>
    configSaveToRom();
     7d6:	0e 94 ba 07 	call	0xf74	; 0xf74 <configSaveToRom>

    // re-configure PIO
    enc28j60_exit();
     7da:	0e 94 9b 0c 	call	0x1936	; 0x1936 <enc28j60_exit>
    enc28j60_init(g_sConfig.mac_addr, PIO_INIT_BROAD_CAST);
     7de:	c8 01       	movw	r24, r16
     7e0:	64 e0       	ldi	r22, 0x04	; 4
     7e2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <enc28j60_init>
     7e6:	27 c0       	rjmp	.+78     	; 0x836 <bridgeProcessPacket+0xc2>
 * Disables ethernet communication.
 */
static void bridgeCommOffline(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] offline
  s_ubFlags &= ~FLAG_ONLINE;
     7e8:	80 91 51 01 	lds	r24, 0x0151
     7ec:	8e 7f       	andi	r24, 0xFE	; 254
     7ee:	80 93 51 01 	sts	0x0151, r24
     7f2:	21 c0       	rjmp	.+66     	; 0x836 <bridgeProcessPacket+0xc2>
}

static void bridgeLoopback(uint16_t size)
{
  s_ubFlags |= FLAG_SEND_MAGIC;
     7f4:	80 91 51 01 	lds	r24, 0x0151
     7f8:	82 60       	ori	r24, 0x02	; 2
     7fa:	80 93 51 01 	sts	0x0151, r24
  bridgeRequestResponseRead();
     7fe:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <bridgeRequestResponseRead>
     802:	19 c0       	rjmp	.+50     	; 0x836 <bridgeProcessPacket+0xc2>
      break;
    case ETH_TYPE_MAGIC_LOOPBACK:
      bridgeLoopback(uwSize);
      break;
		case ETH_TYPE_MAGIC_CMD:
			cmdProcess(uwSize);
     804:	ce 01       	movw	r24, r28
     806:	0e 94 61 04 	call	0x8c2	; 0x8c2 <cmdProcess>
			s_ubFlags |= FLAG_SEND_CMD_RESPONSE;
     80a:	80 91 51 01 	lds	r24, 0x0151
     80e:	88 60       	ori	r24, 0x08	; 8
     810:	80 93 51 01 	sts	0x0151, r24
			req_is_pending = 0;
     814:	10 92 3e 01 	sts	0x013E, r1
			bridgeRequestResponseRead();
     818:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <bridgeRequestResponseRead>
     81c:	0c c0       	rjmp	.+24     	; 0x836 <bridgeProcessPacket+0xc2>
			break;
    default:
      // send packet via pio
      pio_util_send_packet(uwSize);
     81e:	ce 01       	movw	r24, r28
     820:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <pio_util_send_packet>
      // if a packet arrived and we are not online then request online state
      if((s_ubFlags & FLAG_ONLINE)==0) {
     824:	80 91 51 01 	lds	r24, 0x0151
     828:	80 fd       	sbrc	r24, 0
     82a:	05 c0       	rjmp	.+10     	; 0x836 <bridgeProcessPacket+0xc2>
static void request_magic(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] request\r\n

  // request receive
  s_ubFlags |= FLAG_SEND_MAGIC | FLAG_FIRST_TRANSFER;
     82c:	86 60       	ori	r24, 0x06	; 6
     82e:	80 93 51 01 	sts	0x0151, r24
  bridgeRequestResponseRead();
     832:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <bridgeRequestResponseRead>
        request_magic();
      }
      break;
  }
  return PBPROTO_STATUS_OK;
}
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	08 95       	ret

00000842 <bridgeFillPacket>:

// ----- packet callbacks -----

// the Amiga requests a new packet

uint8_t bridgeFillPacket(uint16_t *pFilledSize) {
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	ec 01       	movw	r28, r24
  if((s_ubFlags & FLAG_SEND_MAGIC) == FLAG_SEND_MAGIC) {
     84c:	80 91 51 01 	lds	r24, 0x0151
     850:	81 ff       	sbrs	r24, 1
     852:	1c c0       	rjmp	.+56     	; 0x88c <bridgeFillPacket+0x4a>
		// Send magic packet to Amiga
    s_ubFlags &= ~FLAG_SEND_MAGIC;
     854:	8d 7f       	andi	r24, 0xFD	; 253
     856:	80 93 51 01 	sts	0x0151, r24
extern const uint8_t net_zero_mac[6];
extern const uint8_t net_zero_ip[4];
extern const uint8_t net_ones_ip[4];

/* convenience functions */
inline void net_copy_bcast_mac(uint8_t *out) { net_copy_mac(net_bcast_mac, out); }
     85a:	08 e7       	ldi	r16, 0x78	; 120
     85c:	11 e0       	ldi	r17, 0x01	; 1
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	b8 01       	movw	r22, r16
     864:	0e 94 06 06 	call	0xc0c	; 0xc0c <net_copy_mac>

    // Build magic packet header
    // Target (bcast) MAC, src (plipbox) MAC, 0xFFFF => pFilledSize: 14 bytes
    net_copy_bcast_mac(g_pDataBuffer + ETH_OFF_TGT_MAC);
    net_copy_mac(g_sConfig.mac_addr, g_pDataBuffer + ETH_OFF_SRC_MAC);
     868:	b8 01       	movw	r22, r16
     86a:	6a 5f       	subi	r22, 0xFA	; 250
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	84 e5       	ldi	r24, 0x54	; 84
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 06 06 	call	0xc0c	; 0xc0c <net_copy_mac>
    net_put_word(g_pDataBuffer + ETH_OFF_TYPE, ETH_TYPE_MAGIC_ONLINE);
     876:	c8 01       	movw	r24, r16
     878:	0c 96       	adiw	r24, 0x0c	; 12
     87a:	6f ef       	ldi	r22, 0xFF	; 255
     87c:	7f ef       	ldi	r23, 0xFF	; 255
     87e:	0e 94 30 06 	call	0xc60	; 0xc60 <net_put_word>

    *pFilledSize = ETH_HDR_SIZE;
     882:	8e e0       	ldi	r24, 0x0E	; 14
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	99 83       	std	Y+1, r25	; 0x01
     888:	88 83       	st	Y, r24
     88a:	13 c0       	rjmp	.+38     	; 0x8b2 <bridgeFillPacket+0x70>
  }
  else if((s_ubFlags & FLAG_SEND_CMD_RESPONSE) == FLAG_SEND_CMD_RESPONSE) {
     88c:	83 ff       	sbrs	r24, 3
     88e:	07 c0       	rjmp	.+14     	; 0x89e <bridgeFillPacket+0x5c>
    // Send CMD response - it's already in buffer
    *pFilledSize = g_uwCmdResponseSize;
     890:	80 91 52 01 	lds	r24, 0x0152
     894:	90 91 53 01 	lds	r25, 0x0153
     898:	99 83       	std	Y+1, r25	; 0x01
     89a:	88 83       	st	Y, r24
     89c:	0a c0       	rjmp	.+20     	; 0x8b2 <bridgeFillPacket+0x70>
  }
  else {
		// Receive packet buffer with data from ENC28j60 if pending
    pio_util_recv_packet(pFilledSize);
     89e:	ce 01       	movw	r24, r28
     8a0:	0e 94 ac 0b 	call	0x1758	; 0x1758 <pio_util_recv_packet>

    if(s_ubFlags & FLAG_FIRST_TRANSFER) {
     8a4:	80 91 51 01 	lds	r24, 0x0151
     8a8:	82 ff       	sbrs	r24, 2
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <bridgeFillPacket+0x70>
			// report first packet transfer
      // NOTE: UART - time_stamp_spc() FIRST TRANSFER!\r\n
      s_ubFlags &= ~FLAG_FIRST_TRANSFER;
     8ac:	8b 7f       	andi	r24, 0xFB	; 251
     8ae:	80 93 51 01 	sts	0x0151, r24
    }
  }

  req_is_pending = 0;
     8b2:	10 92 3e 01 	sts	0x013E, r1

  return PBPROTO_STATUS_OK;
}
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <cmdProcess>:

/**
 * PlipUltimate command process function.
 * This function should be called when cmd packet has been received.
 */
void cmdProcess(uint16_t uwPacketSize) {
     8c2:	1f 93       	push	r17
	uint8_t ubCmdType = g_pDataBuffer[0];
     8c4:	e8 e7       	ldi	r30, 0x78	; 120
     8c6:	f1 e0       	ldi	r31, 0x01	; 1
     8c8:	90 81       	ld	r25, Z
	g_pDataBuffer[0] |= CMD_RESPONSE;
     8ca:	89 2f       	mov	r24, r25
     8cc:	80 68       	ori	r24, 0x80	; 128
     8ce:	80 83       	st	Z, r24
	switch(ubCmdType) {
     8d0:	93 30       	cpi	r25, 0x03	; 3
     8d2:	41 f0       	breq	.+16     	; 0x8e4 <cmdProcess+0x22>
     8d4:	94 30       	cpi	r25, 0x04	; 4
     8d6:	b1 f0       	breq	.+44     	; 0x904 <__stack+0x5>
     8d8:	91 30       	cpi	r25, 0x01	; 1
     8da:	09 f0       	breq	.+2      	; 0x8de <cmdProcess+0x1c>
     8dc:	3f c0       	rjmp	.+126    	; 0x95c <__stack+0x5d>
		case CMD_SDWRITE:   cmdSdWrite();   return;
	}
}

static void cmdReboot(void) {
	utilReset();
     8de:	0e 94 5d 03 	call	0x6ba	; 0x6ba <utilReset>
     8e2:	3c c0       	rjmp	.+120    	; 0x95c <__stack+0x5d>
static void cmdGetLog(void) {
	// TODO(KaiN#9): implement cmdGetLog()
}

static void cmdGetConfig(void) {
	memcpy(&g_pDataBuffer[ETH_HDR_SIZE], &g_sConfig, sizeof(tConfig));
     8e4:	a6 e8       	ldi	r26, 0x86	; 134
     8e6:	b1 e0       	ldi	r27, 0x01	; 1
     8e8:	e4 e5       	ldi	r30, 0x54	; 84
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	84 e1       	ldi	r24, 0x14	; 20
     8ee:	01 90       	ld	r0, Z+
     8f0:	0d 92       	st	X+, r0
     8f2:	81 50       	subi	r24, 0x01	; 1
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <cmdProcess+0x2c>
	g_uwCmdResponseSize = ETH_HDR_SIZE + sizeof(tConfig);
     8f6:	82 e2       	ldi	r24, 0x22	; 34
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	90 93 53 01 	sts	0x0153, r25
     8fe:	80 93 52 01 	sts	0x0152, r24
     902:	2c c0       	rjmp	.+88     	; 0x95c <__stack+0x5d>
}

static void cmdSetConfig(void) {
	uint8_t ubResult = 1;

	if(
     904:	80 91 79 01 	lds	r24, 0x0179
     908:	81 50       	subi	r24, 0x01	; 1
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	10 f0       	brcs	.+4      	; 0x912 <__stack+0x13>
     90e:	13 e0       	ldi	r17, 0x03	; 3
     910:	1d c0       	rjmp	.+58     	; 0x94c <__stack+0x4d>
	) {
		ubResult |= 0b10;
	}
	else {
		// Update current config
		memcpy(&g_sConfig, &g_pDataBuffer[ETH_HDR_SIZE], sizeof(tConfig));
     912:	a4 e5       	ldi	r26, 0x54	; 84
     914:	b1 e0       	ldi	r27, 0x01	; 1
     916:	e6 e8       	ldi	r30, 0x86	; 134
     918:	f1 e0       	ldi	r31, 0x01	; 1
     91a:	84 e1       	ldi	r24, 0x14	; 20
     91c:	01 90       	ld	r0, Z+
     91e:	0d 92       	st	X+, r0
     920:	81 50       	subi	r24, 0x01	; 1
     922:	e1 f7       	brne	.-8      	; 0x91c <__stack+0x1d>

		// Update ROM config
		if(g_pDataBuffer[1] == WRITE_TYPE_DEFAULT) {
     924:	80 91 79 01 	lds	r24, 0x0179
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	31 f4       	brne	.+12     	; 0x938 <__stack+0x39>
			if(configSaveToRom())
     92c:	0e 94 ba 07 	call	0xf74	; 0xf74 <configSaveToRom>
     930:	88 23       	and	r24, r24
     932:	11 f0       	breq	.+4      	; 0x938 <__stack+0x39>
     934:	15 e0       	ldi	r17, 0x05	; 5
     936:	01 c0       	rjmp	.+2      	; 0x93a <__stack+0x3b>
     938:	11 e0       	ldi	r17, 0x01	; 1
				ubResult |= 0b100;
		}

		// Reconfigure plip
		enc28j60_exit();
     93a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <enc28j60_exit>
		enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
     93e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <pio_util_get_init_flags>
     942:	68 2f       	mov	r22, r24
     944:	84 e5       	ldi	r24, 0x54	; 84
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <enc28j60_init>
	}

	// Prepare response
	g_pDataBuffer[1] = ubResult;
     94c:	10 93 79 01 	sts	0x0179, r17
	g_uwCmdResponseSize = ETH_HDR_SIZE;
     950:	8e e0       	ldi	r24, 0x0E	; 14
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 53 01 	sts	0x0153, r25
     958:	80 93 52 01 	sts	0x0152, r24
		case CMD_SETCONFIG: cmdSetConfig(); return;
		case CMD_SDINFO:    cmdGetSdInfo(); return;
		case CMD_SDREAD:    cmdSdRead();    return;
		case CMD_SDWRITE:   cmdSdWrite();   return;
	}
}
     95c:	1f 91       	pop	r17
     95e:	08 95       	ret

00000960 <cmd_param_ip_addr>:
    return CMD_PARSE_ERROR;
  }
}

COMMAND(cmd_param_ip_addr)
{
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	00 d0       	rcall	.+0      	; 0x966 <cmd_param_ip_addr+0x6>
     966:	00 d0       	rcall	.+0      	; 0x968 <cmd_param_ip_addr+0x8>
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	fb 01       	movw	r30, r22
  uint8_t ip[4];

  if(net_parse_ip((char*)argv[1], ip)) {
     96e:	82 81       	ldd	r24, Z+2	; 0x02
     970:	93 81       	ldd	r25, Z+3	; 0x03
     972:	be 01       	movw	r22, r28
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <net_parse_ip>
     97c:	88 23       	and	r24, r24
     97e:	11 f4       	brne	.+4      	; 0x984 <cmd_param_ip_addr+0x24>
     980:	81 e1       	ldi	r24, 0x11	; 17
     982:	07 c0       	rjmp	.+14     	; 0x992 <cmd_param_ip_addr+0x32>
    net_copy_ip(ip, g_sConfig.test_ip);
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	60 e6       	ldi	r22, 0x60	; 96
     98a:	71 e0       	ldi	r23, 0x01	; 1
     98c:	0e 94 15 06 	call	0xc2a	; 0xc2a <net_copy_ip>
     990:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	cf 91       	pop	r28
     99c:	df 91       	pop	r29
     99e:	08 95       	ret

000009a0 <cmd_param_word>:
  }
  return result;
}

COMMAND(cmd_param_word)
{
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	df 93       	push	r29
     9a6:	cf 93       	push	r28
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <cmd_param_word+0xa>
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	28 2f       	mov	r18, r24
     9b0:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     9b2:	ed 91       	ld	r30, X+
     9b4:	fc 91       	ld	r31, X
     9b6:	11 97       	sbiw	r26, 0x01	; 1
  uint8_t type = argv[0][1];
     9b8:	91 81       	ldd	r25, Z+1	; 0x01
  uint16_t *val = 0;

  if(group == 't') {
     9ba:	80 81       	ld	r24, Z
     9bc:	84 37       	cpi	r24, 0x74	; 116
     9be:	19 f5       	brne	.+70     	; 0xa06 <cmd_param_word+0x66>
    switch(type) {
     9c0:	90 37       	cpi	r25, 0x70	; 112
     9c2:	59 f0       	breq	.+22     	; 0x9da <cmd_param_word+0x3a>
     9c4:	94 37       	cpi	r25, 0x74	; 116
     9c6:	19 f0       	breq	.+6      	; 0x9ce <cmd_param_word+0x2e>
     9c8:	9c 36       	cpi	r25, 0x6C	; 108
     9ca:	e9 f4       	brne	.+58     	; 0xa06 <cmd_param_word+0x66>
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <cmd_param_word+0x34>
     9ce:	0e e5       	ldi	r16, 0x5E	; 94
     9d0:	11 e0       	ldi	r17, 0x01	; 1
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <cmd_param_word+0x3e>
     9d4:	0c e5       	ldi	r16, 0x5C	; 92
     9d6:	11 e0       	ldi	r17, 0x01	; 1
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <cmd_param_word+0x3e>
     9da:	04 e6       	ldi	r16, 0x64	; 100
     9dc:	11 e0       	ldi	r17, 0x01	; 1
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     9de:	21 30       	cpi	r18, 0x01	; 1
     9e0:	91 f0       	breq	.+36     	; 0xa06 <cmd_param_word+0x66>
    return CMD_PARSE_ERROR;
  } else {
    uint16_t new_val;
    if(utilParseWordHex((char*)argv[1],&new_val)) {
     9e2:	12 96       	adiw	r26, 0x02	; 2
     9e4:	8d 91       	ld	r24, X+
     9e6:	9c 91       	ld	r25, X
     9e8:	13 97       	sbiw	r26, 0x03	; 3
     9ea:	be 01       	movw	r22, r28
     9ec:	6f 5f       	subi	r22, 0xFF	; 255
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	0e 94 ab 02 	call	0x556	; 0x556 <utilParseWordHex>
     9f4:	88 23       	and	r24, r24
     9f6:	39 f0       	breq	.+14     	; 0xa06 <cmd_param_word+0x66>
      *val = new_val;
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	f8 01       	movw	r30, r16
     9fe:	91 83       	std	Z+1, r25	; 0x01
     a00:	80 83       	st	Z, r24
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <cmd_param_word+0x68>
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return CMD_OK;
     a06:	81 e1       	ldi	r24, 0x11	; 17
}
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	cf 91       	pop	r28
     a0e:	df 91       	pop	r29
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	08 95       	ret

00000a16 <cmd_param_toggle>:
#include "net/net.h"
#include "param.h"
#include "stats.h"

COMMAND(cmd_param_toggle)
{
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	1f 93       	push	r17
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	0f 92       	push	r0
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     a28:	ed 91       	ld	r30, X+
     a2a:	fc 91       	ld	r31, X
     a2c:	11 97       	sbiw	r26, 0x01	; 1
     a2e:	90 81       	ld	r25, Z
  uint8_t type = argv[0][1];
     a30:	21 81       	ldd	r18, Z+1	; 0x01
  uint8_t *val = 0;
  uint8_t result = CMD_OK;

  if(group == 't') {
     a32:	94 37       	cpi	r25, 0x74	; 116
     a34:	41 f4       	brne	.+16     	; 0xa46 <cmd_param_toggle+0x30>
    switch(type) {
     a36:	2d 36       	cpi	r18, 0x6D	; 109
     a38:	71 f5       	brne	.+92     	; 0xa96 <cmd_param_toggle+0x80>
     a3a:	e7 e6       	ldi	r30, 0x67	; 103
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	90 81       	ld	r25, Z
     a40:	7f 01       	movw	r14, r30
     a42:	10 e0       	ldi	r17, 0x00	; 0
     a44:	11 c0       	rjmp	.+34     	; 0xa68 <cmd_param_toggle+0x52>
      case 'm': val = &g_sConfig.test_mode; break;
      default: return CMD_PARSE_ERROR;
    }
  }
  else if(group == 'f') {
     a46:	96 36       	cpi	r25, 0x66	; 102
     a48:	31 f5       	brne	.+76     	; 0xa96 <cmd_param_toggle+0x80>
    switch(type) {
     a4a:	23 36       	cpi	r18, 0x63	; 99
     a4c:	41 f0       	breq	.+16     	; 0xa5e <cmd_param_toggle+0x48>
     a4e:	24 36       	cpi	r18, 0x64	; 100
     a50:	11 f5       	brne	.+68     	; 0xa96 <cmd_param_toggle+0x80>
     a52:	eb e5       	ldi	r30, 0x5B	; 91
     a54:	f1 e0       	ldi	r31, 0x01	; 1
     a56:	90 81       	ld	r25, Z
     a58:	7f 01       	movw	r14, r30
     a5a:	13 e0       	ldi	r17, 0x03	; 3
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <cmd_param_toggle+0x52>
     a5e:	ea e5       	ldi	r30, 0x5A	; 90
     a60:	f1 e0       	ldi	r31, 0x01	; 1
     a62:	90 81       	ld	r25, Z
     a64:	7f 01       	movw	r14, r30
     a66:	13 e0       	ldi	r17, 0x03	; 3
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	31 f4       	brne	.+12     	; 0xa78 <cmd_param_toggle+0x62>
    // toggle value if no argument is given
    *val = *val ? 0 : 1;
     a6c:	f7 01       	movw	r30, r14
     a6e:	10 82       	st	Z, r1
     a70:	99 23       	and	r25, r25
     a72:	91 f4       	brne	.+36     	; 0xa98 <cmd_param_toggle+0x82>
     a74:	80 83       	st	Z, r24
     a76:	10 c0       	rjmp	.+32     	; 0xa98 <cmd_param_toggle+0x82>
  } else {
    uint8_t new_val;
    if(utilParseByteHex((char*)argv[1],&new_val)) {
     a78:	12 96       	adiw	r26, 0x02	; 2
     a7a:	8d 91       	ld	r24, X+
     a7c:	9c 91       	ld	r25, X
     a7e:	13 97       	sbiw	r26, 0x03	; 3
     a80:	be 01       	movw	r22, r28
     a82:	6f 5f       	subi	r22, 0xFF	; 255
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <utilParseByteHex>
     a8a:	88 23       	and	r24, r24
     a8c:	21 f0       	breq	.+8      	; 0xa96 <cmd_param_toggle+0x80>
      *val = new_val;
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	f7 01       	movw	r30, r14
     a92:	80 83       	st	Z, r24
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <cmd_param_toggle+0x82>
     a96:	11 e1       	ldi	r17, 0x11	; 17
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return result;
}
     a98:	81 2f       	mov	r24, r17
     a9a:	0f 90       	pop	r0
     a9c:	cf 91       	pop	r28
     a9e:	df 91       	pop	r29
     aa0:	1f 91       	pop	r17
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	08 95       	ret

00000aa8 <cmd_param_mac_addr>:
  }
  return CMD_OK;
}

COMMAND(cmd_param_mac_addr)
{
     aa8:	df 93       	push	r29
     aaa:	cf 93       	push	r28
     aac:	00 d0       	rcall	.+0      	; 0xaae <cmd_param_mac_addr+0x6>
     aae:	00 d0       	rcall	.+0      	; 0xab0 <cmd_param_mac_addr+0x8>
     ab0:	00 d0       	rcall	.+0      	; 0xab2 <cmd_param_mac_addr+0xa>
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	fb 01       	movw	r30, r22
  uint8_t mac[6];

  if(net_parse_mac((char*)argv[1], mac)) {
     ab8:	82 81       	ldd	r24, Z+2	; 0x02
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	be 01       	movw	r22, r28
     abe:	6f 5f       	subi	r22, 0xFF	; 255
     ac0:	7f 4f       	sbci	r23, 0xFF	; 255
     ac2:	0e 94 c1 06 	call	0xd82	; 0xd82 <net_parse_mac>
     ac6:	88 23       	and	r24, r24
     ac8:	11 f4       	brne	.+4      	; 0xace <cmd_param_mac_addr+0x26>
     aca:	81 e1       	ldi	r24, 0x11	; 17
     acc:	07 c0       	rjmp	.+14     	; 0xadc <cmd_param_mac_addr+0x34>
    net_copy_mac(mac, g_sConfig.mac_addr);
     ace:	ce 01       	movw	r24, r28
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	64 e5       	ldi	r22, 0x54	; 84
     ad4:	71 e0       	ldi	r23, 0x01	; 1
     ad6:	0e 94 06 06 	call	0xc0c	; 0xc0c <net_copy_mac>
     ada:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     adc:	26 96       	adiw	r28, 0x06	; 6
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	cf 91       	pop	r28
     aea:	df 91       	pop	r29
     aec:	08 95       	ret

00000aee <cmd_stats_reset>:
  return CMD_OK;
}

COMMAND(cmd_stats_reset)
{
  stats_reset();
     aee:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <stats_reset>
  return CMD_OK;
}
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	08 95       	ret

00000af6 <cmd_stats_dump>:
  }
}

COMMAND(cmd_stats_dump)
{
  stats_dump_all();
     af6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <stats_dump_all>
  return CMD_OK;
}
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	08 95       	ret

00000afe <cmd_dump_stats>:
#include "stats.h"
#include "base/uartutil.h"

COMMAND_KEY(cmd_dump_stats)
{
  stats_dump_all();
     afe:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <stats_dump_all>
}
     b02:	08 95       	ret

00000b04 <main>:
 */

int main(void)
{
	// Disable watchdog
	cli();
     b04:	f8 94       	cli
	wdt_reset();
     b06:	a8 95       	wdr
	MCUSR=0;
     b08:	14 be       	out	0x34, r1	; 52
	WDTCSR|=_BV(WDCE) | _BV(WDE);
     b0a:	e0 e6       	ldi	r30, 0x60	; 96
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	88 61       	ori	r24, 0x18	; 24
     b12:	80 83       	st	Z, r24
	WDTCSR=0;
     b14:	10 82       	st	Z, r1
	sei();
     b16:	78 94       	sei

	// Setup timers
	timerInit();
     b18:	0e 94 03 01 	call	0x206	; 0x206 <timerInit>

  // Initialize status LED
  LED_DDR |= LED_STATUS;
     b1c:	e7 e2       	ldi	r30, 0x27	; 39
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	80 62       	ori	r24, 0x20	; 32
     b24:	80 83       	st	Z, r24
  LED_PORT |= LED_STATUS;
     b26:	e8 e2       	ldi	r30, 0x28	; 40
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	80 62       	ori	r24, 0x20	; 32
     b2e:	80 83       	st	Z, r24

	// Load config
	configInit();
     b30:	0e 94 b3 07 	call	0xf66	; 0xf66 <configInit>

	// Do the main loop
	bridgeLoop();
     b34:	0e 94 74 03 	call	0x6e8	; 0x6e8 <bridgeLoop>

  return 0;
}
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	08 95       	ret

00000b3e <arp_make_reply>:

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
}

void arp_make_reply(uint8_t *buf, const uint8_t *my_mac, const uint8_t *my_ip)
{
     b3e:	8f 92       	push	r8
     b40:	9f 92       	push	r9
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	8c 01       	movw	r16, r24
     b54:	5b 01       	movw	r10, r22
     b56:	4a 01       	movw	r8, r20
	// make a reply
	net_put_word(buf + ARP_OFF_OP, ARP_REPLY);
     b58:	06 96       	adiw	r24, 0x06	; 6
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	0e 94 30 06 	call	0xc60	; 0xc60 <net_put_word>
	net_copy_mac(buf + ARP_OFF_SRC_MAC, buf + ARP_OFF_TGT_MAC);
     b62:	cc 24       	eor	r12, r12
     b64:	dd 24       	eor	r13, r13
     b66:	68 94       	set
     b68:	c3 f8       	bld	r12, 3
     b6a:	c0 0e       	add	r12, r16
     b6c:	d1 1e       	adc	r13, r17
     b6e:	b8 01       	movw	r22, r16
     b70:	6e 5e       	subi	r22, 0xEE	; 238
     b72:	7f 4f       	sbci	r23, 0xFF	; 255
     b74:	c6 01       	movw	r24, r12
     b76:	0e 94 06 06 	call	0xc0c	; 0xc0c <net_copy_mac>
	net_copy_ip(buf + ARP_OFF_SRC_IP, buf + ARP_OFF_TGT_IP);
     b7a:	0f 2e       	mov	r0, r31
     b7c:	fe e0       	ldi	r31, 0x0E	; 14
     b7e:	ef 2e       	mov	r14, r31
     b80:	ff 24       	eor	r15, r15
     b82:	f0 2d       	mov	r31, r0
     b84:	e0 0e       	add	r14, r16
     b86:	f1 1e       	adc	r15, r17
     b88:	08 5e       	subi	r16, 0xE8	; 232
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
     b8c:	c7 01       	movw	r24, r14
     b8e:	b8 01       	movw	r22, r16
     b90:	0e 94 15 06 	call	0xc2a	; 0xc2a <net_copy_ip>
	net_copy_mac(my_mac, buf + ARP_OFF_SRC_MAC);
     b94:	c5 01       	movw	r24, r10
     b96:	b6 01       	movw	r22, r12
     b98:	0e 94 06 06 	call	0xc0c	; 0xc0c <net_copy_mac>
	net_copy_ip(my_ip, buf + ARP_OFF_SRC_IP);
     b9c:	c4 01       	movw	r24, r8
     b9e:	b7 01       	movw	r22, r14
     ba0:	0e 94 15 06 	call	0xc2a	; 0xc2a <net_copy_ip>
}
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	cf 90       	pop	r12
     bb0:	bf 90       	pop	r11
     bb2:	af 90       	pop	r10
     bb4:	9f 90       	pop	r9
     bb6:	8f 90       	pop	r8
     bb8:	08 95       	ret

00000bba <arp_is_ipv4>:

#include "arp.h"
#include "net.h"

uint8_t arp_is_ipv4(const uint8_t *buf, uint16_t len)
{
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	ec 01       	movw	r28, r24
  if(len < ARP_SIZE) {
     bc4:	6c 31       	cpi	r22, 0x1C	; 28
     bc6:	71 05       	cpc	r23, r1
     bc8:	10 f4       	brcc	.+4      	; 0xbce <arp_is_ipv4+0x14>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	1a c0       	rjmp	.+52     	; 0xc02 <arp_is_ipv4+0x48>
    return 0;
  }

  uint16_t hw_type = net_get_word(buf + ARP_OFF_HW_TYPE);
     bce:	0e 94 26 06 	call	0xc4c	; 0xc4c <net_get_word>
     bd2:	8c 01       	movw	r16, r24
  uint16_t pt_type = net_get_word(buf + ARP_OFF_PROT_TYPE);
     bd4:	ce 01       	movw	r24, r28
     bd6:	02 96       	adiw	r24, 0x02	; 2
     bd8:	0e 94 26 06 	call	0xc4c	; 0xc4c <net_get_word>
  uint8_t hw_size = buf[ARP_OFF_HW_SIZE];
     bdc:	2c 81       	ldd	r18, Y+4	; 0x04
  uint8_t pt_size = buf[ARP_OFF_PROT_SIZE];
     bde:	3d 81       	ldd	r19, Y+5	; 0x05

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
     be0:	01 30       	cpi	r16, 0x01	; 1
     be2:	11 05       	cpc	r17, r1
     be4:	61 f4       	brne	.+24     	; 0xbfe <arp_is_ipv4+0x44>
     be6:	80 50       	subi	r24, 0x00	; 0
     be8:	98 40       	sbci	r25, 0x08	; 8
     bea:	49 f4       	brne	.+18     	; 0xbfe <arp_is_ipv4+0x44>
     bec:	26 30       	cpi	r18, 0x06	; 6
     bee:	39 f4       	brne	.+14     	; 0xbfe <arp_is_ipv4+0x44>
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	34 30       	cpi	r19, 0x04	; 4
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <arp_is_ipv4+0x3e>
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	89 27       	eor	r24, r25
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <arp_is_ipv4+0x48>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <net_copy_mac>:
const uint8_t net_bcast_mac[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
const uint8_t net_zero_mac[6] = { 0,0,0,0,0,0 };
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
     c0c:	ac 01       	movw	r20, r24
     c0e:	25 e0       	ldi	r18, 0x05	; 5
	uint8_t i;
  for(i=6; i--;)
    out[i] = in[i];
     c10:	82 2f       	mov	r24, r18
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	db 01       	movw	r26, r22
     c16:	a8 0f       	add	r26, r24
     c18:	b9 1f       	adc	r27, r25
     c1a:	fa 01       	movw	r30, r20
     c1c:	e8 0f       	add	r30, r24
     c1e:	f9 1f       	adc	r31, r25
     c20:	80 81       	ld	r24, Z
     c22:	8c 93       	st	X, r24
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
	uint8_t i;
  for(i=6; i--;)
     c24:	21 50       	subi	r18, 0x01	; 1
     c26:	a0 f7       	brcc	.-24     	; 0xc10 <net_copy_mac+0x4>
    out[i] = in[i];
}
     c28:	08 95       	ret

00000c2a <net_copy_ip>:

void net_copy_ip(const uint8_t *in, uint8_t *out) {
     c2a:	fc 01       	movw	r30, r24
     c2c:	db 01       	movw	r26, r22
	uint8_t i;
  for(i = 4; i--;)
		out[i] = in[i];
     c2e:	83 81       	ldd	r24, Z+3	; 0x03
     c30:	13 96       	adiw	r26, 0x03	; 3
     c32:	8c 93       	st	X, r24
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	12 96       	adiw	r26, 0x02	; 2
     c3a:	8c 93       	st	X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	81 81       	ldd	r24, Z+1	; 0x01
     c40:	11 96       	adiw	r26, 0x01	; 1
     c42:	8c 93       	st	X, r24
     c44:	11 97       	sbiw	r26, 0x01	; 1
     c46:	80 81       	ld	r24, Z
     c48:	8c 93       	st	X, r24
}
     c4a:	08 95       	ret

00000c4c <net_get_word>:

uint16_t  net_get_word(const uint8_t *buf) {
     c4c:	fc 01       	movw	r30, r24
     c4e:	21 81       	ldd	r18, Z+1	; 0x01
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	90 81       	ld	r25, Z
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	28 2b       	or	r18, r24
     c58:	39 2b       	or	r19, r25
  return (uint16_t)buf[0] << 8 | (uint16_t)buf[1];
}
     c5a:	82 2f       	mov	r24, r18
     c5c:	93 2f       	mov	r25, r19
     c5e:	08 95       	ret

00000c60 <net_put_word>:

void net_put_word(uint8_t *buf, uint16_t value)
{
     c60:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 8);
     c62:	70 83       	st	Z, r23
  buf[1] = (uint8_t)(value & 0xff);
     c64:	61 83       	std	Z+1, r22	; 0x01
}
     c66:	08 95       	ret

00000c68 <net_get_long>:

uint32_t  net_get_long(const uint8_t *buf)
{
     c68:	fc 01       	movw	r30, r24
     c6a:	23 81       	ldd	r18, Z+3	; 0x03
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	a0 e0       	ldi	r26, 0x00	; 0
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	b8 2f       	mov	r27, r24
     c7c:	aa 27       	eor	r26, r26
     c7e:	99 27       	eor	r25, r25
     c80:	88 27       	eor	r24, r24
     c82:	28 2b       	or	r18, r24
     c84:	39 2b       	or	r19, r25
     c86:	4a 2b       	or	r20, r26
     c88:	5b 2b       	or	r21, r27
     c8a:	81 81       	ldd	r24, Z+1	; 0x01
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	dc 01       	movw	r26, r24
     c94:	99 27       	eor	r25, r25
     c96:	88 27       	eor	r24, r24
     c98:	28 2b       	or	r18, r24
     c9a:	39 2b       	or	r19, r25
     c9c:	4a 2b       	or	r20, r26
     c9e:	5b 2b       	or	r21, r27
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	a0 e0       	ldi	r26, 0x00	; 0
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ba 2f       	mov	r27, r26
     caa:	a9 2f       	mov	r26, r25
     cac:	98 2f       	mov	r25, r24
     cae:	88 27       	eor	r24, r24
     cb0:	28 2b       	or	r18, r24
     cb2:	39 2b       	or	r19, r25
     cb4:	4a 2b       	or	r20, r26
     cb6:	5b 2b       	or	r21, r27
  return (uint32_t)buf[0] << 24 | (uint32_t)buf[1] << 16 | (uint32_t)buf[2] << 8 | (uint32_t)buf[3];
}
     cb8:	62 2f       	mov	r22, r18
     cba:	73 2f       	mov	r23, r19
     cbc:	84 2f       	mov	r24, r20
     cbe:	95 2f       	mov	r25, r21
     cc0:	08 95       	ret

00000cc2 <net_put_long>:

void net_put_long(uint8_t *buf, uint32_t value)
{
     cc2:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 24);
     cc4:	87 2f       	mov	r24, r23
     cc6:	99 27       	eor	r25, r25
     cc8:	aa 27       	eor	r26, r26
     cca:	bb 27       	eor	r27, r27
     ccc:	80 83       	st	Z, r24
  buf[1] = (uint8_t)((value >> 16) & 0xff);
     cce:	cb 01       	movw	r24, r22
     cd0:	aa 27       	eor	r26, r26
     cd2:	bb 27       	eor	r27, r27
     cd4:	81 83       	std	Z+1, r24	; 0x01
  buf[2] = (uint8_t)((value >> 8) & 0xff);
     cd6:	bb 27       	eor	r27, r27
     cd8:	a7 2f       	mov	r26, r23
     cda:	96 2f       	mov	r25, r22
     cdc:	85 2f       	mov	r24, r21
     cde:	82 83       	std	Z+2, r24	; 0x02
  buf[3] = (uint8_t)(value & 0xff);
     ce0:	43 83       	std	Z+3, r20	; 0x03
}
     ce2:	08 95       	ret

00000ce4 <net_compare_mac>:
    pos += 4;
  }
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
     ce4:	ac 01       	movw	r20, r24
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++)
    if(a[i] != b[i])
     cea:	fa 01       	movw	r30, r20
     cec:	e2 0f       	add	r30, r18
     cee:	f3 1f       	adc	r31, r19
     cf0:	db 01       	movw	r26, r22
     cf2:	a2 0f       	add	r26, r18
     cf4:	b3 1f       	adc	r27, r19
     cf6:	90 81       	ld	r25, Z
     cf8:	8c 91       	ld	r24, X
     cfa:	98 17       	cp	r25, r24
     cfc:	11 f0       	breq	.+4      	; 0xd02 <net_compare_mac+0x1e>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	08 95       	ret
     d02:	2f 5f       	subi	r18, 0xFF	; 255
     d04:	3f 4f       	sbci	r19, 0xFF	; 255
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<6;i++)
     d06:	26 30       	cpi	r18, 0x06	; 6
     d08:	31 05       	cpc	r19, r1
     d0a:	79 f7       	brne	.-34     	; 0xcea <net_compare_mac+0x6>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
     d0e:	08 95       	ret

00000d10 <net_compare_ip>:

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
     d10:	ac 01       	movw	r20, r24
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++)
    if(a[i] != b[i])
     d16:	fa 01       	movw	r30, r20
     d18:	e2 0f       	add	r30, r18
     d1a:	f3 1f       	adc	r31, r19
     d1c:	db 01       	movw	r26, r22
     d1e:	a2 0f       	add	r26, r18
     d20:	b3 1f       	adc	r27, r19
     d22:	90 81       	ld	r25, Z
     d24:	8c 91       	ld	r24, X
     d26:	98 17       	cp	r25, r24
     d28:	11 f0       	breq	.+4      	; 0xd2e <net_compare_ip+0x1e>
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	08 95       	ret
     d2e:	2f 5f       	subi	r18, 0xFF	; 255
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
  return 1;
}

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<4;i++)
     d32:	24 30       	cpi	r18, 0x04	; 4
     d34:	31 05       	cpc	r19, r1
     d36:	79 f7       	brne	.-34     	; 0xd16 <net_compare_ip+0x6>
     d38:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
     d3a:	08 95       	ret

00000d3c <net_dump_ip>:
    mac[i] = value;
  }
  return 1;
}

void net_dump_ip(const uint8_t *in) {
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
     d48:	20 91 24 01 	lds	r18, 0x0124
     d4c:	30 91 25 01 	lds	r19, 0x0125
     d50:	8c 01       	movw	r16, r24
     d52:	e9 01       	movw	r28, r18
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
     d54:	ee 24       	eor	r14, r14
     d56:	ff 24       	eor	r15, r15
     d58:	68 94       	set
     d5a:	e4 f8       	bld	r14, 4
     d5c:	e2 0e       	add	r14, r18
     d5e:	f3 1e       	adc	r15, r19
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
     d60:	f8 01       	movw	r30, r16
     d62:	81 91       	ld	r24, Z+
     d64:	8f 01       	movw	r16, r30
     d66:	be 01       	movw	r22, r28
     d68:	0e 94 fe 01 	call	0x3fc	; 0x3fc <utilByteToDec>
     d6c:	24 96       	adiw	r28, 0x04	; 4
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
     d6e:	ce 15       	cp	r28, r14
     d70:	df 05       	cpc	r29, r15
     d72:	b1 f7       	brne	.-20     	; 0xd60 <net_dump_ip+0x24>
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    pos += 4;
  }
  // NOTE: UART - ip_str
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	08 95       	ret

00000d82 <net_parse_mac>:
    ip[i] = value;
  }
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
     d82:	af 92       	push	r10
     d84:	bf 92       	push	r11
     d86:	cf 92       	push	r12
     d88:	df 92       	push	r13
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	7c 01       	movw	r14, r24
     d9e:	6b 01       	movw	r12, r22
     da0:	00 e0       	ldi	r16, 0x00	; 0
     da2:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++) {
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
     da4:	5e 01       	movw	r10, r28
     da6:	08 94       	sec
     da8:	a1 1c       	adc	r10, r1
     daa:	b1 1c       	adc	r11, r1
     dac:	c7 01       	movw	r24, r14
     dae:	b5 01       	movw	r22, r10
     db0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <utilParseByteHex>
     db4:	88 23       	and	r24, r24
     db6:	89 f0       	breq	.+34     	; 0xdda <net_parse_mac+0x58>
      return 0;
    }
    buf += 3;
    mac[i] = value;
     db8:	f6 01       	movw	r30, r12
     dba:	e0 0f       	add	r30, r16
     dbc:	f1 1f       	adc	r31, r17
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	80 83       	st	Z, r24
     dc2:	0f 5f       	subi	r16, 0xFF	; 255
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
	uint8_t i;
  for(i=0;i<6;i++) {
     dc6:	06 30       	cpi	r16, 0x06	; 6
     dc8:	11 05       	cpc	r17, r1
     dca:	11 f4       	brne	.+4      	; 0xdd0 <net_parse_mac+0x4e>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	06 c0       	rjmp	.+12     	; 0xddc <net_parse_mac+0x5a>
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
      return 0;
    }
    buf += 3;
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	e8 0e       	add	r14, r24
     dd6:	f9 1e       	adc	r15, r25
     dd8:	e9 cf       	rjmp	.-46     	; 0xdac <net_parse_mac+0x2a>
     dda:	80 e0       	ldi	r24, 0x00	; 0
    mac[i] = value;
  }
  return 1;
}
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	bf 90       	pop	r11
     df0:	af 90       	pop	r10
     df2:	08 95       	ret

00000df4 <net_parse_ip>:
    pos += 3;
  }
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	0f 92       	push	r0
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	7c 01       	movw	r14, r24
     e10:	6b 01       	movw	r12, r22
     e12:	00 e0       	ldi	r16, 0x00	; 0
     e14:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++) {
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
     e16:	5e 01       	movw	r10, r28
     e18:	08 94       	sec
     e1a:	a1 1c       	adc	r10, r1
     e1c:	b1 1c       	adc	r11, r1
     e1e:	c7 01       	movw	r24, r14
     e20:	b5 01       	movw	r22, r10
     e22:	0e 94 45 03 	call	0x68a	; 0x68a <utilParseByteDec>
     e26:	98 2f       	mov	r25, r24
    if(digits == 0)
     e28:	88 23       	and	r24, r24
     e2a:	91 f0       	breq	.+36     	; 0xe50 <net_parse_ip+0x5c>
      return 0;
    buf += digits + 1;
    ip[i] = value;
     e2c:	f6 01       	movw	r30, r12
     e2e:	e0 0f       	add	r30, r16
     e30:	f1 1f       	adc	r31, r17
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	80 83       	st	Z, r24
     e36:	0f 5f       	subi	r16, 0xFF	; 255
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
	uint8_t i;
  for(i=0;i<4;i++) {
     e3a:	04 30       	cpi	r16, 0x04	; 4
     e3c:	11 05       	cpc	r17, r1
     e3e:	11 f4       	brne	.+4      	; 0xe44 <net_parse_ip+0x50>
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	07 c0       	rjmp	.+14     	; 0xe52 <net_parse_ip+0x5e>
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
    if(digits == 0)
      return 0;
    buf += digits + 1;
     e44:	89 2f       	mov	r24, r25
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	e8 0e       	add	r14, r24
     e4c:	f9 1e       	adc	r15, r25
     e4e:	e7 cf       	rjmp	.-50     	; 0xe1e <net_parse_ip+0x2a>
     e50:	80 e0       	ldi	r24, 0x00	; 0
    ip[i] = value;
  }
  return 1;
}
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	bf 90       	pop	r11
     e66:	af 90       	pop	r10
     e68:	08 95       	ret

00000e6a <net_dump_mac>:
}

static char *mac_str = "00:00:00:00:00:00";
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
    utilByteToHex(in[i], mac_str+pos);
     e76:	e0 90 38 01 	lds	r14, 0x0138
     e7a:	f0 90 39 01 	lds	r15, 0x0139
     e7e:	8c 01       	movw	r16, r24
     e80:	c0 e0       	ldi	r28, 0x00	; 0
     e82:	d0 e0       	ldi	r29, 0x00	; 0
     e84:	b7 01       	movw	r22, r14
     e86:	6c 0f       	add	r22, r28
     e88:	7d 1f       	adc	r23, r29
     e8a:	f8 01       	movw	r30, r16
     e8c:	81 91       	ld	r24, Z+
     e8e:	8f 01       	movw	r16, r30
     e90:	0e 94 bc 01 	call	0x378	; 0x378 <utilByteToHex>
    pos += 3;
     e94:	23 96       	adiw	r28, 0x03	; 3
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
     e96:	c2 31       	cpi	r28, 0x12	; 18
     e98:	d1 05       	cpc	r29, r1
     e9a:	a1 f7       	brne	.-24     	; 0xe84 <net_dump_mac+0x1a>
    utilByteToHex(in[i], mac_str+pos);
    pos += 3;
  }
  // NOTE: UART - mac_str
}
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	ef 90       	pop	r14
     ea8:	08 95       	ret

00000eaa <configCalcCrc16>:
};

// build check sum for parameter block
static uint16_t configCalcCrc16(tConfig *p) {
  uint16_t crc16 = 0xffff;
  uint8_t *data = (uint8_t *)p;
     eaa:	fc 01       	movw	r30, r24
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	4f ef       	ldi	r20, 0xFF	; 255
     eb2:	5f ef       	ldi	r21, 0xFF	; 255
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     eb4:	81 91       	ld	r24, Z+
     eb6:	48 27       	eor	r20, r24
     eb8:	84 2f       	mov	r24, r20
     eba:	82 95       	swap	r24
     ebc:	84 27       	eor	r24, r20
     ebe:	08 2e       	mov	r0, r24
     ec0:	86 95       	lsr	r24
     ec2:	86 95       	lsr	r24
     ec4:	80 25       	eor	r24, r0
     ec6:	08 2e       	mov	r0, r24
     ec8:	86 95       	lsr	r24
     eca:	80 25       	eor	r24, r0
     ecc:	87 70       	andi	r24, 0x07	; 7
     ece:	04 2e       	mov	r0, r20
     ed0:	45 2f       	mov	r20, r21
     ed2:	86 95       	lsr	r24
     ed4:	07 94       	ror	r0
     ed6:	87 95       	ror	r24
     ed8:	50 2d       	mov	r21, r0
     eda:	48 27       	eor	r20, r24
     edc:	06 94       	lsr	r0
     ede:	87 95       	ror	r24
     ee0:	50 25       	eor	r21, r0
     ee2:	48 27       	eor	r20, r24
  uint16_t i;
  for(i=0;i<sizeof(tConfig);i++) {
     ee4:	2f 5f       	subi	r18, 0xFF	; 255
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	24 31       	cpi	r18, 0x14	; 20
     eea:	31 05       	cpc	r19, r1
     eec:	19 f7       	brne	.-58     	; 0xeb4 <configCalcCrc16+0xa>
    crc16 = _crc16_update(crc16,*data);
    data++;
  }
  return crc16;
}
     eee:	84 2f       	mov	r24, r20
     ef0:	95 2f       	mov	r25, r21
     ef2:	08 95       	ret

00000ef4 <configReset>:
  }

  return CONFIG_OK;
}

void configReset(void) {
     ef4:	a4 e5       	ldi	r26, 0x54	; 84
     ef6:	b1 e0       	ldi	r27, 0x01	; 1
     ef8:	24 eb       	ldi	r18, 0xB4	; 180
     efa:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
     efc:	48 e6       	ldi	r20, 0x68	; 104
     efe:	51 e0       	ldi	r21, 0x01	; 1
  }

  return CONFIG_OK;
}

void configReset(void) {
     f00:	f9 01       	movw	r30, r18
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
    *(out++) = pgm_read_byte_near(in++);
     f02:	2f 5f       	subi	r18, 0xFF	; 255
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	e4 91       	lpm	r30, Z+
     f08:	ed 93       	st	X+, r30
void configReset(void) {
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
     f0a:	a4 17       	cp	r26, r20
     f0c:	b5 07       	cpc	r27, r21
     f0e:	c1 f7       	brne	.-16     	; 0xf00 <configReset+0xc>
    *(out++) = pgm_read_byte_near(in++);
  }
}
     f10:	08 95       	ret

00000f12 <configLoadFromRom>:
  eeprom_write_word(&s_uwEepromCrc,crc16);

  return CONFIG_OK;
}

uint8_t configLoadFromRom(void) {
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
  // Check if eeprom is readable
  if(!eeprom_is_ready())
     f1a:	f9 9b       	sbis	0x1f, 1	; 31
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <configLoadFromRom+0x10>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	1d c0       	rjmp	.+58     	; 0xf5c <configLoadFromRom+0x4a>
    return CONFIG_EEPROM_NOT_READY;

  // Read config
  eeprom_read_block(&g_sConfig,&s_sEepromConfig,sizeof(tConfig));
     f22:	0f 2e       	mov	r0, r31
     f24:	f4 e5       	ldi	r31, 0x54	; 84
     f26:	ef 2e       	mov	r14, r31
     f28:	f1 e0       	ldi	r31, 0x01	; 1
     f2a:	ff 2e       	mov	r15, r31
     f2c:	f0 2d       	mov	r31, r0
     f2e:	c7 01       	movw	r24, r14
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	44 e1       	ldi	r20, 0x14	; 20
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__eerd_block_m328p>

  // Read crc16
  uint16_t uwCrc = eeprom_read_word(&s_uwEepromCrc);
     f3c:	84 e1       	ldi	r24, 0x14	; 20
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__eerd_word_m328p>
     f44:	8c 01       	movw	r16, r24
  if(uwCrc != configCalcCrc16(&g_sConfig)) {
     f46:	c7 01       	movw	r24, r14
     f48:	0e 94 55 07 	call	0xeaa	; 0xeaa <configCalcCrc16>
     f4c:	80 17       	cp	r24, r16
     f4e:	91 07       	cpc	r25, r17
     f50:	11 f4       	brne	.+4      	; 0xf56 <configLoadFromRom+0x44>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <configLoadFromRom+0x4a>
    configReset();
     f56:	0e 94 7a 07 	call	0xef4	; 0xef4 <configReset>
     f5a:	82 e0       	ldi	r24, 0x02	; 2
    return CONFIG_EEPROM_CRC_MISMATCH;
  }

  return CONFIG_OK;
}
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	08 95       	ret

00000f66 <configInit>:
    *(out++) = pgm_read_byte_near(in++);
  }
}

void configInit(void) {
  if(configLoadFromRom() != CONFIG_OK)
     f66:	0e 94 89 07 	call	0xf12	; 0xf12 <configLoadFromRom>
     f6a:	88 23       	and	r24, r24
     f6c:	11 f0       	breq	.+4      	; 0xf72 <configInit+0xc>
    configReset();
     f6e:	0e 94 7a 07 	call	0xef4	; 0xef4 <configReset>
     f72:	08 95       	ret

00000f74 <configSaveToRom>:
    data++;
  }
  return crc16;
}

uint8_t configSaveToRom(void) {
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
  // check that eeprom is writable
  if(!eeprom_is_ready())
     f78:	f9 9b       	sbis	0x1f, 1	; 31
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <configSaveToRom+0xc>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	12 c0       	rjmp	.+36     	; 0xfa4 <configSaveToRom+0x30>
    return CONFIG_EEPROM_NOT_READY;

  // write current param to eeprom
  eeprom_write_block(&g_sConfig,&s_sEepromConfig,sizeof(tConfig));
     f80:	04 e5       	ldi	r16, 0x54	; 84
     f82:	11 e0       	ldi	r17, 0x01	; 1
     f84:	c8 01       	movw	r24, r16
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	44 e1       	ldi	r20, 0x14	; 20
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__eewr_block_m328p>

  // calc current parameter crc
  uint16_t crc16 = configCalcCrc16(&g_sConfig);
     f92:	c8 01       	movw	r24, r16
     f94:	0e 94 55 07 	call	0xeaa	; 0xeaa <configCalcCrc16>
     f98:	bc 01       	movw	r22, r24
  eeprom_write_word(&s_uwEepromCrc,crc16);
     f9a:	84 e1       	ldi	r24, 0x14	; 20
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__eewr_word_m328p>
     fa2:	80 e0       	ldi	r24, 0x00	; 0

  return CONFIG_OK;
}
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	08 95       	ret

00000faa <parInit>:
 * 	POut:    input,  pulled high
 * 	NAck:    output, default: 1
 */
void parInit(void) {
	// Zero DDR and PORT status
  PAR_STATUS_DDR &= ~PAR_STATUS_MASK;
     faa:	a7 e2       	ldi	r26, 0x27	; 39
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	8c 91       	ld	r24, X
     fb0:	80 7e       	andi	r24, 0xE0	; 224
     fb2:	8c 93       	st	X, r24
  PAR_STATUS_PORT &= ~PAR_STATUS_MASK;
     fb4:	e8 e2       	ldi	r30, 0x28	; 40
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	80 7e       	andi	r24, 0xE0	; 224
     fbc:	80 83       	st	Z, r24

  // Set them correctly
  PAR_STATUS_DDR |= PAR_BUSY | PAR_NACK;
     fbe:	8c 91       	ld	r24, X
     fc0:	86 60       	ori	r24, 0x06	; 6
     fc2:	8c 93       	st	X, r24
  PAR_STATUS_PORT |= PAR_NSTROBE | PAR_SEL | PAR_POUT | PAR_NACK;
     fc4:	80 81       	ld	r24, Z
     fc6:	8b 61       	ori	r24, 0x1B	; 27
     fc8:	80 83       	st	Z, r24

  // Set data DDR to input
  PAR_DATA_DDR = 0x00;
     fca:	1a b8       	out	0x0a, r1	; 10
}
     fcc:	08 95       	ret

00000fce <parGetStatusLines>:

uint8_t parGetStatusLines(void) {
	uint8_t ubIn, ubStrobe, ubSelect, ubPOut;
	ubIn = PAR_STATUS_PIN;
     fce:	86 b1       	in	r24, 0x06	; 6
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	20 71       	andi	r18, 0x10	; 16
     fd6:	30 70       	andi	r19, 0x00	; 0
     fd8:	35 95       	asr	r19
     fda:	27 95       	ror	r18
     fdc:	35 95       	asr	r19
     fde:	27 95       	ror	r18
     fe0:	35 95       	asr	r19
     fe2:	27 95       	ror	r18
     fe4:	35 95       	asr	r19
     fe6:	27 95       	ror	r18
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	88 70       	andi	r24, 0x08	; 8
     fee:	88 0f       	add	r24, r24
     ff0:	88 0f       	add	r24, r24
  ubStrobe = (ubIn & PAR_NSTROBE) >> PAR_POUT_PIN;
  ubSelect = (ubIn & PAR_SEL)     >> PAR_SEL_PIN;
  ubPOut   = (ubIn & PAR_POUT)    >> PAR_NSTROBE_PIN;
  return ((ubPOut << 2) | (ubSelect << 1) | ubStrobe);
}
     ff2:	82 2b       	or	r24, r18
     ff4:	08 95       	ret

00000ff6 <parWaitForPout>:
 * Waits for PaperOut pin state specified by ubReqValue, for ubStateFlag purposes.
 * @param ubReqValue Requested PaperOut pin state (1: hi, 0: lo)
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t parWaitForPout(uint8_t ubReqValue, uint8_t ubStateFlag) {
     ff6:	78 2f       	mov	r23, r24
  g_uwTimer100us = 0;
     ff8:	10 92 4c 01 	sts	0x014C, r1
     ffc:	10 92 4b 01 	sts	0x014B, r1
  while(g_uwTimer100us < pb_proto_timeout) {
    1000:	40 91 3a 01 	lds	r20, 0x013A
    1004:	50 91 3b 01 	lds	r21, 0x013B
		uint8_t ubIn = PAR_STATUS_PIN;
    1008:	e6 e2       	ldi	r30, 0x26	; 38
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	15 c0       	rjmp	.+42     	; 0x1038 <parWaitForPout+0x42>
    100e:	80 81       	ld	r24, Z
    uint8_t ubPOut = (ubIn & PAR_POUT) >> PAR_POUT_PIN;
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    if(ubReqValue == ubPOut)
    1014:	c9 01       	movw	r24, r18
    1016:	88 70       	andi	r24, 0x08	; 8
    1018:	90 70       	andi	r25, 0x00	; 0
    101a:	95 95       	asr	r25
    101c:	87 95       	ror	r24
    101e:	95 95       	asr	r25
    1020:	87 95       	ror	r24
    1022:	95 95       	asr	r25
    1024:	87 95       	ror	r24
    1026:	78 17       	cp	r23, r24
    1028:	11 f4       	brne	.+4      	; 0x102e <parWaitForPout+0x38>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	08 95       	ret
      return PBPROTO_STATUS_OK;
    // During transfer client aborted and removed SEL
    if(!(ubIn & PAR_SEL))
    102e:	24 fd       	sbrc	r18, 4
    1030:	03 c0       	rjmp	.+6      	; 0x1038 <parWaitForPout+0x42>
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
    1032:	86 2f       	mov	r24, r22
    1034:	83 60       	ori	r24, 0x03	; 3
    1036:	08 95       	ret
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t parWaitForPout(uint8_t ubReqValue, uint8_t ubStateFlag) {
  g_uwTimer100us = 0;
  while(g_uwTimer100us < pb_proto_timeout) {
    1038:	80 91 4b 01 	lds	r24, 0x014B
    103c:	90 91 4c 01 	lds	r25, 0x014C
    1040:	84 17       	cp	r24, r20
    1042:	95 07       	cpc	r25, r21
    1044:	20 f3       	brcs	.-56     	; 0x100e <parWaitForPout+0x18>
      return PBPROTO_STATUS_OK;
    // During transfer client aborted and removed SEL
    if(!(ubIn & PAR_SEL))
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
    1046:	86 2f       	mov	r24, r22
    1048:	82 60       	ori	r24, 0x02	; 2
}
    104a:	08 95       	ret

0000104c <pb_proto_handle>:
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    104c:	2f 92       	push	r2
    104e:	3f 92       	push	r3
    1050:	4f 92       	push	r4
    1052:	5f 92       	push	r5
    1054:	6f 92       	push	r6
    1056:	7f 92       	push	r7
    1058:	8f 92       	push	r8
    105a:	9f 92       	push	r9
    105c:	af 92       	push	r10
    105e:	bf 92       	push	r11
    1060:	cf 92       	push	r12
    1062:	df 92       	push	r13
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	00 d0       	rcall	.+0      	; 0x1072 <pb_proto_handle+0x26>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
  uint8_t result;
  pb_proto_stat_t *ps = &pb_proto_stat;

  // handle server side of plipbox protocol
  ps->cmd = 0;
    1076:	10 92 68 01 	sts	0x0168, r1

  // make sure that SEL == 1 and POUT == 0
  if(!(PAR_STATUS_PIN & PAR_SEL) || (PAR_STATUS_PIN & PAR_POUT)) {
    107a:	34 9b       	sbis	0x06, 4	; 6
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <pb_proto_handle+0x36>
    107e:	33 9b       	sbis	0x06, 3	; 6
    1080:	04 c0       	rjmp	.+8      	; 0x108a <pb_proto_handle+0x3e>
    ps->status = PBPROTO_STATUS_IDLE;
    1082:	10 92 69 01 	sts	0x0169, r1
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	d6 c2       	rjmp	.+1452   	; 0x1636 <pb_proto_handle+0x5ea>
    return PBPROTO_STATUS_IDLE;
  }

  // Read command byte
  uint8_t cmd = PAR_DATA_PIN;
    108a:	a9 b0       	in	r10, 0x09	; 9

  // Amiga wants to receive data - prepare
  uint16_t pkt_size = 0;
    108c:	1a 82       	std	Y+2, r1	; 0x02
    108e:	19 82       	std	Y+1, r1	; 0x01
  if((cmd == PBPROTO_CMD_RECV) || (cmd == PBPROTO_CMD_RECV_BURST)) {
    1090:	22 e2       	ldi	r18, 0x22	; 34
    1092:	a2 16       	cp	r10, r18
    1094:	19 f0       	breq	.+6      	; 0x109c <pb_proto_handle+0x50>
    1096:	84 e4       	ldi	r24, 0x44	; 68
    1098:	a8 16       	cp	r10, r24
    109a:	b9 f4       	brne	.+46     	; 0x10ca <pb_proto_handle+0x7e>
    uint8_t res = bridgeFillPacket(&pkt_size);
    109c:	ce 01       	movw	r24, r28
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	0e 94 21 04 	call	0x842	; 0x842 <bridgeFillPacket>
    10a4:	28 2f       	mov	r18, r24
    if(res != PBPROTO_STATUS_OK) {
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	81 f0       	breq	.+32     	; 0x10ca <pb_proto_handle+0x7e>
      ps->status = res;
    10aa:	e9 e6       	ldi	r30, 0x69	; 105
    10ac:	f1 e0       	ldi	r31, 0x01	; 1
    10ae:	80 83       	st	Z, r24
    10b0:	e2 81       	ldd	r30, Z+2	; 0x02
    10b2:	8c e0       	ldi	r24, 0x0C	; 12
    10b4:	e8 9f       	mul	r30, r24
    10b6:	f0 01       	movw	r30, r0
    10b8:	11 24       	eor	r1, r1
    10ba:	ee 59       	subi	r30, 0x9E	; 158
    10bc:	f8 4f       	sbci	r31, 0xF8	; 248
			stats_get(ps->stats_id)->err++;
    10be:	86 81       	ldd	r24, Z+6	; 0x06
    10c0:	97 81       	ldd	r25, Z+7	; 0x07
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	97 83       	std	Z+7, r25	; 0x07
    10c6:	86 83       	std	Z+6, r24	; 0x06
    10c8:	b6 c2       	rjmp	.+1388   	; 0x1636 <pb_proto_handle+0x5ea>
      return res;
    }
  }

  // start timer
  uint32_t ts = g_uwTimeStamp;
    10ca:	60 90 4d 01 	lds	r6, 0x014D
    10ce:	70 90 4e 01 	lds	r7, 0x014E
    10d2:	80 90 4f 01 	lds	r8, 0x014F
    10d6:	90 90 50 01 	lds	r9, 0x0150
    10da:	10 92 85 00 	sts	0x0085, r1
    10de:	10 92 84 00 	sts	0x0084, r1
  timerReset();

  // confirm cmd with BUSY = 1
  PAR_STATUS_PORT |= PAR_BUSY;
    10e2:	e8 e2       	ldi	r30, 0x28	; 40
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	84 60       	ori	r24, 0x04	; 4
    10ea:	80 83       	st	Z, r24

  uint16_t uwParDataSize = 0;
  switch(cmd) {
    10ec:	a2 e2       	ldi	r26, 0x22	; 34
    10ee:	aa 16       	cp	r10, r26
    10f0:	a1 f0       	breq	.+40     	; 0x111a <pb_proto_handle+0xce>
    10f2:	aa 15       	cp	r26, r10
    10f4:	20 f0       	brcs	.+8      	; 0x10fe <pb_proto_handle+0xb2>
    10f6:	b1 e1       	ldi	r27, 0x11	; 17
    10f8:	ab 16       	cp	r10, r27
    10fa:	49 f4       	brne	.+18     	; 0x110e <pb_proto_handle+0xc2>
    10fc:	75 c0       	rjmp	.+234    	; 0x11e8 <pb_proto_handle+0x19c>
    10fe:	e3 e3       	ldi	r30, 0x33	; 51
    1100:	ae 16       	cp	r10, r30
    1102:	09 f4       	brne	.+2      	; 0x1106 <pb_proto_handle+0xba>
    1104:	7a c1       	rjmp	.+756    	; 0x13fa <pb_proto_handle+0x3ae>
    1106:	f4 e4       	ldi	r31, 0x44	; 68
    1108:	af 16       	cp	r10, r31
    110a:	09 f4       	brne	.+2      	; 0x110e <pb_proto_handle+0xc2>
    110c:	dd c0       	rjmp	.+442    	; 0x12c8 <pb_proto_handle+0x27c>
    110e:	bb 24       	eor	r11, r11
    1110:	68 94       	set
    1112:	b2 f8       	bld	r11, 2
    1114:	cc 24       	eor	r12, r12
    1116:	dd 24       	eor	r13, r13
    1118:	02 c2       	rjmp	.+1028   	; 0x151e <pb_proto_handle+0x4d2>
    case PBPROTO_CMD_RECV:
      result = parHandleAmiRead(pkt_size, &uwParDataSize);
    111a:	e9 80       	ldd	r14, Y+1	; 0x01
    111c:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t parHandleAmiRead(uint16_t uwSize, uint16_t *pWriteSize)
{
	uint8_t ubStatus;

  PAR_DATA_DDR = 0xFF;
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	8a b9       	out	0x0a, r24	; 10

  // Send packet size - high part
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	60 e2       	ldi	r22, 0x20	; 32
    1126:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    112a:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	82 17       	cp	r24, r18
    1130:	09 f0       	breq	.+2      	; 0x1134 <pb_proto_handle+0xe8>
    1132:	57 c0       	rjmp	.+174    	; 0x11e2 <pb_proto_handle+0x196>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize >> 8;
    1134:	fb b8       	out	0x0b, r15	; 11
  PAR_STATUS_PORT &= ~PAR_BUSY;
    1136:	e8 e2       	ldi	r30, 0x28	; 40
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	8b 7f       	andi	r24, 0xFB	; 251
    113e:	80 83       	st	Z, r24

  // Send packet size - low part
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	60 e3       	ldi	r22, 0x30	; 48
    1144:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    1148:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	b8 16       	cp	r11, r24
    114e:	09 f0       	breq	.+2      	; 0x1152 <pb_proto_handle+0x106>
    1150:	48 c0       	rjmp	.+144    	; 0x11e2 <pb_proto_handle+0x196>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize & 0xFF;
    1152:	eb b8       	out	0x0b, r14	; 11
  PAR_STATUS_PORT |= PAR_BUSY;
    1154:	e8 e2       	ldi	r30, 0x28	; 40
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	84 60       	ori	r24, 0x04	; 4
    115c:	80 83       	st	Z, r24
  const uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    115e:	c7 01       	movw	r24, r14
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	0f 2e       	mov	r0, r31
    1164:	fe ef       	ldi	r31, 0xFE	; 254
    1166:	2f 2e       	mov	r2, r31
    1168:	ff ef       	ldi	r31, 0xFF	; 255
    116a:	3f 2e       	mov	r3, r31
    116c:	f0 2d       	mov	r31, r0
    116e:	28 22       	and	r2, r24
    1170:	39 22       	and	r3, r25
  while(uwSize--) {
    1172:	21 14       	cp	r2, r1
    1174:	31 04       	cpc	r3, r1
    1176:	61 f1       	breq	.+88     	; 0x11d0 <pb_proto_handle+0x184>
    1178:	01 e0       	ldi	r16, 0x01	; 1
    117a:	0f 2e       	mov	r0, r31
    117c:	f8 e7       	ldi	r31, 0x78	; 120
    117e:	ef 2e       	mov	r14, r31
    1180:	f1 e0       	ldi	r31, 0x01	; 1
    1182:	ff 2e       	mov	r15, r31
    1184:	f0 2d       	mov	r31, r0
    1186:	cc 24       	eor	r12, r12
    1188:	dd 24       	eor	r13, r13
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    PAR_STATUS_PORT ^= PAR_BUSY;
    118a:	0f 2e       	mov	r0, r31
    118c:	f8 e2       	ldi	r31, 0x28	; 40
    118e:	4f 2e       	mov	r4, r31
    1190:	55 24       	eor	r5, r5
    1192:	f0 2d       	mov	r31, r0
    1194:	14 e0       	ldi	r17, 0x04	; 4
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    1196:	80 2f       	mov	r24, r16
    1198:	60 e4       	ldi	r22, 0x40	; 64
    119a:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    119e:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    11a0:	a1 e0       	ldi	r26, 0x01	; 1
    11a2:	8a 17       	cp	r24, r26
    11a4:	e1 f4       	brne	.+56     	; 0x11de <pb_proto_handle+0x192>
      break;
    PAR_DATA_PORT = *(ptr++);
    11a6:	f7 01       	movw	r30, r14
    11a8:	80 81       	ld	r24, Z
    11aa:	ab e2       	ldi	r26, 0x2B	; 43
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	8c 93       	st	X, r24
    PAR_STATUS_PORT ^= PAR_BUSY;
    11b0:	f2 01       	movw	r30, r4
    11b2:	80 81       	ld	r24, Z
    11b4:	81 27       	eor	r24, r17
    11b6:	80 83       	st	Z, r24
    ++uwWriteSize;
    11b8:	08 94       	sec
    11ba:	c1 1c       	adc	r12, r1
    11bc:	d1 1c       	adc	r13, r1
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    11be:	2c 14       	cp	r2, r12
    11c0:	3d 04       	cpc	r3, r13
    11c2:	41 f0       	breq	.+16     	; 0x11d4 <pb_proto_handle+0x188>
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    11c4:	08 94       	sec
    11c6:	e1 1c       	adc	r14, r1
    11c8:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= PAR_BUSY;
    ++uwWriteSize;
    ubPOutWait ^= 1;
    11ca:	f1 e0       	ldi	r31, 0x01	; 1
    11cc:	0f 27       	eor	r16, r31
    11ce:	e3 cf       	rjmp	.-58     	; 0x1196 <pb_proto_handle+0x14a>
    11d0:	cc 24       	eor	r12, r12
    11d2:	dd 24       	eor	r13, r13
  }

  // Final wait
  if(ubStatus == PBPROTO_STATUS_OK)
    ubStatus = parWaitForPout(1, PBPROTO_STAGE_LAST_DATA);
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	60 e5       	ldi	r22, 0x50	; 80
    11d8:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    11dc:	b8 2e       	mov	r11, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    11de:	1a b8       	out	0x0a, r1	; 10
    11e0:	9e c1       	rjmp	.+828    	; 0x151e <pb_proto_handle+0x4d2>
    11e2:	cc 24       	eor	r12, r12
    11e4:	dd 24       	eor	r13, r13
    11e6:	9b c1       	rjmp	.+822    	; 0x151e <pb_proto_handle+0x4d2>
{
  uint8_t ubStatus;
  uint16_t uwSize;

  // --- get size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	60 e2       	ldi	r22, 0x20	; 32
    11ec:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    11f0:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	82 17       	cp	r24, r18
    11f6:	09 f0       	breq	.+2      	; 0x11fa <pb_proto_handle+0x1ae>
    11f8:	64 c0       	rjmp	.+200    	; 0x12c2 <pb_proto_handle+0x276>
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    11fa:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~PAR_BUSY;
    11fc:	e8 e2       	ldi	r30, 0x28	; 40
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	8b 7f       	andi	r24, 0xFB	; 251
    1204:	80 83       	st	Z, r24

  // --- get size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	60 e3       	ldi	r22, 0x30	; 48
    120a:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    120e:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	b8 16       	cp	r11, r24
    1214:	09 f0       	breq	.+2      	; 0x1218 <pb_proto_handle+0x1cc>
    1216:	55 c0       	rjmp	.+170    	; 0x12c2 <pb_proto_handle+0x276>
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    1218:	29 b1       	in	r18, 0x09	; 9

  // --- get size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    121a:	90 2f       	mov	r25, r16
    121c:	80 e0       	ldi	r24, 0x00	; 0

  // --- get size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	28 2b       	or	r18, r24
    1222:	39 2b       	or	r19, r25
  PAR_STATUS_PORT ^= PAR_BUSY;
    1224:	e8 e2       	ldi	r30, 0x28	; 40
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	94 e0       	ldi	r25, 0x04	; 4
    122c:	89 27       	eor	r24, r25
    122e:	80 83       	st	Z, r24

  // Check with buffer size
  if(uwSize > DATABUF_SIZE) {
    1230:	a5 e0       	ldi	r26, 0x05	; 5
    1232:	2b 3e       	cpi	r18, 0xEB	; 235
    1234:	3a 07       	cpc	r19, r26
    1236:	38 f0       	brcs	.+14     	; 0x1246 <pb_proto_handle+0x1fa>
    1238:	0f 2e       	mov	r0, r31
    123a:	f5 e0       	ldi	r31, 0x05	; 5
    123c:	bf 2e       	mov	r11, r31
    123e:	f0 2d       	mov	r31, r0
    1240:	cc 24       	eor	r12, r12
    1242:	dd 24       	eor	r13, r13
    1244:	6c c1       	rjmp	.+728    	; 0x151e <pb_proto_handle+0x4d2>
  }

  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    1246:	c9 01       	movw	r24, r18
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	0f 2e       	mov	r0, r31
    124c:	fe ef       	ldi	r31, 0xFE	; 254
    124e:	2f 2e       	mov	r2, r31
    1250:	ff ef       	ldi	r31, 0xFF	; 255
    1252:	3f 2e       	mov	r3, r31
    1254:	f0 2d       	mov	r31, r0
    1256:	28 22       	and	r2, r24
    1258:	39 22       	and	r3, r25

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    125a:	21 14       	cp	r2, r1
    125c:	31 04       	cpc	r3, r1
    125e:	71 f1       	breq	.+92     	; 0x12bc <pb_proto_handle+0x270>
    1260:	01 e0       	ldi	r16, 0x01	; 1
    1262:	0f 2e       	mov	r0, r31
    1264:	f8 e7       	ldi	r31, 0x78	; 120
    1266:	ef 2e       	mov	r14, r31
    1268:	f1 e0       	ldi	r31, 0x01	; 1
    126a:	ff 2e       	mov	r15, r31
    126c:	f0 2d       	mov	r31, r0
    126e:	cc 24       	eor	r12, r12
    1270:	dd 24       	eor	r13, r13
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    PAR_STATUS_PORT ^= PAR_BUSY;
    1272:	0f 2e       	mov	r0, r31
    1274:	f8 e2       	ldi	r31, 0x28	; 40
    1276:	4f 2e       	mov	r4, r31
    1278:	55 24       	eor	r5, r5
    127a:	f0 2d       	mov	r31, r0
    127c:	14 e0       	ldi	r17, 0x04	; 4
  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    127e:	80 2f       	mov	r24, r16
    1280:	60 e4       	ldi	r22, 0x40	; 64
    1282:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    1286:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    1288:	b1 e0       	ldi	r27, 0x01	; 1
    128a:	8b 17       	cp	r24, r27
    128c:	09 f0       	breq	.+2      	; 0x1290 <pb_proto_handle+0x244>
    128e:	47 c1       	rjmp	.+654    	; 0x151e <pb_proto_handle+0x4d2>
      break;
    *(ptr++) = PAR_DATA_PIN;
    1290:	e9 e2       	ldi	r30, 0x29	; 41
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	d7 01       	movw	r26, r14
    1298:	8c 93       	st	X, r24
    PAR_STATUS_PORT ^= PAR_BUSY;
    129a:	f2 01       	movw	r30, r4
    129c:	80 81       	ld	r24, Z
    129e:	81 27       	eor	r24, r17
    12a0:	80 83       	st	Z, r24
    ubPOutWait ^= 1;
    uwReadSize++;
    12a2:	08 94       	sec
    12a4:	c1 1c       	adc	r12, r1
    12a6:	d1 1c       	adc	r13, r1

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    12a8:	2c 14       	cp	r2, r12
    12aa:	3d 04       	cpc	r3, r13
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <pb_proto_handle+0x264>
    12ae:	37 c1       	rjmp	.+622    	; 0x151e <pb_proto_handle+0x4d2>
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    12b0:	08 94       	sec
    12b2:	e1 1c       	adc	r14, r1
    12b4:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= PAR_BUSY;
    ubPOutWait ^= 1;
    12b6:	f1 e0       	ldi	r31, 0x01	; 1
    12b8:	0f 27       	eor	r16, r31
    12ba:	e1 cf       	rjmp	.-62     	; 0x127e <pb_proto_handle+0x232>
    12bc:	cc 24       	eor	r12, r12
    12be:	dd 24       	eor	r13, r13
    12c0:	2e c1       	rjmp	.+604    	; 0x151e <pb_proto_handle+0x4d2>
    12c2:	cc 24       	eor	r12, r12
    12c4:	dd 24       	eor	r13, r13
    12c6:	2b c1       	rjmp	.+598    	; 0x151e <pb_proto_handle+0x4d2>
      break;
    case PBPROTO_CMD_SEND:
      result = parHandleAmiWrite(&uwParDataSize);
      break;
    case PBPROTO_CMD_RECV_BURST:
      result = parHandleAmiReadBurst(pkt_size, &uwParDataSize);
    12c8:	e9 80       	ldd	r14, Y+1	; 0x01
    12ca:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t parHandleAmiReadBurst(uint16_t size, uint16_t *ret_size) {
  uint8_t status;

  // --- set packet size hi
  status = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	60 e2       	ldi	r22, 0x20	; 32
    12d0:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    12d4:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    12d6:	21 e0       	ldi	r18, 0x01	; 1
    12d8:	82 17       	cp	r24, r18
    12da:	09 f0       	breq	.+2      	; 0x12de <pb_proto_handle+0x292>
    12dc:	8b c0       	rjmp	.+278    	; 0x13f4 <pb_proto_handle+0x3a8>
    return status;

	PAR_DATA_DDR = 0xFF;
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	8a b9       	out	0x0a, r24	; 10
	PAR_DATA_PORT = size >> 8;
    12e2:	fb b8       	out	0x0b, r15	; 11
	PAR_STATUS_PORT &= ~PAR_BUSY;
    12e4:	e8 e2       	ldi	r30, 0x28	; 40
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	8b 7f       	andi	r24, 0xFB	; 251
    12ec:	80 83       	st	Z, r24

  // --- set packet size lo ---
  status = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	60 e3       	ldi	r22, 0x30	; 48
    12f2:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    12f6:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	b8 16       	cp	r11, r24
    12fc:	09 f0       	breq	.+2      	; 0x1300 <pb_proto_handle+0x2b4>
    12fe:	7a c0       	rjmp	.+244    	; 0x13f4 <pb_proto_handle+0x3a8>
    return status;

	PAR_DATA_PORT = size & 0xFF;
    1300:	eb b8       	out	0x0b, r14	; 11
	PAR_STATUS_PORT ^= PAR_BUSY;
    1302:	e8 e2       	ldi	r30, 0x28	; 40
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	94 e0       	ldi	r25, 0x04	; 4
    130a:	89 27       	eor	r24, r25
    130c:	80 83       	st	Z, r24

  // --- burst ready? ---
  status = parWaitForPout(1, PBPROTO_STAGE_DATA);
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	60 e4       	ldi	r22, 0x40	; 64
    1312:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    1316:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    1318:	a1 e0       	ldi	r26, 0x01	; 1
    131a:	8a 17       	cp	r24, r26
    131c:	09 f0       	breq	.+2      	; 0x1320 <pb_proto_handle+0x2d4>
    131e:	6a c0       	rjmp	.+212    	; 0x13f4 <pb_proto_handle+0x3a8>
    return status;

  // round to even and convert to words
  uint16_t words = (size + 1) >> 1;
    1320:	c7 01       	movw	r24, r14
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	ac 01       	movw	r20, r24
    1326:	56 95       	lsr	r21
    1328:	47 95       	ror	r20
  uint16_t i;
  uint8_t *ptr = g_pDataBuffer;

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    132a:	f8 94       	cli
	PAR_STATUS_PORT ^= PAR_BUSY;
    132c:	e8 e2       	ldi	r30, 0x28	; 40
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	94 e0       	ldi	r25, 0x04	; 4
    1334:	89 27       	eor	r24, r25
    1336:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    1338:	41 15       	cp	r20, r1
    133a:	51 05       	cpc	r21, r1
    133c:	91 f1       	breq	.+100    	; 0x13a2 <pb_proto_handle+0x356>
    133e:	08 e7       	ldi	r16, 0x78	; 120
    1340:	11 e0       	ldi	r17, 0x01	; 1
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1346:	9f e0       	ldi	r25, 0x0F	; 15
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    1348:	6b e2       	ldi	r22, 0x2B	; 43
    134a:	70 e0       	ldi	r23, 0x00	; 0

    // wait REQ == 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    134c:	e6 e2       	ldi	r30, 0x26	; 38
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	89 2f       	mov	r24, r25
    1352:	8a 95       	dec	r24
    1354:	f1 f7       	brne	.-4      	; 0x1352 <pb_proto_handle+0x306>
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= PAR_BUSY;
  for(i=0;i<words;i++) {
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    1356:	d8 01       	movw	r26, r16
    1358:	8c 91       	ld	r24, X
    135a:	db 01       	movw	r26, r22
    135c:	8c 93       	st	X, r24

    // wait REQ == 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    135e:	80 81       	ld	r24, Z
    1360:	83 ff       	sbrs	r24, 3
    1362:	03 c0       	rjmp	.+6      	; 0x136a <pb_proto_handle+0x31e>
    1364:	80 81       	ld	r24, Z
    1366:	84 fd       	sbrc	r24, 4
    1368:	fa cf       	rjmp	.-12     	; 0x135e <pb_proto_handle+0x312>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    136a:	80 81       	ld	r24, Z
    136c:	84 ff       	sbrs	r24, 4
    136e:	1b c0       	rjmp	.+54     	; 0x13a6 <pb_proto_handle+0x35a>
    1370:	89 2f       	mov	r24, r25
    1372:	8a 95       	dec	r24
    1374:	f1 f7       	brne	.-4      	; 0x1372 <pb_proto_handle+0x326>
			break;

    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    1376:	d8 01       	movw	r26, r16
    1378:	11 96       	adiw	r26, 0x01	; 1
    137a:	8c 91       	ld	r24, X
    137c:	db 01       	movw	r26, r22
    137e:	8c 93       	st	X, r24

    // wait REQ == 1
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    1380:	80 81       	ld	r24, Z
    1382:	83 fd       	sbrc	r24, 3
    1384:	03 c0       	rjmp	.+6      	; 0x138c <pb_proto_handle+0x340>
    1386:	80 81       	ld	r24, Z
    1388:	84 fd       	sbrc	r24, 4
    138a:	fa cf       	rjmp	.-12     	; 0x1380 <pb_proto_handle+0x334>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    138c:	80 81       	ld	r24, Z
    138e:	84 ff       	sbrs	r24, 4
    1390:	0a c0       	rjmp	.+20     	; 0x13a6 <pb_proto_handle+0x35a>

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= PAR_BUSY;
  for(i=0;i<words;i++) {
    1392:	2f 5f       	subi	r18, 0xFF	; 255
    1394:	3f 4f       	sbci	r19, 0xFF	; 255
    1396:	24 17       	cp	r18, r20
    1398:	35 07       	cpc	r19, r21
    139a:	28 f4       	brcc	.+10     	; 0x13a6 <pb_proto_handle+0x35a>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    139c:	0e 5f       	subi	r16, 0xFE	; 254
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	d7 cf       	rjmp	.-82     	; 0x1350 <pb_proto_handle+0x304>
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & PAR_POUT)
    13a6:	e6 e2       	ldi	r30, 0x26	; 38
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    if(!(PAR_STATUS_PIN & PAR_SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= PAR_BUSY;
    13aa:	a8 e2       	ldi	r26, 0x28	; 40
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
  }
  recv_burst_exit:
  sei();
    13ae:	78 94       	sei
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <pb_proto_handle+0x36c>
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & PAR_POUT)
    if(!(PAR_STATUS_PIN & PAR_SEL))
    13b2:	80 81       	ld	r24, Z
    13b4:	84 ff       	sbrs	r24, 4
    13b6:	fb cf       	rjmp	.-10     	; 0x13ae <pb_proto_handle+0x362>
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & PAR_POUT)
    13b8:	80 81       	ld	r24, Z
    13ba:	83 fd       	sbrc	r24, 3
    13bc:	fa cf       	rjmp	.-12     	; 0x13b2 <pb_proto_handle+0x366>
    if(!(PAR_STATUS_PIN & PAR_SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= PAR_BUSY;
    13be:	8c 91       	ld	r24, X
    13c0:	84 60       	ori	r24, 0x04	; 4
    13c2:	8c 93       	st	X, r24
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <pb_proto_handle+0x380>

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & PAR_POUT))
    if(!(PAR_STATUS_PIN & PAR_SEL))
    13c6:	80 81       	ld	r24, Z
    13c8:	84 ff       	sbrs	r24, 4
    13ca:	f1 cf       	rjmp	.-30     	; 0x13ae <pb_proto_handle+0x362>
			goto recv_burst_exit;

	PAR_STATUS_PORT |= PAR_BUSY;

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & PAR_POUT))
    13cc:	80 81       	ld	r24, Z
    13ce:	83 ff       	sbrs	r24, 3
    13d0:	fa cf       	rjmp	.-12     	; 0x13c6 <pb_proto_handle+0x37a>
    if(!(PAR_STATUS_PIN & PAR_SEL))
			goto recv_burst_exit;

  // error?
  if(i<words)
    13d2:	24 17       	cp	r18, r20
    13d4:	35 07       	cpc	r19, r21
    13d6:	20 f4       	brcc	.+8      	; 0x13e0 <pb_proto_handle+0x394>
    13d8:	0f 2e       	mov	r0, r31
    13da:	f2 e4       	ldi	r31, 0x42	; 66
    13dc:	bf 2e       	mov	r11, r31
    13de:	f0 2d       	mov	r31, r0
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT &= ~PAR_BUSY;
    13e0:	e8 e2       	ldi	r30, 0x28	; 40
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8b 7f       	andi	r24, 0xFB	; 251
    13e8:	80 83       	st	Z, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    13ea:	1a b8       	out	0x0a, r1	; 10

  *ret_size = i << 1;
    13ec:	69 01       	movw	r12, r18
    13ee:	cc 0c       	add	r12, r12
    13f0:	dd 1c       	adc	r13, r13
    13f2:	95 c0       	rjmp	.+298    	; 0x151e <pb_proto_handle+0x4d2>
    13f4:	cc 24       	eor	r12, r12
    13f6:	dd 24       	eor	r13, r13
    13f8:	92 c0       	rjmp	.+292    	; 0x151e <pb_proto_handle+0x4d2>
{
  uint16_t uwSize;
  uint8_t ubStatus;

  // --- packet size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	60 e2       	ldi	r22, 0x20	; 32
    13fe:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    1402:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    1404:	b1 e0       	ldi	r27, 0x01	; 1
    1406:	8b 17       	cp	r24, r27
    1408:	09 f0       	breq	.+2      	; 0x140c <pb_proto_handle+0x3c0>
    140a:	87 c0       	rjmp	.+270    	; 0x151a <pb_proto_handle+0x4ce>
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    140c:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~PAR_BUSY;
    140e:	e8 e2       	ldi	r30, 0x28	; 40
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8b 7f       	andi	r24, 0xFB	; 251
    1416:	80 83       	st	Z, r24

  // --- packet size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	60 e3       	ldi	r22, 0x30	; 48
    141c:	0e 94 fb 07 	call	0xff6	; 0xff6 <parWaitForPout>
    1420:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    1422:	e1 e0       	ldi	r30, 0x01	; 1
    1424:	8e 17       	cp	r24, r30
    1426:	09 f0       	breq	.+2      	; 0x142a <pb_proto_handle+0x3de>
    1428:	78 c0       	rjmp	.+240    	; 0x151a <pb_proto_handle+0x4ce>
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    142a:	29 b1       	in	r18, 0x09	; 9
  // --- packet size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    142c:	90 2f       	mov	r25, r16
    142e:	80 e0       	ldi	r24, 0x00	; 0
  // --- packet size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	82 2b       	or	r24, r18
    1434:	93 2b       	or	r25, r19
  // delay SET_RAK until burst begin...

  // check size
  if(uwSize > DATABUF_SIZE)
    1436:	f5 e0       	ldi	r31, 0x05	; 5
    1438:	8b 3e       	cpi	r24, 0xEB	; 235
    143a:	9f 07       	cpc	r25, r31
    143c:	38 f0       	brcs	.+14     	; 0x144c <pb_proto_handle+0x400>
    143e:	0f 2e       	mov	r0, r31
    1440:	f5 e0       	ldi	r31, 0x05	; 5
    1442:	bf 2e       	mov	r11, r31
    1444:	f0 2d       	mov	r31, r0
    1446:	cc 24       	eor	r12, r12
    1448:	dd 24       	eor	r13, r13
    144a:	69 c0       	rjmp	.+210    	; 0x151e <pb_proto_handle+0x4d2>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;

  // round to even and convert to words
  uint16_t words = (uwSize +1) >> 1;
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	bc 01       	movw	r22, r24
    1450:	76 95       	lsr	r23
    1452:	67 95       	ror	r22
  uint8_t result = PBPROTO_STATUS_OK;
  uint8_t *ptr = g_pDataBuffer;

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    1454:	f8 94       	cli
  PAR_STATUS_PORT ^= PAR_BUSY; // trigger start of burst
    1456:	e8 e2       	ldi	r30, 0x28	; 40
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	94 e0       	ldi	r25, 0x04	; 4
    145e:	89 27       	eor	r24, r25
    1460:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    1462:	61 15       	cp	r22, r1
    1464:	71 05       	cpc	r23, r1
    1466:	59 f1       	breq	.+86     	; 0x14be <pb_proto_handle+0x472>
    1468:	08 e7       	ldi	r16, 0x78	; 120
    146a:	11 e0       	ldi	r17, 0x01	; 1
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    1470:	e6 e2       	ldi	r30, 0x26	; 38
    1472:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    1474:	49 e2       	ldi	r20, 0x29	; 41
    1476:	50 e0       	ldi	r21, 0x00	; 0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= PAR_BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    1478:	80 81       	ld	r24, Z
    147a:	83 fd       	sbrc	r24, 3
    147c:	03 c0       	rjmp	.+6      	; 0x1484 <pb_proto_handle+0x438>
    147e:	80 81       	ld	r24, Z
    1480:	84 fd       	sbrc	r24, 4
    1482:	fa cf       	rjmp	.-12     	; 0x1478 <pb_proto_handle+0x42c>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    1484:	80 81       	ld	r24, Z
    1486:	84 ff       	sbrs	r24, 4
    1488:	1c c0       	rjmp	.+56     	; 0x14c2 <pb_proto_handle+0x476>
			break;
    *(ptr++) = PAR_DATA_PIN;
    148a:	da 01       	movw	r26, r20
    148c:	8c 91       	ld	r24, X
    148e:	d8 01       	movw	r26, r16
    1490:	8c 93       	st	X, r24

    // wait REQ == 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    1492:	80 81       	ld	r24, Z
    1494:	83 ff       	sbrs	r24, 3
    1496:	03 c0       	rjmp	.+6      	; 0x149e <pb_proto_handle+0x452>
    1498:	80 81       	ld	r24, Z
    149a:	84 fd       	sbrc	r24, 4
    149c:	fa cf       	rjmp	.-12     	; 0x1492 <pb_proto_handle+0x446>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    149e:	80 81       	ld	r24, Z
    14a0:	84 ff       	sbrs	r24, 4
    14a2:	0f c0       	rjmp	.+30     	; 0x14c2 <pb_proto_handle+0x476>
			break;
    *(ptr++) = PAR_DATA_PIN;
    14a4:	da 01       	movw	r26, r20
    14a6:	8c 91       	ld	r24, X
    14a8:	d8 01       	movw	r26, r16
    14aa:	11 96       	adiw	r26, 0x01	; 1
    14ac:	8c 93       	st	X, r24

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= PAR_BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    14ae:	2f 5f       	subi	r18, 0xFF	; 255
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	26 17       	cp	r18, r22
    14b4:	37 07       	cpc	r19, r23
    14b6:	28 f4       	brcc	.+10     	; 0x14c2 <pb_proto_handle+0x476>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    14b8:	0e 5f       	subi	r16, 0xFE	; 254
    14ba:	1f 4f       	sbci	r17, 0xFF	; 255
    14bc:	dd cf       	rjmp	.-70     	; 0x1478 <pb_proto_handle+0x42c>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
  }
  sei();
    14c2:	78 94       	sei
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    14c4:	e6 e2       	ldi	r30, 0x26	; 38
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & PAR_SEL))
			continue;

		PAR_STATUS_PORT ^= PAR_BUSY;
    14c8:	a8 e2       	ldi	r26, 0x28	; 40
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	94 e0       	ldi	r25, 0x04	; 4
  sei();
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    14ce:	80 81       	ld	r24, Z
    14d0:	83 fd       	sbrc	r24, 3
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <pb_proto_handle+0x48e>
    14d4:	80 81       	ld	r24, Z
    14d6:	84 fd       	sbrc	r24, 4
    14d8:	fa cf       	rjmp	.-12     	; 0x14ce <pb_proto_handle+0x482>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    14da:	80 81       	ld	r24, Z
    14dc:	84 ff       	sbrs	r24, 4
    14de:	09 c0       	rjmp	.+18     	; 0x14f2 <pb_proto_handle+0x4a6>
			continue;

		PAR_STATUS_PORT ^= PAR_BUSY;
    14e0:	8c 91       	ld	r24, X
    14e2:	89 27       	eor	r24, r25
    14e4:	8c 93       	st	X, r24
		// Wait for POUT == 0
		while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    14e6:	80 81       	ld	r24, Z
    14e8:	83 ff       	sbrs	r24, 3
    14ea:	03 c0       	rjmp	.+6      	; 0x14f2 <pb_proto_handle+0x4a6>
    14ec:	80 81       	ld	r24, Z
    14ee:	84 fd       	sbrc	r24, 4
    14f0:	fa cf       	rjmp	.-12     	; 0x14e6 <pb_proto_handle+0x49a>
  } while(!(PAR_STATUS_PIN & PAR_SEL));
    14f2:	80 81       	ld	r24, Z
    14f4:	84 ff       	sbrs	r24, 4
    14f6:	eb cf       	rjmp	.-42     	; 0x14ce <pb_proto_handle+0x482>

  // error?
  if(i<words)
    14f8:	26 17       	cp	r18, r22
    14fa:	37 07       	cpc	r19, r23
    14fc:	20 f4       	brcc	.+8      	; 0x1506 <pb_proto_handle+0x4ba>
    14fe:	0f 2e       	mov	r0, r31
    1500:	f2 e4       	ldi	r31, 0x42	; 66
    1502:	bf 2e       	mov	r11, r31
    1504:	f0 2d       	mov	r31, r0
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT ^= PAR_BUSY;
    1506:	e8 e2       	ldi	r30, 0x28	; 40
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	94 e0       	ldi	r25, 0x04	; 4
    150e:	89 27       	eor	r24, r25
    1510:	80 83       	st	Z, r24

  *ret_size = i << 1;
    1512:	69 01       	movw	r12, r18
    1514:	cc 0c       	add	r12, r12
    1516:	dd 1c       	adc	r13, r13
    1518:	02 c0       	rjmp	.+4      	; 0x151e <pb_proto_handle+0x4d2>
    151a:	cc 24       	eor	r12, r12
    151c:	dd 24       	eor	r13, r13
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t parWaitForSel(uint8_t select_state, uint8_t state_flag) {
  g_uwTimer100us = 0;
    151e:	10 92 4c 01 	sts	0x014C, r1
    1522:	10 92 4b 01 	sts	0x014B, r1
  while(g_uwTimer100us < pb_proto_timeout) {
    1526:	20 91 3a 01 	lds	r18, 0x013A
    152a:	30 91 3b 01 	lds	r19, 0x013B
    if(((PAR_STATUS_PIN & PAR_SEL) >> PAR_SEL_PIN) == select_state)
    152e:	e6 e2       	ldi	r30, 0x26	; 38
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	03 c0       	rjmp	.+6      	; 0x153a <pb_proto_handle+0x4ee>
    1534:	80 81       	ld	r24, Z
    1536:	84 ff       	sbrs	r24, 4
    1538:	07 c0       	rjmp	.+14     	; 0x1548 <pb_proto_handle+0x4fc>
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t parWaitForSel(uint8_t select_state, uint8_t state_flag) {
  g_uwTimer100us = 0;
  while(g_uwTimer100us < pb_proto_timeout) {
    153a:	80 91 4b 01 	lds	r24, 0x014B
    153e:	90 91 4c 01 	lds	r25, 0x014C
    1542:	82 17       	cp	r24, r18
    1544:	93 07       	cpc	r25, r19
    1546:	b0 f3       	brcs	.-20     	; 0x1534 <pb_proto_handle+0x4e8>

  // wait for SEL == 0
  parWaitForSel(0, PBPROTO_STAGE_END_SELECT);

  // reset BUSY = 0
  PAR_STATUS_PORT &= ~PAR_BUSY;
    1548:	e8 e2       	ldi	r30, 0x28	; 40
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8b 7f       	andi	r24, 0xFB	; 251
    1550:	80 83       	st	Z, r24
    1552:	e0 90 84 00 	lds	r14, 0x0084
    1556:	f0 90 85 00 	lds	r15, 0x0085
  // Read timer - assuming transfer will be much shorter than 100us
  // TODO(KaiN#7): is it really that short?
  uint16_t uwTimeDelta = timerGetState();

  // Amiga sent data - process it
  if(result == PBPROTO_STATUS_OK) {
    155a:	b1 e0       	ldi	r27, 0x01	; 1
    155c:	bb 16       	cp	r11, r27
    155e:	59 f4       	brne	.+22     	; 0x1576 <pb_proto_handle+0x52a>
    if((cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST))
    1560:	e1 e1       	ldi	r30, 0x11	; 17
    1562:	ae 16       	cp	r10, r30
    1564:	21 f0       	breq	.+8      	; 0x156e <pb_proto_handle+0x522>
    1566:	f3 e3       	ldi	r31, 0x33	; 51
    1568:	af 16       	cp	r10, r31
    156a:	09 f0       	breq	.+2      	; 0x156e <pb_proto_handle+0x522>
    156c:	7a c0       	rjmp	.+244    	; 0x1662 <pb_proto_handle+0x616>
      result = bridgeProcessPacket(uwParDataSize);
    156e:	c6 01       	movw	r24, r12
    1570:	0e 94 ba 03 	call	0x774	; 0x774 <bridgeProcessPacket>
    1574:	b8 2e       	mov	r11, r24
  }

  // fill in stats
  ps->cmd = cmd;
    1576:	08 e6       	ldi	r16, 0x68	; 104
    1578:	11 e0       	ldi	r17, 0x01	; 1
    157a:	f8 01       	movw	r30, r16
    157c:	a1 92       	st	Z+, r10
  ps->status = result;
    157e:	b0 82       	st	Z, r11
  ps->size = uwParDataSize;
    1580:	d8 01       	movw	r26, r16
    1582:	15 96       	adiw	r26, 0x05	; 5
    1584:	dc 92       	st	X, r13
    1586:	ce 92       	st	-X, r12
    1588:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = uwTimeDelta;
    158a:	17 96       	adiw	r26, 0x07	; 7
    158c:	fc 92       	st	X, r15
    158e:	ee 92       	st	-X, r14
    1590:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timerCalculateKbps(uwParDataSize, uwTimeDelta);
    1592:	c6 01       	movw	r24, r12
    1594:	b7 01       	movw	r22, r14
    1596:	0e 94 92 01 	call	0x324	; 0x324 <timerCalculateKbps>
    159a:	f8 01       	movw	r30, r16
    159c:	91 87       	std	Z+9, r25	; 0x09
    159e:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    15a0:	d8 01       	movw	r26, r16
    15a2:	1c 96       	adiw	r26, 0x0c	; 12
    15a4:	6d 92       	st	X+, r6
    15a6:	7d 92       	st	X+, r7
    15a8:	8d 92       	st	X+, r8
    15aa:	9c 92       	st	X, r9
    15ac:	1f 97       	sbiw	r26, 0x0f	; 15
  ps->is_send = (cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST);
    15ae:	b1 e1       	ldi	r27, 0x11	; 17
    15b0:	ab 16       	cp	r10, r27
    15b2:	31 f0       	breq	.+12     	; 0x15c0 <pb_proto_handle+0x574>
    15b4:	e3 e3       	ldi	r30, 0x33	; 51
    15b6:	ae 16       	cp	r10, r30
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <pb_proto_handle+0x574>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <pb_proto_handle+0x578>
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	ea e6       	ldi	r30, 0x6A	; 106
    15c6:	f1 e0       	ldi	r31, 0x01	; 1
    15c8:	81 93       	st	Z+, r24
  ps->stats_id = ps->is_send ? STATS_ID_PB_TX : STATS_ID_PB_RX;
    15ca:	10 82       	st	Z, r1
    15cc:	88 23       	and	r24, r24
    15ce:	11 f0       	breq	.+4      	; 0x15d4 <pb_proto_handle+0x588>
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 83       	st	Z, r24
  ps->recv_delta = ps->is_send ? 0 : (uint16_t)(ps->ts - trigger_ts);
    15d4:	80 91 6a 01 	lds	r24, 0x016A
    15d8:	88 23       	and	r24, r24
    15da:	19 f0       	breq	.+6      	; 0x15e2 <pb_proto_handle+0x596>
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	0a c0       	rjmp	.+20     	; 0x15f6 <pb_proto_handle+0x5aa>
    15e2:	20 91 74 01 	lds	r18, 0x0174
    15e6:	30 91 75 01 	lds	r19, 0x0175
    15ea:	80 91 40 01 	lds	r24, 0x0140
    15ee:	90 91 41 01 	lds	r25, 0x0141
    15f2:	28 1b       	sub	r18, r24
    15f4:	39 0b       	sbc	r19, r25
    15f6:	30 93 73 01 	sts	0x0173, r19
    15fa:	20 93 72 01 	sts	0x0172, r18

	if(result == PBPROTO_STATUS_OK)
    15fe:	f1 e0       	ldi	r31, 0x01	; 1
    1600:	bf 16       	cp	r11, r31
    1602:	59 f4       	brne	.+22     	; 0x161a <pb_proto_handle+0x5ce>
		stats_update_ok(ps->stats_id, ps->size, ps->rate);
    1604:	eb e6       	ldi	r30, 0x6B	; 107
    1606:	f1 e0       	ldi	r31, 0x01	; 1
    1608:	61 81       	ldd	r22, Z+1	; 0x01
    160a:	72 81       	ldd	r23, Z+2	; 0x02
    160c:	45 81       	ldd	r20, Z+5	; 0x05
    160e:	56 81       	ldd	r21, Z+6	; 0x06
    1610:	80 81       	ld	r24, Z
    1612:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <stats_update_ok>
    1616:	21 e0       	ldi	r18, 0x01	; 1
    1618:	0e c0       	rjmp	.+28     	; 0x1636 <pb_proto_handle+0x5ea>
    161a:	e0 91 6b 01 	lds	r30, 0x016B
    161e:	8c e0       	ldi	r24, 0x0C	; 12
    1620:	e8 9f       	mul	r30, r24
    1622:	f0 01       	movw	r30, r0
    1624:	11 24       	eor	r1, r1
    1626:	ee 59       	subi	r30, 0x9E	; 158
    1628:	f8 4f       	sbci	r31, 0xF8	; 248
	else
    stats_get(ps->stats_id)->err++;
    162a:	86 81       	ldd	r24, Z+6	; 0x06
    162c:	97 81       	ldd	r25, Z+7	; 0x07
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	97 83       	std	Z+7, r25	; 0x07
    1632:	86 83       	std	Z+6, r24	; 0x06
    1634:	2b 2d       	mov	r18, r11

  return result;
}
    1636:	82 2f       	mov	r24, r18
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	bf 90       	pop	r11
    164e:	af 90       	pop	r10
    1650:	9f 90       	pop	r9
    1652:	8f 90       	pop	r8
    1654:	7f 90       	pop	r7
    1656:	6f 90       	pop	r6
    1658:	5f 90       	pop	r5
    165a:	4f 90       	pop	r4
    165c:	3f 90       	pop	r3
    165e:	2f 90       	pop	r2
    1660:	08 95       	ret
    if((cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST))
      result = bridgeProcessPacket(uwParDataSize);
  }

  // fill in stats
  ps->cmd = cmd;
    1662:	08 e6       	ldi	r16, 0x68	; 104
    1664:	11 e0       	ldi	r17, 0x01	; 1
    1666:	f8 01       	movw	r30, r16
    1668:	a1 92       	st	Z+, r10
  ps->status = result;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	80 83       	st	Z, r24
  ps->size = uwParDataSize;
    166e:	d8 01       	movw	r26, r16
    1670:	15 96       	adiw	r26, 0x05	; 5
    1672:	dc 92       	st	X, r13
    1674:	ce 92       	st	-X, r12
    1676:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = uwTimeDelta;
    1678:	17 96       	adiw	r26, 0x07	; 7
    167a:	fc 92       	st	X, r15
    167c:	ee 92       	st	-X, r14
    167e:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timerCalculateKbps(uwParDataSize, uwTimeDelta);
    1680:	c6 01       	movw	r24, r12
    1682:	b7 01       	movw	r22, r14
    1684:	0e 94 92 01 	call	0x324	; 0x324 <timerCalculateKbps>
    1688:	f8 01       	movw	r30, r16
    168a:	91 87       	std	Z+9, r25	; 0x09
    168c:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    168e:	d8 01       	movw	r26, r16
    1690:	1c 96       	adiw	r26, 0x0c	; 12
    1692:	6d 92       	st	X+, r6
    1694:	7d 92       	st	X+, r7
    1696:	8d 92       	st	X+, r8
    1698:	9c 92       	st	X, r9
    169a:	1f 97       	sbiw	r26, 0x0f	; 15
    169c:	8e cf       	rjmp	.-228    	; 0x15ba <pb_proto_handle+0x56e>

0000169e <parRequestAmiRead>:

/**
 * Sends information to Amiga that data is ready.
 * Done as 1ms pulse on ACK line.
 */
void parRequestAmiRead(void) {
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
  PAR_STATUS_PORT &= ~PAR_NACK;
    16a2:	08 e2       	ldi	r16, 0x28	; 40
    16a4:	10 e0       	ldi	r17, 0x00	; 0
    16a6:	f8 01       	movw	r30, r16
    16a8:	80 81       	ld	r24, Z
    16aa:	8d 7f       	andi	r24, 0xFD	; 253
    16ac:	80 83       	st	Z, r24
  timerDelay100us(20);
    16ae:	84 e1       	ldi	r24, 0x14	; 20
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 85 01 	call	0x30a	; 0x30a <timerDelay100us>
  PAR_STATUS_PORT |= PAR_NACK;
    16b6:	f8 01       	movw	r30, r16
    16b8:	80 81       	ld	r24, Z
    16ba:	82 60       	ori	r24, 0x02	; 2
    16bc:	80 83       	st	Z, r24
  trigger_ts = g_uwTimeStamp;
    16be:	80 91 4d 01 	lds	r24, 0x014D
    16c2:	90 91 4e 01 	lds	r25, 0x014E
    16c6:	a0 91 4f 01 	lds	r26, 0x014F
    16ca:	b0 91 50 01 	lds	r27, 0x0150
    16ce:	80 93 40 01 	sts	0x0140, r24
    16d2:	90 93 41 01 	sts	0x0141, r25
    16d6:	a0 93 42 01 	sts	0x0142, r26
    16da:	b0 93 43 01 	sts	0x0143, r27
}
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	08 95       	ret

000016e4 <pio_util_get_init_flags>:

uint8_t pio_util_get_init_flags()
{
  uint8_t flags = PIO_INIT_BROAD_CAST;

  if(g_sConfig.flow_ctl) {
    16e4:	80 91 5a 01 	lds	r24, 0x015A
    16e8:	88 23       	and	r24, r24
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <pio_util_get_init_flags+0xc>
    16ec:	9c e0       	ldi	r25, 0x0C	; 12
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <pio_util_get_init_flags+0xe>
    16f0:	94 e0       	ldi	r25, 0x04	; 4
    flags |= PIO_INIT_FLOW_CONTROL;
  }
  if(g_sConfig.full_duplex) {
    16f2:	80 91 5b 01 	lds	r24, 0x015B
    16f6:	81 11       	cpse	r24, r1
    flags |= PIO_INIT_FULL_DUPLEX;
    16f8:	91 60       	ori	r25, 0x01	; 1
  }

  return flags;
}
    16fa:	89 2f       	mov	r24, r25
    16fc:	08 95       	ret

000016fe <pio_util_send_packet>:

  return ubRecvResult;
}

uint8_t pio_util_send_packet(uint16_t size)
{
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	ec 01       	movw	r28, r24
    170a:	04 e8       	ldi	r16, 0x84	; 132
    170c:	10 e0       	ldi	r17, 0x00	; 0
    170e:	f8 01       	movw	r30, r16
    1710:	11 82       	std	Z+1, r1	; 0x01
    1712:	10 82       	st	Z, r1
  timerReset();
  uint8_t result = enc28j60_send(g_pDataBuffer, size);
    1714:	88 e7       	ldi	r24, 0x78	; 120
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	be 01       	movw	r22, r28
    171a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <enc28j60_send>
    171e:	f8 2e       	mov	r15, r24
    1720:	f8 01       	movw	r30, r16
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
  // NOTE(KaiN#7): Is it really that short?
  uint16_t delta = timerGetState();

  uint16_t rate = timerCalculateKbps(size, delta);
    1726:	ce 01       	movw	r24, r28
    1728:	0e 94 92 01 	call	0x324	; 0x324 <timerCalculateKbps>
    172c:	ac 01       	movw	r20, r24
  if(result == PIO_OK) {
    172e:	ff 20       	and	r15, r15
    1730:	29 f4       	brne	.+10     	; 0x173c <pio_util_send_packet+0x3e>
    stats_update_ok(STATS_ID_PIO_TX, size, rate);
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	be 01       	movw	r22, r28
    1736:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <stats_update_ok>
    173a:	07 c0       	rjmp	.+14     	; 0x174a <pio_util_send_packet+0x4c>
  }
  else {
    stats_get(STATS_ID_PIO_TX)->err++;
    173c:	ec e8       	ldi	r30, 0x8C	; 140
    173e:	f7 e0       	ldi	r31, 0x07	; 7
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	80 83       	st	Z, r24
  }

  return result;
}
    174a:	8f 2d       	mov	r24, r15
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	08 95       	ret

00001758 <pio_util_recv_packet>:
/**
 * Receives data from ENC28j60, calculates stats & does logging.
 * @param pDataSize Pointer to addr to be filled with read data size.
 */
uint8_t pio_util_recv_packet(uint16_t *pDataSize)
{
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	ec 01       	movw	r28, r24
    1764:	04 e8       	ldi	r16, 0x84	; 132
    1766:	10 e0       	ldi	r17, 0x00	; 0
    1768:	f8 01       	movw	r30, r16
    176a:	11 82       	std	Z+1, r1	; 0x01
    176c:	10 82       	st	Z, r1
  // Fetch packet from ENC28j60, measure elapsed time
  timerReset();
  uint8_t ubRecvResult = enc28j60_recv(g_pDataBuffer, DATABUF_SIZE, pDataSize);
    176e:	88 e7       	ldi	r24, 0x78	; 120
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	6a ee       	ldi	r22, 0xEA	; 234
    1774:	75 e0       	ldi	r23, 0x05	; 5
    1776:	ae 01       	movw	r20, r28
    1778:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <enc28j60_recv>
    177c:	f8 2e       	mov	r15, r24
    177e:	f8 01       	movw	r30, r16
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
  uint16_t uwTimeDelta = timerGetState();
  uint16_t uwDataRate = timerCalculateKbps(*pDataSize, uwTimeDelta);
    1784:	88 81       	ld	r24, Y
    1786:	99 81       	ldd	r25, Y+1	; 0x01
    1788:	0e 94 92 01 	call	0x324	; 0x324 <timerCalculateKbps>
    178c:	ac 01       	movw	r20, r24

  if(ubRecvResult == PIO_OK) {
    178e:	ff 20       	and	r15, r15
    1790:	31 f4       	brne	.+12     	; 0x179e <pio_util_recv_packet+0x46>
		// Update stats - write new data size & rate
    stats_update_ok(STATS_ID_PIO_RX, *pDataSize, uwDataRate);
    1792:	68 81       	ld	r22, Y
    1794:	79 81       	ldd	r23, Y+1	; 0x01
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <stats_update_ok>
    179c:	07 c0       	rjmp	.+14     	; 0x17ac <pio_util_recv_packet+0x54>
  }
  else {
		// Update stats - increase error count
    stats_get(STATS_ID_PIO_RX)->err++;
    179e:	e0 e8       	ldi	r30, 0x80	; 128
    17a0:	f7 e0       	ldi	r31, 0x07	; 7
    17a2:	80 81       	ld	r24, Z
    17a4:	91 81       	ldd	r25, Z+1	; 0x01
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	91 83       	std	Z+1, r25	; 0x01
    17aa:	80 83       	st	Z, r24
  }

  return ubRecvResult;
}
    17ac:	8f 2d       	mov	r24, r15
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	08 95       	ret

000017ba <readOp>:
    17ba:	e5 e2       	ldi	r30, 0x25	; 37
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	90 81       	ld	r25, Z
    17c0:	9b 7f       	andi	r25, 0xFB	; 251
    17c2:	90 83       	st	Z, r25
static uint8_t readOp (uint8_t op, uint8_t address) {
	#ifdef NOENC
	return 0;
	#endif
	spi_enable_eth();
	spi_out(op | (address & ADDR_MASK));
    17c4:	96 2f       	mov	r25, r22
    17c6:	9f 71       	andi	r25, 0x1F	; 31
    17c8:	98 2b       	or	r25, r24
    17ca:	9e bd       	out	0x2e, r25	; 46
    17cc:	ed e4       	ldi	r30, 0x4D	; 77
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	88 23       	and	r24, r24
    17d4:	ec f7       	brge	.-6      	; 0x17d0 <readOp+0x16>
	if (address & 0x80)
    17d6:	66 23       	and	r22, r22
    17d8:	34 f4       	brge	.+12     	; 0x17e6 <readOp+0x2c>
    17da:	1e bc       	out	0x2e, r1	; 46
    17dc:	ed e4       	ldi	r30, 0x4D	; 77
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	88 23       	and	r24, r24
    17e4:	ec f7       	brge	.-6      	; 0x17e0 <readOp+0x26>
    17e6:	1e bc       	out	0x2e, r1	; 46
    17e8:	ed e4       	ldi	r30, 0x4D	; 77
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	88 23       	and	r24, r24
    17f0:	ec f7       	brge	.-6      	; 0x17ec <readOp+0x32>
    17f2:	8e b5       	in	r24, 0x2e	; 46
    17f4:	e5 e2       	ldi	r30, 0x25	; 37
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	90 81       	ld	r25, Z
    17fa:	94 60       	ori	r25, 0x04	; 4
    17fc:	90 83       	st	Z, r25
		spi_out(0x00);
	uint8_t result = spi_in();
	spi_disable_eth();
	return result;
}
    17fe:	08 95       	ret

00001800 <writeOp>:
    1800:	e5 e2       	ldi	r30, 0x25	; 37
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	90 81       	ld	r25, Z
    1806:	9b 7f       	andi	r25, 0xFB	; 251
    1808:	90 83       	st	Z, r25
static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
	#ifdef NOENC
	return;
	#endif
	spi_enable_eth();
	spi_out(op | (address & ADDR_MASK));
    180a:	6f 71       	andi	r22, 0x1F	; 31
    180c:	68 2b       	or	r22, r24
    180e:	6e bd       	out	0x2e, r22	; 46
    1810:	ed e4       	ldi	r30, 0x4D	; 77
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	88 23       	and	r24, r24
    1818:	ec f7       	brge	.-6      	; 0x1814 <writeOp+0x14>
    181a:	4e bd       	out	0x2e, r20	; 46
    181c:	ed e4       	ldi	r30, 0x4D	; 77
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	88 23       	and	r24, r24
    1824:	ec f7       	brge	.-6      	; 0x1820 <writeOp+0x20>
    1826:	e5 e2       	ldi	r30, 0x25	; 37
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	84 60       	ori	r24, 0x04	; 4
    182e:	80 83       	st	Z, r24
	spi_out(data);
	spi_disable_eth();
}
    1830:	08 95       	ret

00001832 <readBuf>:

static void readBuf(uint16_t len, uint8_t* data) {
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	9c 01       	movw	r18, r24
    1838:	db 01       	movw	r26, r22
    183a:	e5 e2       	ldi	r30, 0x25	; 37
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	8b 7f       	andi	r24, 0xFB	; 251
    1842:	80 83       	st	Z, r24
    1844:	8a e3       	ldi	r24, 0x3A	; 58
    1846:	8e bd       	out	0x2e, r24	; 46
    1848:	ed e4       	ldi	r30, 0x4D	; 77
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	88 23       	and	r24, r24
    1850:	ec f7       	brge	.-6      	; 0x184c <readBuf+0x1a>
	#ifdef NOENC
	return;
	#endif
	spi_enable_eth();
	spi_out(ENC28J60_READ_BUF_MEM);
	while (len--) {
    1852:	21 15       	cp	r18, r1
    1854:	31 05       	cpc	r19, r1
    1856:	79 f0       	breq	.+30     	; 0x1876 <readBuf+0x44>
    1858:	ce e4       	ldi	r28, 0x4E	; 78
    185a:	d0 e0       	ldi	r29, 0x00	; 0
    185c:	ed e4       	ldi	r30, 0x4D	; 77
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	18 82       	st	Y, r1
    1862:	80 81       	ld	r24, Z
    1864:	88 23       	and	r24, r24
    1866:	ec f7       	brge	.-6      	; 0x1862 <readBuf+0x30>
    1868:	88 81       	ld	r24, Y
		*data++ = spi_in();
    186a:	8c 93       	st	X, r24
    186c:	21 50       	subi	r18, 0x01	; 1
    186e:	30 40       	sbci	r19, 0x00	; 0
	#ifdef NOENC
	return;
	#endif
	spi_enable_eth();
	spi_out(ENC28J60_READ_BUF_MEM);
	while (len--) {
    1870:	11 f0       	breq	.+4      	; 0x1876 <readBuf+0x44>
		*data++ = spi_in();
    1872:	11 96       	adiw	r26, 0x01	; 1
    1874:	f5 cf       	rjmp	.-22     	; 0x1860 <readBuf+0x2e>
    1876:	e5 e2       	ldi	r30, 0x25	; 37
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	84 60       	ori	r24, 0x04	; 4
    187e:	80 83       	st	Z, r24
	}
	spi_disable_eth();
}
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <SetBank>:

static void SetBank (uint8_t address) {
    1886:	1f 93       	push	r17
    1888:	18 2f       	mov	r17, r24
	#ifdef NOENC
	return;
	#endif
	if ((address & BANK_MASK) != Enc28j60Bank) {
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	20 76       	andi	r18, 0x60	; 96
    1890:	30 70       	andi	r19, 0x00	; 0
    1892:	80 91 44 01 	lds	r24, 0x0144
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	28 17       	cp	r18, r24
    189a:	39 07       	cpc	r19, r25
    189c:	81 f0       	breq	.+32     	; 0x18be <SetBank+0x38>
		writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
    189e:	80 ea       	ldi	r24, 0xA0	; 160
    18a0:	6f e1       	ldi	r22, 0x1F	; 31
    18a2:	43 e0       	ldi	r20, 0x03	; 3
    18a4:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
		Enc28j60Bank = address & BANK_MASK;
    18a8:	41 2f       	mov	r20, r17
    18aa:	40 76       	andi	r20, 0x60	; 96
    18ac:	40 93 44 01 	sts	0x0144, r20
		writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
    18b0:	42 95       	swap	r20
    18b2:	46 95       	lsr	r20
    18b4:	47 70       	andi	r20, 0x07	; 7
    18b6:	80 e8       	ldi	r24, 0x80	; 128
    18b8:	6f e1       	ldi	r22, 0x1F	; 31
    18ba:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
	}
}
    18be:	1f 91       	pop	r17
    18c0:	08 95       	ret

000018c2 <readRegByte>:

static uint8_t readRegByte (uint8_t address) {
    18c2:	1f 93       	push	r17
    18c4:	18 2f       	mov	r17, r24
	#ifdef NOENC
	return 0;
	#endif
	SetBank(address);
    18c6:	0e 94 43 0c 	call	0x1886	; 0x1886 <SetBank>
	return readOp(ENC28J60_READ_CTRL_REG, address);
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	61 2f       	mov	r22, r17
    18ce:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <readOp>
}
    18d2:	1f 91       	pop	r17
    18d4:	08 95       	ret

000018d6 <writeRegByte>:
	#endif
	return readRegByte(address) + (readRegByte(address+1) << 8);
}
#endif

static void writeRegByte (uint8_t address, uint8_t data) {
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	18 2f       	mov	r17, r24
    18dc:	06 2f       	mov	r16, r22
	#ifdef NOENC
	return;
	#endif
	SetBank(address);
    18de:	0e 94 43 0c 	call	0x1886	; 0x1886 <SetBank>
	writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
    18e2:	80 e4       	ldi	r24, 0x40	; 64
    18e4:	61 2f       	mov	r22, r17
    18e6:	40 2f       	mov	r20, r16
    18e8:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
}
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	08 95       	ret

000018f2 <writeReg>:

static void writeReg(uint8_t address, uint16_t data) {
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	18 2f       	mov	r17, r24
    18f8:	07 2f       	mov	r16, r23
	#ifdef NOENC
	return;
	#endif
	writeRegByte(address, data);
    18fa:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
	writeRegByte(address + 1, data >> 8);
    18fe:	81 2f       	mov	r24, r17
    1900:	8f 5f       	subi	r24, 0xFF	; 255
    1902:	60 2f       	mov	r22, r16
    1904:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
}
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	08 95       	ret

0000190e <writePhy>:
	while (readRegByte(MISTAT) & MISTAT_BUSY);
	writeRegByte(MICMD, 0x00);
	return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	98 2f       	mov	r25, r24
    1914:	8b 01       	movw	r16, r22
	#ifdef NOENC
	return;
	#endif
	writeRegByte(MIREGADR, address);
    1916:	84 ed       	ldi	r24, 0xD4	; 212
    1918:	69 2f       	mov	r22, r25
    191a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
	writeReg(MIWR, data);
    191e:	86 ed       	ldi	r24, 0xD6	; 214
    1920:	b8 01       	movw	r22, r16
    1922:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
	while (readRegByte(MISTAT) & MISTAT_BUSY);
    1926:	8a ee       	ldi	r24, 0xEA	; 234
    1928:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <readRegByte>
    192c:	80 fd       	sbrc	r24, 0
    192e:	fb cf       	rjmp	.-10     	; 0x1926 <writePhy+0x18>
}
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <enc28j60_exit>:
	#ifdef NOENC
	return;
	#endif
	// Moved note from pio_exit
	// NOTE: UART - time_stamp_spc() pio: exit\r\n
  SetBank(ECON1);
    1936:	8f e1       	ldi	r24, 0x1F	; 31
    1938:	0e 94 43 0c 	call	0x1886	; 0x1886 <SetBank>
  writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_RXEN);
    193c:	80 ea       	ldi	r24, 0xA0	; 160
    193e:	6f e1       	ldi	r22, 0x1F	; 31
    1940:	44 e0       	ldi	r20, 0x04	; 4
    1942:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
}
    1946:	08 95       	ret

00001948 <enc28j60_control>:
uint8_t enc28j60_control(uint8_t control_id, uint8_t value)
{
	#ifdef NOENC
	return 0;
	#endif
  switch(control_id) {
    1948:	88 23       	and	r24, r24
    194a:	11 f0       	breq	.+4      	; 0x1950 <enc28j60_control+0x8>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	08 95       	ret
    case PIO_CONTROL_FLOW: {
			uint8_t flag;
			if(is_full_duplex) {
    1950:	80 91 47 01 	lds	r24, 0x0147
    1954:	88 23       	and	r24, r24
    1956:	31 f0       	breq	.+12     	; 0x1964 <enc28j60_control+0x1c>
				flag = value ? 2 : 3;
    1958:	66 23       	and	r22, r22
    195a:	11 f4       	brne	.+4      	; 0x1960 <enc28j60_control+0x18>
    195c:	63 e0       	ldi	r22, 0x03	; 3
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <enc28j60_control+0x20>
    1960:	62 e0       	ldi	r22, 0x02	; 2
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <enc28j60_control+0x20>
			}
			else {
				flag = value ? 1 : 0;
    1964:	61 11       	cpse	r22, r1
    1966:	61 e0       	ldi	r22, 0x01	; 1
			}
			writeRegByte(EFLOCON, flag);
    1968:	87 e7       	ldi	r24, 0x77	; 119
    196a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
    196e:	80 e0       	ldi	r24, 0x00	; 0
			return PIO_OK;
		}
    default:
      return PIO_NOT_FOUND;
  }
}
    1970:	08 95       	ret

00001972 <enc28j60_status>:

// ---------- status ----------

uint8_t enc28j60_status(uint8_t status_id, uint8_t *value)
{
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	eb 01       	movw	r28, r22
	#ifdef NOENC
	return 0;
	#endif
  switch(status_id) {
    1978:	88 23       	and	r24, r24
    197a:	19 f0       	breq	.+6      	; 0x1982 <enc28j60_status+0x10>
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	19 f5       	brne	.+70     	; 0x19c6 <enc28j60_status+0x54>
    1980:	05 c0       	rjmp	.+10     	; 0x198c <enc28j60_status+0x1a>
    case PIO_STATUS_VERSION:
      *value = rev;
    1982:	80 91 48 01 	lds	r24, 0x0148
    1986:	88 83       	st	Y, r24
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	1f c0       	rjmp	.+62     	; 0x19ca <enc28j60_status+0x58>

static uint16_t readPhyByte (uint8_t address) {
	#ifdef NOENC
	return 0;
	#endif
	writeRegByte(MIREGADR, address);
    198c:	84 ed       	ldi	r24, 0xD4	; 212
    198e:	61 e1       	ldi	r22, 0x11	; 17
    1990:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
	writeRegByte(MICMD, MICMD_MIIRD);
    1994:	82 ed       	ldi	r24, 0xD2	; 210
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
	while (readRegByte(MISTAT) & MISTAT_BUSY);
    199c:	8a ee       	ldi	r24, 0xEA	; 234
    199e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <readRegByte>
    19a2:	80 fd       	sbrc	r24, 0
    19a4:	fb cf       	rjmp	.-10     	; 0x199c <enc28j60_status+0x2a>
	writeRegByte(MICMD, 0x00);
    19a6:	82 ed       	ldi	r24, 0xD2	; 210
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
	return readRegByte(MIRD+1);
    19ae:	89 ed       	ldi	r24, 0xD9	; 217
    19b0:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <readRegByte>
  switch(status_id) {
    case PIO_STATUS_VERSION:
      *value = rev;
      return PIO_OK;
    case PIO_STATUS_LINK_UP:
      *value = (readPhyByte(PHSTAT2) >> 2) & 1;
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	96 95       	lsr	r25
    19b8:	87 95       	ror	r24
    19ba:	96 95       	lsr	r25
    19bc:	87 95       	ror	r24
    19be:	81 70       	andi	r24, 0x01	; 1
    19c0:	88 83       	st	Y, r24
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <enc28j60_status+0x58>
      return PIO_OK;
    default:
      *value = 0;
    19c6:	18 82       	st	Y, r1
    19c8:	81 e0       	ldi	r24, 0x01	; 1
      return PIO_NOT_FOUND;
  }
}
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	08 95       	ret

000019d0 <enc28j60_send>:
#endif

// ---------- send ----------

uint8_t enc28j60_send(const uint8_t *data, uint16_t size)
{
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	ec 01       	movw	r28, r24
    19da:	8b 01       	movw	r16, r22
	#ifdef NOENC
	return 0;
	#endif
  // prepare tx buffer write
  writeReg(EWRPT, TXSTART_INIT);
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	7a e1       	ldi	r23, 0x1A	; 26
    19e2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
  writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    19e6:	8a e7       	ldi	r24, 0x7A	; 122
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
    19f0:	e5 e2       	ldi	r30, 0x25	; 37
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	8b 7f       	andi	r24, 0xFB	; 251
    19f8:	80 83       	st	Z, r24
    19fa:	8a e7       	ldi	r24, 0x7A	; 122
    19fc:	8e bd       	out	0x2e, r24	; 46
    19fe:	ed e4       	ldi	r30, 0x4D	; 77
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	88 23       	and	r24, r24
    1a06:	ec f7       	brge	.-6      	; 0x1a02 <enc28j60_send+0x32>
    1a08:	98 01       	movw	r18, r16
    1a0a:	ae e4       	ldi	r26, 0x4E	; 78
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	ed e4       	ldi	r30, 0x4D	; 77
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	08 c0       	rjmp	.+16     	; 0x1a24 <enc28j60_send+0x54>
  // fill buffer
  uint16_t num = size;
  spi_enable_eth(),
  spi_out(ENC28J60_WRITE_BUF_MEM);
  while(num--) {
    spi_out(*data++);
    1a14:	88 81       	ld	r24, Y
    1a16:	8c 93       	st	X, r24
    1a18:	80 81       	ld	r24, Z
    1a1a:	88 23       	and	r24, r24
    1a1c:	ec f7       	brge	.-6      	; 0x1a18 <enc28j60_send+0x48>
    1a1e:	21 96       	adiw	r28, 0x01	; 1
    1a20:	21 50       	subi	r18, 0x01	; 1
    1a22:	30 40       	sbci	r19, 0x00	; 0

  // fill buffer
  uint16_t num = size;
  spi_enable_eth(),
  spi_out(ENC28J60_WRITE_BUF_MEM);
  while(num--) {
    1a24:	21 15       	cp	r18, r1
    1a26:	31 05       	cpc	r19, r1
    1a28:	a9 f7       	brne	.-22     	; 0x1a14 <enc28j60_send+0x44>
    1a2a:	e5 e2       	ldi	r30, 0x25	; 37
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	84 60       	ori	r24, 0x04	; 4
    1a32:	80 83       	st	Z, r24
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <enc28j60_send+0x84>
  }
  spi_disable_eth();

  // wait for tx ready
  while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
      if (readRegByte(EIR) & EIR_TXERIF) {
    1a36:	8c e1       	ldi	r24, 0x1C	; 28
    1a38:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <readRegByte>
    1a3c:	81 ff       	sbrs	r24, 1
    1a3e:	0a c0       	rjmp	.+20     	; 0x1a54 <enc28j60_send+0x84>
          writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
    1a40:	80 e8       	ldi	r24, 0x80	; 128
    1a42:	6f e1       	ldi	r22, 0x1F	; 31
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
          writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
    1a4a:	80 ea       	ldi	r24, 0xA0	; 160
    1a4c:	6f e1       	ldi	r22, 0x1F	; 31
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
    spi_out(*data++);
  }
  spi_disable_eth();

  // wait for tx ready
  while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	6f e1       	ldi	r22, 0x1F	; 31
    1a58:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <readOp>
    1a5c:	83 fd       	sbrc	r24, 3
    1a5e:	eb cf       	rjmp	.-42     	; 0x1a36 <enc28j60_send+0x66>
          writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
          writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
      }

  // initiate send
  writeReg(ETXND, TXSTART_INIT+size);
    1a60:	b8 01       	movw	r22, r16
    1a62:	60 50       	subi	r22, 0x00	; 0
    1a64:	76 4e       	sbci	r23, 0xE6	; 230
    1a66:	86 e0       	ldi	r24, 0x06	; 6
    1a68:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
    1a6c:	80 e8       	ldi	r24, 0x80	; 128
    1a6e:	6f e1       	ldi	r22, 0x1F	; 31
    1a70:	48 e0       	ldi	r20, 0x08	; 8
    1a72:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
  return PIO_OK;
}
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	08 95       	ret

00001a82 <enc28j60_has_recv>:
uint8_t enc28j60_has_recv(void)
{
	#ifdef NOENC
	return 0;
	#endif
  return readRegByte(EPKTCNT);
    1a82:	89 e3       	ldi	r24, 0x39	; 57
    1a84:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <readRegByte>
}
    1a88:	08 95       	ret

00001a8a <enc28j60_init>:
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/);
}

// TODO(KaiN#1): merge flags with pio_util_get_init_flags()?
uint8_t enc28j60_init(const uint8_t macaddr[6], uint8_t flags)
{
    1a8a:	df 92       	push	r13
    1a8c:	ef 92       	push	r14
    1a8e:	ff 92       	push	r15
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	0f 92       	push	r0
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	7c 01       	movw	r14, r24
    1aa0:	d6 2e       	mov	r13, r22
	#ifdef NOENC
	return 0;
	#endif
  spi_init();
    1aa2:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <spi_init>
    1aa6:	e5 e2       	ldi	r30, 0x25	; 37
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	84 60       	ori	r24, 0x04	; 4
    1aae:	80 83       	st	Z, r24
  spi_disable_eth();

  is_full_duplex = (flags & PIO_INIT_FULL_DUPLEX) == PIO_INIT_FULL_DUPLEX;
    1ab0:	8d 2d       	mov	r24, r13
    1ab2:	81 70       	andi	r24, 0x01	; 1
    1ab4:	80 93 47 01 	sts	0x0147, r24

  // soft reset cpu
  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
    1ab8:	8f ef       	ldi	r24, 0xFF	; 255
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	4f ef       	ldi	r20, 0xFF	; 255
    1abe:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
  timerDelay100us(20); // errata B7/2
    1ac2:	84 e1       	ldi	r24, 0x14	; 20
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 85 01 	call	0x30a	; 0x30a <timerDelay100us>
    1aca:	00 e0       	ldi	r16, 0x00	; 0
    1acc:	10 e0       	ldi	r17, 0x00	; 0
    1ace:	08 c0       	rjmp	.+16     	; 0x1ae0 <enc28j60_init+0x56>

  // wait or error
  uint16_t count = 0;
  while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY) {
    count ++;
    1ad0:	0f 5f       	subi	r16, 0xFF	; 255
    1ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    if(count == 0xfff) {
    1ad4:	8f e0       	ldi	r24, 0x0F	; 15
    1ad6:	0f 3f       	cpi	r16, 0xFF	; 255
    1ad8:	18 07       	cpc	r17, r24
    1ada:	11 f4       	brne	.+4      	; 0x1ae0 <enc28j60_init+0x56>
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	c0 c0       	rjmp	.+384    	; 0x1c60 <enc28j60_init+0x1d6>
  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
  timerDelay100us(20); // errata B7/2

  // wait or error
  uint16_t count = 0;
  while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY) {
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	6d e1       	ldi	r22, 0x1D	; 29
    1ae4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <readOp>
    1ae8:	88 23       	and	r24, r24
    1aea:	91 f3       	breq	.-28     	; 0x1ad0 <enc28j60_init+0x46>
      return PIO_NOT_FOUND;
    }
  }

  // set packet pointers
  gNextPacketPtr = RXSTART_INIT;
    1aec:	10 92 46 01 	sts	0x0146, r1
    1af0:	10 92 45 01 	sts	0x0145, r1
  writeReg(ERXST, RXSTART_INIT);
    1af4:	88 e0       	ldi	r24, 0x08	; 8
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
  writeReg(ERXRDPT, RXSTART_INIT);
    1afe:	8c e0       	ldi	r24, 0x0C	; 12
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
  writeReg(ERXND, RXSTOP_INIT);
    1b08:	8a e0       	ldi	r24, 0x0A	; 10
    1b0a:	6f ef       	ldi	r22, 0xFF	; 255
    1b0c:	79 e1       	ldi	r23, 0x19	; 25
    1b0e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
  writeReg(ETXST, TXSTART_INIT);
    1b12:	84 e0       	ldi	r24, 0x04	; 4
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	7a e1       	ldi	r23, 0x1A	; 26
    1b18:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
  writeReg(ETXND, TXSTOP_INIT);
    1b1c:	86 e0       	ldi	r24, 0x06	; 6
    1b1e:	6f ef       	ldi	r22, 0xFF	; 255
    1b20:	7f e1       	ldi	r23, 0x1F	; 31
    1b22:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>

  // set packet filter
  if(flags & PIO_INIT_BROAD_CAST) {
    1b26:	d2 fe       	sbrs	r13, 2
    1b28:	05 c0       	rjmp	.+10     	; 0x1b34 <enc28j60_init+0xaa>
static inline void enc28j60_enable_broadcast ( void )
{
	#ifdef NOENC
	return;
	#endif
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/|ERXFCON_BCEN);
    1b2a:	88 e3       	ldi	r24, 0x38	; 56
    1b2c:	61 ea       	ldi	r22, 0xA1	; 161
    1b2e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <enc28j60_init+0xb2>
static inline void enc28j60_disable_broadcast ( void )
{
	#ifdef NOENC
	return;
	#endif
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/);
    1b34:	88 e3       	ldi	r24, 0x38	; 56
    1b36:	60 ea       	ldi	r22, 0xA0	; 160
    1b38:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
  } else {
    enc28j60_disable_broadcast(); // change to add ERXFCON_BCEN recommended by epam
  }

  // BIST pattern generator?
  writeReg(EPMM0, 0x303f);
    1b3c:	88 e2       	ldi	r24, 0x28	; 40
    1b3e:	6f e3       	ldi	r22, 0x3F	; 63
    1b40:	70 e3       	ldi	r23, 0x30	; 48
    1b42:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
  writeReg(EPMCS, 0xf7f9);
    1b46:	80 e3       	ldi	r24, 0x30	; 48
    1b48:	69 ef       	ldi	r22, 0xF9	; 249
    1b4a:	77 ef       	ldi	r23, 0xF7	; 247
    1b4c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>

  // MAC init (with flow control)
  writeRegByte(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
    1b50:	80 ec       	ldi	r24, 0xC0	; 192
    1b52:	6d e0       	ldi	r22, 0x0D	; 13
    1b54:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
  writeRegByte(MACON2, 0x00);
    1b58:	81 ec       	ldi	r24, 0xC1	; 193
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
  uint8_t mac3val = MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN;
  if(is_full_duplex) {
    1b60:	80 91 47 01 	lds	r24, 0x0147
    1b64:	88 23       	and	r24, r24
    1b66:	11 f0       	breq	.+4      	; 0x1b6c <enc28j60_init+0xe2>
    1b68:	63 e3       	ldi	r22, 0x33	; 51
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <enc28j60_init+0xe4>
    1b6c:	62 e3       	ldi	r22, 0x32	; 50
    mac3val |= MACON3_FULDPX;
  }
  writeRegByte(MACON3, mac3val);
    1b6e:	82 ec       	ldi	r24, 0xC2	; 194
    1b70:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>

  if(is_full_duplex) {
    1b74:	80 91 47 01 	lds	r24, 0x0147
    1b78:	88 23       	and	r24, r24
    1b7a:	51 f0       	breq	.+20     	; 0x1b90 <enc28j60_init+0x106>
    writeRegByte(MABBIPG, 0x15);
    1b7c:	84 ec       	ldi	r24, 0xC4	; 196
    1b7e:	65 e1       	ldi	r22, 0x15	; 21
    1b80:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
    writeReg(MAIPG, 0x0012);
    1b84:	86 ec       	ldi	r24, 0xC6	; 198
    1b86:	62 e1       	ldi	r22, 0x12	; 18
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
    1b8e:	09 c0       	rjmp	.+18     	; 0x1ba2 <enc28j60_init+0x118>
  } else {
    writeRegByte(MABBIPG, 0x12);
    1b90:	84 ec       	ldi	r24, 0xC4	; 196
    1b92:	62 e1       	ldi	r22, 0x12	; 18
    1b94:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
    writeReg(MAIPG, 0x0C12);
    1b98:	86 ec       	ldi	r24, 0xC6	; 198
    1b9a:	62 e1       	ldi	r22, 0x12	; 18
    1b9c:	7c e0       	ldi	r23, 0x0C	; 12
    1b9e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
  }
  writeReg(MAMXFL, MAX_FRAMELEN);
    1ba2:	8a ec       	ldi	r24, 0xCA	; 202
    1ba4:	6e ee       	ldi	r22, 0xEE	; 238
    1ba6:	75 e0       	ldi	r23, 0x05	; 5
    1ba8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>

  // PHY init
  if(is_full_duplex) {
    1bac:	80 91 47 01 	lds	r24, 0x0147
    1bb0:	88 23       	and	r24, r24
    1bb2:	59 f0       	breq	.+22     	; 0x1bca <enc28j60_init+0x140>
    writePhy(PHCON1, PHCON1_PDPXMD);
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	71 e0       	ldi	r23, 0x01	; 1
    1bba:	0e 94 87 0c 	call	0x190e	; 0x190e <writePhy>
    writePhy(PHCON2, 0);
    1bbe:	80 e1       	ldi	r24, 0x10	; 16
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	0e 94 87 0c 	call	0x190e	; 0x190e <writePhy>
    1bc8:	0a c0       	rjmp	.+20     	; 0x1bde <enc28j60_init+0x154>
  } else {
    writePhy(PHCON1, 0);
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	0e 94 87 0c 	call	0x190e	; 0x190e <writePhy>
    writePhy(PHCON2, PHCON2_HDLDIS);
    1bd4:	80 e1       	ldi	r24, 0x10	; 16
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	71 e0       	ldi	r23, 0x01	; 1
    1bda:	0e 94 87 0c 	call	0x190e	; 0x190e <writePhy>
  }

  // prepare flow control
  writeReg(EPAUS, 20 * 100); // 100ms
    1bde:	88 e7       	ldi	r24, 0x78	; 120
    1be0:	60 ed       	ldi	r22, 0xD0	; 208
    1be2:	77 e0       	ldi	r23, 0x07	; 7
    1be4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>

  // return rev
  rev = readRegByte(EREVID);
    1be8:	82 e7       	ldi	r24, 0x72	; 114
    1bea:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <readRegByte>
    1bee:	80 93 48 01 	sts	0x0148, r24
  // microchip forgot to step the number on the silcon when they
  // released the revision B7. 6 is now rev B7. We still have
  // to see what they do when they release B8. At the moment
  // there is no B8 out yet
  if (rev > 5) ++rev;
    1bf2:	86 30       	cpi	r24, 0x06	; 6
    1bf4:	18 f0       	brcs	.+6      	; 0x1bfc <enc28j60_init+0x172>
    1bf6:	8f 5f       	subi	r24, 0xFF	; 255
    1bf8:	80 93 48 01 	sts	0x0148, r24

  // set mac
  writeRegByte(MAADR5, macaddr[0]);
    1bfc:	84 ee       	ldi	r24, 0xE4	; 228
    1bfe:	f7 01       	movw	r30, r14
    1c00:	60 81       	ld	r22, Z
    1c02:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
  writeRegByte(MAADR4, macaddr[1]);
    1c06:	85 ee       	ldi	r24, 0xE5	; 229
    1c08:	f7 01       	movw	r30, r14
    1c0a:	61 81       	ldd	r22, Z+1	; 0x01
    1c0c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
  writeRegByte(MAADR3, macaddr[2]);
    1c10:	82 ee       	ldi	r24, 0xE2	; 226
    1c12:	f7 01       	movw	r30, r14
    1c14:	62 81       	ldd	r22, Z+2	; 0x02
    1c16:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
  writeRegByte(MAADR2, macaddr[3]);
    1c1a:	83 ee       	ldi	r24, 0xE3	; 227
    1c1c:	f7 01       	movw	r30, r14
    1c1e:	63 81       	ldd	r22, Z+3	; 0x03
    1c20:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
  writeRegByte(MAADR1, macaddr[4]);
    1c24:	80 ee       	ldi	r24, 0xE0	; 224
    1c26:	f7 01       	movw	r30, r14
    1c28:	64 81       	ldd	r22, Z+4	; 0x04
    1c2a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>
  writeRegByte(MAADR0, macaddr[5]);
    1c2e:	81 ee       	ldi	r24, 0xE1	; 225
    1c30:	f7 01       	movw	r30, r14
    1c32:	65 81       	ldd	r22, Z+5	; 0x05
    1c34:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <writeRegByte>

  SetBank(ECON1);
    1c38:	8f e1       	ldi	r24, 0x1F	; 31
    1c3a:	0e 94 43 0c 	call	0x1886	; 0x1886 <SetBank>
  writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
    1c3e:	80 e8       	ldi	r24, 0x80	; 128
    1c40:	6b e1       	ldi	r22, 0x1B	; 27
    1c42:	40 ec       	ldi	r20, 0xC0	; 192
    1c44:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
    1c48:	80 e8       	ldi	r24, 0x80	; 128
    1c4a:	6f e1       	ldi	r22, 0x1F	; 31
    1c4c:	44 e0       	ldi	r20, 0x04	; 4
    1c4e:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>

  // Code moved from pio_init
	uint8_t rev, result;
	result = enc28j60_status(PIO_STATUS_VERSION, &rev);
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	be 01       	movw	r22, r28
    1c56:	6f 5f       	subi	r22, 0xFF	; 255
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <enc28j60_status>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
	if(result == PIO_OK) {
		// NOTE: UART - rev=hex_byte(rev)
	}

  return PIO_OK;
}
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	ff 90       	pop	r15
    1c6c:	ef 90       	pop	r14
    1c6e:	df 90       	pop	r13
    1c70:	08 95       	ret

00001c72 <enc28j60_recv>:
  *got_size = header.byteCount - 4; //remove the CRC count
  return header.status;
}

uint8_t enc28j60_recv(uint8_t *data, uint16_t max_size, uint16_t *got_size)
{
    1c72:	af 92       	push	r10
    1c74:	bf 92       	push	r11
    1c76:	cf 92       	push	r12
    1c78:	df 92       	push	r13
    1c7a:	ef 92       	push	r14
    1c7c:	ff 92       	push	r15
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <enc28j60_recv+0x16>
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <enc28j60_recv+0x18>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <enc28j60_recv+0x1a>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	5c 01       	movw	r10, r24
    1c92:	6b 01       	movw	r12, r22
    1c94:	8a 01       	movw	r16, r20
	#ifdef NOENC
	return 0;
	#endif
  writeReg(ERDPT, gNextPacketPtr);
    1c96:	60 91 45 01 	lds	r22, 0x0145
    1c9a:	70 91 46 01 	lds	r23, 0x0146
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
		uint16_t nextPacket;
		uint16_t byteCount;
		uint16_t status;
  } header;

  readBuf(sizeof header, (uint8_t*) &header);
    1ca4:	86 e0       	ldi	r24, 0x06	; 6
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	be 01       	movw	r22, r28
    1caa:	6f 5f       	subi	r22, 0xFF	; 255
    1cac:	7f 4f       	sbci	r23, 0xFF	; 255
    1cae:	0e 94 19 0c 	call	0x1832	; 0x1832 <readBuf>

  gNextPacketPtr  = header.nextPacket;
    1cb2:	e9 80       	ldd	r14, Y+1	; 0x01
    1cb4:	fa 80       	ldd	r15, Y+2	; 0x02
    1cb6:	f0 92 46 01 	sts	0x0146, r15
    1cba:	e0 92 45 01 	sts	0x0145, r14
  *got_size = header.byteCount - 4; //remove the CRC count
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	9c 01       	movw	r18, r24
    1cc4:	24 50       	subi	r18, 0x04	; 4
    1cc6:	30 40       	sbci	r19, 0x00	; 0
    1cc8:	f8 01       	movw	r30, r16
    1cca:	31 83       	std	Z+1, r19	; 0x01
    1ccc:	20 83       	st	Z, r18

  // read chip's packet header
  uint8_t status = read_hdr(got_size);

  // was a receive error?
  if ((status & 0x80)==0) {
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	88 23       	and	r24, r24
    1cd2:	bc f0       	brlt	.+46     	; 0x1d02 <enc28j60_recv+0x90>
inline static void next_pkt(void)
{
	#ifdef NOENC
	return;
	#endif
  if (gNextPacketPtr - 1 > RXSTOP_INIT)
    1cd4:	b7 01       	movw	r22, r14
    1cd6:	61 50       	subi	r22, 0x01	; 1
    1cd8:	70 40       	sbci	r23, 0x00	; 0
    1cda:	fa e1       	ldi	r31, 0x1A	; 26
    1cdc:	60 30       	cpi	r22, 0x00	; 0
    1cde:	7f 07       	cpc	r23, r31
    1ce0:	30 f0       	brcs	.+12     	; 0x1cee <enc28j60_recv+0x7c>
      writeReg(ERXRDPT, RXSTOP_INIT);
    1ce2:	8c e0       	ldi	r24, 0x0C	; 12
    1ce4:	6f ef       	ldi	r22, 0xFF	; 255
    1ce6:	79 e1       	ldi	r23, 0x19	; 25
    1ce8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <enc28j60_recv+0x82>
  else
      writeReg(ERXRDPT, gNextPacketPtr - 1);
    1cee:	8c e0       	ldi	r24, 0x0C	; 12
    1cf0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1cf4:	80 e8       	ldi	r24, 0x80	; 128
    1cf6:	6e e1       	ldi	r22, 0x1E	; 30
    1cf8:	40 e4       	ldi	r20, 0x40	; 64
    1cfa:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
    1cfe:	03 e0       	ldi	r16, 0x03	; 3
    1d00:	20 c0       	rjmp	.+64     	; 0x1d42 <enc28j60_recv+0xd0>
  }

  // check size
  uint16_t len = *got_size;
  uint8_t result = PIO_OK;
  if(len > max_size) {
    1d02:	c2 16       	cp	r12, r18
    1d04:	d3 06       	cpc	r13, r19
    1d06:	18 f4       	brcc	.+6      	; 0x1d0e <enc28j60_recv+0x9c>
    1d08:	96 01       	movw	r18, r12
    1d0a:	02 e0       	ldi	r16, 0x02	; 2
    1d0c:	01 c0       	rjmp	.+2      	; 0x1d10 <enc28j60_recv+0x9e>
    1d0e:	00 e0       	ldi	r16, 0x00	; 0
    len = max_size;
    result = PIO_TOO_LARGE;
  }

  // read packet
  readBuf(len, data);
    1d10:	c9 01       	movw	r24, r18
    1d12:	b5 01       	movw	r22, r10
    1d14:	0e 94 19 0c 	call	0x1832	; 0x1832 <readBuf>
inline static void next_pkt(void)
{
	#ifdef NOENC
	return;
	#endif
  if (gNextPacketPtr - 1 > RXSTOP_INIT)
    1d18:	b7 01       	movw	r22, r14
    1d1a:	61 50       	subi	r22, 0x01	; 1
    1d1c:	70 40       	sbci	r23, 0x00	; 0
    1d1e:	8a e1       	ldi	r24, 0x1A	; 26
    1d20:	60 30       	cpi	r22, 0x00	; 0
    1d22:	78 07       	cpc	r23, r24
    1d24:	30 f0       	brcs	.+12     	; 0x1d32 <enc28j60_recv+0xc0>
      writeReg(ERXRDPT, RXSTOP_INIT);
    1d26:	8c e0       	ldi	r24, 0x0C	; 12
    1d28:	6f ef       	ldi	r22, 0xFF	; 255
    1d2a:	79 e1       	ldi	r23, 0x19	; 25
    1d2c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
    1d30:	03 c0       	rjmp	.+6      	; 0x1d38 <enc28j60_recv+0xc6>
  else
      writeReg(ERXRDPT, gNextPacketPtr - 1);
    1d32:	8c e0       	ldi	r24, 0x0C	; 12
    1d34:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1d38:	80 e8       	ldi	r24, 0x80	; 128
    1d3a:	6e e1       	ldi	r22, 0x1E	; 30
    1d3c:	40 e4       	ldi	r20, 0x40	; 64
    1d3e:	0e 94 00 0c 	call	0x1800	; 0x1800 <writeOp>
  // read packet
  readBuf(len, data);

  next_pkt();
  return result;
}
    1d42:	80 2f       	mov	r24, r16
    1d44:	26 96       	adiw	r28, 0x06	; 6
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	ff 90       	pop	r15
    1d5a:	ef 90       	pop	r14
    1d5c:	df 90       	pop	r13
    1d5e:	cf 90       	pop	r12
    1d60:	bf 90       	pop	r11
    1d62:	af 90       	pop	r10
    1d64:	08 95       	ret

00001d66 <spi_init>:
#include "spi.h"

void spi_init(void)
{
	// output: CS, MOSI, SCK, input: MISO, card detect, write protect
	SPI_DDR |= SPI_SCK | SPI_MOSI | SD_CS | ETH_CS;
    1d66:	e4 e2       	ldi	r30, 0x24	; 36
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8e 62       	ori	r24, 0x2E	; 46
    1d6e:	80 83       	st	Z, r24
	SPI_DDR &= ~(SPI_MISO | SD_DETECT | SD_LOCK);
    1d70:	80 81       	ld	r24, Z
    1d72:	8e 76       	andi	r24, 0x6E	; 110
    1d74:	80 83       	st	Z, r24

	// MOSI, SCK = 0, Eth CS = 1
	SPI_PORT &= ~(SPI_MOSI | SPI_SCK);
    1d76:	e5 e2       	ldi	r30, 0x25	; 37
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	87 7d       	andi	r24, 0xD7	; 215
    1d7e:	80 83       	st	Z, r24
	SPI_PORT |= ETH_CS;
    1d80:	80 81       	ld	r24, Z
    1d82:	84 60       	ori	r24, 0x04	; 4
    1d84:	80 83       	st	Z, r24

  SPCR = _BV(SPE) | _BV(MSTR); // 8 MHz @ 16
    1d86:	80 e5       	ldi	r24, 0x50	; 80
    1d88:	8c bd       	out	0x2c, r24	; 44
	SPSR = _BV(SPI2X);
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	8d bd       	out	0x2d, r24	; 45
}
    1d8e:	08 95       	ret

00001d90 <stats_reset>:
#include "base/uart.h"

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
    1d90:	e2 e6       	ldi	r30, 0x62	; 98
    1d92:	f7 e0       	ldi	r31, 0x07	; 7
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    1d94:	22 e9       	ldi	r18, 0x92	; 146
    1d96:	37 e0       	ldi	r19, 0x07	; 7
    stats_t *s = &stats[i];
    s->bytes = 0;
    1d98:	10 82       	st	Z, r1
    1d9a:	11 82       	std	Z+1, r1	; 0x01
    1d9c:	12 82       	std	Z+2, r1	; 0x02
    1d9e:	13 82       	std	Z+3, r1	; 0x03
    s->cnt = 0;
    1da0:	15 82       	std	Z+5, r1	; 0x05
    1da2:	14 82       	std	Z+4, r1	; 0x04
    s->err = 0;
    1da4:	17 82       	std	Z+7, r1	; 0x07
    1da6:	16 82       	std	Z+6, r1	; 0x06
    s->drop = 0;
    1da8:	11 86       	std	Z+9, r1	; 0x09
    1daa:	10 86       	std	Z+8, r1	; 0x08
    s->max_rate = 0;
    1dac:	13 86       	std	Z+11, r1	; 0x0b
    1dae:	12 86       	std	Z+10, r1	; 0x0a
    1db0:	3c 96       	adiw	r30, 0x0c	; 12

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    1db2:	e2 17       	cp	r30, r18
    1db4:	f3 07       	cpc	r31, r19
    1db6:	81 f7       	brne	.-32     	; 0x1d98 <stats_reset+0x8>
    s->cnt = 0;
    s->err = 0;
    s->drop = 0;
    s->max_rate = 0;
  }
}
    1db8:	08 95       	ret

00001dba <stats_update_ok>:

void stats_update_ok(uint8_t id, uint16_t size, uint16_t rate)
{
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
  stats_t *s = &stats[id];
    1dbe:	9c e0       	ldi	r25, 0x0C	; 12
    1dc0:	89 9f       	mul	r24, r25
    1dc2:	c0 01       	movw	r24, r0
    1dc4:	11 24       	eor	r1, r1
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	ee 59       	subi	r30, 0x9E	; 158
    1dca:	f8 4f       	sbci	r31, 0xF8	; 248
  s->cnt++;
    1dcc:	84 81       	ldd	r24, Z+4	; 0x04
    1dce:	95 81       	ldd	r25, Z+5	; 0x05
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	95 83       	std	Z+5, r25	; 0x05
    1dd4:	84 83       	std	Z+4, r24	; 0x04
  s->bytes += size;
    1dd6:	8b 01       	movw	r16, r22
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	91 81       	ldd	r25, Z+1	; 0x01
    1de0:	a2 81       	ldd	r26, Z+2	; 0x02
    1de2:	b3 81       	ldd	r27, Z+3	; 0x03
    1de4:	80 0f       	add	r24, r16
    1de6:	91 1f       	adc	r25, r17
    1de8:	a2 1f       	adc	r26, r18
    1dea:	b3 1f       	adc	r27, r19
    1dec:	80 83       	st	Z, r24
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	a2 83       	std	Z+2, r26	; 0x02
    1df2:	b3 83       	std	Z+3, r27	; 0x03
  if(rate > s->max_rate) {
    1df4:	82 85       	ldd	r24, Z+10	; 0x0a
    1df6:	93 85       	ldd	r25, Z+11	; 0x0b
    1df8:	84 17       	cp	r24, r20
    1dfa:	95 07       	cpc	r25, r21
    1dfc:	10 f4       	brcc	.+4      	; 0x1e02 <stats_update_ok+0x48>
    s->max_rate = rate;
    1dfe:	53 87       	std	Z+11, r21	; 0x0b
    1e00:	42 87       	std	Z+10, r20	; 0x0a
  }
}
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	08 95       	ret

00001e08 <dump_line>:
      break;
    default:
			// NOTE: UART - ?
      break;
  }
}
    1e08:	08 95       	ret

00001e0a <dump_header>:

static void dump_header(void)
{
	// NOTE: UART - cnt  bytes    err  drop rate\r\n
}
    1e0a:	08 95       	ret

00001e0c <stats_dump_all>:
{
  dump_header();
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    dump_line(i);
  }
}
    1e0c:	08 95       	ret

00001e0e <stats_dump>:
  }
  if(pio) {
    dump_line(STATS_ID_PIO_RX);
    dump_line(STATS_ID_PIO_TX);
  }
}
    1e0e:	08 95       	ret

00001e10 <__mulsi3>:
    1e10:	62 9f       	mul	r22, r18
    1e12:	d0 01       	movw	r26, r0
    1e14:	73 9f       	mul	r23, r19
    1e16:	f0 01       	movw	r30, r0
    1e18:	82 9f       	mul	r24, r18
    1e1a:	e0 0d       	add	r30, r0
    1e1c:	f1 1d       	adc	r31, r1
    1e1e:	64 9f       	mul	r22, r20
    1e20:	e0 0d       	add	r30, r0
    1e22:	f1 1d       	adc	r31, r1
    1e24:	92 9f       	mul	r25, r18
    1e26:	f0 0d       	add	r31, r0
    1e28:	83 9f       	mul	r24, r19
    1e2a:	f0 0d       	add	r31, r0
    1e2c:	74 9f       	mul	r23, r20
    1e2e:	f0 0d       	add	r31, r0
    1e30:	65 9f       	mul	r22, r21
    1e32:	f0 0d       	add	r31, r0
    1e34:	99 27       	eor	r25, r25
    1e36:	72 9f       	mul	r23, r18
    1e38:	b0 0d       	add	r27, r0
    1e3a:	e1 1d       	adc	r30, r1
    1e3c:	f9 1f       	adc	r31, r25
    1e3e:	63 9f       	mul	r22, r19
    1e40:	b0 0d       	add	r27, r0
    1e42:	e1 1d       	adc	r30, r1
    1e44:	f9 1f       	adc	r31, r25
    1e46:	bd 01       	movw	r22, r26
    1e48:	cf 01       	movw	r24, r30
    1e4a:	11 24       	eor	r1, r1
    1e4c:	08 95       	ret

00001e4e <__udivmodqi4>:
    1e4e:	99 1b       	sub	r25, r25
    1e50:	79 e0       	ldi	r23, 0x09	; 9
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <__udivmodqi4_ep>

00001e54 <__udivmodqi4_loop>:
    1e54:	99 1f       	adc	r25, r25
    1e56:	96 17       	cp	r25, r22
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <__udivmodqi4_ep>
    1e5a:	96 1b       	sub	r25, r22

00001e5c <__udivmodqi4_ep>:
    1e5c:	88 1f       	adc	r24, r24
    1e5e:	7a 95       	dec	r23
    1e60:	c9 f7       	brne	.-14     	; 0x1e54 <__udivmodqi4_loop>
    1e62:	80 95       	com	r24
    1e64:	08 95       	ret

00001e66 <__udivmodsi4>:
    1e66:	a1 e2       	ldi	r26, 0x21	; 33
    1e68:	1a 2e       	mov	r1, r26
    1e6a:	aa 1b       	sub	r26, r26
    1e6c:	bb 1b       	sub	r27, r27
    1e6e:	fd 01       	movw	r30, r26
    1e70:	0d c0       	rjmp	.+26     	; 0x1e8c <__udivmodsi4_ep>

00001e72 <__udivmodsi4_loop>:
    1e72:	aa 1f       	adc	r26, r26
    1e74:	bb 1f       	adc	r27, r27
    1e76:	ee 1f       	adc	r30, r30
    1e78:	ff 1f       	adc	r31, r31
    1e7a:	a2 17       	cp	r26, r18
    1e7c:	b3 07       	cpc	r27, r19
    1e7e:	e4 07       	cpc	r30, r20
    1e80:	f5 07       	cpc	r31, r21
    1e82:	20 f0       	brcs	.+8      	; 0x1e8c <__udivmodsi4_ep>
    1e84:	a2 1b       	sub	r26, r18
    1e86:	b3 0b       	sbc	r27, r19
    1e88:	e4 0b       	sbc	r30, r20
    1e8a:	f5 0b       	sbc	r31, r21

00001e8c <__udivmodsi4_ep>:
    1e8c:	66 1f       	adc	r22, r22
    1e8e:	77 1f       	adc	r23, r23
    1e90:	88 1f       	adc	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	1a 94       	dec	r1
    1e96:	69 f7       	brne	.-38     	; 0x1e72 <__udivmodsi4_loop>
    1e98:	60 95       	com	r22
    1e9a:	70 95       	com	r23
    1e9c:	80 95       	com	r24
    1e9e:	90 95       	com	r25
    1ea0:	9b 01       	movw	r18, r22
    1ea2:	ac 01       	movw	r20, r24
    1ea4:	bd 01       	movw	r22, r26
    1ea6:	cf 01       	movw	r24, r30
    1ea8:	08 95       	ret

00001eaa <__eerd_block_m328p>:
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22

00001eae <__eerd_blraw_m328p>:
    1eae:	fc 01       	movw	r30, r24
    1eb0:	f9 99       	sbic	0x1f, 1	; 31
    1eb2:	fe cf       	rjmp	.-4      	; 0x1eb0 <__eerd_blraw_m328p+0x2>
    1eb4:	06 c0       	rjmp	.+12     	; 0x1ec2 <__eerd_blraw_m328p+0x14>
    1eb6:	f2 bd       	out	0x22, r31	; 34
    1eb8:	e1 bd       	out	0x21, r30	; 33
    1eba:	f8 9a       	sbi	0x1f, 0	; 31
    1ebc:	31 96       	adiw	r30, 0x01	; 1
    1ebe:	00 b4       	in	r0, 0x20	; 32
    1ec0:	0d 92       	st	X+, r0
    1ec2:	41 50       	subi	r20, 0x01	; 1
    1ec4:	50 40       	sbci	r21, 0x00	; 0
    1ec6:	b8 f7       	brcc	.-18     	; 0x1eb6 <__eerd_blraw_m328p+0x8>
    1ec8:	08 95       	ret

00001eca <__eerd_word_m328p>:
    1eca:	a8 e1       	ldi	r26, 0x18	; 24
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	42 e0       	ldi	r20, 0x02	; 2
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__eerd_blraw_m328p>

00001ed6 <__eewr_block_m328p>:
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	03 c0       	rjmp	.+6      	; 0x1ee2 <__eewr_block_m328p+0xc>
    1edc:	2d 91       	ld	r18, X+
    1ede:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__eewr_r18_m328p>
    1ee2:	41 50       	subi	r20, 0x01	; 1
    1ee4:	50 40       	sbci	r21, 0x00	; 0
    1ee6:	d0 f7       	brcc	.-12     	; 0x1edc <__eewr_block_m328p+0x6>
    1ee8:	08 95       	ret

00001eea <__eewr_byte_m328p>:
    1eea:	26 2f       	mov	r18, r22

00001eec <__eewr_r18_m328p>:
    1eec:	f9 99       	sbic	0x1f, 1	; 31
    1eee:	fe cf       	rjmp	.-4      	; 0x1eec <__eewr_r18_m328p>
    1ef0:	1f ba       	out	0x1f, r1	; 31
    1ef2:	92 bd       	out	0x22, r25	; 34
    1ef4:	81 bd       	out	0x21, r24	; 33
    1ef6:	20 bd       	out	0x20, r18	; 32
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	fa 9a       	sbi	0x1f, 2	; 31
    1efe:	f9 9a       	sbi	0x1f, 1	; 31
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	08 95       	ret

00001f06 <__eewr_word_m328p>:
    1f06:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__eewr_byte_m328p>
    1f0a:	27 2f       	mov	r18, r23
    1f0c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__eewr_r18_m328p>

00001f10 <_exit>:
    1f10:	f8 94       	cli

00001f12 <__stop_program>:
    1f12:	ff cf       	rjmp	.-2      	; 0x1f12 <__stop_program>

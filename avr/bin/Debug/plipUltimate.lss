
bin\Debug\plipUltimate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00002116  000021ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002116  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000658  0080013c  0080013c  00002226  2**0
                  ALLOC
  3 .eeprom       00000015  00810000  00810000  00002226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  0000223b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .debug_aranges 00000280  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007fb  00000000  00000000  000024be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004949  00000000  00000000  00002cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018ae  00000000  00000000  00007602  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b62  00000000  00000000  00008eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007e0  00000000  00000000  0000ba14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000012da  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b9f  00000000  00000000  0000d4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  0000f06d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
       8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
       c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      10:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      14:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      18:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      1c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      20:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      24:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      28:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      2c:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_11>
      30:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      34:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      38:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      3c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      40:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      44:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      48:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      4c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      50:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      54:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      58:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      5c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      60:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      64:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>

00000068 <cmd_table>:
      68:	d4 00 f5 05 d6 00 e8 00 f7 05 ea 00 fc 00 f9 05     ................
      78:	fe 00 15 01 d8 06 17 01 28 01 d3 06 2b 01 45 01     ........(...+.E.
      88:	ce 06 48 01 64 01 ca 06 67 01 83 01 c6 06 86 01     ..H.d...g.......
      98:	96 01 c2 06 99 01 aa 01 9f 06 ac 01 c8 01 56 06     ..............V.
      a8:	cb 01 e4 01 56 06 e7 01 fd 01 1b 06 00 02 17 02     ....V...........
      b8:	1b 06 1a 02 33 02 fb 05 36 02 4b 02 1b 06 4e 02     ....3...6.K...N.
      c8:	60 02 56 06 63 02 00 00 00 00 00 00                 `.V.c.......

000000d4 <cmd_quit_name>:
      d4:	71 00                                               q.

000000d6 <cmd_quit_help>:
      d6:	71 75 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     quit command mod
      e6:	65 00                                               e.

000000e8 <cmd_device_reset_name>:
      e8:	72 00                                               r.

000000ea <cmd_device_reset_help>:
      ea:	73 6f 66 74 20 72 65 73 65 74 20 64 65 76 69 63     soft reset devic
      fa:	65 00                                               e.

000000fc <cmd_version_name>:
      fc:	76 00                                               v.

000000fe <cmd_version_help>:
      fe:	70 72 69 6e 74 20 66 69 72 6d 77 61 72 65 20 76     print firmware v
     10e:	65 72 73 69 6f 6e 00                                ersion.

00000115 <cmd_param_dump_name>:
     115:	70 00                                               p.

00000117 <cmd_param_dump_help>:
     117:	70 72 69 6e 74 20 70 61 72 61 6d 65 74 65 72 73     print parameters
	...

00000128 <cmd_param_save_name>:
     128:	70 73 00                                            ps.

0000012b <cmd_param_save_help>:
     12b:	73 61 76 65 20 70 61 72 61 6d 65 74 65 72 73 20     save parameters 
     13b:	74 6f 20 45 45 50 52 4f 4d 00                       to EEPROM.

00000145 <cmd_param_load_name>:
     145:	70 6c 00                                            pl.

00000148 <cmd_param_load_help>:
     148:	6c 6f 61 64 20 70 61 72 61 6d 65 74 65 72 73 20     load parameters 
     158:	66 72 6f 6d 20 45 45 50 52 4f 4d 00                 from EEPROM.

00000164 <cmd_param_reset_name>:
     164:	70 72 00                                            pr.

00000167 <cmd_param_reset_help>:
     167:	72 65 73 65 74 20 70 61 72 61 6d 65 74 65 72 73     reset parameters
     177:	20 74 6f 20 64 65 66 61 75 6c 74 00                  to default.

00000183 <cmd_stats_dump_name>:
     183:	73 64 00                                            sd.

00000186 <cmd_stats_dump_help>:
     186:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

00000196 <cmd_stats_reset_name>:
     196:	73 72 00                                            sr.

00000199 <cmd_stats_reset_help>:
     199:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

000001aa <cmd_gen_m_name>:
     1aa:	6d 00                                               m.

000001ac <cmd_gen_m_help>:
     1ac:	6d 61 63 20 61 64 64 72 65 73 73 20 6f 66 20 64     mac address of d
     1bc:	65 76 69 63 65 20 3c 6d 61 63 3e 00                 evice <mac>.

000001c8 <cmd_gen_fd_name>:
     1c8:	66 64 00                                            fd.

000001cb <cmd_gen_fd_help>:
     1cb:	73 65 74 20 66 75 6c 6c 20 64 75 70 6c 65 20 6d     set full duple m
     1db:	6f 64 65 20 5b 6f 6e 5d 00                          ode [on].

000001e4 <cmd_gen_fc_name>:
     1e4:	66 63 00                                            fc.

000001e7 <cmd_gen_fc_help>:
     1e7:	73 65 74 20 66 6c 6f 77 20 63 6f 6e 74 72 6f 6c     set flow control
     1f7:	20 5b 6f 6e 5d 00                                    [on].

000001fd <cmd_gen_tl_name>:
     1fd:	74 6c 00                                            tl.

00000200 <cmd_gen_tl_help>:
     200:	74 65 73 74 20 70 61 63 6b 65 74 20 6c 65 6e 67     test packet leng
     210:	74 68 20 3c 6e 3e 00                                th <n>.

00000217 <cmd_gen_tt_name>:
     217:	74 74 00                                            tt.

0000021a <cmd_gen_tt_help>:
     21a:	74 65 73 74 20 70 61 63 6b 65 74 20 65 74 68 20     test packet eth 
     22a:	74 79 70 65 20 3c 6e 3e 00                          type <n>.

00000233 <cmd_gen_ti_name>:
     233:	74 69 00                                            ti.

00000236 <cmd_gen_ti_help>:
     236:	74 65 73 74 20 49 50 20 61 64 64 72 65 73 73 20     test IP address 
     246:	3c 69 70 3e 00                                      <ip>.

0000024b <cmd_gen_tp_name>:
     24b:	74 70 00                                            tp.

0000024e <cmd_gen_tp_help>:
     24e:	74 65 73 74 20 55 44 50 20 70 6f 72 74 20 3c 6e     test UDP port <n
     25e:	3e 00                                               >.

00000260 <cmd_gen_tm_name>:
     260:	74 6d 00                                            tm.

00000263 <cmd_gen_tm_help>:
     263:	74 65 73 74 20 6d 6f 64 65 20 5b 30 7c 31 5d 00     test mode [0|1].

00000273 <cmdkey_table>:
     273:	31 e4 06 aa 02 32 e7 06 bc 02 33 e0 06 d3 02 34     1....2....3....4
     283:	dc 06 e7 02 73 02 07 fa 02 53 ff 06 0a 03 76 eb     ....s....S....v.
     293:	06 1b 03 70 fb 06 31 03 50 f7 06 52 03 61 f4 06     ...p..1.P..R.a..
     2a3:	7c 03 00 00 00 00 00                                |......

000002aa <cmd_enter_bridge_mode_help>:
     2aa:	65 6e 74 65 72 20 62 72 69 64 67 65 20 6d 6f 64     enter bridge mod
     2ba:	65 00                                               e.

000002bc <cmd_enter_bridge_test_mode_help>:
     2bc:	65 6e 74 65 72 20 62 72 69 64 67 65 20 74 65 73     enter bridge tes
     2cc:	74 20 6d 6f 64 65 00                                t mode.

000002d3 <cmd_enter_pio_test_mode_help>:
     2d3:	65 6e 74 65 72 20 50 49 4f 20 74 65 73 74 20 6d     enter PIO test m
     2e3:	6f 64 65 00                                         ode.

000002e7 <cmd_enter_pb_test_mode_help>:
     2e7:	65 6e 74 65 72 20 50 42 20 74 65 73 74 20 6d 6f     enter PB test mo
     2f7:	64 65 00                                            de.

000002fa <cmd_dump_stats_help>:
     2fa:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

0000030a <cmd_reset_stats_help>:
     30a:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

0000031b <cmd_toggle_verbose_help>:
     31b:	74 6f 67 67 6c 65 20 76 65 72 62 6f 73 65 20 6f     toggle verbose o
     32b:	75 74 70 75 74 00                                   utput.

00000331 <cmd_send_test_packet_help>:
     331:	73 65 6e 64 20 61 20 74 65 73 74 20 70 61 63 6b     send a test pack
     341:	65 74 20 28 70 62 74 65 73 74 20 6d 6f 64 65 29     et (pbtest mode)
	...

00000352 <cmd_send_test_packet_silent_help>:
     352:	73 65 6e 64 20 61 20 74 65 73 74 20 70 61 63 6b     send a test pack
     362:	65 74 20 28 73 69 6c 65 6e 74 29 20 28 70 62 74     et (silent) (pbt
     372:	65 73 74 20 6d 6f 64 65 29 00                       est mode).

0000037c <cmd_toggle_auto_mode_help>:
     37c:	74 6f 67 67 6c 65 20 61 75 74 6f 20 73 65 6e 64     toggle auto send
     38c:	20 28 70 62 74 65 73 74 20 6d 6f 64 65 29 00         (pbtest mode).

0000039b <default_param>:
     39b:	1a 11 af a0 47 11 00 00 ea 05 fd ff c0 a8 02 de     ....G...........
     3ab:	90 1a 00                                            ...

000003ae <__ctors_end>:
     3ae:	11 24       	eor	r1, r1
     3b0:	1f be       	out	0x3f, r1	; 63
     3b2:	cf ef       	ldi	r28, 0xFF	; 255
     3b4:	d8 e0       	ldi	r29, 0x08	; 8
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	cd bf       	out	0x3d, r28	; 61

000003ba <__do_copy_data>:
     3ba:	11 e0       	ldi	r17, 0x01	; 1
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
     3be:	b1 e0       	ldi	r27, 0x01	; 1
     3c0:	e6 e1       	ldi	r30, 0x16	; 22
     3c2:	f1 e2       	ldi	r31, 0x21	; 33
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <.do_copy_data_start>

000003c6 <.do_copy_data_loop>:
     3c6:	05 90       	lpm	r0, Z+
     3c8:	0d 92       	st	X+, r0

000003ca <.do_copy_data_start>:
     3ca:	ac 33       	cpi	r26, 0x3C	; 60
     3cc:	b1 07       	cpc	r27, r17
     3ce:	d9 f7       	brne	.-10     	; 0x3c6 <.do_copy_data_loop>

000003d0 <__do_clear_bss>:
     3d0:	17 e0       	ldi	r17, 0x07	; 7
     3d2:	ac e3       	ldi	r26, 0x3C	; 60
     3d4:	b1 e0       	ldi	r27, 0x01	; 1
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <.do_clear_bss_start>

000003d8 <.do_clear_bss_loop>:
     3d8:	1d 92       	st	X+, r1

000003da <.do_clear_bss_start>:
     3da:	a4 39       	cpi	r26, 0x94	; 148
     3dc:	b1 07       	cpc	r27, r17
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <.do_clear_bss_loop>
     3e0:	0e 94 56 07 	call	0xeac	; 0xeac <main>
     3e4:	0c 94 89 10 	jmp	0x2112	; 0x2112 <_exit>

000003e8 <__bad_interrupt>:
     3e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ec <timerInit>:
/// 100us is 1/10k of a second
/// NOTE(KaiN#): time was reduced by 1, should it be?
#define T1_100us F_CPU/10000

void timerInit(void) {
  cli();
     3ec:	f8 94       	cli

	/// Set timer 2 to CTC, prescaler 8 & compare value: 100us
  TCCR1A = _BV(WGM12);  // CTC
     3ee:	88 e0       	ldi	r24, 0x08	; 8
     3f0:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = _BV(CS10);   // Prescaler 1
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 81 00 	sts	0x0081, r24
  OCR1A = T1_100us;     // Output compare
     3fa:	80 ed       	ldi	r24, 0xD0	; 208
     3fc:	97 e0       	ldi	r25, 0x07	; 7
     3fe:	90 93 89 00 	sts	0x0089, r25
     402:	80 93 88 00 	sts	0x0088, r24
  TCNT1  = 0;           // Reset timer state
     406:	10 92 85 00 	sts	0x0085, r1
     40a:	10 92 84 00 	sts	0x0084, r1
  TIMSK1 = _BV(OCIE1A); // Enable compare interrupt
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	80 93 6f 00 	sts	0x006F, r24

  g_uwTimer100us = 0;
     414:	10 92 52 01 	sts	0x0152, r1
     418:	10 92 51 01 	sts	0x0151, r1
  g_uwTimer10ms = 0;
     41c:	10 92 50 01 	sts	0x0150, r1
     420:	10 92 4f 01 	sts	0x014F, r1
  g_uwTimeStamp = 0;
     424:	10 92 53 01 	sts	0x0153, r1
     428:	10 92 54 01 	sts	0x0154, r1
     42c:	10 92 55 01 	sts	0x0155, r1
     430:	10 92 56 01 	sts	0x0156, r1
  s_uw10msCounter = 0;
     434:	10 92 3d 01 	sts	0x013D, r1
     438:	10 92 3c 01 	sts	0x013C, r1

  sei();
     43c:	78 94       	sei
}
     43e:	08 95       	ret

00000440 <__vector_11>:

/**
 * Timer interrupt handler.
 * Increments time stamp and time interval vars accordingly.
 */
ISR(TIMER1_COMPA_vect) {
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
	TCNT1 = 0; // Reset timer s_uw10msCounterer
     452:	10 92 85 00 	sts	0x0085, r1
     456:	10 92 84 00 	sts	0x0084, r1
  ++g_uwTimer100us;
     45a:	80 91 51 01 	lds	r24, 0x0151
     45e:	90 91 52 01 	lds	r25, 0x0152
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	90 93 52 01 	sts	0x0152, r25
     468:	80 93 51 01 	sts	0x0151, r24
  ++g_uwTimeStamp;
     46c:	80 91 53 01 	lds	r24, 0x0153
     470:	90 91 54 01 	lds	r25, 0x0154
     474:	a0 91 55 01 	lds	r26, 0x0155
     478:	b0 91 56 01 	lds	r27, 0x0156
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	a1 1d       	adc	r26, r1
     480:	b1 1d       	adc	r27, r1
     482:	80 93 53 01 	sts	0x0153, r24
     486:	90 93 54 01 	sts	0x0154, r25
     48a:	a0 93 55 01 	sts	0x0155, r26
     48e:	b0 93 56 01 	sts	0x0156, r27
  ++s_uw10msCounter;
     492:	80 91 3c 01 	lds	r24, 0x013C
     496:	90 91 3d 01 	lds	r25, 0x013D
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	90 93 3d 01 	sts	0x013D, r25
     4a0:	80 93 3c 01 	sts	0x013C, r24
  if(s_uw10msCounter >= 100) {
     4a4:	84 36       	cpi	r24, 0x64	; 100
     4a6:	91 05       	cpc	r25, r1
     4a8:	68 f0       	brcs	.+26     	; 0x4c4 <__vector_11+0x84>
    s_uw10msCounter = 0;
     4aa:	10 92 3d 01 	sts	0x013D, r1
     4ae:	10 92 3c 01 	sts	0x013C, r1
    g_uwTimer10ms++;
     4b2:	80 91 4f 01 	lds	r24, 0x014F
     4b6:	90 91 50 01 	lds	r25, 0x0150
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	90 93 50 01 	sts	0x0150, r25
     4c0:	80 93 4f 01 	sts	0x014F, r24
  }
}
     4c4:	bf 91       	pop	r27
     4c6:	af 91       	pop	r26
     4c8:	9f 91       	pop	r25
     4ca:	8f 91       	pop	r24
     4cc:	0f 90       	pop	r0
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	0f 90       	pop	r0
     4d2:	1f 90       	pop	r1
     4d4:	18 95       	reti

000004d6 <timerDelay10ms>:

/// Busy-wait for supplied number of 10ms intervals
void timerDelay10ms(uint16_t uwCount) {
     4d6:	9c 01       	movw	r18, r24
	g_uwTimer10ms=0;
     4d8:	10 92 50 01 	sts	0x0150, r1
     4dc:	10 92 4f 01 	sts	0x014F, r1
	while(g_uwTimer10ms<uwCount);
     4e0:	80 91 4f 01 	lds	r24, 0x014F
     4e4:	90 91 50 01 	lds	r25, 0x0150
     4e8:	82 17       	cp	r24, r18
     4ea:	93 07       	cpc	r25, r19
     4ec:	c8 f3       	brcs	.-14     	; 0x4e0 <timerDelay10ms+0xa>
}
     4ee:	08 95       	ret

000004f0 <timerDelay100us>:

/// Busy-wait for supplied number of 100us intervals
void timerDelay100us(uint16_t uwCount) {
     4f0:	9c 01       	movw	r18, r24
	g_uwTimer100us=0;
     4f2:	10 92 52 01 	sts	0x0152, r1
     4f6:	10 92 51 01 	sts	0x0151, r1
	while(g_uwTimer100us<uwCount);
     4fa:	80 91 51 01 	lds	r24, 0x0151
     4fe:	90 91 52 01 	lds	r25, 0x0152
     502:	82 17       	cp	r24, r18
     504:	93 07       	cpc	r25, r19
     506:	c8 f3       	brcs	.-14     	; 0x4fa <timerDelay100us+0xa>
}
     508:	08 95       	ret

0000050a <timerCalculateKbps>:

// TODO(KaiN#9): timerCalculateKbps() is completely messed up
/**
 * Calculates bitrate based on transferred byte count and elapsed time.
 */
uint16_t timerCalculateKbps(uint16_t bytes, uint16_t delta) {
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	eb 01       	movw	r28, r22
  if(delta != 0) {
     510:	61 15       	cp	r22, r1
     512:	71 05       	cpc	r23, r1
     514:	19 f4       	brne	.+6      	; 0x51c <timerCalculateKbps+0x12>
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	16 c0       	rjmp	.+44     	; 0x548 <timerCalculateKbps+0x3e>
    uint32_t nom = 1000 * (uint32_t)bytes * 100;
    uint32_t denom = (uint32_t)delta * 4;
    uint32_t rate = nom / denom;
    return (uint16_t)rate;
     51c:	bc 01       	movw	r22, r24
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	20 ea       	ldi	r18, 0xA0	; 160
     524:	36 e8       	ldi	r19, 0x86	; 134
     526:	41 e0       	ldi	r20, 0x01	; 1
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	0e 94 09 10 	call	0x2012	; 0x2012 <__mulsi3>
     52e:	9e 01       	movw	r18, r28
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	22 0f       	add	r18, r18
     536:	33 1f       	adc	r19, r19
     538:	44 1f       	adc	r20, r20
     53a:	55 1f       	adc	r21, r21
     53c:	22 0f       	add	r18, r18
     53e:	33 1f       	adc	r19, r19
     540:	44 1f       	adc	r20, r20
     542:	55 1f       	adc	r21, r21
     544:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
  }
	else
		return 0;
}
     548:	82 2f       	mov	r24, r18
     54a:	93 2f       	mov	r25, r19
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <utilNibbleToHex>:
/**
 * Converts nibble (0..15) value to hex char.
 */
char utilNibbleToHex(uint8_t ubIn)
{
  if(ubIn < 10)
     552:	8a 30       	cpi	r24, 0x0A	; 10
     554:	10 f4       	brcc	.+4      	; 0x55a <utilNibbleToHex+0x8>
    return '0' + ubIn;
     556:	80 5d       	subi	r24, 0xD0	; 208
     558:	08 95       	ret
  else
    return 'A' + ubIn - 10;
     55a:	89 5c       	subi	r24, 0xC9	; 201
}
     55c:	08 95       	ret

0000055e <utilByteToHex>:

/**
 * Converts byte value to hex chars.
 */
void utilByteToHex(uint8_t ubIn, char *pOut)
{
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	f8 2e       	mov	r15, r24
     566:	8b 01       	movw	r16, r22
  pOut[0] = utilNibbleToHex(ubIn >> 4);
     568:	82 95       	swap	r24
     56a:	8f 70       	andi	r24, 0x0F	; 15
     56c:	0e 94 a9 02 	call	0x552	; 0x552 <utilNibbleToHex>
     570:	f8 01       	movw	r30, r16
     572:	80 83       	st	Z, r24
  pOut[1] = utilNibbleToHex(ubIn & 0xf);
     574:	8f 2d       	mov	r24, r15
     576:	8f 70       	andi	r24, 0x0F	; 15
     578:	0e 94 a9 02 	call	0x552	; 0x552 <utilNibbleToHex>
     57c:	f8 01       	movw	r30, r16
     57e:	81 83       	std	Z+1, r24	; 0x01
}
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	ff 90       	pop	r15
     586:	08 95       	ret

00000588 <utilWordToHex>:

void utilWordToHex(uint16_t uwIn, char *pOut)
{
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	f8 2e       	mov	r15, r24
     590:	8b 01       	movw	r16, r22
  utilByteToHex((uint8_t)(uwIn>>8), pOut);
     592:	89 2f       	mov	r24, r25
     594:	0e 94 af 02 	call	0x55e	; 0x55e <utilByteToHex>
  utilByteToHex((uint8_t)(uwIn&0xff), pOut+2);
     598:	0e 5f       	subi	r16, 0xFE	; 254
     59a:	1f 4f       	sbci	r17, 0xFF	; 255
     59c:	8f 2d       	mov	r24, r15
     59e:	b8 01       	movw	r22, r16
     5a0:	0e 94 af 02 	call	0x55e	; 0x55e <utilByteToHex>
}
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	08 95       	ret

000005ac <utilDwordToHex>:

void utilDwordToHex(uint32_t ulIn, char *pOut)
{
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	6b 01       	movw	r12, r22
     5ba:	7c 01       	movw	r14, r24
     5bc:	8a 01       	movw	r16, r20
  utilWordToHex((uint16_t)(ulIn>>16), pOut);
     5be:	aa 27       	eor	r26, r26
     5c0:	bb 27       	eor	r27, r27
     5c2:	ba 01       	movw	r22, r20
     5c4:	0e 94 c4 02 	call	0x588	; 0x588 <utilWordToHex>
  utilWordToHex((uint16_t)(ulIn&0xffff), pOut+4);
     5c8:	0c 5f       	subi	r16, 0xFC	; 252
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	c6 01       	movw	r24, r12
     5ce:	b8 01       	movw	r22, r16
     5d0:	0e 94 c4 02 	call	0x588	; 0x588 <utilWordToHex>
}
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	08 95       	ret

000005e2 <utilByteToDec>:

void utilByteToDec(uint8_t value, uint8_t *out)
{
     5e2:	28 2f       	mov	r18, r24
     5e4:	fb 01       	movw	r30, r22
  uint8_t h = value / 100;
  uint8_t t = value % 100;
     5e6:	64 e6       	ldi	r22, 0x64	; 100
     5e8:	0e 94 28 10 	call	0x2050	; 0x2050 <__udivmodqi4>
     5ec:	39 2f       	mov	r19, r25
  uint8_t o = t % 10;
  t = t / 10;
  out[0] = '0' + h;
     5ee:	82 2f       	mov	r24, r18
     5f0:	0e 94 28 10 	call	0x2050	; 0x2050 <__udivmodqi4>
     5f4:	80 5d       	subi	r24, 0xD0	; 208
     5f6:	80 83       	st	Z, r24
  out[1] = '0' + t;
     5f8:	83 2f       	mov	r24, r19
     5fa:	6a e0       	ldi	r22, 0x0A	; 10
     5fc:	0e 94 28 10 	call	0x2050	; 0x2050 <__udivmodqi4>
     600:	80 5d       	subi	r24, 0xD0	; 208
     602:	81 83       	std	Z+1, r24	; 0x01
  out[2] = '0' + o;
     604:	83 2f       	mov	r24, r19
     606:	0e 94 28 10 	call	0x2050	; 0x2050 <__udivmodqi4>
     60a:	90 5d       	subi	r25, 0xD0	; 208
     60c:	92 83       	std	Z+2, r25	; 0x02
}
     60e:	08 95       	ret

00000610 <utilDwordToDec>:

void utilDwordToDec(uint32_t value, uint8_t *out, uint8_t num_digits, uint8_t point_pos)
{
     610:	af 92       	push	r10
     612:	bf 92       	push	r11
     614:	cf 92       	push	r12
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	c6 2e       	mov	r12, r22
     626:	d7 2e       	mov	r13, r23
     628:	e8 2e       	mov	r14, r24
     62a:	f9 2e       	mov	r15, r25
     62c:	b2 2e       	mov	r11, r18
	uint8_t i;
  // start backwards
  uint8_t *pos = out + num_digits - 1;
     62e:	82 2f       	mov	r24, r18
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	ea 01       	movw	r28, r20
     636:	c8 0f       	add	r28, r24
     638:	d9 1f       	adc	r29, r25
  if(point_pos < num_digits) {
     63a:	02 17       	cp	r16, r18
     63c:	08 f4       	brcc	.+2      	; 0x640 <utilDwordToDec+0x30>
    pos++;
     63e:	21 96       	adiw	r28, 0x01	; 1
  }
  for(i=0;i<num_digits;i++) {
     640:	bb 20       	and	r11, r11
     642:	41 f1       	breq	.+80     	; 0x694 <utilDwordToDec+0x84>
     644:	10 e0       	ldi	r17, 0x00	; 0
    if(i == point_pos) {
      *pos = '.';
     646:	0f 2e       	mov	r0, r31
     648:	fe e2       	ldi	r31, 0x2E	; 46
     64a:	af 2e       	mov	r10, r31
     64c:	f0 2d       	mov	r31, r0
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
    if(i == point_pos) {
     64e:	10 17       	cp	r17, r16
     650:	11 f4       	brne	.+4      	; 0x656 <utilDwordToDec+0x46>
      *pos = '.';
     652:	a8 82       	st	Y, r10
      pos--;
     654:	21 97       	sbiw	r28, 0x01	; 1
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
     656:	6c 2d       	mov	r22, r12
     658:	7d 2d       	mov	r23, r13
     65a:	8e 2d       	mov	r24, r14
     65c:	9f 2d       	mov	r25, r15
     65e:	2a e0       	ldi	r18, 0x0A	; 10
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
     66a:	60 5d       	subi	r22, 0xD0	; 208
     66c:	68 83       	st	Y, r22
  // start backwards
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
     66e:	1f 5f       	subi	r17, 0xFF	; 255
     670:	1b 15       	cp	r17, r11
     672:	80 f4       	brcc	.+32     	; 0x694 <utilDwordToDec+0x84>
      *pos = '.';
      pos--;
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
    pos--;
     674:	21 97       	sbiw	r28, 0x01	; 1
    value /= 10;
     676:	6c 2d       	mov	r22, r12
     678:	7d 2d       	mov	r23, r13
     67a:	8e 2d       	mov	r24, r14
     67c:	9f 2d       	mov	r25, r15
     67e:	2a e0       	ldi	r18, 0x0A	; 10
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
     68a:	c2 2e       	mov	r12, r18
     68c:	d3 2e       	mov	r13, r19
     68e:	e4 2e       	mov	r14, r20
     690:	f5 2e       	mov	r15, r21
     692:	dd cf       	rjmp	.-70     	; 0x64e <utilDwordToDec+0x3e>
  }
}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	bf 90       	pop	r11
     6a6:	af 90       	pop	r10
     6a8:	08 95       	ret

000006aa <utilParseNibbleHex>:

// parse

uint8_t utilParseNibbleHex(char c,uint8_t *value)
{
     6aa:	fb 01       	movw	r30, r22
  if((c>='a')&&(c<='f')) {
     6ac:	98 2f       	mov	r25, r24
     6ae:	81 56       	subi	r24, 0x61	; 97
     6b0:	86 30       	cpi	r24, 0x06	; 6
     6b2:	20 f4       	brcc	.+8      	; 0x6bc <utilParseNibbleHex+0x12>
    *value = c + 10 - 'a';
     6b4:	86 5f       	subi	r24, 0xF6	; 246
     6b6:	80 83       	st	Z, r24
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	08 95       	ret
    return 1;
  }
  else if((c>='A')&&(c<='F')) {
     6bc:	89 2f       	mov	r24, r25
     6be:	81 54       	subi	r24, 0x41	; 65
     6c0:	86 30       	cpi	r24, 0x06	; 6
     6c2:	20 f4       	brcc	.+8      	; 0x6cc <utilParseNibbleHex+0x22>
    *value = c + 10 - 'A';
     6c4:	86 5f       	subi	r24, 0xF6	; 246
     6c6:	80 83       	st	Z, r24
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	08 95       	ret
    return 1;
  }
  else if((c>='0')&&(c<='9')) {
     6cc:	89 2f       	mov	r24, r25
     6ce:	80 53       	subi	r24, 0x30	; 48
     6d0:	8a 30       	cpi	r24, 0x0A	; 10
     6d2:	10 f0       	brcs	.+4      	; 0x6d8 <utilParseNibbleHex+0x2e>
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	08 95       	ret
    *value = c - '0';
     6d8:	80 83       	st	Z, r24
     6da:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
  }
  else
    return 0;
}
     6dc:	08 95       	ret

000006de <utilParseByteHex>:

uint8_t utilParseByteHex(const char *str,uint8_t *value)
{
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	0f 92       	push	r0
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	8c 01       	movw	r16, r24
     6f2:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseNibbleHex(str[0],&val))
     6f4:	fc 01       	movw	r30, r24
     6f6:	80 81       	ld	r24, Z
     6f8:	be 01       	movw	r22, r28
     6fa:	6f 5f       	subi	r22, 0xFF	; 255
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	0e 94 55 03 	call	0x6aa	; 0x6aa <utilParseNibbleHex>
     702:	88 23       	and	r24, r24
     704:	91 f0       	breq	.+36     	; 0x72a <utilParseByteHex+0x4c>
    return 0;
  val <<= 4;
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	82 95       	swap	r24
     70a:	80 7f       	andi	r24, 0xF0	; 240
     70c:	89 83       	std	Y+1, r24	; 0x01
  if(!utilParseNibbleHex(str[1],value))
     70e:	f8 01       	movw	r30, r16
     710:	81 81       	ldd	r24, Z+1	; 0x01
     712:	b7 01       	movw	r22, r14
     714:	0e 94 55 03 	call	0x6aa	; 0x6aa <utilParseNibbleHex>
     718:	88 23       	and	r24, r24
     71a:	39 f0       	breq	.+14     	; 0x72a <utilParseByteHex+0x4c>
    return 0;
  *value |= val;
     71c:	f7 01       	movw	r30, r14
     71e:	80 81       	ld	r24, Z
     720:	99 81       	ldd	r25, Y+1	; 0x01
     722:	89 2b       	or	r24, r25
     724:	80 83       	st	Z, r24
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	01 c0       	rjmp	.+2      	; 0x72c <utilParseByteHex+0x4e>
  return 1;
     72a:	80 e0       	ldi	r24, 0x00	; 0
}
     72c:	0f 90       	pop	r0
     72e:	cf 91       	pop	r28
     730:	df 91       	pop	r29
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	08 95       	ret

0000073c <utilParseWordHex>:

uint8_t utilParseWordHex(const char *str,uint16_t *value)
{
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	df 93       	push	r29
     746:	cf 93       	push	r28
     748:	00 d0       	rcall	.+0      	; 0x74a <utilParseWordHex+0xe>
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	8c 01       	movw	r16, r24
     750:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     752:	be 01       	movw	r22, r28
     754:	6f 5f       	subi	r22, 0xFF	; 255
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	0e 94 6f 03 	call	0x6de	; 0x6de <utilParseByteHex>
     75c:	88 23       	and	r24, r24
     75e:	a1 f0       	breq	.+40     	; 0x788 <utilParseWordHex+0x4c>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     760:	c8 01       	movw	r24, r16
     762:	02 96       	adiw	r24, 0x02	; 2
     764:	be 01       	movw	r22, r28
     766:	6e 5f       	subi	r22, 0xFE	; 254
     768:	7f 4f       	sbci	r23, 0xFF	; 255
     76a:	0e 94 6f 03 	call	0x6de	; 0x6de <utilParseByteHex>
     76e:	88 23       	and	r24, r24
     770:	59 f0       	breq	.+22     	; 0x788 <utilParseWordHex+0x4c>
    return 0;
  *value = (uint16_t)val << 8 | val2;
     772:	99 81       	ldd	r25, Y+1	; 0x01
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	2a 81       	ldd	r18, Y+2	; 0x02
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	82 2b       	or	r24, r18
     77c:	93 2b       	or	r25, r19
     77e:	f7 01       	movw	r30, r14
     780:	91 83       	std	Z+1, r25	; 0x01
     782:	80 83       	st	Z, r24
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	01 c0       	rjmp	.+2      	; 0x78a <utilParseWordHex+0x4e>
  return 1;
     788:	80 e0       	ldi	r24, 0x00	; 0
}
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	08 95       	ret

0000079c <utilParseDwordHex>:

uint8_t utilParseDwordHex(const char *str,uint32_t *value)
{
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <utilParseDwordHex+0xe>
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <utilParseDwordHex+0x10>
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	8c 01       	movw	r16, r24
     7b2:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     7b4:	be 01       	movw	r22, r28
     7b6:	6f 5f       	subi	r22, 0xFF	; 255
     7b8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ba:	0e 94 6f 03 	call	0x6de	; 0x6de <utilParseByteHex>
     7be:	88 23       	and	r24, r24
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <utilParseDwordHex+0x28>
     7c2:	4a c0       	rjmp	.+148    	; 0x858 <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     7c4:	c8 01       	movw	r24, r16
     7c6:	02 96       	adiw	r24, 0x02	; 2
     7c8:	be 01       	movw	r22, r28
     7ca:	6e 5f       	subi	r22, 0xFE	; 254
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	0e 94 6f 03 	call	0x6de	; 0x6de <utilParseByteHex>
     7d2:	88 23       	and	r24, r24
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <utilParseDwordHex+0x3c>
     7d6:	40 c0       	rjmp	.+128    	; 0x858 <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val3;
  if(!utilParseByteHex(&str[4],&val3))
     7d8:	c8 01       	movw	r24, r16
     7da:	04 96       	adiw	r24, 0x04	; 4
     7dc:	be 01       	movw	r22, r28
     7de:	6d 5f       	subi	r22, 0xFD	; 253
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	0e 94 6f 03 	call	0x6de	; 0x6de <utilParseByteHex>
     7e6:	88 23       	and	r24, r24
     7e8:	b9 f1       	breq	.+110    	; 0x858 <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val4;
  if(!utilParseByteHex(&str[6],&val4))
     7ea:	c8 01       	movw	r24, r16
     7ec:	06 96       	adiw	r24, 0x06	; 6
     7ee:	be 01       	movw	r22, r28
     7f0:	6c 5f       	subi	r22, 0xFC	; 252
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	0e 94 6f 03 	call	0x6de	; 0x6de <utilParseByteHex>
     7f8:	88 23       	and	r24, r24
     7fa:	71 f1       	breq	.+92     	; 0x858 <utilParseDwordHex+0xbc>
    return 0;
  *value = (uint32_t)val << 24 | (uint32_t)val2 << 16 | (uint32_t)val3 << 8 | val4;
     7fc:	29 81       	ldd	r18, Y+1	; 0x01
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	52 2f       	mov	r21, r18
     806:	44 27       	eor	r20, r20
     808:	33 27       	eor	r19, r19
     80a:	22 27       	eor	r18, r18
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	dc 01       	movw	r26, r24
     816:	99 27       	eor	r25, r25
     818:	88 27       	eor	r24, r24
     81a:	28 2b       	or	r18, r24
     81c:	39 2b       	or	r19, r25
     81e:	4a 2b       	or	r20, r26
     820:	5b 2b       	or	r21, r27
     822:	8c 81       	ldd	r24, Y+4	; 0x04
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	28 2b       	or	r18, r24
     82c:	39 2b       	or	r19, r25
     82e:	4a 2b       	or	r20, r26
     830:	5b 2b       	or	r21, r27
     832:	8b 81       	ldd	r24, Y+3	; 0x03
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	a0 e0       	ldi	r26, 0x00	; 0
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	ba 2f       	mov	r27, r26
     83c:	a9 2f       	mov	r26, r25
     83e:	98 2f       	mov	r25, r24
     840:	88 27       	eor	r24, r24
     842:	28 2b       	or	r18, r24
     844:	39 2b       	or	r19, r25
     846:	4a 2b       	or	r20, r26
     848:	5b 2b       	or	r21, r27
     84a:	f7 01       	movw	r30, r14
     84c:	20 83       	st	Z, r18
     84e:	31 83       	std	Z+1, r19	; 0x01
     850:	42 83       	std	Z+2, r20	; 0x02
     852:	53 83       	std	Z+3, r21	; 0x03
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	01 c0       	rjmp	.+2      	; 0x85a <utilParseDwordHex+0xbe>
  return 1;
     858:	80 e0       	ldi	r24, 0x00	; 0
}
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	08 95       	ret

00000870 <utilParseByteDec>:

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
     870:	db 01       	movw	r26, r22
     872:	fc 01       	movw	r30, r24
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
      break;
    }
    c -= '0';
    value *= 10;
     878:	4a e0       	ldi	r20, 0x0A	; 10
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
     87a:	80 81       	ld	r24, Z
     87c:	98 2f       	mov	r25, r24
     87e:	90 53       	subi	r25, 0x30	; 48
     880:	9a 30       	cpi	r25, 0x0A	; 10
     882:	50 f4       	brcc	.+20     	; 0x898 <utilParseByteDec+0x28>
      break;
    }
    c -= '0';
    value *= 10;
     884:	34 9f       	mul	r19, r20
     886:	80 2d       	mov	r24, r0
     888:	11 24       	eor	r1, r1
    value += c;
     88a:	38 2f       	mov	r19, r24
     88c:	39 0f       	add	r19, r25
    digits++;
     88e:	2f 5f       	subi	r18, 0xFF	; 255
     890:	31 96       	adiw	r30, 0x01	; 1

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
     892:	23 30       	cpi	r18, 0x03	; 3
     894:	91 f7       	brne	.-28     	; 0x87a <utilParseByteDec+0xa>
     896:	01 c0       	rjmp	.+2      	; 0x89a <utilParseByteDec+0x2a>
    c -= '0';
    value *= 10;
    value += c;
    digits++;
  }
  if(digits > 0) {
     898:	21 11       	cpse	r18, r1
    *out = value;
     89a:	3c 93       	st	X, r19
  }
  return digits;
}
     89c:	82 2f       	mov	r24, r18
     89e:	08 95       	ret

000008a0 <utilReset>:
/**
 * Reboots AVR microcontroller.
 * Performs watchdog-based AVR reset, resulting in executing bootloader code
 * in a clean way.
 */
void utilReset(void) {
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
	// Indicate reset
	LED_PIN &= ~LED_STATUS;
     8a4:	06 e2       	ldi	r16, 0x26	; 38
     8a6:	10 e0       	ldi	r17, 0x00	; 0
     8a8:	f8 01       	movw	r30, r16
     8aa:	80 81       	ld	r24, Z
     8ac:	8f 7d       	andi	r24, 0xDF	; 223
     8ae:	80 83       	st	Z, r24
	timerDelay10ms(20);
     8b0:	84 e1       	ldi	r24, 0x14	; 20
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timerDelay10ms>
	LED_PIN |= LED_STATUS;
     8b8:	f8 01       	movw	r30, r16
     8ba:	80 81       	ld	r24, Z
     8bc:	80 62       	ori	r24, 0x20	; 32
     8be:	80 83       	st	Z, r24
	timerDelay10ms(20);
     8c0:	84 e1       	ldi	r24, 0x14	; 20
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <timerDelay10ms>

	// Perform a reset
	cli();
     8c8:	f8 94       	cli
	wdt_enable(WDTO_250MS);
     8ca:	2c e0       	ldi	r18, 0x0C	; 12
     8cc:	88 e1       	ldi	r24, 0x18	; 24
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	a8 95       	wdr
     8d6:	80 93 60 00 	sts	0x0060, r24
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	20 93 60 00 	sts	0x0060, r18
     8e0:	ff cf       	rjmp	.-2      	; 0x8e0 <utilReset+0x40>

000008e2 <trigger_request>:
static uint8_t flags;
static uint8_t req_is_pending;

static void trigger_request(void)
{
  if(!req_is_pending) {
     8e2:	80 91 3f 01 	lds	r24, 0x013F
     8e6:	88 23       	and	r24, r24
     8e8:	29 f4       	brne	.+10     	; 0x8f4 <trigger_request+0x12>
    req_is_pending = 1;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 3f 01 	sts	0x013F, r24
    parRequestAmiRead();
     8f0:	0e 94 ef 09 	call	0x13de	; 0x13de <parRequestAmiRead>
     8f4:	08 95       	ret

000008f6 <bridge_loop>:
}

// ---------- loop ----------

void bridge_loop(void)
{
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	df 93       	push	r29
     902:	cf 93       	push	r28
     904:	00 d0       	rcall	.+0      	; 0x906 <__stack+0x7>
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
  // NOTE: UART - time_stamp_spc() [BRIDGE] on\r\n

  // Associate protocol fns with given ptrs
  pb_proto_init(bridgeFillPacket, bridgeProcessPacket);
     90a:	83 e3       	ldi	r24, 0x33	; 51
     90c:	95 e0       	ldi	r25, 0x05	; 5
     90e:	67 ed       	ldi	r22, 0xD7	; 215
     910:	74 e0       	ldi	r23, 0x04	; 4
     912:	0e 94 cc 09 	call	0x1398	; 0x1398 <pb_proto_init>

  // Init ENC28j60
  enc28j60_init(param.mac_addr, pio_util_get_init_flags());
     916:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <pio_util_get_init_flags>
     91a:	68 2f       	mov	r22, r24
     91c:	07 e5       	ldi	r16, 0x57	; 87
     91e:	11 e0       	ldi	r17, 0x01	; 1
     920:	c8 01       	movw	r24, r16
     922:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <enc28j60_init>

  // Reset stats
  stats_reset();
     926:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <stats_reset>

  // Reset flags & request state
  flags = 0;
     92a:	10 92 3e 01 	sts	0x013E, r1
  req_is_pending = 0;
     92e:	10 92 3f 01 	sts	0x013F, r1

  uint8_t flow_control = param.flow_ctl;
     932:	f8 01       	movw	r30, r16
     934:	f6 80       	ldd	r15, Z+6	; 0x06
     936:	10 e0       	ldi	r17, 0x00	; 0
        trigger_request();
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     938:	6e 01       	movw	r12, r28
     93a:	08 94       	sec
     93c:	c1 1c       	adc	r12, r1
     93e:	d1 1c       	adc	r13, r1
     940:	24 c0       	rjmp	.+72     	; 0x98a <__stack+0x8b>
  uint8_t ubPacketCount;
  while(run_mode == RUN_MODE_BRIDGE) {
    // NOTE: UART command handling was here

    // Calls pb_proto_handle - this is where PAR communication is done
    pb_util_handle();
     942:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <pb_util_handle>

    // Handle packets coming from network
		ubPacketCount = enc28j60_has_recv();
     946:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <enc28j60_has_recv>
     94a:	08 2f       	mov	r16, r24
    if(ubPacketCount) {
     94c:	88 23       	and	r24, r24
     94e:	51 f0       	breq	.+20     	; 0x964 <__stack+0x65>
      if(ubDisplayPacketInfo) {
        // NOTE: UART - time_stamp_spc() FIRST INCOMING!\r\n
        ubDisplayPacketInfo = 0;
      }

      if(flags & FLAG_ONLINE) {
     950:	80 91 3e 01 	lds	r24, 0x013E
     954:	80 ff       	sbrs	r24, 0
     956:	03 c0       	rjmp	.+6      	; 0x95e <__stack+0x5f>
				// Comm online: let Amiga know about new packet
        trigger_request();
     958:	0e 94 71 04 	call	0x8e2	; 0x8e2 <trigger_request>
     95c:	03 c0       	rjmp	.+6      	; 0x964 <__stack+0x65>
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     95e:	c6 01       	movw	r24, r12
     960:	0e 94 76 0f 	call	0x1eec	; 0x1eec <pio_util_recv_packet>
        // NOTE: UART - time_stamp_spc() OFFLINE DROP: hex_word(size)\r\n
      }
    }

    // flow control
    if(flow_control) {
     964:	ff 20       	and	r15, r15
     966:	89 f0       	breq	.+34     	; 0x98a <__stack+0x8b>
      // flow limited
      if(limit_flow) {
     968:	11 23       	and	r17, r17
     96a:	41 f0       	breq	.+16     	; 0x97c <__stack+0x7d>
        // disable again?
        if(!ubPacketCount) {
     96c:	00 23       	and	r16, r16
     96e:	69 f4       	brne	.+26     	; 0x98a <__stack+0x8b>
          enc28j60_control(PIO_CONTROL_FLOW, 0);
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <enc28j60_control>
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	07 c0       	rjmp	.+14     	; 0x98a <__stack+0x8b>
        }
      }
      // no flow limit
      else {
        // enable?
        if(ubPacketCount) {
     97c:	00 23       	and	r16, r16
     97e:	29 f0       	breq	.+10     	; 0x98a <__stack+0x8b>
          enc28j60_control(PIO_CONTROL_FLOW, 1);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <enc28j60_control>
     988:	11 e0       	ldi	r17, 0x01	; 1

  uint8_t flow_control = param.flow_ctl;
  uint8_t limit_flow = 0;
  uint8_t ubDisplayPacketInfo = 1;
  uint8_t ubPacketCount;
  while(run_mode == RUN_MODE_BRIDGE) {
     98a:	80 91 42 01 	lds	r24, 0x0142
     98e:	88 23       	and	r24, r24
     990:	c1 f2       	breq	.-80     	; 0x942 <__stack+0x43>
        }
      }
    }
  }

  stats_dump_all();
     992:	0e 94 07 10 	call	0x200e	; 0x200e <stats_dump_all>
  enc28j60_exit();
     996:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <enc28j60_exit>

	// NOTE: UART - time_stamp_spc() [BRIDGE] off\r\n
}
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	cf 91       	pop	r28
     9a0:	df 91       	pop	r29
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	df 90       	pop	r13
     9aa:	cf 90       	pop	r12
     9ac:	08 95       	ret

000009ae <bridgeProcessPacket>:
 * Custom "Magic" packets are defined as topmost EtherType values.
 * @param uwSize Packet length
 * @return Always PBPROTO_STATUS_OK
 */
static uint8_t bridgeProcessPacket(uint16_t uwSize)
{
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ec 01       	movw	r28, r24
 * Returns EtherType field value in given eth frame.
 * @param pkt Pointer to eth frame.
 * @return 2-byte EtherType field value.
 */
inline uint16_t eth_get_pkt_type(const uint8_t *pkt) {
	return net_get_word(pkt + ETH_OFF_TYPE);
     9b8:	86 e8       	ldi	r24, 0x86	; 134
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
  // get eth type
  uint16_t eth_type = eth_get_pkt_type(g_pDataBuffer);
  switch(eth_type) {
     9c0:	2f ef       	ldi	r18, 0xFF	; 255
     9c2:	8d 3f       	cpi	r24, 0xFD	; 253
     9c4:	92 07       	cpc	r25, r18
     9c6:	91 f1       	breq	.+100    	; 0xa2c <bridgeProcessPacket+0x7e>
     9c8:	2f ef       	ldi	r18, 0xFF	; 255
     9ca:	8e 3f       	cpi	r24, 0xFE	; 254
     9cc:	92 07       	cpc	r25, r18
     9ce:	20 f4       	brcc	.+8      	; 0x9d8 <bridgeProcessPacket+0x2a>
     9d0:	8c 5f       	subi	r24, 0xFC	; 252
     9d2:	9f 4f       	sbci	r25, 0xFF	; 255
     9d4:	b1 f5       	brne	.+108    	; 0xa42 <bridgeProcessPacket+0x94>
     9d6:	32 c0       	rjmp	.+100    	; 0xa3c <bridgeProcessPacket+0x8e>
     9d8:	2f ef       	ldi	r18, 0xFF	; 255
     9da:	8e 3f       	cpi	r24, 0xFE	; 254
     9dc:	92 07       	cpc	r25, r18
     9de:	01 f1       	breq	.+64     	; 0xa20 <bridgeProcessPacket+0x72>
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	71 f5       	brne	.+92     	; 0xa42 <bridgeProcessPacket+0x94>
 * @param buf Pointer to magic packet.
 */
static void bridgeCommOnline(const uint8_t *buf)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] online \r\n
  flags |= FLAG_ONLINE | FLAG_FIRST_TRANSFER;
     9e6:	80 91 3e 01 	lds	r24, 0x013E
     9ea:	85 60       	ori	r24, 0x05	; 5
     9ec:	80 93 3e 01 	sts	0x013E, r24

  // validate mac address and if it does not match then reconfigure PIO
  const uint8_t *src_mac = eth_get_src_mac(buf);
  if(!net_compare_mac(param.mac_addr, src_mac)) {
     9f0:	87 e5       	ldi	r24, 0x57	; 87
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	60 e8       	ldi	r22, 0x80	; 128
     9f6:	71 e0       	ldi	r23, 0x01	; 1
     9f8:	0e 94 68 08 	call	0x10d0	; 0x10d0 <net_compare_mac>
     9fc:	88 23       	and	r24, r24
     9fe:	69 f5       	brne	.+90     	; 0xa5a <bridgeProcessPacket+0xac>
    // update mac param and save
    net_copy_mac(src_mac, param.mac_addr);
     a00:	07 e5       	ldi	r16, 0x57	; 87
     a02:	11 e0       	ldi	r17, 0x01	; 1
     a04:	80 e8       	ldi	r24, 0x80	; 128
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	b8 01       	movw	r22, r16
     a0a:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>
    param_save();
     a0e:	0e 94 b1 09 	call	0x1362	; 0x1362 <param_save>

    // re-configure PIO
    enc28j60_exit();
     a12:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <enc28j60_exit>
    enc28j60_init(param.mac_addr, PIO_INIT_BROAD_CAST);
     a16:	c8 01       	movw	r24, r16
     a18:	64 e0       	ldi	r22, 0x04	; 4
     a1a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <enc28j60_init>
     a1e:	1d c0       	rjmp	.+58     	; 0xa5a <bridgeProcessPacket+0xac>
 * Disables ethernet communication.
 */
static void bridgeCommOffline(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] offline
  flags &= ~FLAG_ONLINE;
     a20:	80 91 3e 01 	lds	r24, 0x013E
     a24:	8e 7f       	andi	r24, 0xFE	; 254
     a26:	80 93 3e 01 	sts	0x013E, r24
     a2a:	17 c0       	rjmp	.+46     	; 0xa5a <bridgeProcessPacket+0xac>
}

static void bridgeLoopback(uint16_t size)
{
  flags |= FLAG_SEND_MAGIC;
     a2c:	80 91 3e 01 	lds	r24, 0x013E
     a30:	82 60       	ori	r24, 0x02	; 2
     a32:	80 93 3e 01 	sts	0x013E, r24
  trigger_request();
     a36:	0e 94 71 04 	call	0x8e2	; 0x8e2 <trigger_request>
     a3a:	0f c0       	rjmp	.+30     	; 0xa5a <bridgeProcessPacket+0xac>
      break;
    case ETH_TYPE_MAGIC_LOOPBACK:
      bridgeLoopback(uwSize);
      break;
		case ETH_TYPE_MAGIC_CMD:
			cmdProcess(uwSize);
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <cmdProcess>
    default:
      // send packet via pio
      pio_util_send_packet(uwSize);
     a42:	ce 01       	movw	r24, r28
     a44:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <pio_util_send_packet>
      // if a packet arrived and we are not online then request online state
      if((flags & FLAG_ONLINE)==0) {
     a48:	80 91 3e 01 	lds	r24, 0x013E
     a4c:	80 fd       	sbrc	r24, 0
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <bridgeProcessPacket+0xac>
static void request_magic(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] request\r\n

  // request receive
  flags |= FLAG_SEND_MAGIC | FLAG_FIRST_TRANSFER;
     a50:	86 60       	ori	r24, 0x06	; 6
     a52:	80 93 3e 01 	sts	0x013E, r24
  trigger_request();
     a56:	0e 94 71 04 	call	0x8e2	; 0x8e2 <trigger_request>
        request_magic();
      }
      break;
  }
  return PBPROTO_STATUS_OK;
}
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	08 95       	ret

00000a66 <bridgeFillPacket>:
// ----- packet callbacks -----

// the Amiga requests a new packet

static uint8_t bridgeFillPacket(uint16_t *pFilledSize)
{
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	ec 01       	movw	r28, r24
  // need to send magic packet?
  if((flags & FLAG_SEND_MAGIC) == FLAG_SEND_MAGIC) {
     a70:	80 91 3e 01 	lds	r24, 0x013E
     a74:	81 ff       	sbrs	r24, 1
     a76:	1c c0       	rjmp	.+56     	; 0xab0 <bridgeFillPacket+0x4a>
    flags &= ~FLAG_SEND_MAGIC;
     a78:	8d 7f       	andi	r24, 0xFD	; 253
     a7a:	80 93 3e 01 	sts	0x013E, r24
extern const uint8_t net_zero_mac[6];
extern const uint8_t net_zero_ip[4];
extern const uint8_t net_ones_ip[4];

/* convenience functions */
inline void net_copy_bcast_mac(uint8_t *out) { net_copy_mac(net_bcast_mac, out); }
     a7e:	0a e7       	ldi	r16, 0x7A	; 122
     a80:	11 e0       	ldi	r17, 0x01	; 1
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	b8 01       	movw	r22, r16
     a88:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>

    // Build magic packet header
    // Target (bcast) MAC, src (plipbox) MAC, 0xFFFF => pFilledSize: 14 bytes
    net_copy_bcast_mac(g_pDataBuffer + ETH_OFF_TGT_MAC);
    net_copy_mac(param.mac_addr, g_pDataBuffer + ETH_OFF_SRC_MAC);
     a8c:	b8 01       	movw	r22, r16
     a8e:	6a 5f       	subi	r22, 0xFA	; 250
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	87 e5       	ldi	r24, 0x57	; 87
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>
    net_put_word(g_pDataBuffer + ETH_OFF_TYPE, ETH_TYPE_MAGIC_ONLINE);
     a9a:	c8 01       	movw	r24, r16
     a9c:	0c 96       	adiw	r24, 0x0c	; 12
     a9e:	6f ef       	ldi	r22, 0xFF	; 255
     aa0:	7f ef       	ldi	r23, 0xFF	; 255
     aa2:	0e 94 26 08 	call	0x104c	; 0x104c <net_put_word>

    *pFilledSize = ETH_HDR_SIZE;
     aa6:	8e e0       	ldi	r24, 0x0E	; 14
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	99 83       	std	Y+1, r25	; 0x01
     aac:	88 83       	st	Y, r24
     aae:	0a c0       	rjmp	.+20     	; 0xac4 <bridgeFillPacket+0x5e>
  }
  else {
    // pending PIO packet?
    pio_util_recv_packet(pFilledSize);
     ab0:	ce 01       	movw	r24, r28
     ab2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <pio_util_recv_packet>

    // report first packet transfer
    if(flags & FLAG_FIRST_TRANSFER) {
     ab6:	80 91 3e 01 	lds	r24, 0x013E
     aba:	82 ff       	sbrs	r24, 2
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <bridgeFillPacket+0x5e>
      flags &= ~FLAG_FIRST_TRANSFER;
     abe:	8b 7f       	andi	r24, 0xFB	; 251
     ac0:	80 93 3e 01 	sts	0x013E, r24
      // NOTE: UART - time_stamp_spc() FIRST TRANSFER!\r\n
    }
  }

  req_is_pending = 0;
     ac4:	10 92 3f 01 	sts	0x013F, r1

  return PBPROTO_STATUS_OK;
}
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	08 95       	ret

00000ad4 <bridge_test_loop>:

  return PBPROTO_STATUS_OK;
}

void bridge_test_loop(void)
{
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	00 d0       	rcall	.+0      	; 0xade <bridge_test_loop+0xa>
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
	// NOTE: UART - time_stamp_spc [BRIDGE_TEST] on\r\n

  pb_proto_init(fill_pkt, proc_pkt);
     ae2:	82 eb       	ldi	r24, 0xB2	; 178
     ae4:	95 e0       	ldi	r25, 0x05	; 5
     ae6:	6e ec       	ldi	r22, 0xCE	; 206
     ae8:	75 e0       	ldi	r23, 0x05	; 5
     aea:	0e 94 cc 09 	call	0x1398	; 0x1398 <pb_proto_init>
  enc28j60_init(param.mac_addr, pio_util_get_init_flags());
     aee:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <pio_util_get_init_flags>
     af2:	68 2f       	mov	r22, r24
     af4:	87 e5       	ldi	r24, 0x57	; 87
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <enc28j60_init>
  stats_reset();
     afc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <stats_reset>
    pb_util_handle();

    // incoming packet via PIO?
    if(enc28j60_has_recv()) {
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
     b00:	8e 01       	movw	r16, r28
     b02:	0f 5f       	subi	r16, 0xFF	; 255
     b04:	1f 4f       	sbci	r17, 0xFF	; 255
     b06:	1f c0       	rjmp	.+62     	; 0xb46 <bridge_test_loop+0x72>
  while(run_mode == RUN_MODE_BRIDGE_TEST) {
    // handle commands
    // NOTE: cmd_worker was here, reset by loop break

    // handle pbproto
    pb_util_handle();
     b08:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <pb_util_handle>

    // incoming packet via PIO?
    if(enc28j60_has_recv()) {
     b0c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <enc28j60_has_recv>
     b10:	88 23       	and	r24, r24
     b12:	c9 f0       	breq	.+50     	; 0xb46 <bridge_test_loop+0x72>
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
     b14:	c8 01       	movw	r24, r16
     b16:	0e 94 76 0f 	call	0x1eec	; 0x1eec <pio_util_recv_packet>
     b1a:	88 23       	and	r24, r24
     b1c:	a1 f4       	brne	.+40     	; 0xb46 <bridge_test_loop+0x72>
        // handle ARP?
        if(!pio_util_handle_arp(size)) {
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
     b22:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <pio_util_handle_arp>
     b26:	88 23       	and	r24, r24
     b28:	71 f4       	brne	.+28     	; 0xb46 <bridge_test_loop+0x72>
          // is it a UDP test packet?
          if(pio_util_handle_udp_test(size)) {
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	9a 81       	ldd	r25, Y+2	; 0x02
     b2e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <pio_util_handle_udp_test>
     b32:	88 23       	and	r24, r24
     b34:	41 f0       	breq	.+16     	; 0xb46 <bridge_test_loop+0x72>
            if(pio_pkt_size != 0) {
							// NOTE: UART - OVERWRITE?!\r\n
            }

            // request receive
            pio_pkt_size = size;
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	9a 81       	ldd	r25, Y+2	; 0x02
     b3a:	90 93 41 01 	sts	0x0141, r25
     b3e:	80 93 40 01 	sts	0x0140, r24
            parRequestAmiRead();
     b42:	0e 94 ef 09 	call	0x13de	; 0x13de <parRequestAmiRead>

  pb_proto_init(fill_pkt, proc_pkt);
  enc28j60_init(param.mac_addr, pio_util_get_init_flags());
  stats_reset();

  while(run_mode == RUN_MODE_BRIDGE_TEST) {
     b46:	80 91 42 01 	lds	r24, 0x0142
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	e9 f2       	breq	.-70     	; 0xb08 <bridge_test_loop+0x34>
        }
      }
    }
  }

  stats_dump_all();
     b4e:	0e 94 07 10 	call	0x200e	; 0x200e <stats_dump_all>
  enc28j60_exit();
     b52:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <enc28j60_exit>

  // NOTE: UART - time_stamp_spc() [BRIDGE_TEST] off\r\n
}
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <fill_pkt>:
/* a RECV command arrived from Amiga.
   this should only happen if we got a packet here from PIO
   in the first place
*/
static uint8_t fill_pkt(uint16_t *pFilledSize)
{
     b64:	fc 01       	movw	r30, r24
  *pFilledSize = pio_pkt_size;
     b66:	80 91 40 01 	lds	r24, 0x0140
     b6a:	90 91 41 01 	lds	r25, 0x0141
     b6e:	91 83       	std	Z+1, r25	; 0x01
     b70:	80 83       	st	Z, r24
  if(*pFilledSize > DATABUF_SIZE) {
     b72:	8b 5e       	subi	r24, 0xEB	; 235
     b74:	95 40       	sbci	r25, 0x05	; 5
     b76:	10 f0       	brcs	.+4      	; 0xb7c <fill_pkt+0x18>
     b78:	85 e0       	ldi	r24, 0x05	; 5
     b7a:	08 95       	ret
    return PBPROTO_STATUS_PACKET_TOO_LARGE;
  }

  // in test mode 0 send via internal device loopback
  if(param.test_mode == 0) {
     b7c:	80 91 69 01 	lds	r24, 0x0169
     b80:	88 23       	and	r24, r24
     b82:	31 f4       	brne	.+12     	; 0xb90 <fill_pkt+0x2c>
    // switch eth type to magic for loop back
    net_put_word(g_pDataBuffer + ETH_OFF_TYPE, ETH_TYPE_MAGIC_LOOPBACK);
     b84:	86 e8       	ldi	r24, 0x86	; 134
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	6d ef       	ldi	r22, 0xFD	; 253
     b8a:	7f ef       	ldi	r23, 0xFF	; 255
     b8c:	0e 94 26 08 	call	0x104c	; 0x104c <net_put_word>
  }

  // consumed packet
  pio_pkt_size = 0;
     b90:	10 92 41 01 	sts	0x0141, r1
     b94:	10 92 40 01 	sts	0x0140, r1
     b98:	81 e0       	ldi	r24, 0x01	; 1

  return PBPROTO_STATUS_OK;
}
     b9a:	08 95       	ret

00000b9c <proc_pkt>:

/* a SEND command arrvied from Amiga.
   we got our packet back. forward to PIO
*/
static uint8_t proc_pkt(uint16_t uwSize)
{
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	ec 01       	movw	r28, r24
  // make sure its the expected packet type
  uint16_t type = net_get_word(g_pDataBuffer + ETH_OFF_TYPE);
     ba2:	86 e8       	ldi	r24, 0x86	; 134
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
     baa:	9c 01       	movw	r18, r24

  // in test mode 0 packet was sent by internal device loopback
  if(param.test_mode == 0) {
     bac:	80 91 69 01 	lds	r24, 0x0169
     bb0:	88 23       	and	r24, r24
     bb2:	51 f4       	brne	.+20     	; 0xbc8 <proc_pkt+0x2c>
    if(type != ETH_TYPE_MAGIC_LOOPBACK) {
     bb4:	2d 5f       	subi	r18, 0xFD	; 253
     bb6:	3f 4f       	sbci	r19, 0xFF	; 255
     bb8:	69 f4       	brne	.+26     	; 0xbd4 <proc_pkt+0x38>
			// NOTE: UART - NO MAGIC!!\r\n
      return PBPROTO_STATUS_OK;
    } else {
      // switch eth type back to IPv4
      net_put_word(g_pDataBuffer + ETH_OFF_TYPE, ETH_TYPE_IPV4);
     bba:	86 e8       	ldi	r24, 0x86	; 134
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	78 e0       	ldi	r23, 0x08	; 8
     bc2:	0e 94 26 08 	call	0x104c	; 0x104c <net_put_word>
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <proc_pkt+0x32>
    }
  } else {
    if(type != ETH_TYPE_IPV4) {
     bc8:	20 50       	subi	r18, 0x00	; 0
     bca:	38 40       	sbci	r19, 0x08	; 8
     bcc:	19 f4       	brne	.+6      	; 0xbd4 <proc_pkt+0x38>
      return PBPROTO_STATUS_OK;
    }
  }

  // send packet via pio
  pio_util_send_packet(uwSize);
     bce:	ce 01       	movw	r24, r28
     bd0:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <pio_util_send_packet>

  return PBPROTO_STATUS_OK;
}
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <cmdProcess>:
 * PlipUltimate command process function.
 * This function should be called when cmd packet has been received.
 */
void cmdProcess(uint16_t uwPacketSize) {
	uint8_t ubCmdType = g_pDataBuffer[0];
	switch(ubCmdType) {
     bdc:	80 91 7a 01 	lds	r24, 0x017A
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	11 f4       	brne	.+4      	; 0xbe8 <cmdProcess+0xc>
		case CMD_SDWRITE: cmdSdWrite(); return;
	}
}

static void cmdReboot(void) {
	utilReset();
     be4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <utilReset>
     be8:	08 95       	ret

00000bea <cmd_quit>:
#include "stats.h"

COMMAND(cmd_quit)
{
  return CMD_QUIT;
}
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	08 95       	ret

00000bee <cmd_device_reset>:

COMMAND(cmd_device_reset)
{
  return CMD_RESET;
}
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	08 95       	ret

00000bf2 <cmd_version>:

COMMAND(cmd_version)
{
	// NOTE: UART - VERSION BUILD_DATE\r\n
  return CMD_OK;
}
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	08 95       	ret

00000bf6 <cmd_param_ip_addr>:
    return CMD_PARSE_ERROR;
  }
}

COMMAND(cmd_param_ip_addr)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <cmd_param_ip_addr+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <cmd_param_ip_addr+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	fb 01       	movw	r30, r22
  uint8_t ip[4];

  if(net_parse_ip((char*)argv[1], ip)) {
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	be 01       	movw	r22, r28
     c0a:	6f 5f       	subi	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <net_parse_ip>
     c12:	88 23       	and	r24, r24
     c14:	11 f4       	brne	.+4      	; 0xc1a <cmd_param_ip_addr+0x24>
     c16:	81 e1       	ldi	r24, 0x11	; 17
     c18:	07 c0       	rjmp	.+14     	; 0xc28 <cmd_param_ip_addr+0x32>
    net_copy_ip(ip, param.test_ip);
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	63 e6       	ldi	r22, 0x63	; 99
     c20:	71 e0       	ldi	r23, 0x01	; 1
     c22:	0e 94 0b 08 	call	0x1016	; 0x1016 <net_copy_ip>
     c26:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <cmd_param_word>:
  }
  return result;
}

COMMAND(cmd_param_word)
{
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <cmd_param_word+0xa>
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	28 2f       	mov	r18, r24
     c46:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     c48:	ed 91       	ld	r30, X+
     c4a:	fc 91       	ld	r31, X
     c4c:	11 97       	sbiw	r26, 0x01	; 1
  uint8_t type = argv[0][1];
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
  uint16_t *val = 0;

  if(group == 't') {
     c50:	80 81       	ld	r24, Z
     c52:	84 37       	cpi	r24, 0x74	; 116
     c54:	19 f5       	brne	.+70     	; 0xc9c <cmd_param_word+0x66>
    switch(type) {
     c56:	90 37       	cpi	r25, 0x70	; 112
     c58:	59 f0       	breq	.+22     	; 0xc70 <cmd_param_word+0x3a>
     c5a:	94 37       	cpi	r25, 0x74	; 116
     c5c:	19 f0       	breq	.+6      	; 0xc64 <cmd_param_word+0x2e>
     c5e:	9c 36       	cpi	r25, 0x6C	; 108
     c60:	e9 f4       	brne	.+58     	; 0xc9c <cmd_param_word+0x66>
     c62:	03 c0       	rjmp	.+6      	; 0xc6a <cmd_param_word+0x34>
     c64:	01 e6       	ldi	r16, 0x61	; 97
     c66:	11 e0       	ldi	r17, 0x01	; 1
     c68:	05 c0       	rjmp	.+10     	; 0xc74 <cmd_param_word+0x3e>
     c6a:	0f e5       	ldi	r16, 0x5F	; 95
     c6c:	11 e0       	ldi	r17, 0x01	; 1
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <cmd_param_word+0x3e>
     c70:	07 e6       	ldi	r16, 0x67	; 103
     c72:	11 e0       	ldi	r17, 0x01	; 1
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     c74:	21 30       	cpi	r18, 0x01	; 1
     c76:	91 f0       	breq	.+36     	; 0xc9c <cmd_param_word+0x66>
    return CMD_PARSE_ERROR;
  } else {
    uint16_t new_val;
    if(utilParseWordHex((char*)argv[1],&new_val)) {
     c78:	12 96       	adiw	r26, 0x02	; 2
     c7a:	8d 91       	ld	r24, X+
     c7c:	9c 91       	ld	r25, X
     c7e:	13 97       	sbiw	r26, 0x03	; 3
     c80:	be 01       	movw	r22, r28
     c82:	6f 5f       	subi	r22, 0xFF	; 255
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	0e 94 9e 03 	call	0x73c	; 0x73c <utilParseWordHex>
     c8a:	88 23       	and	r24, r24
     c8c:	39 f0       	breq	.+14     	; 0xc9c <cmd_param_word+0x66>
      *val = new_val;
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	f8 01       	movw	r30, r16
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	80 83       	st	Z, r24
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <cmd_param_word+0x68>
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return CMD_OK;
     c9c:	81 e1       	ldi	r24, 0x11	; 17
}
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <cmd_param_toggle>:
  param_reset();
  return CMD_OK;
}

COMMAND(cmd_param_toggle)
{
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	1f 93       	push	r17
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	0f 92       	push	r0
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     cbe:	ed 91       	ld	r30, X+
     cc0:	fc 91       	ld	r31, X
     cc2:	11 97       	sbiw	r26, 0x01	; 1
     cc4:	90 81       	ld	r25, Z
  uint8_t type = argv[0][1];
     cc6:	21 81       	ldd	r18, Z+1	; 0x01
  uint8_t *val = 0;
  uint8_t result = CMD_OK;

  if(group == 't') {
     cc8:	94 37       	cpi	r25, 0x74	; 116
     cca:	41 f4       	brne	.+16     	; 0xcdc <cmd_param_toggle+0x30>
    switch(type) {
     ccc:	2d 36       	cpi	r18, 0x6D	; 109
     cce:	71 f5       	brne	.+92     	; 0xd2c <cmd_param_toggle+0x80>
     cd0:	e9 e6       	ldi	r30, 0x69	; 105
     cd2:	f1 e0       	ldi	r31, 0x01	; 1
     cd4:	90 81       	ld	r25, Z
     cd6:	7f 01       	movw	r14, r30
     cd8:	10 e0       	ldi	r17, 0x00	; 0
     cda:	11 c0       	rjmp	.+34     	; 0xcfe <cmd_param_toggle+0x52>
      case 'm': val = &param.test_mode; break;
      default: return CMD_PARSE_ERROR;
    }
  }
  else if(group == 'f') {
     cdc:	96 36       	cpi	r25, 0x66	; 102
     cde:	31 f5       	brne	.+76     	; 0xd2c <cmd_param_toggle+0x80>
    switch(type) {
     ce0:	23 36       	cpi	r18, 0x63	; 99
     ce2:	41 f0       	breq	.+16     	; 0xcf4 <cmd_param_toggle+0x48>
     ce4:	24 36       	cpi	r18, 0x64	; 100
     ce6:	11 f5       	brne	.+68     	; 0xd2c <cmd_param_toggle+0x80>
     ce8:	ee e5       	ldi	r30, 0x5E	; 94
     cea:	f1 e0       	ldi	r31, 0x01	; 1
     cec:	90 81       	ld	r25, Z
     cee:	7f 01       	movw	r14, r30
     cf0:	13 e0       	ldi	r17, 0x03	; 3
     cf2:	05 c0       	rjmp	.+10     	; 0xcfe <cmd_param_toggle+0x52>
     cf4:	ed e5       	ldi	r30, 0x5D	; 93
     cf6:	f1 e0       	ldi	r31, 0x01	; 1
     cf8:	90 81       	ld	r25, Z
     cfa:	7f 01       	movw	r14, r30
     cfc:	13 e0       	ldi	r17, 0x03	; 3
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	31 f4       	brne	.+12     	; 0xd0e <cmd_param_toggle+0x62>
    // toggle value if no argument is given
    *val = *val ? 0 : 1;
     d02:	f7 01       	movw	r30, r14
     d04:	10 82       	st	Z, r1
     d06:	99 23       	and	r25, r25
     d08:	91 f4       	brne	.+36     	; 0xd2e <cmd_param_toggle+0x82>
     d0a:	80 83       	st	Z, r24
     d0c:	10 c0       	rjmp	.+32     	; 0xd2e <cmd_param_toggle+0x82>
  } else {
    uint8_t new_val;
    if(utilParseByteHex((char*)argv[1],&new_val)) {
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	8d 91       	ld	r24, X+
     d12:	9c 91       	ld	r25, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	be 01       	movw	r22, r28
     d18:	6f 5f       	subi	r22, 0xFF	; 255
     d1a:	7f 4f       	sbci	r23, 0xFF	; 255
     d1c:	0e 94 6f 03 	call	0x6de	; 0x6de <utilParseByteHex>
     d20:	88 23       	and	r24, r24
     d22:	21 f0       	breq	.+8      	; 0xd2c <cmd_param_toggle+0x80>
      *val = new_val;
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	f7 01       	movw	r30, r14
     d28:	80 83       	st	Z, r24
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <cmd_param_toggle+0x82>
     d2c:	11 e1       	ldi	r17, 0x11	; 17
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return result;
}
     d2e:	81 2f       	mov	r24, r17
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	1f 91       	pop	r17
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	08 95       	ret

00000d3e <cmd_param_mac_addr>:
  }
  return CMD_OK;
}

COMMAND(cmd_param_mac_addr)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <cmd_param_mac_addr+0x6>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <cmd_param_mac_addr+0x8>
     d46:	00 d0       	rcall	.+0      	; 0xd48 <cmd_param_mac_addr+0xa>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	fb 01       	movw	r30, r22
  uint8_t mac[6];

  if(net_parse_mac((char*)argv[1], mac)) {
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	be 01       	movw	r22, r28
     d54:	6f 5f       	subi	r22, 0xFF	; 255
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	0e 94 b7 08 	call	0x116e	; 0x116e <net_parse_mac>
     d5c:	88 23       	and	r24, r24
     d5e:	11 f4       	brne	.+4      	; 0xd64 <cmd_param_mac_addr+0x26>
     d60:	81 e1       	ldi	r24, 0x11	; 17
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <cmd_param_mac_addr+0x34>
    net_copy_mac(mac, param.mac_addr);
     d64:	ce 01       	movw	r24, r28
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	67 e5       	ldi	r22, 0x57	; 87
     d6a:	71 e0       	ldi	r23, 0x01	; 1
     d6c:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>
     d70:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     d72:	26 96       	adiw	r28, 0x06	; 6
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <cmd_stats_reset>:
  return CMD_OK;
}

COMMAND(cmd_stats_reset)
{
  stats_reset();
     d84:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <stats_reset>
  return CMD_OK;
}
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	08 95       	ret

00000d8c <cmd_stats_dump>:
  }
}

COMMAND(cmd_stats_dump)
{
  stats_dump_all();
     d8c:	0e 94 07 10 	call	0x200e	; 0x200e <stats_dump_all>
  return CMD_OK;
}
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	08 95       	ret

00000d94 <cmd_param_reset>:
  }
}

COMMAND(cmd_param_reset)
{
  param_reset();
     d94:	0e 94 71 09 	call	0x12e2	; 0x12e2 <param_reset>
  return CMD_OK;
}
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	08 95       	ret

00000d9c <cmd_param_load>:
  }
}

COMMAND(cmd_param_load)
{
  uint8_t result = param_load();
     d9c:	0e 94 80 09 	call	0x1300	; 0x1300 <param_load>
  if(result == PARAM_OK) {
     da0:	81 11       	cpse	r24, r1
    return CMD_OK;
  } else {
    return CMD_MASK_ERROR | result;
     da2:	80 62       	ori	r24, 0x20	; 32
  }
}
     da4:	08 95       	ret

00000da6 <cmd_param_save>:
  return CMD_OK;
}

COMMAND(cmd_param_save)
{
  uint8_t result = param_save();
     da6:	0e 94 b1 09 	call	0x1362	; 0x1362 <param_save>
  if(result == PARAM_OK) {
     daa:	81 11       	cpse	r24, r1
    return CMD_OK;
  } else {
    return CMD_MASK_ERROR | result;
     dac:	80 62       	ori	r24, 0x20	; 32
  }
}
     dae:	08 95       	ret

00000db0 <cmd_param_dump>:
  return CMD_OK;
}

COMMAND(cmd_param_dump)
{
  param_dump();
     db0:	0e 94 4b 09 	call	0x1296	; 0x1296 <param_dump>
  return CMD_OK;
}
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	08 95       	ret

00000db8 <cmd_enter_pb_test_mode>:
  stats_reset();
}

COMMAND_KEY(cmd_enter_pb_test_mode)
{
  run_mode = RUN_MODE_PB_TEST;
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	80 93 42 01 	sts	0x0142, r24
}
     dbe:	08 95       	ret

00000dc0 <cmd_enter_pio_test_mode>:

COMMAND_KEY(cmd_enter_pio_test_mode)
{
  run_mode = RUN_MODE_PIO_TEST;
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	80 93 42 01 	sts	0x0142, r24
}
     dc6:	08 95       	ret

00000dc8 <cmd_enter_bridge_mode>:

COMMAND_KEY(cmd_enter_bridge_mode)
{
  run_mode = RUN_MODE_BRIDGE;
     dc8:	10 92 42 01 	sts	0x0142, r1
}
     dcc:	08 95       	ret

00000dce <cmd_enter_bridge_test_mode>:

COMMAND_KEY(cmd_enter_bridge_test_mode)
{
  run_mode = RUN_MODE_BRIDGE_TEST;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 42 01 	sts	0x0142, r24
}
     dd4:	08 95       	ret

00000dd6 <cmd_toggle_verbose>:
  pb_test_toggle_auto();
}

COMMAND_KEY(cmd_toggle_verbose)
{
  global_verbose = !global_verbose;
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	80 91 43 01 	lds	r24, 0x0143
     ddc:	88 23       	and	r24, r24
     dde:	09 f4       	brne	.+2      	; 0xde2 <cmd_toggle_verbose+0xc>
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	90 93 43 01 	sts	0x0143, r25
  // NOTE: UART - VERBOSE: global_verbose ? "ON\r\n" : "OFF\r\n"
}
     de6:	08 95       	ret

00000de8 <cmd_toggle_auto_mode>:
  pb_test_send_packet(1);
}

COMMAND_KEY(cmd_toggle_auto_mode)
{
  pb_test_toggle_auto();
     de8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <pb_test_toggle_auto>
}
     dec:	08 95       	ret

00000dee <cmd_send_test_packet_silent>:
  pb_test_send_packet(0);
}

COMMAND_KEY(cmd_send_test_packet_silent)
{
  pb_test_send_packet(1);
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <pb_test_send_packet>
}
     df4:	08 95       	ret

00000df6 <cmd_send_test_packet>:
  run_mode = RUN_MODE_BRIDGE_TEST;
}

COMMAND_KEY(cmd_send_test_packet)
{
  pb_test_send_packet(0);
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <pb_test_send_packet>
}
     dfc:	08 95       	ret

00000dfe <cmd_reset_stats>:
  stats_dump_all();
}

COMMAND_KEY(cmd_reset_stats)
{
  stats_reset();
     dfe:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <stats_reset>
}
     e02:	08 95       	ret

00000e04 <cmd_dump_stats>:
#include "main.h"
#include "base/uartutil.h"

COMMAND_KEY(cmd_dump_stats)
{
  stats_dump_all();
     e04:	0e 94 07 10 	call	0x200e	; 0x200e <stats_dump_all>
}
     e08:	08 95       	ret

00000e0a <dump_eth_pkt>:
void dump_eth_pkt(const uint8_t *eth_buf, uint16_t size)
{
  uint8_t buf[4];

  // NOTE: UART - [dword_to_dec(size), hex_word(eth_get_pkt_type(eth_buf)), eth_get_src_mac(eth_buf) > eth_get_tgt_mac(eth_buf)]
}
     e0a:	08 95       	ret

00000e0c <dump_ip_pkt>:
		// NOTE: UART - , hex_word(proto)
  }

  // src/tgt ip
  // NOTE: UART - , net_dump_ip(ip_get_src_ip(ip_buf)) > net_dump_ip(ip_get_tgt_ip(ip_buf)) ]
}
     e0c:	08 95       	ret

00000e0e <dump_pb_cmd>:
  if(!ps->is_send) {
		// NOTE: UART - +req= uart_send_delta(ps->recv_delta);
  }

  // NOTE: UART - \r\n
}
     e0e:	08 95       	ret

00000e10 <dump_arp_pkt>:

extern uint8_t arp_is_ipv4(const uint8_t *buf, uint16_t len);
extern void arp_make_reply(uint8_t *buf, const uint8_t *my_mac, const uint8_t *my_ip);

/* getter */
inline uint16_t arp_get_op(const uint8_t *buf) { return net_get_word(buf + ARP_OFF_OP); }
     e10:	06 96       	adiw	r24, 0x06	; 6
     e12:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
		// NOTE: UART - hex_word(op)
  }

  // src-tgt pair
  // NOTE: UART - ,(net_dump_mac(arp_get_src_mac(arp_buf)), net_dump_ip(arp_get_src_ip(arp_buf))) > (net_dump_mac(arp_get_tgt_mac(arp_buf)) , net_dump_ip(arp_get_tgt_ip(arp_buf)))]
}
     e16:	08 95       	ret

00000e18 <dump_ip_protocol>:
		// NOTE: UART - hex_word(port)
  }
}

extern void dump_ip_protocol(const uint8_t *ip_buf)
{
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	fc 01       	movw	r30, r24
  const uint8_t *proto_buf = ip_buf + ip_get_hdr_length(ip_buf);
     e20:	80 81       	ld	r24, Z
     e22:	88 0f       	add	r24, r24
     e24:	88 0f       	add	r24, r24
     e26:	8c 73       	andi	r24, 0x3C	; 60
     e28:	ef 01       	movw	r28, r30
     e2a:	c8 0f       	add	r28, r24
     e2c:	d1 1d       	adc	r29, r1

inline const uint8_t *ip_get_src_ip(const uint8_t *buf) { return buf + 12; }
inline const uint8_t *ip_get_tgt_ip(const uint8_t *buf) { return buf + 16; }
inline uint16_t ip_get_total_length(const uint8_t *buf) { return (uint16_t)buf[2] << 8 | (uint16_t)buf[3]; }
inline uint8_t ip_get_hdr_length(const uint8_t *buf) { return (buf[0] & 0xf) * 4; }
inline uint8_t ip_get_protocol(const uint8_t *buf) { return buf[9]; }
     e2e:	81 85       	ldd	r24, Z+9	; 0x09
  uint8_t proto = ip_get_protocol(ip_buf);
  if(proto == IP_PROTOCOL_UDP) {
     e30:	81 31       	cpi	r24, 0x11	; 17
     e32:	41 f4       	brne	.+16     	; 0xe44 <dump_ip_protocol+0x2c>
#define UDP_LENGTH_OFF    4
#define UDP_CHECKSUM_OFF  6
#define UDP_DATA_OFF      8

inline const uint8_t *udp_get_data_ptr(const uint8_t *udp_buf) { return udp_buf + UDP_DATA_OFF; }
inline uint16_t  udp_get_src_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_SRC_PORT_OFF); }
     e34:	ce 01       	movw	r24, r28
     e36:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
inline uint16_t  udp_get_tgt_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_TGT_PORT_OFF); }
     e3a:	ce 01       	movw	r24, r28
     e3c:	02 96       	adiw	r24, 0x02	; 2
     e3e:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
     e42:	18 c0       	rjmp	.+48     	; 0xe74 <dump_ip_protocol+0x5c>
		// NOTE: UART - [UDP:
    uint16_t src_port = udp_get_src_port(proto_buf);
    uint16_t tgt_port = udp_get_tgt_port(proto_buf);
    // NOTE: UART - src_port > tgt_port]
  }
  else if(proto == IP_PROTOCOL_TCP) {
     e44:	86 30       	cpi	r24, 0x06	; 6
     e46:	b1 f4       	brne	.+44     	; 0xe74 <dump_ip_protocol+0x5c>
#define TCP_FLAGS_ECE     0x040
#define TCP_FLAGS_CWR     0x080
#define TCP_FLAGS_NS      0x100

inline const uint8_t *tcp_get_data_ptr(const uint8_t *tcp_buf) { return tcp_buf + (tcp_buf[TCP_DATA_SIZE_OFF] >> 4) * 4; }
inline uint16_t  tcp_get_src_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_SRC_PORT_OFF); }
     e48:	ce 01       	movw	r24, r28
     e4a:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
inline uint16_t  tcp_get_tgt_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_TGT_PORT_OFF); }
     e4e:	ce 01       	movw	r24, r28
     e50:	02 96       	adiw	r24, 0x02	; 2
     e52:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
inline uint32_t  tcp_get_seq_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_SEQ_NUM_OFF); }
inline uint32_t  tcp_get_ack_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_ACK_NUM_OFF); }
inline uint16_t  tcp_get_flags(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_FLAGS_OFF) & 0x1ff; }
     e56:	ce 01       	movw	r24, r28
     e58:	0c 96       	adiw	r24, 0x0c	; 12
     e5a:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
     e5e:	18 2f       	mov	r17, r24
#define TCP_FLAGS_NS      0x100

inline const uint8_t *tcp_get_data_ptr(const uint8_t *tcp_buf) { return tcp_buf + (tcp_buf[TCP_DATA_SIZE_OFF] >> 4) * 4; }
inline uint16_t  tcp_get_src_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_SRC_PORT_OFF); }
inline uint16_t  tcp_get_tgt_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_TGT_PORT_OFF); }
inline uint32_t  tcp_get_seq_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_SEQ_NUM_OFF); }
     e60:	ce 01       	movw	r24, r28
     e62:	04 96       	adiw	r24, 0x04	; 4
     e64:	0e 94 2a 08 	call	0x1054	; 0x1054 <net_get_long>
		// NOTE: UART - ,flags= hex_word(flags)

    uint32_t seq = tcp_get_seq_num(proto_buf);
    // NOTE: UART - ,seq= hex_word(seq)

    if(flags & TCP_FLAGS_ACK) {
     e68:	14 ff       	sbrs	r17, 4
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <dump_ip_protocol+0x5c>
inline uint32_t  tcp_get_ack_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_ACK_NUM_OFF); }
     e6c:	ce 01       	movw	r24, r28
     e6e:	08 96       	adiw	r24, 0x08	; 8
     e70:	0e 94 2a 08 	call	0x1054	; 0x1054 <net_get_long>
      // NOTE: UART - ,ack= hex_word(ack)
    }

    // NOTE: UART - ]
  }
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	08 95       	ret

00000e7c <dump_line>:

extern void dump_line(const uint8_t *eth_buf, uint16_t size)
{
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
  dump_eth_pkt(eth_buf, size);

  const uint8_t *ip_buf = eth_buf + ETH_HDR_SIZE;
     e80:	ec 01       	movw	r28, r24
     e82:	2e 96       	adiw	r28, 0x0e	; 14
     e84:	0c 96       	adiw	r24, 0x0c	; 12
     e86:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
  uint16_t type = eth_get_pkt_type(eth_buf);
  if(type == ETH_TYPE_ARP) {
     e8a:	28 e0       	ldi	r18, 0x08	; 8
     e8c:	86 30       	cpi	r24, 0x06	; 6
     e8e:	92 07       	cpc	r25, r18
     e90:	21 f4       	brne	.+8      	; 0xe9a <dump_line+0x1e>
    dump_arp_pkt(ip_buf);
     e92:	ce 01       	movw	r24, r28
     e94:	0e 94 08 07 	call	0xe10	; 0xe10 <dump_arp_pkt>
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <dump_line+0x2a>
  } else if(type == ETH_TYPE_IPV4) {
     e9a:	80 50       	subi	r24, 0x00	; 0
     e9c:	98 40       	sbci	r25, 0x08	; 8
     e9e:	19 f4       	brne	.+6      	; 0xea6 <dump_line+0x2a>
    dump_ip_pkt(ip_buf);
    dump_ip_protocol(ip_buf);
     ea0:	ce 01       	movw	r24, r28
     ea2:	0e 94 0c 07 	call	0xe18	; 0xe18 <dump_ip_protocol>
  }
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <main>:
 * 	POut:    input,  pulled high
 * 	NAck:    output, default: 1
 */
static void hwInit(void) {
	// Disable watchdog
	cli();
     eac:	f8 94       	cli
	wdt_reset();
     eae:	a8 95       	wdr
	MCUSR=0;
     eb0:	14 be       	out	0x34, r1	; 52
	WDTCSR|=_BV(WDCE) | _BV(WDE);
     eb2:	e0 e6       	ldi	r30, 0x60	; 96
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 61       	ori	r24, 0x18	; 24
     eba:	80 83       	st	Z, r24
	WDTCSR=0;
     ebc:	10 82       	st	Z, r1
	sei();
     ebe:	78 94       	sei

	// Setup timers
	timerInit();
     ec0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <timerInit>

	// Zero DDR and PORT status
  PAR_STATUS_DDR &= ~PAR_STATUS_MASK;
     ec4:	a7 e2       	ldi	r26, 0x27	; 39
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	8c 91       	ld	r24, X
     eca:	80 7e       	andi	r24, 0xE0	; 224
     ecc:	8c 93       	st	X, r24
  PAR_STATUS_PORT &= ~PAR_STATUS_MASK;
     ece:	e8 e2       	ldi	r30, 0x28	; 40
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 7e       	andi	r24, 0xE0	; 224
     ed6:	80 83       	st	Z, r24

  // Set them correctly
  PAR_STATUS_DDR |= BUSY | NACK;
     ed8:	8c 91       	ld	r24, X
     eda:	86 60       	ori	r24, 0x06	; 6
     edc:	8c 93       	st	X, r24
  PAR_STATUS_PORT |= NSTROBE | SEL | POUT | NACK;
     ede:	80 81       	ld	r24, Z
     ee0:	8b 61       	ori	r24, 0x1B	; 27
     ee2:	80 83       	st	Z, r24

  PAR_DATA_DDR = 0xFF;
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	8a b9       	out	0x0a, r24	; 10

  // Initialize status LED
  LED_DDR |= LED_STATUS;
     ee8:	8c 91       	ld	r24, X
     eea:	80 62       	ori	r24, 0x20	; 32
     eec:	8c 93       	st	X, r24
  LED_PIN |= LED_STATUS;
     eee:	e6 e2       	ldi	r30, 0x26	; 38
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	80 62       	ori	r24, 0x20	; 32
     ef6:	80 83       	st	Z, r24

	// Send welcome message
	// NOTE: UART - \r\nWelcome to plipbox " VERSION " " BUILD_DATE "\r\n

	// Load & display parameters (config)
	param_init();
     ef8:	0e 94 aa 09 	call	0x1354	; 0x1354 <param_init>
	param_dump();
     efc:	0e 94 4b 09 	call	0x1296	; 0x1296 <param_dump>

	// uart_send_free_stack();

	// Enter main loop depending on current run mode
	while(1) {
		switch(run_mode) {
     f00:	80 91 42 01 	lds	r24, 0x0142
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	29 f0       	breq	.+10     	; 0xf12 <main+0x66>
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	31 f0       	breq	.+12     	; 0xf18 <main+0x6c>
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	51 f4       	brne	.+20     	; 0xf24 <main+0x78>
     f10:	06 c0       	rjmp	.+12     	; 0xf1e <main+0x72>
			case RUN_MODE_PB_TEST:
				pb_test_loop();
     f12:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <pb_test_loop>
     f16:	f4 cf       	rjmp	.-24     	; 0xf00 <main+0x54>
				break;
			case RUN_MODE_PIO_TEST:
				pio_test_loop();
     f18:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <pio_test_loop>
     f1c:	f1 cf       	rjmp	.-30     	; 0xf00 <main+0x54>
				break;
			case RUN_MODE_BRIDGE_TEST:
				bridge_test_loop();
     f1e:	0e 94 6a 05 	call	0xad4	; 0xad4 <bridge_test_loop>
     f22:	ee cf       	rjmp	.-36     	; 0xf00 <main+0x54>
				break;
			case RUN_MODE_BRIDGE:
			default:
				bridge_loop();
     f24:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <bridge_loop>
     f28:	eb cf       	rjmp	.-42     	; 0xf00 <main+0x54>

00000f2a <arp_make_reply>:

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
}

void arp_make_reply(uint8_t *buf, const uint8_t *my_mac, const uint8_t *my_ip)
{
     f2a:	8f 92       	push	r8
     f2c:	9f 92       	push	r9
     f2e:	af 92       	push	r10
     f30:	bf 92       	push	r11
     f32:	cf 92       	push	r12
     f34:	df 92       	push	r13
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	8c 01       	movw	r16, r24
     f40:	5b 01       	movw	r10, r22
     f42:	4a 01       	movw	r8, r20
	// make a reply
	net_put_word(buf + ARP_OFF_OP, ARP_REPLY);
     f44:	06 96       	adiw	r24, 0x06	; 6
     f46:	62 e0       	ldi	r22, 0x02	; 2
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	0e 94 26 08 	call	0x104c	; 0x104c <net_put_word>
	net_copy_mac(buf + ARP_OFF_SRC_MAC, buf + ARP_OFF_TGT_MAC);
     f4e:	cc 24       	eor	r12, r12
     f50:	dd 24       	eor	r13, r13
     f52:	68 94       	set
     f54:	c3 f8       	bld	r12, 3
     f56:	c0 0e       	add	r12, r16
     f58:	d1 1e       	adc	r13, r17
     f5a:	b8 01       	movw	r22, r16
     f5c:	6e 5e       	subi	r22, 0xEE	; 238
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	c6 01       	movw	r24, r12
     f62:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>
	net_copy_ip(buf + ARP_OFF_SRC_IP, buf + ARP_OFF_TGT_IP);
     f66:	0f 2e       	mov	r0, r31
     f68:	fe e0       	ldi	r31, 0x0E	; 14
     f6a:	ef 2e       	mov	r14, r31
     f6c:	ff 24       	eor	r15, r15
     f6e:	f0 2d       	mov	r31, r0
     f70:	e0 0e       	add	r14, r16
     f72:	f1 1e       	adc	r15, r17
     f74:	08 5e       	subi	r16, 0xE8	; 232
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
     f78:	c7 01       	movw	r24, r14
     f7a:	b8 01       	movw	r22, r16
     f7c:	0e 94 0b 08 	call	0x1016	; 0x1016 <net_copy_ip>
	net_copy_mac(my_mac, buf + ARP_OFF_SRC_MAC);
     f80:	c5 01       	movw	r24, r10
     f82:	b6 01       	movw	r22, r12
     f84:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>
	net_copy_ip(my_ip, buf + ARP_OFF_SRC_IP);
     f88:	c4 01       	movw	r24, r8
     f8a:	b7 01       	movw	r22, r14
     f8c:	0e 94 0b 08 	call	0x1016	; 0x1016 <net_copy_ip>
}
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	9f 90       	pop	r9
     fa2:	8f 90       	pop	r8
     fa4:	08 95       	ret

00000fa6 <arp_is_ipv4>:

#include "arp.h"
#include "net.h"

uint8_t arp_is_ipv4(const uint8_t *buf, uint16_t len)
{
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	ec 01       	movw	r28, r24
  if(len < ARP_SIZE) {
     fb0:	6c 31       	cpi	r22, 0x1C	; 28
     fb2:	71 05       	cpc	r23, r1
     fb4:	10 f4       	brcc	.+4      	; 0xfba <arp_is_ipv4+0x14>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	1a c0       	rjmp	.+52     	; 0xfee <arp_is_ipv4+0x48>
    return 0;
  }

  uint16_t hw_type = net_get_word(buf + ARP_OFF_HW_TYPE);
     fba:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
     fbe:	8c 01       	movw	r16, r24
  uint16_t pt_type = net_get_word(buf + ARP_OFF_PROT_TYPE);
     fc0:	ce 01       	movw	r24, r28
     fc2:	02 96       	adiw	r24, 0x02	; 2
     fc4:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
  uint8_t hw_size = buf[ARP_OFF_HW_SIZE];
     fc8:	2c 81       	ldd	r18, Y+4	; 0x04
  uint8_t pt_size = buf[ARP_OFF_PROT_SIZE];
     fca:	3d 81       	ldd	r19, Y+5	; 0x05

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
     fcc:	01 30       	cpi	r16, 0x01	; 1
     fce:	11 05       	cpc	r17, r1
     fd0:	61 f4       	brne	.+24     	; 0xfea <arp_is_ipv4+0x44>
     fd2:	80 50       	subi	r24, 0x00	; 0
     fd4:	98 40       	sbci	r25, 0x08	; 8
     fd6:	49 f4       	brne	.+18     	; 0xfea <arp_is_ipv4+0x44>
     fd8:	26 30       	cpi	r18, 0x06	; 6
     fda:	39 f4       	brne	.+14     	; 0xfea <arp_is_ipv4+0x44>
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	34 30       	cpi	r19, 0x04	; 4
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <arp_is_ipv4+0x3e>
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	89 27       	eor	r24, r25
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <arp_is_ipv4+0x48>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <net_copy_mac>:
const uint8_t net_bcast_mac[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
const uint8_t net_zero_mac[6] = { 0,0,0,0,0,0 };
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
     ff8:	ac 01       	movw	r20, r24
     ffa:	25 e0       	ldi	r18, 0x05	; 5
	uint8_t i;
  for(i=6; i--;)
    out[i] = in[i];
     ffc:	82 2f       	mov	r24, r18
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	db 01       	movw	r26, r22
    1002:	a8 0f       	add	r26, r24
    1004:	b9 1f       	adc	r27, r25
    1006:	fa 01       	movw	r30, r20
    1008:	e8 0f       	add	r30, r24
    100a:	f9 1f       	adc	r31, r25
    100c:	80 81       	ld	r24, Z
    100e:	8c 93       	st	X, r24
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
	uint8_t i;
  for(i=6; i--;)
    1010:	21 50       	subi	r18, 0x01	; 1
    1012:	a0 f7       	brcc	.-24     	; 0xffc <net_copy_mac+0x4>
    out[i] = in[i];
}
    1014:	08 95       	ret

00001016 <net_copy_ip>:

void net_copy_ip(const uint8_t *in, uint8_t *out) {
    1016:	fc 01       	movw	r30, r24
    1018:	db 01       	movw	r26, r22
	uint8_t i;
  for(i = 4; i--;)
		out[i] = in[i];
    101a:	83 81       	ldd	r24, Z+3	; 0x03
    101c:	13 96       	adiw	r26, 0x03	; 3
    101e:	8c 93       	st	X, r24
    1020:	13 97       	sbiw	r26, 0x03	; 3
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	12 96       	adiw	r26, 0x02	; 2
    1026:	8c 93       	st	X, r24
    1028:	12 97       	sbiw	r26, 0x02	; 2
    102a:	81 81       	ldd	r24, Z+1	; 0x01
    102c:	11 96       	adiw	r26, 0x01	; 1
    102e:	8c 93       	st	X, r24
    1030:	11 97       	sbiw	r26, 0x01	; 1
    1032:	80 81       	ld	r24, Z
    1034:	8c 93       	st	X, r24
}
    1036:	08 95       	ret

00001038 <net_get_word>:

uint16_t  net_get_word(const uint8_t *buf) {
    1038:	fc 01       	movw	r30, r24
    103a:	21 81       	ldd	r18, Z+1	; 0x01
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	90 81       	ld	r25, Z
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	28 2b       	or	r18, r24
    1044:	39 2b       	or	r19, r25
  return (uint16_t)buf[0] << 8 | (uint16_t)buf[1];
}
    1046:	82 2f       	mov	r24, r18
    1048:	93 2f       	mov	r25, r19
    104a:	08 95       	ret

0000104c <net_put_word>:

void net_put_word(uint8_t *buf, uint16_t value)
{
    104c:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 8);
    104e:	70 83       	st	Z, r23
  buf[1] = (uint8_t)(value & 0xff);
    1050:	61 83       	std	Z+1, r22	; 0x01
}
    1052:	08 95       	ret

00001054 <net_get_long>:

uint32_t  net_get_long(const uint8_t *buf)
{
    1054:	fc 01       	movw	r30, r24
    1056:	23 81       	ldd	r18, Z+3	; 0x03
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a0 e0       	ldi	r26, 0x00	; 0
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	b8 2f       	mov	r27, r24
    1068:	aa 27       	eor	r26, r26
    106a:	99 27       	eor	r25, r25
    106c:	88 27       	eor	r24, r24
    106e:	28 2b       	or	r18, r24
    1070:	39 2b       	or	r19, r25
    1072:	4a 2b       	or	r20, r26
    1074:	5b 2b       	or	r21, r27
    1076:	81 81       	ldd	r24, Z+1	; 0x01
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a0 e0       	ldi	r26, 0x00	; 0
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	dc 01       	movw	r26, r24
    1080:	99 27       	eor	r25, r25
    1082:	88 27       	eor	r24, r24
    1084:	28 2b       	or	r18, r24
    1086:	39 2b       	or	r19, r25
    1088:	4a 2b       	or	r20, r26
    108a:	5b 2b       	or	r21, r27
    108c:	82 81       	ldd	r24, Z+2	; 0x02
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	ba 2f       	mov	r27, r26
    1096:	a9 2f       	mov	r26, r25
    1098:	98 2f       	mov	r25, r24
    109a:	88 27       	eor	r24, r24
    109c:	28 2b       	or	r18, r24
    109e:	39 2b       	or	r19, r25
    10a0:	4a 2b       	or	r20, r26
    10a2:	5b 2b       	or	r21, r27
  return (uint32_t)buf[0] << 24 | (uint32_t)buf[1] << 16 | (uint32_t)buf[2] << 8 | (uint32_t)buf[3];
}
    10a4:	62 2f       	mov	r22, r18
    10a6:	73 2f       	mov	r23, r19
    10a8:	84 2f       	mov	r24, r20
    10aa:	95 2f       	mov	r25, r21
    10ac:	08 95       	ret

000010ae <net_put_long>:

void net_put_long(uint8_t *buf, uint32_t value)
{
    10ae:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 24);
    10b0:	87 2f       	mov	r24, r23
    10b2:	99 27       	eor	r25, r25
    10b4:	aa 27       	eor	r26, r26
    10b6:	bb 27       	eor	r27, r27
    10b8:	80 83       	st	Z, r24
  buf[1] = (uint8_t)((value >> 16) & 0xff);
    10ba:	cb 01       	movw	r24, r22
    10bc:	aa 27       	eor	r26, r26
    10be:	bb 27       	eor	r27, r27
    10c0:	81 83       	std	Z+1, r24	; 0x01
  buf[2] = (uint8_t)((value >> 8) & 0xff);
    10c2:	bb 27       	eor	r27, r27
    10c4:	a7 2f       	mov	r26, r23
    10c6:	96 2f       	mov	r25, r22
    10c8:	85 2f       	mov	r24, r21
    10ca:	82 83       	std	Z+2, r24	; 0x02
  buf[3] = (uint8_t)(value & 0xff);
    10cc:	43 83       	std	Z+3, r20	; 0x03
}
    10ce:	08 95       	ret

000010d0 <net_compare_mac>:
    pos += 4;
  }
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
    10d0:	ac 01       	movw	r20, r24
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++)
    if(a[i] != b[i])
    10d6:	fa 01       	movw	r30, r20
    10d8:	e2 0f       	add	r30, r18
    10da:	f3 1f       	adc	r31, r19
    10dc:	db 01       	movw	r26, r22
    10de:	a2 0f       	add	r26, r18
    10e0:	b3 1f       	adc	r27, r19
    10e2:	90 81       	ld	r25, Z
    10e4:	8c 91       	ld	r24, X
    10e6:	98 17       	cp	r25, r24
    10e8:	11 f0       	breq	.+4      	; 0x10ee <net_compare_mac+0x1e>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	08 95       	ret
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<6;i++)
    10f2:	26 30       	cpi	r18, 0x06	; 6
    10f4:	31 05       	cpc	r19, r1
    10f6:	79 f7       	brne	.-34     	; 0x10d6 <net_compare_mac+0x6>
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
    10fa:	08 95       	ret

000010fc <net_compare_ip>:

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
    10fc:	ac 01       	movw	r20, r24
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++)
    if(a[i] != b[i])
    1102:	fa 01       	movw	r30, r20
    1104:	e2 0f       	add	r30, r18
    1106:	f3 1f       	adc	r31, r19
    1108:	db 01       	movw	r26, r22
    110a:	a2 0f       	add	r26, r18
    110c:	b3 1f       	adc	r27, r19
    110e:	90 81       	ld	r25, Z
    1110:	8c 91       	ld	r24, X
    1112:	98 17       	cp	r25, r24
    1114:	11 f0       	breq	.+4      	; 0x111a <net_compare_ip+0x1e>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	08 95       	ret
    111a:	2f 5f       	subi	r18, 0xFF	; 255
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
  return 1;
}

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<4;i++)
    111e:	24 30       	cpi	r18, 0x04	; 4
    1120:	31 05       	cpc	r19, r1
    1122:	79 f7       	brne	.-34     	; 0x1102 <net_compare_ip+0x6>
    1124:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
    1126:	08 95       	ret

00001128 <net_dump_ip>:
    mac[i] = value;
  }
  return 1;
}

void net_dump_ip(const uint8_t *in) {
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    1134:	20 91 24 01 	lds	r18, 0x0124
    1138:	30 91 25 01 	lds	r19, 0x0125
    113c:	8c 01       	movw	r16, r24
    113e:	e9 01       	movw	r28, r18
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    1140:	ee 24       	eor	r14, r14
    1142:	ff 24       	eor	r15, r15
    1144:	68 94       	set
    1146:	e4 f8       	bld	r14, 4
    1148:	e2 0e       	add	r14, r18
    114a:	f3 1e       	adc	r15, r19
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    114c:	f8 01       	movw	r30, r16
    114e:	81 91       	ld	r24, Z+
    1150:	8f 01       	movw	r16, r30
    1152:	be 01       	movw	r22, r28
    1154:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <utilByteToDec>
    1158:	24 96       	adiw	r28, 0x04	; 4
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    115a:	ce 15       	cp	r28, r14
    115c:	df 05       	cpc	r29, r15
    115e:	b1 f7       	brne	.-20     	; 0x114c <net_dump_ip+0x24>
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    pos += 4;
  }
  // NOTE: UART - ip_str
}
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	08 95       	ret

0000116e <net_parse_mac>:
    ip[i] = value;
  }
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
    116e:	af 92       	push	r10
    1170:	bf 92       	push	r11
    1172:	cf 92       	push	r12
    1174:	df 92       	push	r13
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	0f 92       	push	r0
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	7c 01       	movw	r14, r24
    118a:	6b 01       	movw	r12, r22
    118c:	00 e0       	ldi	r16, 0x00	; 0
    118e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++) {
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
    1190:	5e 01       	movw	r10, r28
    1192:	08 94       	sec
    1194:	a1 1c       	adc	r10, r1
    1196:	b1 1c       	adc	r11, r1
    1198:	c7 01       	movw	r24, r14
    119a:	b5 01       	movw	r22, r10
    119c:	0e 94 6f 03 	call	0x6de	; 0x6de <utilParseByteHex>
    11a0:	88 23       	and	r24, r24
    11a2:	89 f0       	breq	.+34     	; 0x11c6 <net_parse_mac+0x58>
      return 0;
    }
    buf += 3;
    mac[i] = value;
    11a4:	f6 01       	movw	r30, r12
    11a6:	e0 0f       	add	r30, r16
    11a8:	f1 1f       	adc	r31, r17
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	80 83       	st	Z, r24
    11ae:	0f 5f       	subi	r16, 0xFF	; 255
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
	uint8_t i;
  for(i=0;i<6;i++) {
    11b2:	06 30       	cpi	r16, 0x06	; 6
    11b4:	11 05       	cpc	r17, r1
    11b6:	11 f4       	brne	.+4      	; 0x11bc <net_parse_mac+0x4e>
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <net_parse_mac+0x5a>
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
      return 0;
    }
    buf += 3;
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	e8 0e       	add	r14, r24
    11c2:	f9 1e       	adc	r15, r25
    11c4:	e9 cf       	rjmp	.-46     	; 0x1198 <net_parse_mac+0x2a>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    mac[i] = value;
  }
  return 1;
}
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	df 90       	pop	r13
    11d8:	cf 90       	pop	r12
    11da:	bf 90       	pop	r11
    11dc:	af 90       	pop	r10
    11de:	08 95       	ret

000011e0 <net_parse_ip>:
    pos += 3;
  }
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
    11e0:	af 92       	push	r10
    11e2:	bf 92       	push	r11
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	7c 01       	movw	r14, r24
    11fc:	6b 01       	movw	r12, r22
    11fe:	00 e0       	ldi	r16, 0x00	; 0
    1200:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++) {
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
    1202:	5e 01       	movw	r10, r28
    1204:	08 94       	sec
    1206:	a1 1c       	adc	r10, r1
    1208:	b1 1c       	adc	r11, r1
    120a:	c7 01       	movw	r24, r14
    120c:	b5 01       	movw	r22, r10
    120e:	0e 94 38 04 	call	0x870	; 0x870 <utilParseByteDec>
    1212:	98 2f       	mov	r25, r24
    if(digits == 0)
    1214:	88 23       	and	r24, r24
    1216:	91 f0       	breq	.+36     	; 0x123c <net_parse_ip+0x5c>
      return 0;
    buf += digits + 1;
    ip[i] = value;
    1218:	f6 01       	movw	r30, r12
    121a:	e0 0f       	add	r30, r16
    121c:	f1 1f       	adc	r31, r17
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	0f 5f       	subi	r16, 0xFF	; 255
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
	uint8_t i;
  for(i=0;i<4;i++) {
    1226:	04 30       	cpi	r16, 0x04	; 4
    1228:	11 05       	cpc	r17, r1
    122a:	11 f4       	brne	.+4      	; 0x1230 <net_parse_ip+0x50>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	07 c0       	rjmp	.+14     	; 0x123e <net_parse_ip+0x5e>
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
    if(digits == 0)
      return 0;
    buf += digits + 1;
    1230:	89 2f       	mov	r24, r25
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	e8 0e       	add	r14, r24
    1238:	f9 1e       	adc	r15, r25
    123a:	e7 cf       	rjmp	.-50     	; 0x120a <net_parse_ip+0x2a>
    123c:	80 e0       	ldi	r24, 0x00	; 0
    ip[i] = value;
  }
  return 1;
}
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	df 90       	pop	r13
    124e:	cf 90       	pop	r12
    1250:	bf 90       	pop	r11
    1252:	af 90       	pop	r10
    1254:	08 95       	ret

00001256 <net_dump_mac>:
}

static char *mac_str = "00:00:00:00:00:00";
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
    utilByteToHex(in[i], mac_str+pos);
    1262:	e0 90 38 01 	lds	r14, 0x0138
    1266:	f0 90 39 01 	lds	r15, 0x0139
    126a:	8c 01       	movw	r16, r24
    126c:	c0 e0       	ldi	r28, 0x00	; 0
    126e:	d0 e0       	ldi	r29, 0x00	; 0
    1270:	b7 01       	movw	r22, r14
    1272:	6c 0f       	add	r22, r28
    1274:	7d 1f       	adc	r23, r29
    1276:	f8 01       	movw	r30, r16
    1278:	81 91       	ld	r24, Z+
    127a:	8f 01       	movw	r16, r30
    127c:	0e 94 af 02 	call	0x55e	; 0x55e <utilByteToHex>
    pos += 3;
    1280:	23 96       	adiw	r28, 0x03	; 3
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
    1282:	c2 31       	cpi	r28, 0x12	; 18
    1284:	d1 05       	cpc	r29, r1
    1286:	a1 f7       	brne	.-24     	; 0x1270 <net_dump_mac+0x1a>
    utilByteToHex(in[i], mac_str+pos);
    pos += 3;
  }
  // NOTE: UART - mac_str
}
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	08 95       	ret

00001296 <param_dump>:
	// NOTE: UART - \r\n tt: packet type param.test_ptype
	// NOTE: UART - \r\n ti: ip address param.test_ip
	// NOTE: UART - \r\n tp: udp port param.test_port
	// NOTE: UART - \r\n tm: test mode param.test_mode
	// NOTE: UART - \r\n
}
    1296:	08 95       	ret

00001298 <calc_crc16>:

// build check sum for parameter block
static uint16_t calc_crc16(param_t *p)
{
  uint16_t crc16 = 0xffff;
  uint8_t *data = (uint8_t *)p;
    1298:	fc 01       	movw	r30, r24
    129a:	4f ef       	ldi	r20, 0xFF	; 255
    129c:	5f ef       	ldi	r21, 0xFF	; 255
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    12a2:	81 91       	ld	r24, Z+
    12a4:	48 27       	eor	r20, r24
    12a6:	84 2f       	mov	r24, r20
    12a8:	82 95       	swap	r24
    12aa:	84 27       	eor	r24, r20
    12ac:	08 2e       	mov	r0, r24
    12ae:	86 95       	lsr	r24
    12b0:	86 95       	lsr	r24
    12b2:	80 25       	eor	r24, r0
    12b4:	08 2e       	mov	r0, r24
    12b6:	86 95       	lsr	r24
    12b8:	80 25       	eor	r24, r0
    12ba:	87 70       	andi	r24, 0x07	; 7
    12bc:	04 2e       	mov	r0, r20
    12be:	45 2f       	mov	r20, r21
    12c0:	86 95       	lsr	r24
    12c2:	07 94       	ror	r0
    12c4:	87 95       	ror	r24
    12c6:	50 2d       	mov	r21, r0
    12c8:	48 27       	eor	r20, r24
    12ca:	06 94       	lsr	r0
    12cc:	87 95       	ror	r24
    12ce:	50 25       	eor	r21, r0
    12d0:	48 27       	eor	r20, r24
  uint16_t i;
  for(i=0;i<sizeof(param_t);i++) {
    12d2:	2f 5f       	subi	r18, 0xFF	; 255
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	23 31       	cpi	r18, 0x13	; 19
    12d8:	31 05       	cpc	r19, r1
    12da:	19 f7       	brne	.-58     	; 0x12a2 <calc_crc16+0xa>
    crc16 = _crc16_update(crc16,*data);
    data++;
  }
  return crc16;
}
    12dc:	84 2f       	mov	r24, r20
    12de:	95 2f       	mov	r25, r21
    12e0:	08 95       	ret

000012e2 <param_reset>:

  return PARAM_OK;
}

void param_reset(void)
{
    12e2:	a7 e5       	ldi	r26, 0x57	; 87
    12e4:	b1 e0       	ldi	r27, 0x01	; 1
    12e6:	2b e9       	ldi	r18, 0x9B	; 155
    12e8:	33 e0       	ldi	r19, 0x03	; 3
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&param;
  const uint8_t *in = (const uint8_t *)&default_param;
  for(i=0;i<sizeof(param_t);i++) {
    12ea:	4a e6       	ldi	r20, 0x6A	; 106
    12ec:	51 e0       	ldi	r21, 0x01	; 1

  return PARAM_OK;
}

void param_reset(void)
{
    12ee:	f9 01       	movw	r30, r18
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&param;
  const uint8_t *in = (const uint8_t *)&default_param;
  for(i=0;i<sizeof(param_t);i++) {
    *(out++) = pgm_read_byte_near(in++);
    12f0:	2f 5f       	subi	r18, 0xFF	; 255
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	e4 91       	lpm	r30, Z+
    12f6:	ed 93       	st	X+, r30
{
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&param;
  const uint8_t *in = (const uint8_t *)&default_param;
  for(i=0;i<sizeof(param_t);i++) {
    12f8:	a4 17       	cp	r26, r20
    12fa:	b5 07       	cpc	r27, r21
    12fc:	c1 f7       	brne	.-16     	; 0x12ee <param_reset+0xc>
    *(out++) = pgm_read_byte_near(in++);
  }
}
    12fe:	08 95       	ret

00001300 <param_load>:

  return PARAM_OK;
}

uint8_t param_load(void)
{
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
  // check that eeprom is readable
  if(!eeprom_is_ready())
    1308:	f9 9b       	sbis	0x1f, 1	; 31
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <param_load+0x10>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	1d c0       	rjmp	.+58     	; 0x134a <param_load+0x4a>
    return PARAM_EEPROM_NOT_READY;

  // read param
  eeprom_read_block(&param,&eeprom_param,sizeof(param_t));
    1310:	0f 2e       	mov	r0, r31
    1312:	f7 e5       	ldi	r31, 0x57	; 87
    1314:	ef 2e       	mov	r14, r31
    1316:	f1 e0       	ldi	r31, 0x01	; 1
    1318:	ff 2e       	mov	r15, r31
    131a:	f0 2d       	mov	r31, r0
    131c:	c7 01       	movw	r24, r14
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	43 e1       	ldi	r20, 0x13	; 19
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	0e 94 56 10 	call	0x20ac	; 0x20ac <__eerd_block_m328p>

  // read crc16
  uint16_t crc16 = eeprom_read_word(&eeprom_crc16);
    132a:	83 e1       	ldi	r24, 0x13	; 19
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 66 10 	call	0x20cc	; 0x20cc <__eerd_word_m328p>
    1332:	8c 01       	movw	r16, r24
  uint16_t my_crc16 = calc_crc16(&param);
    1334:	c7 01       	movw	r24, r14
    1336:	0e 94 4c 09 	call	0x1298	; 0x1298 <calc_crc16>
  if(crc16 != my_crc16) {
    133a:	08 17       	cp	r16, r24
    133c:	19 07       	cpc	r17, r25
    133e:	11 f4       	brne	.+4      	; 0x1344 <param_load+0x44>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	03 c0       	rjmp	.+6      	; 0x134a <param_load+0x4a>
    param_reset();
    1344:	0e 94 71 09 	call	0x12e2	; 0x12e2 <param_reset>
    1348:	82 e0       	ldi	r24, 0x02	; 2
    return PARAM_EEPROM_CRC_MISMATCH;
  }

  return PARAM_OK;
}
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	08 95       	ret

00001354 <param_init>:
  }
}

void param_init(void)
{
  if(param_load()!=PARAM_OK)
    1354:	0e 94 80 09 	call	0x1300	; 0x1300 <param_load>
    1358:	88 23       	and	r24, r24
    135a:	11 f0       	breq	.+4      	; 0x1360 <param_init+0xc>
    param_reset();
    135c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <param_reset>
    1360:	08 95       	ret

00001362 <param_save>:
  }
  return crc16;
}

uint8_t param_save(void)
{
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
  // check that eeprom is writable
  if(!eeprom_is_ready())
    1366:	f9 9b       	sbis	0x1f, 1	; 31
    1368:	02 c0       	rjmp	.+4      	; 0x136e <param_save+0xc>
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	12 c0       	rjmp	.+36     	; 0x1392 <param_save+0x30>
    return PARAM_EEPROM_NOT_READY;

  // write current param to eeprom
  eeprom_write_block(&param,&eeprom_param,sizeof(param_t));
    136e:	07 e5       	ldi	r16, 0x57	; 87
    1370:	11 e0       	ldi	r17, 0x01	; 1
    1372:	c8 01       	movw	r24, r16
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	43 e1       	ldi	r20, 0x13	; 19
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__eewr_block_m328p>

  // calc current parameter crc
  uint16_t crc16 = calc_crc16(&param);
    1380:	c8 01       	movw	r24, r16
    1382:	0e 94 4c 09 	call	0x1298	; 0x1298 <calc_crc16>
    1386:	bc 01       	movw	r22, r24
  eeprom_write_word(&eeprom_crc16,crc16);
    1388:	83 e1       	ldi	r24, 0x13	; 19
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 84 10 	call	0x2108	; 0x2108 <__eewr_word_m328p>
    1390:	80 e0       	ldi	r24, 0x00	; 0

  return PARAM_OK;
}
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	08 95       	ret

00001398 <pb_proto_init>:

// ----- Init -----

void pb_proto_init(pb_proto_fill_func _packetFillFn, pb_proto_proc_func _packetProcessFn)
{
  packetFillFn = _packetFillFn;
    1398:	90 93 45 01 	sts	0x0145, r25
    139c:	80 93 44 01 	sts	0x0144, r24
  packetProcessFn = _packetProcessFn;
    13a0:	70 93 47 01 	sts	0x0147, r23
    13a4:	60 93 46 01 	sts	0x0146, r22

  // Set data DDR to input, make BUSY low
  PAR_DATA_DDR = 0x00;
    13a8:	1a b8       	out	0x0a, r1	; 10
  PAR_STATUS_PORT &= ~BUSY;
    13aa:	e8 e2       	ldi	r30, 0x28	; 40
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8b 7f       	andi	r24, 0xFB	; 251
    13b2:	80 83       	st	Z, r24
}
    13b4:	08 95       	ret

000013b6 <parGetStatusLines>:

uint8_t parGetStatusLines(void) {
	uint8_t ubIn, ubStrobe, ubSelect, ubPOut;
	ubIn = PAR_STATUS_PIN;
    13b6:	86 b1       	in	r24, 0x06	; 6
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	20 71       	andi	r18, 0x10	; 16
    13be:	30 70       	andi	r19, 0x00	; 0
    13c0:	35 95       	asr	r19
    13c2:	27 95       	ror	r18
    13c4:	35 95       	asr	r19
    13c6:	27 95       	ror	r18
    13c8:	35 95       	asr	r19
    13ca:	27 95       	ror	r18
    13cc:	35 95       	asr	r19
    13ce:	27 95       	ror	r18
    13d0:	22 0f       	add	r18, r18
    13d2:	33 1f       	adc	r19, r19
    13d4:	88 70       	andi	r24, 0x08	; 8
    13d6:	88 0f       	add	r24, r24
    13d8:	88 0f       	add	r24, r24
  ubStrobe = (ubIn & NSTROBE) >> POUT_PIN;
  ubSelect = (ubIn & SEL)     >> SEL_PIN;
  ubPOut   = (ubIn & POUT)    >> NSTROBE_PIN;
  return ((ubPOut << 2) | (ubSelect << 1) | ubStrobe);
}
    13da:	82 2b       	or	r24, r18
    13dc:	08 95       	ret

000013de <parRequestAmiRead>:
 * Sends data receive request (?) to Amiga.
 * Done as pulse on ACK line.
 */
void parRequestAmiRead(void)
{
  PAR_STATUS_PORT &= ~NACK;
    13de:	e8 e2       	ldi	r30, 0x28	; 40
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8d 7f       	andi	r24, 0xFD	; 253
    13e6:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	8a 95       	dec	r24
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <parRequestAmiRead+0xc>
  _delay_loop_1(1);
  PAR_STATUS_PORT |= NACK;
    13ee:	80 81       	ld	r24, Z
    13f0:	82 60       	ori	r24, 0x02	; 2
    13f2:	80 83       	st	Z, r24
  // TODO(KaiN#9): Perhaps should be longer as atmega clk is faster?
  trigger_ts = g_uwTimeStamp;
    13f4:	80 91 53 01 	lds	r24, 0x0153
    13f8:	90 91 54 01 	lds	r25, 0x0154
    13fc:	a0 91 55 01 	lds	r26, 0x0155
    1400:	b0 91 56 01 	lds	r27, 0x0156
    1404:	80 93 48 01 	sts	0x0148, r24
    1408:	90 93 49 01 	sts	0x0149, r25
    140c:	a0 93 4a 01 	sts	0x014A, r26
    1410:	b0 93 4b 01 	sts	0x014B, r27
}
    1414:	08 95       	ret

00001416 <parWaitForPout>:
 * Waits for PaperOut pin state specified by ubReqValue, for ubStateFlag purposes.
 * @param ubReqValue Requested PaperOut pin state (1: hi, 0: lo)
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t parWaitForPout(uint8_t ubReqValue, uint8_t ubStateFlag) {
    1416:	78 2f       	mov	r23, r24
  g_uwTimer100us = 0;
    1418:	10 92 52 01 	sts	0x0152, r1
    141c:	10 92 51 01 	sts	0x0151, r1
  while(g_uwTimer100us < pb_proto_timeout) {
    1420:	40 91 3a 01 	lds	r20, 0x013A
    1424:	50 91 3b 01 	lds	r21, 0x013B
		uint8_t ubIn = PAR_STATUS_PIN;
    1428:	e6 e2       	ldi	r30, 0x26	; 38
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	15 c0       	rjmp	.+42     	; 0x1458 <parWaitForPout+0x42>
    142e:	80 81       	ld	r24, Z
    uint8_t ubPOut = (ubIn & POUT) >> POUT_PIN;
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    if(ubReqValue == ubPOut)
    1434:	c9 01       	movw	r24, r18
    1436:	88 70       	andi	r24, 0x08	; 8
    1438:	90 70       	andi	r25, 0x00	; 0
    143a:	95 95       	asr	r25
    143c:	87 95       	ror	r24
    143e:	95 95       	asr	r25
    1440:	87 95       	ror	r24
    1442:	95 95       	asr	r25
    1444:	87 95       	ror	r24
    1446:	78 17       	cp	r23, r24
    1448:	11 f4       	brne	.+4      	; 0x144e <parWaitForPout+0x38>
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	08 95       	ret
      return PBPROTO_STATUS_OK;
    // During transfer client aborted and removed SEL
    if(!(ubIn & SEL))
    144e:	24 fd       	sbrc	r18, 4
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <parWaitForPout+0x42>
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
    1452:	86 2f       	mov	r24, r22
    1454:	83 60       	ori	r24, 0x03	; 3
    1456:	08 95       	ret
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t parWaitForPout(uint8_t ubReqValue, uint8_t ubStateFlag) {
  g_uwTimer100us = 0;
  while(g_uwTimer100us < pb_proto_timeout) {
    1458:	80 91 51 01 	lds	r24, 0x0151
    145c:	90 91 52 01 	lds	r25, 0x0152
    1460:	84 17       	cp	r24, r20
    1462:	95 07       	cpc	r25, r21
    1464:	20 f3       	brcs	.-56     	; 0x142e <parWaitForPout+0x18>
      return PBPROTO_STATUS_OK;
    // During transfer client aborted and removed SEL
    if(!(ubIn & SEL))
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
    1466:	86 2f       	mov	r24, r22
    1468:	82 60       	ori	r24, 0x02	; 2
}
    146a:	08 95       	ret

0000146c <pb_proto_handle>:
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    146c:	2f 92       	push	r2
    146e:	3f 92       	push	r3
    1470:	4f 92       	push	r4
    1472:	5f 92       	push	r5
    1474:	6f 92       	push	r6
    1476:	7f 92       	push	r7
    1478:	8f 92       	push	r8
    147a:	9f 92       	push	r9
    147c:	af 92       	push	r10
    147e:	bf 92       	push	r11
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <pb_proto_handle+0x26>
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
  uint8_t result;
  pb_proto_stat_t *ps = &pb_proto_stat;

  // handle server side of plipbox protocol
  ps->cmd = 0;
    1496:	10 92 6a 01 	sts	0x016A, r1

  // make sure that SEL == 1 and POUT == 0
  if(!(PAR_STATUS_PIN & SEL) || (PAR_STATUS_PIN & POUT)) {
    149a:	34 9b       	sbis	0x06, 4	; 6
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <pb_proto_handle+0x36>
    149e:	33 9b       	sbis	0x06, 3	; 6
    14a0:	04 c0       	rjmp	.+8      	; 0x14aa <pb_proto_handle+0x3e>
    ps->status = PBPROTO_STATUS_IDLE;
    14a2:	10 92 6b 01 	sts	0x016B, r1
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	ad c2       	rjmp	.+1370   	; 0x1a04 <pb_proto_handle+0x598>
    return PBPROTO_STATUS_IDLE;
  }

  // Read command byte
  uint8_t cmd = PAR_DATA_PIN;
    14aa:	a9 b0       	in	r10, 0x09	; 9

  // Amiga wants to receive data - prepare
  uint16_t pkt_size = 0;
    14ac:	1a 82       	std	Y+2, r1	; 0x02
    14ae:	19 82       	std	Y+1, r1	; 0x01
  if((cmd == PBPROTO_CMD_RECV) || (cmd == PBPROTO_CMD_RECV_BURST)) {
    14b0:	22 e2       	ldi	r18, 0x22	; 34
    14b2:	a2 16       	cp	r10, r18
    14b4:	19 f0       	breq	.+6      	; 0x14bc <pb_proto_handle+0x50>
    14b6:	84 e4       	ldi	r24, 0x44	; 68
    14b8:	a8 16       	cp	r10, r24
    14ba:	61 f4       	brne	.+24     	; 0x14d4 <pb_proto_handle+0x68>
    uint8_t res = packetFillFn(&pkt_size);
    14bc:	e0 91 44 01 	lds	r30, 0x0144
    14c0:	f0 91 45 01 	lds	r31, 0x0145
    14c4:	ce 01       	movw	r24, r28
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	09 95       	icall
    if(res != PBPROTO_STATUS_OK) {
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <pb_proto_handle+0x68>
      ps->status = res;
    14ce:	80 93 6b 01 	sts	0x016B, r24
    14d2:	98 c2       	rjmp	.+1328   	; 0x1a04 <pb_proto_handle+0x598>
      return res;
    }
  }

  // start timer
  uint32_t ts = g_uwTimeStamp;
    14d4:	60 90 53 01 	lds	r6, 0x0153
    14d8:	70 90 54 01 	lds	r7, 0x0154
    14dc:	80 90 55 01 	lds	r8, 0x0155
    14e0:	90 90 56 01 	lds	r9, 0x0156
    14e4:	10 92 85 00 	sts	0x0085, r1
    14e8:	10 92 84 00 	sts	0x0084, r1
  timerReset();

  // confirm cmd with BUSY = 1
  PAR_STATUS_PORT |= BUSY;
    14ec:	e8 e2       	ldi	r30, 0x28	; 40
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	84 60       	ori	r24, 0x04	; 4
    14f4:	80 83       	st	Z, r24

  uint16_t uwParDataSize = 0;
  switch(cmd) {
    14f6:	a2 e2       	ldi	r26, 0x22	; 34
    14f8:	aa 16       	cp	r10, r26
    14fa:	a1 f0       	breq	.+40     	; 0x1524 <pb_proto_handle+0xb8>
    14fc:	aa 15       	cp	r26, r10
    14fe:	20 f0       	brcs	.+8      	; 0x1508 <pb_proto_handle+0x9c>
    1500:	b1 e1       	ldi	r27, 0x11	; 17
    1502:	ab 16       	cp	r10, r27
    1504:	49 f4       	brne	.+18     	; 0x1518 <pb_proto_handle+0xac>
    1506:	75 c0       	rjmp	.+234    	; 0x15f2 <pb_proto_handle+0x186>
    1508:	e3 e3       	ldi	r30, 0x33	; 51
    150a:	ae 16       	cp	r10, r30
    150c:	09 f4       	brne	.+2      	; 0x1510 <pb_proto_handle+0xa4>
    150e:	7a c1       	rjmp	.+756    	; 0x1804 <pb_proto_handle+0x398>
    1510:	f4 e4       	ldi	r31, 0x44	; 68
    1512:	af 16       	cp	r10, r31
    1514:	09 f4       	brne	.+2      	; 0x1518 <pb_proto_handle+0xac>
    1516:	dd c0       	rjmp	.+442    	; 0x16d2 <pb_proto_handle+0x266>
    1518:	bb 24       	eor	r11, r11
    151a:	68 94       	set
    151c:	b2 f8       	bld	r11, 2
    151e:	cc 24       	eor	r12, r12
    1520:	dd 24       	eor	r13, r13
    1522:	fc c1       	rjmp	.+1016   	; 0x191c <pb_proto_handle+0x4b0>
    case PBPROTO_CMD_RECV:
      result = parHandleAmiRead(pkt_size, &uwParDataSize);
    1524:	e9 80       	ldd	r14, Y+1	; 0x01
    1526:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t parHandleAmiRead(uint16_t uwSize, uint16_t *pWriteSize)
{
	uint8_t ubStatus;

  PAR_DATA_DDR = 0xFF;
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	8a b9       	out	0x0a, r24	; 10

  // Send packet size - high part
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	60 e2       	ldi	r22, 0x20	; 32
    1530:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    1534:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    1536:	21 e0       	ldi	r18, 0x01	; 1
    1538:	82 17       	cp	r24, r18
    153a:	09 f0       	breq	.+2      	; 0x153e <pb_proto_handle+0xd2>
    153c:	57 c0       	rjmp	.+174    	; 0x15ec <pb_proto_handle+0x180>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize >> 8;
    153e:	fb b8       	out	0x0b, r15	; 11
  PAR_STATUS_PORT &= ~BUSY;
    1540:	e8 e2       	ldi	r30, 0x28	; 40
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8b 7f       	andi	r24, 0xFB	; 251
    1548:	80 83       	st	Z, r24

  // Send packet size - low part
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	60 e3       	ldi	r22, 0x30	; 48
    154e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    1552:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	b8 16       	cp	r11, r24
    1558:	09 f0       	breq	.+2      	; 0x155c <pb_proto_handle+0xf0>
    155a:	48 c0       	rjmp	.+144    	; 0x15ec <pb_proto_handle+0x180>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize & 0xFF;
    155c:	eb b8       	out	0x0b, r14	; 11
  PAR_STATUS_PORT |= BUSY;
    155e:	e8 e2       	ldi	r30, 0x28	; 40
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	84 60       	ori	r24, 0x04	; 4
    1566:	80 83       	st	Z, r24
  const uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    1568:	c7 01       	movw	r24, r14
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	0f 2e       	mov	r0, r31
    156e:	fe ef       	ldi	r31, 0xFE	; 254
    1570:	2f 2e       	mov	r2, r31
    1572:	ff ef       	ldi	r31, 0xFF	; 255
    1574:	3f 2e       	mov	r3, r31
    1576:	f0 2d       	mov	r31, r0
    1578:	28 22       	and	r2, r24
    157a:	39 22       	and	r3, r25
  while(uwSize--) {
    157c:	21 14       	cp	r2, r1
    157e:	31 04       	cpc	r3, r1
    1580:	61 f1       	breq	.+88     	; 0x15da <pb_proto_handle+0x16e>
    1582:	01 e0       	ldi	r16, 0x01	; 1
    1584:	0f 2e       	mov	r0, r31
    1586:	fa e7       	ldi	r31, 0x7A	; 122
    1588:	ef 2e       	mov	r14, r31
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	ff 2e       	mov	r15, r31
    158e:	f0 2d       	mov	r31, r0
    1590:	cc 24       	eor	r12, r12
    1592:	dd 24       	eor	r13, r13
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    PAR_STATUS_PORT ^= BUSY;
    1594:	0f 2e       	mov	r0, r31
    1596:	f8 e2       	ldi	r31, 0x28	; 40
    1598:	4f 2e       	mov	r4, r31
    159a:	55 24       	eor	r5, r5
    159c:	f0 2d       	mov	r31, r0
    159e:	14 e0       	ldi	r17, 0x04	; 4
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    15a0:	80 2f       	mov	r24, r16
    15a2:	60 e4       	ldi	r22, 0x40	; 64
    15a4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    15a8:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    15aa:	a1 e0       	ldi	r26, 0x01	; 1
    15ac:	8a 17       	cp	r24, r26
    15ae:	e1 f4       	brne	.+56     	; 0x15e8 <pb_proto_handle+0x17c>
      break;
    PAR_DATA_PORT = *(ptr++);
    15b0:	f7 01       	movw	r30, r14
    15b2:	80 81       	ld	r24, Z
    15b4:	ab e2       	ldi	r26, 0x2B	; 43
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	8c 93       	st	X, r24
    PAR_STATUS_PORT ^= BUSY;
    15ba:	f2 01       	movw	r30, r4
    15bc:	80 81       	ld	r24, Z
    15be:	81 27       	eor	r24, r17
    15c0:	80 83       	st	Z, r24
    ++uwWriteSize;
    15c2:	08 94       	sec
    15c4:	c1 1c       	adc	r12, r1
    15c6:	d1 1c       	adc	r13, r1
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    15c8:	2c 14       	cp	r2, r12
    15ca:	3d 04       	cpc	r3, r13
    15cc:	41 f0       	breq	.+16     	; 0x15de <pb_proto_handle+0x172>
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    15ce:	08 94       	sec
    15d0:	e1 1c       	adc	r14, r1
    15d2:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= BUSY;
    ++uwWriteSize;
    ubPOutWait ^= 1;
    15d4:	f1 e0       	ldi	r31, 0x01	; 1
    15d6:	0f 27       	eor	r16, r31
    15d8:	e3 cf       	rjmp	.-58     	; 0x15a0 <pb_proto_handle+0x134>
    15da:	cc 24       	eor	r12, r12
    15dc:	dd 24       	eor	r13, r13
  }

  // Final wait
  if(ubStatus == PBPROTO_STATUS_OK)
    ubStatus = parWaitForPout(1, PBPROTO_STAGE_LAST_DATA);
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	60 e5       	ldi	r22, 0x50	; 80
    15e2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    15e6:	b8 2e       	mov	r11, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    15e8:	1a b8       	out	0x0a, r1	; 10
    15ea:	98 c1       	rjmp	.+816    	; 0x191c <pb_proto_handle+0x4b0>
    15ec:	cc 24       	eor	r12, r12
    15ee:	dd 24       	eor	r13, r13
    15f0:	95 c1       	rjmp	.+810    	; 0x191c <pb_proto_handle+0x4b0>
{
  uint8_t ubStatus;
  uint16_t uwSize;

  // --- get size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	60 e2       	ldi	r22, 0x20	; 32
    15f6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    15fa:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    15fc:	21 e0       	ldi	r18, 0x01	; 1
    15fe:	82 17       	cp	r24, r18
    1600:	09 f0       	breq	.+2      	; 0x1604 <pb_proto_handle+0x198>
    1602:	64 c0       	rjmp	.+200    	; 0x16cc <pb_proto_handle+0x260>
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    1604:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~BUSY;
    1606:	e8 e2       	ldi	r30, 0x28	; 40
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	8b 7f       	andi	r24, 0xFB	; 251
    160e:	80 83       	st	Z, r24

  // --- get size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	60 e3       	ldi	r22, 0x30	; 48
    1614:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    1618:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	b8 16       	cp	r11, r24
    161e:	09 f0       	breq	.+2      	; 0x1622 <pb_proto_handle+0x1b6>
    1620:	55 c0       	rjmp	.+170    	; 0x16cc <pb_proto_handle+0x260>
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    1622:	29 b1       	in	r18, 0x09	; 9

  // --- get size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    1624:	90 2f       	mov	r25, r16
    1626:	80 e0       	ldi	r24, 0x00	; 0

  // --- get size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	28 2b       	or	r18, r24
    162c:	39 2b       	or	r19, r25
  PAR_STATUS_PORT ^= BUSY;
    162e:	e8 e2       	ldi	r30, 0x28	; 40
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	94 e0       	ldi	r25, 0x04	; 4
    1636:	89 27       	eor	r24, r25
    1638:	80 83       	st	Z, r24

  // Check with buffer size
  if(uwSize > DATABUF_SIZE) {
    163a:	a5 e0       	ldi	r26, 0x05	; 5
    163c:	2b 3e       	cpi	r18, 0xEB	; 235
    163e:	3a 07       	cpc	r19, r26
    1640:	38 f0       	brcs	.+14     	; 0x1650 <pb_proto_handle+0x1e4>
    1642:	0f 2e       	mov	r0, r31
    1644:	f5 e0       	ldi	r31, 0x05	; 5
    1646:	bf 2e       	mov	r11, r31
    1648:	f0 2d       	mov	r31, r0
    164a:	cc 24       	eor	r12, r12
    164c:	dd 24       	eor	r13, r13
    164e:	66 c1       	rjmp	.+716    	; 0x191c <pb_proto_handle+0x4b0>
  }

  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    1650:	c9 01       	movw	r24, r18
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	0f 2e       	mov	r0, r31
    1656:	fe ef       	ldi	r31, 0xFE	; 254
    1658:	2f 2e       	mov	r2, r31
    165a:	ff ef       	ldi	r31, 0xFF	; 255
    165c:	3f 2e       	mov	r3, r31
    165e:	f0 2d       	mov	r31, r0
    1660:	28 22       	and	r2, r24
    1662:	39 22       	and	r3, r25

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    1664:	21 14       	cp	r2, r1
    1666:	31 04       	cpc	r3, r1
    1668:	71 f1       	breq	.+92     	; 0x16c6 <pb_proto_handle+0x25a>
    166a:	01 e0       	ldi	r16, 0x01	; 1
    166c:	0f 2e       	mov	r0, r31
    166e:	fa e7       	ldi	r31, 0x7A	; 122
    1670:	ef 2e       	mov	r14, r31
    1672:	f1 e0       	ldi	r31, 0x01	; 1
    1674:	ff 2e       	mov	r15, r31
    1676:	f0 2d       	mov	r31, r0
    1678:	cc 24       	eor	r12, r12
    167a:	dd 24       	eor	r13, r13
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    PAR_STATUS_PORT ^= BUSY;
    167c:	0f 2e       	mov	r0, r31
    167e:	f8 e2       	ldi	r31, 0x28	; 40
    1680:	4f 2e       	mov	r4, r31
    1682:	55 24       	eor	r5, r5
    1684:	f0 2d       	mov	r31, r0
    1686:	14 e0       	ldi	r17, 0x04	; 4
  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    1688:	80 2f       	mov	r24, r16
    168a:	60 e4       	ldi	r22, 0x40	; 64
    168c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    1690:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    1692:	b1 e0       	ldi	r27, 0x01	; 1
    1694:	8b 17       	cp	r24, r27
    1696:	09 f0       	breq	.+2      	; 0x169a <pb_proto_handle+0x22e>
    1698:	41 c1       	rjmp	.+642    	; 0x191c <pb_proto_handle+0x4b0>
      break;
    *(ptr++) = PAR_DATA_PIN;
    169a:	e9 e2       	ldi	r30, 0x29	; 41
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	d7 01       	movw	r26, r14
    16a2:	8c 93       	st	X, r24
    PAR_STATUS_PORT ^= BUSY;
    16a4:	f2 01       	movw	r30, r4
    16a6:	80 81       	ld	r24, Z
    16a8:	81 27       	eor	r24, r17
    16aa:	80 83       	st	Z, r24
    ubPOutWait ^= 1;
    uwReadSize++;
    16ac:	08 94       	sec
    16ae:	c1 1c       	adc	r12, r1
    16b0:	d1 1c       	adc	r13, r1

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    16b2:	2c 14       	cp	r2, r12
    16b4:	3d 04       	cpc	r3, r13
    16b6:	09 f4       	brne	.+2      	; 0x16ba <pb_proto_handle+0x24e>
    16b8:	31 c1       	rjmp	.+610    	; 0x191c <pb_proto_handle+0x4b0>
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    16ba:	08 94       	sec
    16bc:	e1 1c       	adc	r14, r1
    16be:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= BUSY;
    ubPOutWait ^= 1;
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	0f 27       	eor	r16, r31
    16c4:	e1 cf       	rjmp	.-62     	; 0x1688 <pb_proto_handle+0x21c>
    16c6:	cc 24       	eor	r12, r12
    16c8:	dd 24       	eor	r13, r13
    16ca:	28 c1       	rjmp	.+592    	; 0x191c <pb_proto_handle+0x4b0>
    16cc:	cc 24       	eor	r12, r12
    16ce:	dd 24       	eor	r13, r13
    16d0:	25 c1       	rjmp	.+586    	; 0x191c <pb_proto_handle+0x4b0>
      break;
    case PBPROTO_CMD_SEND:
      result = parHandleAmiWrite(&uwParDataSize);
      break;
    case PBPROTO_CMD_RECV_BURST:
      result = parHandleAmiReadBurst(pkt_size, &uwParDataSize);
    16d2:	e9 80       	ldd	r14, Y+1	; 0x01
    16d4:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t parHandleAmiReadBurst(uint16_t size, uint16_t *ret_size) {
  uint8_t status;

  // --- set packet size hi
  status = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	60 e2       	ldi	r22, 0x20	; 32
    16da:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    16de:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    16e0:	21 e0       	ldi	r18, 0x01	; 1
    16e2:	82 17       	cp	r24, r18
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <pb_proto_handle+0x27c>
    16e6:	8b c0       	rjmp	.+278    	; 0x17fe <pb_proto_handle+0x392>
    return status;

	PAR_DATA_DDR = 0xFF;
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	8a b9       	out	0x0a, r24	; 10
	PAR_DATA_PORT = size >> 8;
    16ec:	fb b8       	out	0x0b, r15	; 11
	PAR_STATUS_PORT &= ~BUSY;
    16ee:	e8 e2       	ldi	r30, 0x28	; 40
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8b 7f       	andi	r24, 0xFB	; 251
    16f6:	80 83       	st	Z, r24

  // --- set packet size lo ---
  status = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	60 e3       	ldi	r22, 0x30	; 48
    16fc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    1700:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	b8 16       	cp	r11, r24
    1706:	09 f0       	breq	.+2      	; 0x170a <pb_proto_handle+0x29e>
    1708:	7a c0       	rjmp	.+244    	; 0x17fe <pb_proto_handle+0x392>
    return status;

	PAR_DATA_PORT = size & 0xFF;
    170a:	eb b8       	out	0x0b, r14	; 11
	PAR_STATUS_PORT ^= BUSY;
    170c:	e8 e2       	ldi	r30, 0x28	; 40
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	94 e0       	ldi	r25, 0x04	; 4
    1714:	89 27       	eor	r24, r25
    1716:	80 83       	st	Z, r24

  // --- burst ready? ---
  status = parWaitForPout(1, PBPROTO_STAGE_DATA);
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	60 e4       	ldi	r22, 0x40	; 64
    171c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    1720:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    1722:	a1 e0       	ldi	r26, 0x01	; 1
    1724:	8a 17       	cp	r24, r26
    1726:	09 f0       	breq	.+2      	; 0x172a <pb_proto_handle+0x2be>
    1728:	6a c0       	rjmp	.+212    	; 0x17fe <pb_proto_handle+0x392>
    return status;

  // round to even and convert to words
  uint16_t words = (size + 1) >> 1;
    172a:	c7 01       	movw	r24, r14
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	ac 01       	movw	r20, r24
    1730:	56 95       	lsr	r21
    1732:	47 95       	ror	r20
  uint16_t i;
  uint8_t *ptr = g_pDataBuffer;

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    1734:	f8 94       	cli
	PAR_STATUS_PORT ^= BUSY;
    1736:	e8 e2       	ldi	r30, 0x28	; 40
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	94 e0       	ldi	r25, 0x04	; 4
    173e:	89 27       	eor	r24, r25
    1740:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    1742:	41 15       	cp	r20, r1
    1744:	51 05       	cpc	r21, r1
    1746:	91 f1       	breq	.+100    	; 0x17ac <pb_proto_handle+0x340>
    1748:	0a e7       	ldi	r16, 0x7A	; 122
    174a:	11 e0       	ldi	r17, 0x01	; 1
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	9f e0       	ldi	r25, 0x0F	; 15
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    1752:	6b e2       	ldi	r22, 0x2B	; 43
    1754:	70 e0       	ldi	r23, 0x00	; 0

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    1756:	e6 e2       	ldi	r30, 0x26	; 38
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	89 2f       	mov	r24, r25
    175c:	8a 95       	dec	r24
    175e:	f1 f7       	brne	.-4      	; 0x175c <pb_proto_handle+0x2f0>
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= BUSY;
  for(i=0;i<words;i++) {
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    1760:	d8 01       	movw	r26, r16
    1762:	8c 91       	ld	r24, X
    1764:	db 01       	movw	r26, r22
    1766:	8c 93       	st	X, r24

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    1768:	80 81       	ld	r24, Z
    176a:	83 ff       	sbrs	r24, 3
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <pb_proto_handle+0x308>
    176e:	80 81       	ld	r24, Z
    1770:	84 fd       	sbrc	r24, 4
    1772:	fa cf       	rjmp	.-12     	; 0x1768 <pb_proto_handle+0x2fc>
		if(!(PAR_STATUS_PIN & SEL))
    1774:	80 81       	ld	r24, Z
    1776:	84 ff       	sbrs	r24, 4
    1778:	1b c0       	rjmp	.+54     	; 0x17b0 <pb_proto_handle+0x344>
    177a:	89 2f       	mov	r24, r25
    177c:	8a 95       	dec	r24
    177e:	f1 f7       	brne	.-4      	; 0x177c <pb_proto_handle+0x310>
			break;

    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    1780:	d8 01       	movw	r26, r16
    1782:	11 96       	adiw	r26, 0x01	; 1
    1784:	8c 91       	ld	r24, X
    1786:	db 01       	movw	r26, r22
    1788:	8c 93       	st	X, r24

    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    178a:	80 81       	ld	r24, Z
    178c:	83 fd       	sbrc	r24, 3
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <pb_proto_handle+0x32a>
    1790:	80 81       	ld	r24, Z
    1792:	84 fd       	sbrc	r24, 4
    1794:	fa cf       	rjmp	.-12     	; 0x178a <pb_proto_handle+0x31e>
		if(!(PAR_STATUS_PIN & SEL))
    1796:	80 81       	ld	r24, Z
    1798:	84 ff       	sbrs	r24, 4
    179a:	0a c0       	rjmp	.+20     	; 0x17b0 <pb_proto_handle+0x344>

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= BUSY;
  for(i=0;i<words;i++) {
    179c:	2f 5f       	subi	r18, 0xFF	; 255
    179e:	3f 4f       	sbci	r19, 0xFF	; 255
    17a0:	24 17       	cp	r18, r20
    17a2:	35 07       	cpc	r19, r21
    17a4:	28 f4       	brcc	.+10     	; 0x17b0 <pb_proto_handle+0x344>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    17a6:	0e 5f       	subi	r16, 0xFE	; 254
    17a8:	1f 4f       	sbci	r17, 0xFF	; 255
    17aa:	d7 cf       	rjmp	.-82     	; 0x175a <pb_proto_handle+0x2ee>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    17b0:	e6 e2       	ldi	r30, 0x26	; 38
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;
    17b4:	a8 e2       	ldi	r26, 0x28	; 40
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
		if(!(PAR_STATUS_PIN & SEL))
			break;
  }
  recv_burst_exit:
  sei();
    17b8:	78 94       	sei
    17ba:	03 c0       	rjmp	.+6      	; 0x17c2 <pb_proto_handle+0x356>
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    if(!(PAR_STATUS_PIN & SEL))
    17bc:	80 81       	ld	r24, Z
    17be:	84 ff       	sbrs	r24, 4
    17c0:	fb cf       	rjmp	.-10     	; 0x17b8 <pb_proto_handle+0x34c>
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    17c2:	80 81       	ld	r24, Z
    17c4:	83 fd       	sbrc	r24, 3
    17c6:	fa cf       	rjmp	.-12     	; 0x17bc <pb_proto_handle+0x350>
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;
    17c8:	8c 91       	ld	r24, X
    17ca:	84 60       	ori	r24, 0x04	; 4
    17cc:	8c 93       	st	X, r24
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <pb_proto_handle+0x36a>

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & POUT))
    if(!(PAR_STATUS_PIN & SEL))
    17d0:	80 81       	ld	r24, Z
    17d2:	84 ff       	sbrs	r24, 4
    17d4:	f1 cf       	rjmp	.-30     	; 0x17b8 <pb_proto_handle+0x34c>
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & POUT))
    17d6:	80 81       	ld	r24, Z
    17d8:	83 ff       	sbrs	r24, 3
    17da:	fa cf       	rjmp	.-12     	; 0x17d0 <pb_proto_handle+0x364>
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

  // error?
  if(i<words)
    17dc:	24 17       	cp	r18, r20
    17de:	35 07       	cpc	r19, r21
    17e0:	20 f4       	brcc	.+8      	; 0x17ea <pb_proto_handle+0x37e>
    17e2:	0f 2e       	mov	r0, r31
    17e4:	f2 e4       	ldi	r31, 0x42	; 66
    17e6:	bf 2e       	mov	r11, r31
    17e8:	f0 2d       	mov	r31, r0
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT &= ~BUSY;
    17ea:	e8 e2       	ldi	r30, 0x28	; 40
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	8b 7f       	andi	r24, 0xFB	; 251
    17f2:	80 83       	st	Z, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    17f4:	1a b8       	out	0x0a, r1	; 10

  *ret_size = i << 1;
    17f6:	69 01       	movw	r12, r18
    17f8:	cc 0c       	add	r12, r12
    17fa:	dd 1c       	adc	r13, r13
    17fc:	8f c0       	rjmp	.+286    	; 0x191c <pb_proto_handle+0x4b0>
    17fe:	cc 24       	eor	r12, r12
    1800:	dd 24       	eor	r13, r13
    1802:	8c c0       	rjmp	.+280    	; 0x191c <pb_proto_handle+0x4b0>
{
  uint16_t uwSize;
  uint8_t ubStatus;

  // --- packet size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	60 e2       	ldi	r22, 0x20	; 32
    1808:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    180c:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    180e:	b1 e0       	ldi	r27, 0x01	; 1
    1810:	8b 17       	cp	r24, r27
    1812:	09 f0       	breq	.+2      	; 0x1816 <pb_proto_handle+0x3aa>
    1814:	81 c0       	rjmp	.+258    	; 0x1918 <pb_proto_handle+0x4ac>
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    1816:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~BUSY;
    1818:	e8 e2       	ldi	r30, 0x28	; 40
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8b 7f       	andi	r24, 0xFB	; 251
    1820:	80 83       	st	Z, r24

  // --- packet size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	60 e3       	ldi	r22, 0x30	; 48
    1826:	0e 94 0b 0a 	call	0x1416	; 0x1416 <parWaitForPout>
    182a:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    182c:	e1 e0       	ldi	r30, 0x01	; 1
    182e:	8e 17       	cp	r24, r30
    1830:	09 f0       	breq	.+2      	; 0x1834 <pb_proto_handle+0x3c8>
    1832:	72 c0       	rjmp	.+228    	; 0x1918 <pb_proto_handle+0x4ac>
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    1834:	29 b1       	in	r18, 0x09	; 9
  // --- packet size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    1836:	90 2f       	mov	r25, r16
    1838:	80 e0       	ldi	r24, 0x00	; 0
  // --- packet size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	82 2b       	or	r24, r18
    183e:	93 2b       	or	r25, r19
  // delay SET_RAK until burst begin...

  // check size
  if(uwSize > DATABUF_SIZE)
    1840:	f5 e0       	ldi	r31, 0x05	; 5
    1842:	8b 3e       	cpi	r24, 0xEB	; 235
    1844:	9f 07       	cpc	r25, r31
    1846:	38 f0       	brcs	.+14     	; 0x1856 <pb_proto_handle+0x3ea>
    1848:	0f 2e       	mov	r0, r31
    184a:	f5 e0       	ldi	r31, 0x05	; 5
    184c:	bf 2e       	mov	r11, r31
    184e:	f0 2d       	mov	r31, r0
    1850:	cc 24       	eor	r12, r12
    1852:	dd 24       	eor	r13, r13
    1854:	63 c0       	rjmp	.+198    	; 0x191c <pb_proto_handle+0x4b0>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;

  // round to even and convert to words
  uint16_t words = (uwSize +1) >> 1;
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	bc 01       	movw	r22, r24
    185a:	76 95       	lsr	r23
    185c:	67 95       	ror	r22
  uint8_t result = PBPROTO_STATUS_OK;
  uint8_t *ptr = g_pDataBuffer;

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    185e:	f8 94       	cli
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
    1860:	e8 e2       	ldi	r30, 0x28	; 40
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	94 e0       	ldi	r25, 0x04	; 4
    1868:	89 27       	eor	r24, r25
    186a:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    186c:	61 15       	cp	r22, r1
    186e:	71 05       	cpc	r23, r1
    1870:	29 f4       	brne	.+10     	; 0x187c <pb_proto_handle+0x410>
    1872:	2d c0       	rjmp	.+90     	; 0x18ce <pb_proto_handle+0x462>
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
    1874:	80 81       	ld	r24, Z
    1876:	84 fd       	sbrc	r24, 4
    1878:	09 c0       	rjmp	.+18     	; 0x188c <pb_proto_handle+0x420>
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <pb_proto_handle+0x42c>
    187c:	0a e7       	ldi	r16, 0x7A	; 122
    187e:	11 e0       	ldi	r17, 0x01	; 1
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    1884:	e6 e2       	ldi	r30, 0x26	; 38
    1886:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    1888:	49 e2       	ldi	r20, 0x29	; 41
    188a:	50 e0       	ldi	r21, 0x00	; 0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    188c:	80 81       	ld	r24, Z
    188e:	83 fd       	sbrc	r24, 3
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <pb_proto_handle+0x42c>
    1892:	80 81       	ld	r24, Z
    1894:	84 fd       	sbrc	r24, 4
    1896:	ee cf       	rjmp	.-36     	; 0x1874 <pb_proto_handle+0x408>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    1898:	da 01       	movw	r26, r20
    189a:	8c 91       	ld	r24, X
    189c:	d8 01       	movw	r26, r16
    189e:	8c 93       	st	X, r24
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <pb_proto_handle+0x43c>

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
    18a2:	80 81       	ld	r24, Z
    18a4:	84 ff       	sbrs	r24, 4
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <pb_proto_handle+0x448>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    18a8:	80 81       	ld	r24, Z
    18aa:	83 ff       	sbrs	r24, 3
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <pb_proto_handle+0x448>
    18ae:	80 81       	ld	r24, Z
    18b0:	84 fd       	sbrc	r24, 4
    18b2:	f7 cf       	rjmp	.-18     	; 0x18a2 <pb_proto_handle+0x436>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    18b4:	da 01       	movw	r26, r20
    18b6:	8c 91       	ld	r24, X
    18b8:	d8 01       	movw	r26, r16
    18ba:	11 96       	adiw	r26, 0x01	; 1
    18bc:	8c 93       	st	X, r24

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    18be:	2f 5f       	subi	r18, 0xFF	; 255
    18c0:	3f 4f       	sbci	r19, 0xFF	; 255
    18c2:	26 17       	cp	r18, r22
    18c4:	37 07       	cpc	r19, r23
    18c6:	18 f4       	brcc	.+6      	; 0x18ce <pb_proto_handle+0x462>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    18c8:	0e 5f       	subi	r16, 0xFE	; 254
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	df cf       	rjmp	.-66     	; 0x188c <pb_proto_handle+0x420>
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
  }
  sei();
    18ce:	78 94       	sei
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    18d0:	e6 e2       	ldi	r30, 0x26	; 38
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & SEL))
			continue;

		PAR_STATUS_PORT ^= BUSY;
    18d4:	a8 e2       	ldi	r26, 0x28	; 40
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	94 e0       	ldi	r25, 0x04	; 4
  sei();
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    18da:	80 81       	ld	r24, Z
    18dc:	83 fd       	sbrc	r24, 3
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <pb_proto_handle+0x47a>
    18e0:	80 81       	ld	r24, Z
    18e2:	84 fd       	sbrc	r24, 4
    18e4:	fa cf       	rjmp	.-12     	; 0x18da <pb_proto_handle+0x46e>
		if(!(PAR_STATUS_PIN & SEL))
    18e6:	80 81       	ld	r24, Z
    18e8:	84 ff       	sbrs	r24, 4
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <pb_proto_handle+0x492>
			continue;

		PAR_STATUS_PORT ^= BUSY;
    18ec:	8c 91       	ld	r24, X
    18ee:	89 27       	eor	r24, r25
    18f0:	8c 93       	st	X, r24
		// Wait for POUT == 0
		while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    18f2:	80 81       	ld	r24, Z
    18f4:	83 ff       	sbrs	r24, 3
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <pb_proto_handle+0x492>
    18f8:	80 81       	ld	r24, Z
    18fa:	84 fd       	sbrc	r24, 4
    18fc:	fa cf       	rjmp	.-12     	; 0x18f2 <pb_proto_handle+0x486>
  } while(!(PAR_STATUS_PIN & SEL));
    18fe:	80 81       	ld	r24, Z
    1900:	84 ff       	sbrs	r24, 4
    1902:	eb cf       	rjmp	.-42     	; 0x18da <pb_proto_handle+0x46e>
  // error?
  if(i<words)
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT ^= BUSY;
    1904:	e8 e2       	ldi	r30, 0x28	; 40
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	94 e0       	ldi	r25, 0x04	; 4
    190c:	89 27       	eor	r24, r25
    190e:	80 83       	st	Z, r24

  *ret_size = i << 1;
    1910:	6b 01       	movw	r12, r22
    1912:	cc 0c       	add	r12, r12
    1914:	dd 1c       	adc	r13, r13
    1916:	02 c0       	rjmp	.+4      	; 0x191c <pb_proto_handle+0x4b0>
    1918:	cc 24       	eor	r12, r12
    191a:	dd 24       	eor	r13, r13
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t parWaitForSel(uint8_t select_state, uint8_t state_flag) {
  g_uwTimer100us = 0;
    191c:	10 92 52 01 	sts	0x0152, r1
    1920:	10 92 51 01 	sts	0x0151, r1
  while(g_uwTimer100us < pb_proto_timeout) {
    1924:	20 91 3a 01 	lds	r18, 0x013A
    1928:	30 91 3b 01 	lds	r19, 0x013B
    if(((PAR_STATUS_PIN & SEL) >> SEL_PIN) == select_state)
    192c:	e6 e2       	ldi	r30, 0x26	; 38
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <pb_proto_handle+0x4cc>
    1932:	80 81       	ld	r24, Z
    1934:	84 ff       	sbrs	r24, 4
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <pb_proto_handle+0x4da>
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t parWaitForSel(uint8_t select_state, uint8_t state_flag) {
  g_uwTimer100us = 0;
  while(g_uwTimer100us < pb_proto_timeout) {
    1938:	80 91 51 01 	lds	r24, 0x0151
    193c:	90 91 52 01 	lds	r25, 0x0152
    1940:	82 17       	cp	r24, r18
    1942:	93 07       	cpc	r25, r19
    1944:	b0 f3       	brcs	.-20     	; 0x1932 <pb_proto_handle+0x4c6>

  // wait for SEL == 0
  parWaitForSel(0, PBPROTO_STAGE_END_SELECT);

  // reset BUSY = 0
  PAR_STATUS_PORT &= ~BUSY;
    1946:	e8 e2       	ldi	r30, 0x28	; 40
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8b 7f       	andi	r24, 0xFB	; 251
    194e:	80 83       	st	Z, r24
    1950:	e0 90 84 00 	lds	r14, 0x0084
    1954:	f0 90 85 00 	lds	r15, 0x0085
  // Read timer - assuming transfer will be much shorter than 100us
  // TODO(KaiN#7): is it really that short?
  uint16_t uwTimeDelta = timerGetState();

  // Amiga sent data - process it
  if(result == PBPROTO_STATUS_OK) {
    1958:	b1 e0       	ldi	r27, 0x01	; 1
    195a:	bb 16       	cp	r11, r27
    195c:	71 f4       	brne	.+28     	; 0x197a <pb_proto_handle+0x50e>
    if((cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST)) {
    195e:	e1 e1       	ldi	r30, 0x11	; 17
    1960:	ae 16       	cp	r10, r30
    1962:	21 f0       	breq	.+8      	; 0x196c <pb_proto_handle+0x500>
    1964:	f3 e3       	ldi	r31, 0x33	; 51
    1966:	af 16       	cp	r10, r31
    1968:	09 f0       	breq	.+2      	; 0x196c <pb_proto_handle+0x500>
    196a:	61 c0       	rjmp	.+194    	; 0x1a2e <pb_proto_handle+0x5c2>
      result = packetProcessFn(uwParDataSize);
    196c:	e0 91 46 01 	lds	r30, 0x0146
    1970:	f0 91 47 01 	lds	r31, 0x0147
    1974:	c6 01       	movw	r24, r12
    1976:	09 95       	icall
    1978:	b8 2e       	mov	r11, r24
    }
  }

  // fill in stats
  ps->cmd = cmd;
    197a:	0a e6       	ldi	r16, 0x6A	; 106
    197c:	11 e0       	ldi	r17, 0x01	; 1
    197e:	f8 01       	movw	r30, r16
    1980:	a1 92       	st	Z+, r10
  ps->status = result;
    1982:	b0 82       	st	Z, r11
  ps->size = uwParDataSize;
    1984:	d8 01       	movw	r26, r16
    1986:	15 96       	adiw	r26, 0x05	; 5
    1988:	dc 92       	st	X, r13
    198a:	ce 92       	st	-X, r12
    198c:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = uwTimeDelta;
    198e:	17 96       	adiw	r26, 0x07	; 7
    1990:	fc 92       	st	X, r15
    1992:	ee 92       	st	-X, r14
    1994:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timerCalculateKbps(uwParDataSize, uwTimeDelta);
    1996:	c6 01       	movw	r24, r12
    1998:	b7 01       	movw	r22, r14
    199a:	0e 94 85 02 	call	0x50a	; 0x50a <timerCalculateKbps>
    199e:	f8 01       	movw	r30, r16
    19a0:	91 87       	std	Z+9, r25	; 0x09
    19a2:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    19a4:	d8 01       	movw	r26, r16
    19a6:	1c 96       	adiw	r26, 0x0c	; 12
    19a8:	6d 92       	st	X+, r6
    19aa:	7d 92       	st	X+, r7
    19ac:	8d 92       	st	X+, r8
    19ae:	9c 92       	st	X, r9
    19b0:	1f 97       	sbiw	r26, 0x0f	; 15
  ps->is_send = (cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST);
    19b2:	b1 e1       	ldi	r27, 0x11	; 17
    19b4:	ab 16       	cp	r10, r27
    19b6:	31 f0       	breq	.+12     	; 0x19c4 <pb_proto_handle+0x558>
    19b8:	e3 e3       	ldi	r30, 0x33	; 51
    19ba:	ae 16       	cp	r10, r30
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <pb_proto_handle+0x558>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <pb_proto_handle+0x55c>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	ec e6       	ldi	r30, 0x6C	; 108
    19ca:	f1 e0       	ldi	r31, 0x01	; 1
    19cc:	81 93       	st	Z+, r24
  ps->stats_id = ps->is_send ? STATS_ID_PB_TX : STATS_ID_PB_RX;
    19ce:	10 82       	st	Z, r1
    19d0:	88 23       	and	r24, r24
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <pb_proto_handle+0x56c>
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 83       	st	Z, r24
  ps->recv_delta = ps->is_send ? 0 : (uint16_t)(ps->ts - trigger_ts);
    19d8:	80 91 6c 01 	lds	r24, 0x016C
    19dc:	88 23       	and	r24, r24
    19de:	19 f0       	breq	.+6      	; 0x19e6 <pb_proto_handle+0x57a>
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	0a c0       	rjmp	.+20     	; 0x19fa <pb_proto_handle+0x58e>
    19e6:	20 91 76 01 	lds	r18, 0x0176
    19ea:	30 91 77 01 	lds	r19, 0x0177
    19ee:	80 91 48 01 	lds	r24, 0x0148
    19f2:	90 91 49 01 	lds	r25, 0x0149
    19f6:	28 1b       	sub	r18, r24
    19f8:	39 0b       	sbc	r19, r25
    19fa:	30 93 75 01 	sts	0x0175, r19
    19fe:	20 93 74 01 	sts	0x0174, r18
    1a02:	8b 2d       	mov	r24, r11
  return result;
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	cf 90       	pop	r12
    1a18:	bf 90       	pop	r11
    1a1a:	af 90       	pop	r10
    1a1c:	9f 90       	pop	r9
    1a1e:	8f 90       	pop	r8
    1a20:	7f 90       	pop	r7
    1a22:	6f 90       	pop	r6
    1a24:	5f 90       	pop	r5
    1a26:	4f 90       	pop	r4
    1a28:	3f 90       	pop	r3
    1a2a:	2f 90       	pop	r2
    1a2c:	08 95       	ret
      result = packetProcessFn(uwParDataSize);
    }
  }

  // fill in stats
  ps->cmd = cmd;
    1a2e:	0a e6       	ldi	r16, 0x6A	; 106
    1a30:	11 e0       	ldi	r17, 0x01	; 1
    1a32:	f8 01       	movw	r30, r16
    1a34:	a1 92       	st	Z+, r10
  ps->status = result;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	80 83       	st	Z, r24
  ps->size = uwParDataSize;
    1a3a:	d8 01       	movw	r26, r16
    1a3c:	15 96       	adiw	r26, 0x05	; 5
    1a3e:	dc 92       	st	X, r13
    1a40:	ce 92       	st	-X, r12
    1a42:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = uwTimeDelta;
    1a44:	17 96       	adiw	r26, 0x07	; 7
    1a46:	fc 92       	st	X, r15
    1a48:	ee 92       	st	-X, r14
    1a4a:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timerCalculateKbps(uwParDataSize, uwTimeDelta);
    1a4c:	c6 01       	movw	r24, r12
    1a4e:	b7 01       	movw	r22, r14
    1a50:	0e 94 85 02 	call	0x50a	; 0x50a <timerCalculateKbps>
    1a54:	f8 01       	movw	r30, r16
    1a56:	91 87       	std	Z+9, r25	; 0x09
    1a58:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    1a5a:	d8 01       	movw	r26, r16
    1a5c:	1c 96       	adiw	r26, 0x0c	; 12
    1a5e:	6d 92       	st	X+, r6
    1a60:	7d 92       	st	X+, r7
    1a62:	8d 92       	st	X+, r8
    1a64:	9c 92       	st	X, r9
    1a66:	1f 97       	sbiw	r26, 0x0f	; 15
    1a68:	aa cf       	rjmp	.-172    	; 0x19be <pb_proto_handle+0x552>

00001a6a <pb_test_send_packet>:
	// NOTE: UART - time_stamp_spc() [PB_TEST] off\r\n
}

void pb_test_send_packet(uint8_t silent)
{
  silent_mode = silent;
    1a6a:	80 93 4e 01 	sts	0x014E, r24
  parRequestAmiRead();
    1a6e:	0e 94 ef 09 	call	0x13de	; 0x13de <parRequestAmiRead>
}
    1a72:	08 95       	ret

00001a74 <pb_test_toggle_auto>:

void pb_test_toggle_auto(void)
{
  auto_mode = !auto_mode;
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	80 91 4d 01 	lds	r24, 0x014D
    1a7a:	88 23       	and	r24, r24
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <pb_test_toggle_auto+0xc>
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	90 93 4d 01 	sts	0x014D, r25
		// NOTE: UART - on
  } else {
		// NOTE: UART - off
  }

  if(auto_mode) {
    1a84:	99 23       	and	r25, r25
    1a86:	29 f0       	breq	.+10     	; 0x1a92 <pb_test_toggle_auto+0x1e>
    // send first packet
    pb_test_send_packet(1);
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <pb_test_send_packet>
    // clear stats
    stats_reset();
    1a8e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <stats_reset>
    1a92:	08 95       	ret

00001a94 <pb_test_loop>:
      pb_test_toggle_auto();
    }
  }
}

void pb_test_loop(void) {
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
	// NOTE: time_stamp_spc() [PB_TEST] on\r\n

  stats_reset();
    1a9c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <stats_reset>

  // setup handlers for pb testing
  pb_proto_init(fill_pkt, proc_pkt);
    1aa0:	82 ec       	ldi	r24, 0xC2	; 194
    1aa2:	9d e0       	ldi	r25, 0x0D	; 13
    1aa4:	6f e8       	ldi	r22, 0x8F	; 143
    1aa6:	7d e0       	ldi	r23, 0x0D	; 13
    1aa8:	0e 94 cc 09 	call	0x1398	; 0x1398 <pb_proto_init>
  auto_mode = 0;
    1aac:	10 92 4d 01 	sts	0x014D, r1
  toggle_request = 0;
    1ab0:	10 92 4c 01 	sts	0x014C, r1
  silent_mode = 0;
    1ab4:	10 92 4e 01 	sts	0x014E, r1
    if(!silent_mode) {
      dump_pb_cmd(&pb_proto_stat);
    }

    // next iteration?
    if(pb_proto_stat.is_send) {
    1ab8:	cc e6       	ldi	r28, 0x6C	; 108
    1aba:	d1 e0       	ldi	r29, 0x01	; 1
  // ok!
  if(status == PBPROTO_STATUS_OK) {

    // always dump I/O
    if(!silent_mode) {
      dump_pb_cmd(&pb_proto_stat);
    1abc:	0a e6       	ldi	r16, 0x6A	; 106
    1abe:	11 e0       	ldi	r17, 0x01	; 1
    1ac0:	21 c0       	rjmp	.+66     	; 0x1b04 <pb_test_loop+0x70>

// ----- function table -----

static void pb_test_worker(void)
{
  uint8_t status = pb_util_handle();
    1ac2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <pb_util_handle>

  // ok!
  if(status == PBPROTO_STATUS_OK) {
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	a9 f4       	brne	.+42     	; 0x1af4 <pb_test_loop+0x60>

    // always dump I/O
    if(!silent_mode) {
    1aca:	80 91 4e 01 	lds	r24, 0x014E
    1ace:	88 23       	and	r24, r24
    1ad0:	19 f4       	brne	.+6      	; 0x1ad8 <pb_test_loop+0x44>
      dump_pb_cmd(&pb_proto_stat);
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	0e 94 07 07 	call	0xe0e	; 0xe0e <dump_pb_cmd>
    }

    // next iteration?
    if(pb_proto_stat.is_send) {
    1ad8:	88 81       	ld	r24, Y
    1ada:	88 23       	and	r24, r24
    1adc:	99 f0       	breq	.+38     	; 0x1b04 <pb_test_loop+0x70>
      if(auto_mode) {
    1ade:	80 91 4d 01 	lds	r24, 0x014D
    1ae2:	88 23       	and	r24, r24
    1ae4:	21 f0       	breq	.+8      	; 0x1aee <pb_test_loop+0x5a>
        // next iteration after
        pb_test_send_packet(1);
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <pb_test_send_packet>
    1aec:	0b c0       	rjmp	.+22     	; 0x1b04 <pb_test_loop+0x70>
      } else {
        silent_mode = 0;
    1aee:	10 92 4e 01 	sts	0x014E, r1
    1af2:	08 c0       	rjmp	.+16     	; 0x1b04 <pb_test_loop+0x70>
      }
    }
  }
  // pb proto failed with an error
  else if(status != PBPROTO_STATUS_IDLE) {
    1af4:	88 23       	and	r24, r24
    1af6:	31 f0       	breq	.+12     	; 0x1b04 <pb_test_loop+0x70>
    // disable auto mode
    if(auto_mode) {
    1af8:	80 91 4d 01 	lds	r24, 0x014D
    1afc:	88 23       	and	r24, r24
    1afe:	11 f0       	breq	.+4      	; 0x1b04 <pb_test_loop+0x70>
      pb_test_toggle_auto();
    1b00:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <pb_test_toggle_auto>
  auto_mode = 0;
  toggle_request = 0;
  silent_mode = 0;

  // test loop
  while(run_mode == RUN_MODE_PB_TEST) {
    1b04:	80 91 42 01 	lds	r24, 0x0142
    1b08:	82 30       	cpi	r24, 0x02	; 2
    1b0a:	d9 f2       	breq	.-74     	; 0x1ac2 <pb_test_loop+0x2e>
    // NOTE: UART cmd_worker handling was here, reset by loop break

    pb_test_worker();
  }

  stats_dump(1,0);
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	0e 94 08 10 	call	0x2010	; 0x2010 <stats_dump>

	// NOTE: UART - time_stamp_spc() [PB_TEST] off\r\n
}
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	08 95       	ret

00001b1e <proc_pkt>:

  return PBPROTO_STATUS_OK;
}

static uint8_t proc_pkt(uint16_t uwSize)
{
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	c0 e0       	ldi	r28, 0x00	; 0
    1b24:	d0 e0       	ldi	r29, 0x00	; 0
    1b26:	20 91 5f 01 	lds	r18, 0x015F
    1b2a:	30 91 60 01 	lds	r19, 0x0160
    1b2e:	28 17       	cp	r18, r24
    1b30:	39 07       	cpc	r19, r25
    1b32:	11 f0       	breq	.+4      	; 0x1b38 <proc_pkt+0x1a>
    1b34:	c1 e0       	ldi	r28, 0x01	; 1
    1b36:	d0 e0       	ldi	r29, 0x00	; 0
    errors = 1;
    // NOTE: UART - ERR: uwSize\r\n
  }

  // +0: check dst mac
  if(!net_compare_mac(g_pDataBuffer, net_bcast_mac)) {
    1b38:	8a e7       	ldi	r24, 0x7A	; 122
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	71 e0       	ldi	r23, 0x01	; 1
    1b40:	0e 94 68 08 	call	0x10d0	; 0x10d0 <net_compare_mac>
    1b44:	88 23       	and	r24, r24
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <proc_pkt+0x2c>
    errors++;
    1b48:	21 96       	adiw	r28, 0x01	; 1
    // NOTE: UART - ERR: dst mac\r\n
  }
  // +6: check src mac
  if(!net_compare_mac(g_pDataBuffer+6, param.mac_addr)) {
    1b4a:	80 e8       	ldi	r24, 0x80	; 128
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	67 e5       	ldi	r22, 0x57	; 87
    1b50:	71 e0       	ldi	r23, 0x01	; 1
    1b52:	0e 94 68 08 	call	0x10d0	; 0x10d0 <net_compare_mac>
    1b56:	88 23       	and	r24, r24
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <proc_pkt+0x3e>
    errors++;
    1b5a:	21 96       	adiw	r28, 0x01	; 1
    // NOTE: UART - ERR: src mac\r\n
  }
  // +12,+13: pkt type
  uint8_t ptype_hi = (uint8_t)(param.test_ptype >> 8);
    1b5c:	e1 e6       	ldi	r30, 0x61	; 97
    1b5e:	f1 e0       	ldi	r31, 0x01	; 1
    1b60:	20 81       	ld	r18, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
  uint8_t ptype_lo = (uint8_t)(param.test_ptype & 0xff);
  if((g_pDataBuffer[12] != ptype_hi) || (g_pDataBuffer[13] != ptype_lo)) {
    1b64:	80 91 86 01 	lds	r24, 0x0186
    1b68:	89 17       	cp	r24, r25
    1b6a:	19 f4       	brne	.+6      	; 0x1b72 <proc_pkt+0x54>
    1b6c:	80 91 87 01 	lds	r24, 0x0187
    1b70:	82 13       	cpse	r24, r18
    errors++;
    1b72:	21 96       	adiw	r28, 0x01	; 1
    uart_send_spc();
  }
  uart_send_crlf();
#endif

  if(errors > 0) {
    1b74:	cd 2b       	or	r28, r29
    1b76:	11 f4       	brne	.+4      	; 0x1b7c <proc_pkt+0x5e>
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <proc_pkt+0x60>
    1b7c:	86 e0       	ldi	r24, 0x06	; 6
		// NOTE: UART - TOTAL ERRORS hex_word(errors)\r\n
    return PBPROTO_STATUS_ERROR;
  } else {
    return PBPROTO_STATUS_OK;
  }
}
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	08 95       	ret

00001b84 <fill_pkt>:
static uint8_t silent_mode;

// ----- Packet Callbacks -----

static uint8_t fill_pkt(uint16_t *pFilledSize)
{
    1b84:	ef 92       	push	r14
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	ec 01       	movw	r28, r24
  *pFilledSize = param.test_plen;
    1b92:	80 91 5f 01 	lds	r24, 0x015F
    1b96:	90 91 60 01 	lds	r25, 0x0160
    1b9a:	99 83       	std	Y+1, r25	; 0x01
    1b9c:	88 83       	st	Y, r24
  if(*pFilledSize > DATABUF_SIZE) {
    1b9e:	8b 5e       	subi	r24, 0xEB	; 235
    1ba0:	95 40       	sbci	r25, 0x05	; 5
    1ba2:	10 f0       	brcs	.+4      	; 0x1ba8 <fill_pkt+0x24>
    1ba4:	85 e0       	ldi	r24, 0x05	; 5
    1ba6:	27 c0       	rjmp	.+78     	; 0x1bf6 <fill_pkt+0x72>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;
  }

  net_copy_mac(net_bcast_mac, g_pDataBuffer);
    1ba8:	0f 2e       	mov	r0, r31
    1baa:	fa e7       	ldi	r31, 0x7A	; 122
    1bac:	ef 2e       	mov	r14, r31
    1bae:	f1 e0       	ldi	r31, 0x01	; 1
    1bb0:	ff 2e       	mov	r15, r31
    1bb2:	f0 2d       	mov	r31, r0
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	b7 01       	movw	r22, r14
    1bba:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>
  net_copy_mac(param.mac_addr, g_pDataBuffer+6);
    1bbe:	07 e5       	ldi	r16, 0x57	; 87
    1bc0:	11 e0       	ldi	r17, 0x01	; 1
    1bc2:	b7 01       	movw	r22, r14
    1bc4:	6a 5f       	subi	r22, 0xFA	; 250
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	c8 01       	movw	r24, r16
    1bca:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>

  uint8_t ptype_hi = (uint8_t)(param.test_ptype >> 8);
    1bce:	06 5f       	subi	r16, 0xF6	; 246
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	90 81       	ld	r25, Z
    1bd6:	81 81       	ldd	r24, Z+1	; 0x01
  uint8_t ptype_lo = (uint8_t)(param.test_ptype & 0xff);
  g_pDataBuffer[12] = ptype_hi;
    1bd8:	f7 01       	movw	r30, r14
    1bda:	84 87       	std	Z+12, r24	; 0x0c
  g_pDataBuffer[13] = ptype_lo;
    1bdc:	95 87       	std	Z+13, r25	; 0x0d

  uint8_t *ptr = g_pDataBuffer + 14;
  uint16_t num = *pFilledSize - 14;
    1bde:	88 81       	ld	r24, Y
    1be0:	99 81       	ldd	r25, Y+1	; 0x01
    1be2:	0e 97       	sbiw	r24, 0x0e	; 14
  uint8_t val = 0;
  while(num > 0) {
    1be4:	39 f0       	breq	.+14     	; 0x1bf4 <fill_pkt+0x70>
    1be6:	e8 e8       	ldi	r30, 0x88	; 136
    1be8:	f1 e0       	ldi	r31, 0x01	; 1
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    *ptr = val;
    1bec:	21 93       	st	Z+, r18
    ptr++;
    val++;
    1bee:	2f 5f       	subi	r18, 0xFF	; 255
    num--;
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
  g_pDataBuffer[13] = ptype_lo;

  uint8_t *ptr = g_pDataBuffer + 14;
  uint16_t num = *pFilledSize - 14;
  uint8_t val = 0;
  while(num > 0) {
    1bf2:	e1 f7       	brne	.-8      	; 0x1bec <fill_pkt+0x68>
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    val++;
    num--;
  }

  return PBPROTO_STATUS_OK;
}
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	08 95       	ret

00001c04 <pb_util_handle>:
#include "stats.h"
#include "dump.h"
#include "main.h"

uint8_t pb_util_handle(void)
{
    1c04:	0f 93       	push	r16
  const pb_proto_stat_t *ps = &pb_proto_stat;

  // call protocol handler (low level transmit)
  uint8_t status = pb_proto_handle();
    1c06:	0e 94 36 0a 	call	0x146c	; 0x146c <pb_proto_handle>
    1c0a:	08 2f       	mov	r16, r24
  if(status == PBPROTO_STATUS_IDLE) {
    1c0c:	88 23       	and	r24, r24
    1c0e:	29 f1       	breq	.+74     	; 0x1c5a <pb_util_handle+0x56>
		// Nothing done... return
    return PBPROTO_STATUS_IDLE;
	}

  if(status == PBPROTO_STATUS_OK) {
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	91 f4       	brne	.+36     	; 0x1c38 <pb_util_handle+0x34>
		// Everything went OK
    // Update stats
    stats_update_ok(ps->stats_id, ps->size, ps->rate);
    1c14:	ed e6       	ldi	r30, 0x6D	; 109
    1c16:	f1 e0       	ldi	r31, 0x01	; 1
    1c18:	61 81       	ldd	r22, Z+1	; 0x01
    1c1a:	72 81       	ldd	r23, Z+2	; 0x02
    1c1c:	45 81       	ldd	r20, Z+5	; 0x05
    1c1e:	56 81       	ldd	r21, Z+6	; 0x06
    1c20:	80 81       	ld	r24, Z
    1c22:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <stats_update_ok>
    if(global_verbose)
    1c26:	80 91 43 01 	lds	r24, 0x0143
    1c2a:	88 23       	and	r24, r24
    1c2c:	b1 f0       	breq	.+44     	; 0x1c5a <pb_util_handle+0x56>
      dump_pb_cmd(ps); // In interactive (verbose) mode show result
    1c2e:	8a e6       	ldi	r24, 0x6A	; 106
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 07 07 	call	0xe0e	; 0xe0e <dump_pb_cmd>
    1c36:	11 c0       	rjmp	.+34     	; 0x1c5a <pb_util_handle+0x56>
  }
  else {
		// PB proto failed with an error
    // Dump error
    dump_pb_cmd(ps);
    1c38:	8a e6       	ldi	r24, 0x6A	; 106
    1c3a:	91 e0       	ldi	r25, 0x01	; 1
    1c3c:	0e 94 07 07 	call	0xe0e	; 0xe0e <dump_pb_cmd>
    1c40:	e0 91 6d 01 	lds	r30, 0x016D
    1c44:	8c e0       	ldi	r24, 0x0C	; 12
    1c46:	e8 9f       	mul	r30, r24
    1c48:	f0 01       	movw	r30, r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	ec 59       	subi	r30, 0x9C	; 156
    1c4e:	f8 4f       	sbci	r31, 0xF8	; 248
    // Update stats
    stats_get(ps->stats_id)->err++;
    1c50:	86 81       	ldd	r24, Z+6	; 0x06
    1c52:	97 81       	ldd	r25, Z+7	; 0x07
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	97 83       	std	Z+7, r25	; 0x07
    1c58:	86 83       	std	Z+6, r24	; 0x06
  }
  return status;
}
    1c5a:	80 2f       	mov	r24, r16
    1c5c:	0f 91       	pop	r16
    1c5e:	08 95       	ret

00001c60 <pio_test_loop>:
/**
 * Packet IO test mode loop.
 * Used to benchmark Amiga-PlipBox comm.
 */
void pio_test_loop(void)
{
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <pio_test_loop+0xe>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62

  // NOTE: UART - time_stamp_spc() [PIO_TEST] on\r\n

  enc28j60_init(param.mac_addr, pio_util_get_init_flags());
    1c72:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <pio_util_get_init_flags>
    1c76:	68 2f       	mov	r22, r24
    1c78:	87 e5       	ldi	r24, 0x57	; 87
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <enc28j60_init>
  stats_reset();
    1c80:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <stats_reset>
    // NOTE: UART cmd_worker() processing here, reset by loop break

    // incoming packet?
    if(enc28j60_has_recv()) {
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
    1c84:	7e 01       	movw	r14, r28
    1c86:	08 94       	sec
    1c88:	e1 1c       	adc	r14, r1
    1c8a:	f1 1c       	adc	r15, r1
            // directly send back test packet
            pio_util_send_packet(size);
          }
        }
      } else {
        stats_get(STATS_ID_PIO_RX)->err++;
    1c8c:	02 e8       	ldi	r16, 0x82	; 130
    1c8e:	17 e0       	ldi	r17, 0x07	; 7
    1c90:	20 c0       	rjmp	.+64     	; 0x1cd2 <pio_test_loop+0x72>
  while(run_mode == RUN_MODE_PIO_TEST) {
    // handle commands
    // NOTE: UART cmd_worker() processing here, reset by loop break

    // incoming packet?
    if(enc28j60_has_recv()) {
    1c92:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <enc28j60_has_recv>
    1c96:	88 23       	and	r24, r24
    1c98:	e1 f0       	breq	.+56     	; 0x1cd2 <pio_test_loop+0x72>
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
    1c9a:	c7 01       	movw	r24, r14
    1c9c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <pio_util_recv_packet>
    1ca0:	88 23       	and	r24, r24
    1ca2:	89 f4       	brne	.+34     	; 0x1cc6 <pio_test_loop+0x66>
        // handle ARP?
        if(!pio_util_handle_arp(size)) {
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <pio_util_handle_arp>
    1cac:	88 23       	and	r24, r24
    1cae:	89 f4       	brne	.+34     	; 0x1cd2 <pio_test_loop+0x72>
          // is it a UDP test packet?
          if(pio_util_handle_udp_test(size)) {
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <pio_util_handle_udp_test>
    1cb8:	88 23       	and	r24, r24
    1cba:	59 f0       	breq	.+22     	; 0x1cd2 <pio_test_loop+0x72>
            // directly send back test packet
            pio_util_send_packet(size);
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc0:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <pio_util_send_packet>
    1cc4:	06 c0       	rjmp	.+12     	; 0x1cd2 <pio_test_loop+0x72>
          }
        }
      } else {
        stats_get(STATS_ID_PIO_RX)->err++;
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	91 83       	std	Z+1, r25	; 0x01
    1cd0:	80 83       	st	Z, r24
  // NOTE: UART - time_stamp_spc() [PIO_TEST] on\r\n

  enc28j60_init(param.mac_addr, pio_util_get_init_flags());
  stats_reset();

  while(run_mode == RUN_MODE_PIO_TEST) {
    1cd2:	80 91 42 01 	lds	r24, 0x0142
    1cd6:	83 30       	cpi	r24, 0x03	; 3
    1cd8:	e1 f2       	breq	.-72     	; 0x1c92 <pio_test_loop+0x32>
        stats_get(STATS_ID_PIO_RX)->err++;
      }
    }
  }

  stats_dump(0,1);
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	0e 94 08 10 	call	0x2010	; 0x2010 <stats_dump>
  enc28j60_exit();
    1ce2:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <enc28j60_exit>

	// NOTE: UART - time_stamp_spc() [PIO_TEST] off\r\n
}
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	08 95       	ret

00001cf8 <pio_util_get_init_flags>:

uint8_t pio_util_get_init_flags()
{
  uint8_t flags = PIO_INIT_BROAD_CAST;

  if(param.flow_ctl) {
    1cf8:	80 91 5d 01 	lds	r24, 0x015D
    1cfc:	88 23       	and	r24, r24
    1cfe:	11 f0       	breq	.+4      	; 0x1d04 <pio_util_get_init_flags+0xc>
    1d00:	9c e0       	ldi	r25, 0x0C	; 12
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <pio_util_get_init_flags+0xe>
    1d04:	94 e0       	ldi	r25, 0x04	; 4
    flags |= PIO_INIT_FLOW_CONTROL;
  }
  if(param.full_duplex) {
    1d06:	80 91 5e 01 	lds	r24, 0x015E
    1d0a:	81 11       	cpse	r24, r1
    flags |= PIO_INIT_FULL_DUPLEX;
    1d0c:	91 60       	ori	r25, 0x01	; 1
  }

  return flags;
}
    1d0e:	89 2f       	mov	r24, r25
    1d10:	08 95       	ret

00001d12 <pio_util_handle_udp_test>:

  return 1;
}

uint8_t pio_util_handle_udp_test(uint16_t size)
{
    1d12:	8f 92       	push	r8
    1d14:	9f 92       	push	r9
    1d16:	af 92       	push	r10
    1d18:	bf 92       	push	r11
    1d1a:	cf 92       	push	r12
    1d1c:	df 92       	push	r13
    1d1e:	ef 92       	push	r14
    1d20:	ff 92       	push	r15
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
  uint8_t *ip_buf = g_pDataBuffer + ETH_HDR_SIZE;
  uint8_t *udp_buf = ip_buf + ip_get_hdr_length(ip_buf);
    1d2a:	08 e8       	ldi	r16, 0x88	; 136
    1d2c:	11 e0       	ldi	r17, 0x01	; 1
    1d2e:	f8 01       	movw	r30, r16
    1d30:	80 81       	ld	r24, Z
    1d32:	88 0f       	add	r24, r24
    1d34:	88 0f       	add	r24, r24
    1d36:	8c 73       	andi	r24, 0x3C	; 60
    1d38:	58 01       	movw	r10, r16
    1d3a:	a8 0e       	add	r10, r24
    1d3c:	b1 1c       	adc	r11, r1
    1d3e:	c5 01       	movw	r24, r10
    1d40:	02 96       	adiw	r24, 0x02	; 2
    1d42:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
    1d46:	ec 01       	movw	r28, r24
  const uint8_t *dst_ip = ip_get_tgt_ip(ip_buf);
  uint16_t dst_port = udp_get_tgt_port(udp_buf);
  const uint8_t *data_ptr = udp_get_data_ptr(udp_buf);

  // for us?
  if(net_compare_ip(param.test_ip, dst_ip) && (dst_port == param.test_port)) {
    1d48:	00 5f       	subi	r16, 0xF0	; 240
    1d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4c:	83 e6       	ldi	r24, 0x63	; 99
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	b8 01       	movw	r22, r16
    1d52:	0e 94 7e 08 	call	0x10fc	; 0x10fc <net_compare_ip>
    1d56:	88 23       	and	r24, r24
    1d58:	d9 f1       	breq	.+118    	; 0x1dd0 <pio_util_handle_udp_test+0xbe>
    1d5a:	80 90 67 01 	lds	r8, 0x0167
    1d5e:	90 90 68 01 	lds	r9, 0x0168
    1d62:	8c 16       	cp	r8, r28
    1d64:	9d 06       	cpc	r9, r29
    1d66:	a1 f5       	brne	.+104    	; 0x1dd0 <pio_util_handle_udp_test+0xbe>
    }

    // send UDP packet back again
    // flip IP/UDP
    const uint8_t *src_ip = ip_get_src_ip(ip_buf);
    net_copy_ip(src_ip, ip_buf + 16); // set tgt ip
    1d68:	04 e9       	ldi	r16, 0x94	; 148
    1d6a:	11 e0       	ldi	r17, 0x01	; 1
    1d6c:	b8 01       	movw	r22, r16
    1d6e:	6c 5f       	subi	r22, 0xFC	; 252
    1d70:	7f 4f       	sbci	r23, 0xFF	; 255
    1d72:	c8 01       	movw	r24, r16
    1d74:	0e 94 0b 08 	call	0x1016	; 0x1016 <net_copy_ip>
    net_copy_ip(param.test_ip, ip_buf + 12); // set src ip
    1d78:	0f 2e       	mov	r0, r31
    1d7a:	f3 e6       	ldi	r31, 0x63	; 99
    1d7c:	cf 2e       	mov	r12, r31
    1d7e:	f1 e0       	ldi	r31, 0x01	; 1
    1d80:	df 2e       	mov	r13, r31
    1d82:	f0 2d       	mov	r31, r0
    1d84:	c6 01       	movw	r24, r12
    1d86:	b8 01       	movw	r22, r16
    1d88:	0e 94 0b 08 	call	0x1016	; 0x1016 <net_copy_ip>
#define UDP_LENGTH_OFF    4
#define UDP_CHECKSUM_OFF  6
#define UDP_DATA_OFF      8

inline const uint8_t *udp_get_data_ptr(const uint8_t *udp_buf) { return udp_buf + UDP_DATA_OFF; }
inline uint16_t  udp_get_src_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_SRC_PORT_OFF); }
    1d8c:	c5 01       	movw	r24, r10
    1d8e:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
    1d92:	7c 01       	movw	r14, r24
    uint16_t src_port = udp_get_src_port(udp_buf);
    net_put_word(udp_buf + UDP_SRC_PORT_OFF, dst_port);
    1d94:	c5 01       	movw	r24, r10
    1d96:	b4 01       	movw	r22, r8
    1d98:	0e 94 26 08 	call	0x104c	; 0x104c <net_put_word>
    net_put_word(udp_buf + UDP_TGT_PORT_OFF, src_port);
    1d9c:	c5 01       	movw	r24, r10
    1d9e:	02 96       	adiw	r24, 0x02	; 2
    1da0:	b7 01       	movw	r22, r14
    1da2:	0e 94 26 08 	call	0x104c	; 0x104c <net_put_word>

    // flip eth
    net_copy_mac(g_pDataBuffer + ETH_OFF_SRC_MAC, g_pDataBuffer + ETH_OFF_TGT_MAC);
    1da6:	0f 2e       	mov	r0, r31
    1da8:	fc ee       	ldi	r31, 0xEC	; 236
    1daa:	ef 2e       	mov	r14, r31
    1dac:	ff ef       	ldi	r31, 0xFF	; 255
    1dae:	ff 2e       	mov	r15, r31
    1db0:	f0 2d       	mov	r31, r0
    1db2:	e0 0e       	add	r14, r16
    1db4:	f1 1e       	adc	r15, r17
    1db6:	0a 51       	subi	r16, 0x1A	; 26
    1db8:	10 40       	sbci	r17, 0x00	; 0
    1dba:	c7 01       	movw	r24, r14
    1dbc:	b8 01       	movw	r22, r16
    1dbe:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>
    net_copy_mac(param.mac_addr, g_pDataBuffer + ETH_OFF_SRC_MAC);
    1dc2:	c6 01       	movw	r24, r12
    1dc4:	0c 97       	sbiw	r24, 0x0c	; 12
    1dc6:	b7 01       	movw	r22, r14
    1dc8:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	01 c0       	rjmp	.+2      	; 0x1dd2 <pio_util_handle_udp_test+0xc0>

    return 1;
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
 } else {
 	return 0;
 }
}
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	bf 90       	pop	r11
    1de4:	af 90       	pop	r10
    1de6:	9f 90       	pop	r9
    1de8:	8f 90       	pop	r8
    1dea:	08 95       	ret

00001dec <pio_util_send_packet>:
  }
  return ubRecvResult;
}

uint8_t pio_util_send_packet(uint16_t size)
{
    1dec:	ff 92       	push	r15
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	ec 01       	movw	r28, r24
extern void timerDelay100us(uint16_t uwCount);

// ----- hardware timer -----

// 16 bit hw timer with 4us resolution
inline void timerReset(void) { TCNT1 = 0; }
    1df8:	04 e8       	ldi	r16, 0x84	; 132
    1dfa:	10 e0       	ldi	r17, 0x00	; 0
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	11 82       	std	Z+1, r1	; 0x01
    1e00:	10 82       	st	Z, r1
  timerReset();
  uint8_t result = enc28j60_send(g_pDataBuffer, size);
    1e02:	8a e7       	ldi	r24, 0x7A	; 122
    1e04:	91 e0       	ldi	r25, 0x01	; 1
    1e06:	be 01       	movw	r22, r28
    1e08:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <enc28j60_send>
    1e0c:	f8 2e       	mov	r15, r24
inline uint16_t  timerGetState(void) { return TCNT1; }
    1e0e:	f8 01       	movw	r30, r16
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
  // NOTE(KaiN#7): Is it really that short?
  uint16_t delta = timerGetState();

  uint16_t rate = timerCalculateKbps(size, delta);
    1e14:	ce 01       	movw	r24, r28
    1e16:	0e 94 85 02 	call	0x50a	; 0x50a <timerCalculateKbps>
    1e1a:	ac 01       	movw	r20, r24
  if(result == PIO_OK) {
    1e1c:	ff 20       	and	r15, r15
    1e1e:	29 f4       	brne	.+10     	; 0x1e2a <pio_util_send_packet+0x3e>
    stats_update_ok(STATS_ID_PIO_TX, size, rate);
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	be 01       	movw	r22, r28
    1e24:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <stats_update_ok>
    1e28:	07 c0       	rjmp	.+14     	; 0x1e38 <pio_util_send_packet+0x4c>
  }
  else {
    stats_get(STATS_ID_PIO_TX)->err++;
    1e2a:	ee e8       	ldi	r30, 0x8E	; 142
    1e2c:	f7 e0       	ldi	r31, 0x07	; 7
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
    } else {
			// NOTE: UART - ERROR=hex_byte(result)\r\n
    }
  }
  return result;
}
    1e38:	8f 2d       	mov	r24, r15
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	ff 90       	pop	r15
    1e44:	08 95       	ret

00001e46 <pio_util_handle_arp>:

uint8_t pio_util_handle_arp(uint16_t size)
{
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	ec 01       	movw	r28, r24
    1e54:	86 e8       	ldi	r24, 0x86	; 134
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
  uint16_t type = eth_get_pkt_type(g_pDataBuffer);
  if(type != ETH_TYPE_ARP) {
    1e5c:	86 50       	subi	r24, 0x06	; 6
    1e5e:	98 40       	sbci	r25, 0x08	; 8
    1e60:	d9 f5       	brne	.+118    	; 0x1ed8 <pio_util_handle_arp+0x92>
    return 0;
  }
  if(size <= ETH_HDR_SIZE) {
    1e62:	cf 30       	cpi	r28, 0x0F	; 15
    1e64:	d1 05       	cpc	r29, r1
    1e66:	c0 f1       	brcs	.+112    	; 0x1ed8 <pio_util_handle_arp+0x92>
  // payload buf/size
  uint8_t *pl_buf = g_pDataBuffer + ETH_HDR_SIZE;
  uint16_t pl_size = size - ETH_HDR_SIZE;

  // is an ARP request
  if(arp_is_ipv4(pl_buf, pl_size) && (arp_get_op(pl_buf) == ARP_REQUEST)) {
    1e68:	be 01       	movw	r22, r28
    1e6a:	6e 50       	subi	r22, 0x0E	; 14
    1e6c:	70 40       	sbci	r23, 0x00	; 0
    1e6e:	88 e8       	ldi	r24, 0x88	; 136
    1e70:	91 e0       	ldi	r25, 0x01	; 1
    1e72:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <arp_is_ipv4>
    1e76:	88 23       	and	r24, r24
    1e78:	89 f1       	breq	.+98     	; 0x1edc <pio_util_handle_arp+0x96>
    1e7a:	8e e8       	ldi	r24, 0x8E	; 142
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	0e 94 1c 08 	call	0x1038	; 0x1038 <net_get_word>
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	59 f5       	brne	.+86     	; 0x1edc <pio_util_handle_arp+0x96>

    if(global_verbose) {
			// NOTE: UART - time_stamp_spc() ARP REQ: IP=tgt_ip\r\n
    }

    if(net_compare_ip(tgt_ip, param.test_ip)) {
    1e86:	80 ea       	ldi	r24, 0xA0	; 160
    1e88:	91 e0       	ldi	r25, 0x01	; 1
    1e8a:	63 e6       	ldi	r22, 0x63	; 99
    1e8c:	71 e0       	ldi	r23, 0x01	; 1
    1e8e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <net_compare_ip>
    1e92:	88 23       	and	r24, r24
    1e94:	19 f1       	breq	.+70     	; 0x1edc <pio_util_handle_arp+0x96>
      arp_make_reply(pl_buf, param.mac_addr, param.test_ip);
    1e96:	08 e8       	ldi	r16, 0x88	; 136
    1e98:	11 e0       	ldi	r17, 0x01	; 1
    1e9a:	0f 2e       	mov	r0, r31
    1e9c:	f7 e5       	ldi	r31, 0x57	; 87
    1e9e:	ef 2e       	mov	r14, r31
    1ea0:	f1 e0       	ldi	r31, 0x01	; 1
    1ea2:	ff 2e       	mov	r15, r31
    1ea4:	f0 2d       	mov	r31, r0
    1ea6:	a7 01       	movw	r20, r14
    1ea8:	44 5f       	subi	r20, 0xF4	; 244
    1eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    1eac:	c8 01       	movw	r24, r16
    1eae:	b7 01       	movw	r22, r14
    1eb0:	0e 94 95 07 	call	0xf2a	; 0xf2a <arp_make_reply>
	net_put_word(pkt + ETH_OFF_TYPE, type);
}

inline void eth_make_bcast(uint8_t *pkt, const uint8_t *my_mac)
{
	net_copy_mac(net_bcast_mac, pkt + ETH_OFF_TGT_MAC);
    1eb4:	0e 50       	subi	r16, 0x0E	; 14
    1eb6:	10 40       	sbci	r17, 0x00	; 0
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	91 e0       	ldi	r25, 0x01	; 1
    1ebc:	b8 01       	movw	r22, r16
    1ebe:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>
	net_copy_mac(my_mac, pkt + ETH_OFF_SRC_MAC);
    1ec2:	0a 5f       	subi	r16, 0xFA	; 250
    1ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec6:	c7 01       	movw	r24, r14
    1ec8:	b8 01       	movw	r22, r16
    1eca:	0e 94 fc 07 	call	0xff8	; 0xff8 <net_copy_mac>
      eth_make_bcast(g_pDataBuffer, param.mac_addr);
      pio_util_send_packet(size);
    1ece:	ce 01       	movw	r24, r28
    1ed0:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <pio_util_send_packet>
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	03 c0       	rjmp	.+6      	; 0x1ede <pio_util_handle_arp+0x98>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <pio_util_handle_arp+0x98>
    1edc:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
  }

  return 1;
}
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	ef 90       	pop	r14
    1eea:	08 95       	ret

00001eec <pio_util_recv_packet>:
/**
 * Receives data from ENC28j60, calculates stats & does logging.
 * @param pDataSize Pointer to addr to be filled with read data size.
 */
uint8_t pio_util_recv_packet(uint16_t *pDataSize)
{
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	ec 01       	movw	r28, r24
extern void timerDelay100us(uint16_t uwCount);

// ----- hardware timer -----

// 16 bit hw timer with 4us resolution
inline void timerReset(void) { TCNT1 = 0; }
    1ef8:	04 e8       	ldi	r16, 0x84	; 132
    1efa:	10 e0       	ldi	r17, 0x00	; 0
    1efc:	f8 01       	movw	r30, r16
    1efe:	11 82       	std	Z+1, r1	; 0x01
    1f00:	10 82       	st	Z, r1
  // Fetch packet from ENC28j60, measure elapsed time
  timerReset();
  uint8_t ubRecvResult = enc28j60_recv(g_pDataBuffer, DATABUF_SIZE, pDataSize);
    1f02:	8a e7       	ldi	r24, 0x7A	; 122
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	6a ee       	ldi	r22, 0xEA	; 234
    1f08:	75 e0       	ldi	r23, 0x05	; 5
    1f0a:	ae 01       	movw	r20, r28
    1f0c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <enc28j60_recv>
    1f10:	f8 2e       	mov	r15, r24
inline uint16_t  timerGetState(void) { return TCNT1; }
    1f12:	f8 01       	movw	r30, r16
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
  uint16_t uwTimeDelta = timerGetState();
  uint16_t uwDataRate = timerCalculateKbps(*pDataSize, uwTimeDelta);
    1f18:	88 81       	ld	r24, Y
    1f1a:	99 81       	ldd	r25, Y+1	; 0x01
    1f1c:	0e 94 85 02 	call	0x50a	; 0x50a <timerCalculateKbps>
    1f20:	ac 01       	movw	r20, r24

  if(ubRecvResult == PIO_OK) {
    1f22:	ff 20       	and	r15, r15
    1f24:	31 f4       	brne	.+12     	; 0x1f32 <pio_util_recv_packet+0x46>
		// Update stats - write new data size & rate
    stats_update_ok(STATS_ID_PIO_RX, *pDataSize, uwDataRate);
    1f26:	68 81       	ld	r22, Y
    1f28:	79 81       	ldd	r23, Y+1	; 0x01
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <stats_update_ok>
    1f30:	07 c0       	rjmp	.+14     	; 0x1f40 <pio_util_recv_packet+0x54>
  }
  else {
		// Update stats - increase error count
    stats_get(STATS_ID_PIO_RX)->err++;
    1f32:	e2 e8       	ldi	r30, 0x82	; 130
    1f34:	f7 e0       	ldi	r31, 0x07	; 7
    1f36:	80 81       	ld	r24, Z
    1f38:	91 81       	ldd	r25, Z+1	; 0x01
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
    else {
			// NOTE: UART - ERROR=hex_byte(ubRecvResult)\r\n
    }
  }
  return ubRecvResult;
}
    1f40:	8f 2d       	mov	r24, r15
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	1f 91       	pop	r17
    1f48:	0f 91       	pop	r16
    1f4a:	ff 90       	pop	r15
    1f4c:	08 95       	ret

00001f4e <enc28j60_init>:
	if(result == PIO_OK) {
		// NOTE: UART - rev=hex_byte(rev)
	}

  return PIO_OK;
}
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	08 95       	ret

00001f52 <enc28j60_exit>:
	#endif
	// Moved note from pio_exit
	// NOTE: UART - time_stamp_spc() pio: exit\r\n
  SetBank(ECON1);
  writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_RXEN);
}
    1f52:	08 95       	ret

00001f54 <enc28j60_control>:
			return PIO_OK;
		}
    default:
      return PIO_NOT_FOUND;
  }
}
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	08 95       	ret

00001f58 <enc28j60_status>:
      return PIO_OK;
    default:
      *value = 0;
      return PIO_NOT_FOUND;
  }
}
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	08 95       	ret

00001f5c <enc28j60_send>:

  // initiate send
  writeReg(ETXND, TXSTART_INIT+size);
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
  return PIO_OK;
}
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	08 95       	ret

00001f60 <enc28j60_recv>:
  // read packet
  readBuf(len, data);

  next_pkt();
  return result;
}
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	08 95       	ret

00001f64 <enc28j60_has_recv>:
{
	#ifdef NOENC
	return 0;
	#endif
  return readRegByte(EPKTCNT);
}
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	08 95       	ret

00001f68 <spi_init>:
#include "spi.h"

void spi_init(void)
{
	// output: CS, MOSI, SCK, input: MISO, card detect, write protect
	SPI_DDR |= SPI_SCK | SPI_MOSI | SD_CS | ETH_CS;
    1f68:	e4 e2       	ldi	r30, 0x24	; 36
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8e 62       	ori	r24, 0x2E	; 46
    1f70:	80 83       	st	Z, r24
	SPI_DDR &= ~(SPI_MISO | SD_DETECT | SD_LOCK);
    1f72:	80 81       	ld	r24, Z
    1f74:	8e 76       	andi	r24, 0x6E	; 110
    1f76:	80 83       	st	Z, r24

	// MOSI, SCK = 0, Eth CS = 1
	SPI_PORT &= ~(SPI_MOSI | SPI_SCK);
    1f78:	e5 e2       	ldi	r30, 0x25	; 37
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	87 7d       	andi	r24, 0xD7	; 215
    1f80:	80 83       	st	Z, r24
	SPI_PORT |= ETH_CS;
    1f82:	80 81       	ld	r24, Z
    1f84:	84 60       	ori	r24, 0x04	; 4
    1f86:	80 83       	st	Z, r24

  SPCR = _BV(SPE) | _BV(MSTR); // 8 MHz @ 16
    1f88:	80 e5       	ldi	r24, 0x50	; 80
    1f8a:	8c bd       	out	0x2c, r24	; 44
	SPSR = _BV(SPI2X);
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	8d bd       	out	0x2d, r24	; 45
}
    1f90:	08 95       	ret

00001f92 <stats_reset>:
#include "base/uart.h"

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
    1f92:	e4 e6       	ldi	r30, 0x64	; 100
    1f94:	f7 e0       	ldi	r31, 0x07	; 7
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    1f96:	24 e9       	ldi	r18, 0x94	; 148
    1f98:	37 e0       	ldi	r19, 0x07	; 7
    stats_t *s = &stats[i];
    s->bytes = 0;
    1f9a:	10 82       	st	Z, r1
    1f9c:	11 82       	std	Z+1, r1	; 0x01
    1f9e:	12 82       	std	Z+2, r1	; 0x02
    1fa0:	13 82       	std	Z+3, r1	; 0x03
    s->cnt = 0;
    1fa2:	15 82       	std	Z+5, r1	; 0x05
    1fa4:	14 82       	std	Z+4, r1	; 0x04
    s->err = 0;
    1fa6:	17 82       	std	Z+7, r1	; 0x07
    1fa8:	16 82       	std	Z+6, r1	; 0x06
    s->drop = 0;
    1faa:	11 86       	std	Z+9, r1	; 0x09
    1fac:	10 86       	std	Z+8, r1	; 0x08
    s->max_rate = 0;
    1fae:	13 86       	std	Z+11, r1	; 0x0b
    1fb0:	12 86       	std	Z+10, r1	; 0x0a
    1fb2:	3c 96       	adiw	r30, 0x0c	; 12

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    1fb4:	e2 17       	cp	r30, r18
    1fb6:	f3 07       	cpc	r31, r19
    1fb8:	81 f7       	brne	.-32     	; 0x1f9a <stats_reset+0x8>
    s->cnt = 0;
    s->err = 0;
    s->drop = 0;
    s->max_rate = 0;
  }
}
    1fba:	08 95       	ret

00001fbc <stats_update_ok>:

void stats_update_ok(uint8_t id, uint16_t size, uint16_t rate)
{
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
  stats_t *s = &stats[id];
    1fc0:	9c e0       	ldi	r25, 0x0C	; 12
    1fc2:	89 9f       	mul	r24, r25
    1fc4:	c0 01       	movw	r24, r0
    1fc6:	11 24       	eor	r1, r1
    1fc8:	fc 01       	movw	r30, r24
    1fca:	ec 59       	subi	r30, 0x9C	; 156
    1fcc:	f8 4f       	sbci	r31, 0xF8	; 248
  s->cnt++;
    1fce:	84 81       	ldd	r24, Z+4	; 0x04
    1fd0:	95 81       	ldd	r25, Z+5	; 0x05
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	95 83       	std	Z+5, r25	; 0x05
    1fd6:	84 83       	std	Z+4, r24	; 0x04
  s->bytes += size;
    1fd8:	8b 01       	movw	r16, r22
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fe4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fe6:	80 0f       	add	r24, r16
    1fe8:	91 1f       	adc	r25, r17
    1fea:	a2 1f       	adc	r26, r18
    1fec:	b3 1f       	adc	r27, r19
    1fee:	80 83       	st	Z, r24
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	a2 83       	std	Z+2, r26	; 0x02
    1ff4:	b3 83       	std	Z+3, r27	; 0x03
  if(rate > s->max_rate) {
    1ff6:	82 85       	ldd	r24, Z+10	; 0x0a
    1ff8:	93 85       	ldd	r25, Z+11	; 0x0b
    1ffa:	84 17       	cp	r24, r20
    1ffc:	95 07       	cpc	r25, r21
    1ffe:	10 f4       	brcc	.+4      	; 0x2004 <stats_update_ok+0x48>
    s->max_rate = rate;
    2000:	53 87       	std	Z+11, r21	; 0x0b
    2002:	42 87       	std	Z+10, r20	; 0x0a
  }
}
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret

0000200a <dump_line>:
      break;
    default:
			// NOTE: UART - ?
      break;
  }
}
    200a:	08 95       	ret

0000200c <dump_header>:

static void dump_header(void)
{
	// NOTE: UART - cnt  bytes    err  drop rate\r\n
}
    200c:	08 95       	ret

0000200e <stats_dump_all>:
{
  dump_header();
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    dump_line(i);
  }
}
    200e:	08 95       	ret

00002010 <stats_dump>:
  }
  if(pio) {
    dump_line(STATS_ID_PIO_RX);
    dump_line(STATS_ID_PIO_TX);
  }
}
    2010:	08 95       	ret

00002012 <__mulsi3>:
    2012:	62 9f       	mul	r22, r18
    2014:	d0 01       	movw	r26, r0
    2016:	73 9f       	mul	r23, r19
    2018:	f0 01       	movw	r30, r0
    201a:	82 9f       	mul	r24, r18
    201c:	e0 0d       	add	r30, r0
    201e:	f1 1d       	adc	r31, r1
    2020:	64 9f       	mul	r22, r20
    2022:	e0 0d       	add	r30, r0
    2024:	f1 1d       	adc	r31, r1
    2026:	92 9f       	mul	r25, r18
    2028:	f0 0d       	add	r31, r0
    202a:	83 9f       	mul	r24, r19
    202c:	f0 0d       	add	r31, r0
    202e:	74 9f       	mul	r23, r20
    2030:	f0 0d       	add	r31, r0
    2032:	65 9f       	mul	r22, r21
    2034:	f0 0d       	add	r31, r0
    2036:	99 27       	eor	r25, r25
    2038:	72 9f       	mul	r23, r18
    203a:	b0 0d       	add	r27, r0
    203c:	e1 1d       	adc	r30, r1
    203e:	f9 1f       	adc	r31, r25
    2040:	63 9f       	mul	r22, r19
    2042:	b0 0d       	add	r27, r0
    2044:	e1 1d       	adc	r30, r1
    2046:	f9 1f       	adc	r31, r25
    2048:	bd 01       	movw	r22, r26
    204a:	cf 01       	movw	r24, r30
    204c:	11 24       	eor	r1, r1
    204e:	08 95       	ret

00002050 <__udivmodqi4>:
    2050:	99 1b       	sub	r25, r25
    2052:	79 e0       	ldi	r23, 0x09	; 9
    2054:	04 c0       	rjmp	.+8      	; 0x205e <__udivmodqi4_ep>

00002056 <__udivmodqi4_loop>:
    2056:	99 1f       	adc	r25, r25
    2058:	96 17       	cp	r25, r22
    205a:	08 f0       	brcs	.+2      	; 0x205e <__udivmodqi4_ep>
    205c:	96 1b       	sub	r25, r22

0000205e <__udivmodqi4_ep>:
    205e:	88 1f       	adc	r24, r24
    2060:	7a 95       	dec	r23
    2062:	c9 f7       	brne	.-14     	; 0x2056 <__udivmodqi4_loop>
    2064:	80 95       	com	r24
    2066:	08 95       	ret

00002068 <__udivmodsi4>:
    2068:	a1 e2       	ldi	r26, 0x21	; 33
    206a:	1a 2e       	mov	r1, r26
    206c:	aa 1b       	sub	r26, r26
    206e:	bb 1b       	sub	r27, r27
    2070:	fd 01       	movw	r30, r26
    2072:	0d c0       	rjmp	.+26     	; 0x208e <__udivmodsi4_ep>

00002074 <__udivmodsi4_loop>:
    2074:	aa 1f       	adc	r26, r26
    2076:	bb 1f       	adc	r27, r27
    2078:	ee 1f       	adc	r30, r30
    207a:	ff 1f       	adc	r31, r31
    207c:	a2 17       	cp	r26, r18
    207e:	b3 07       	cpc	r27, r19
    2080:	e4 07       	cpc	r30, r20
    2082:	f5 07       	cpc	r31, r21
    2084:	20 f0       	brcs	.+8      	; 0x208e <__udivmodsi4_ep>
    2086:	a2 1b       	sub	r26, r18
    2088:	b3 0b       	sbc	r27, r19
    208a:	e4 0b       	sbc	r30, r20
    208c:	f5 0b       	sbc	r31, r21

0000208e <__udivmodsi4_ep>:
    208e:	66 1f       	adc	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	88 1f       	adc	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	1a 94       	dec	r1
    2098:	69 f7       	brne	.-38     	; 0x2074 <__udivmodsi4_loop>
    209a:	60 95       	com	r22
    209c:	70 95       	com	r23
    209e:	80 95       	com	r24
    20a0:	90 95       	com	r25
    20a2:	9b 01       	movw	r18, r22
    20a4:	ac 01       	movw	r20, r24
    20a6:	bd 01       	movw	r22, r26
    20a8:	cf 01       	movw	r24, r30
    20aa:	08 95       	ret

000020ac <__eerd_block_m328p>:
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22

000020b0 <__eerd_blraw_m328p>:
    20b0:	fc 01       	movw	r30, r24
    20b2:	f9 99       	sbic	0x1f, 1	; 31
    20b4:	fe cf       	rjmp	.-4      	; 0x20b2 <__eerd_blraw_m328p+0x2>
    20b6:	06 c0       	rjmp	.+12     	; 0x20c4 <__eerd_blraw_m328p+0x14>
    20b8:	f2 bd       	out	0x22, r31	; 34
    20ba:	e1 bd       	out	0x21, r30	; 33
    20bc:	f8 9a       	sbi	0x1f, 0	; 31
    20be:	31 96       	adiw	r30, 0x01	; 1
    20c0:	00 b4       	in	r0, 0x20	; 32
    20c2:	0d 92       	st	X+, r0
    20c4:	41 50       	subi	r20, 0x01	; 1
    20c6:	50 40       	sbci	r21, 0x00	; 0
    20c8:	b8 f7       	brcc	.-18     	; 0x20b8 <__eerd_blraw_m328p+0x8>
    20ca:	08 95       	ret

000020cc <__eerd_word_m328p>:
    20cc:	a8 e1       	ldi	r26, 0x18	; 24
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	42 e0       	ldi	r20, 0x02	; 2
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__eerd_blraw_m328p>

000020d8 <__eewr_block_m328p>:
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	03 c0       	rjmp	.+6      	; 0x20e4 <__eewr_block_m328p+0xc>
    20de:	2d 91       	ld	r18, X+
    20e0:	0e 94 77 10 	call	0x20ee	; 0x20ee <__eewr_r18_m328p>
    20e4:	41 50       	subi	r20, 0x01	; 1
    20e6:	50 40       	sbci	r21, 0x00	; 0
    20e8:	d0 f7       	brcc	.-12     	; 0x20de <__eewr_block_m328p+0x6>
    20ea:	08 95       	ret

000020ec <__eewr_byte_m328p>:
    20ec:	26 2f       	mov	r18, r22

000020ee <__eewr_r18_m328p>:
    20ee:	f9 99       	sbic	0x1f, 1	; 31
    20f0:	fe cf       	rjmp	.-4      	; 0x20ee <__eewr_r18_m328p>
    20f2:	1f ba       	out	0x1f, r1	; 31
    20f4:	92 bd       	out	0x22, r25	; 34
    20f6:	81 bd       	out	0x21, r24	; 33
    20f8:	20 bd       	out	0x20, r18	; 32
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	fa 9a       	sbi	0x1f, 2	; 31
    2100:	f9 9a       	sbi	0x1f, 1	; 31
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	08 95       	ret

00002108 <__eewr_word_m328p>:
    2108:	0e 94 76 10 	call	0x20ec	; 0x20ec <__eewr_byte_m328p>
    210c:	27 2f       	mov	r18, r23
    210e:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__eewr_r18_m328p>

00002112 <_exit>:
    2112:	f8 94       	cli

00002114 <__stop_program>:
    2114:	ff cf       	rjmp	.-2      	; 0x2114 <__stop_program>

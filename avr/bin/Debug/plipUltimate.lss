
bin\Debug\plipUltimate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000026c4  00002798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026c4  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000661  0080013c  0080013c  000027d4  2**0
                  ALLOC
  3 .eeprom       00000015  00810000  00810000  000027d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  000027e9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .debug_aranges 00000260  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007d0  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004da9  00000000  00000000  0000321c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019d2  00000000  00000000  00007fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002f57  00000000  00000000  00009997  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000830  00000000  00000000  0000c8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000012b1  00000000  00000000  0000d120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002154  00000000  00000000  0000e3d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000178  00000000  00000000  00010525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__ctors_end>
       4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
       8:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
       c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      10:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      14:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      18:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      1c:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_7>
      20:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      24:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      28:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      2c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      30:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      34:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      38:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      3c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      40:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      44:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      48:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      4c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      50:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      54:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      58:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      5c:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      60:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>
      64:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__bad_interrupt>

00000068 <cmd_table>:
      68:	d4 00 cf 05 d6 00 e8 00 d1 05 ea 00 fc 00 d3 05     ................
      78:	fe 00 15 01 b2 06 17 01 28 01 ad 06 2b 01 45 01     ........(...+.E.
      88:	a8 06 48 01 64 01 a4 06 67 01 83 01 a0 06 86 01     ..H.d...g.......
      98:	96 01 9c 06 99 01 aa 01 79 06 ac 01 c8 01 30 06     ........y.....0.
      a8:	cb 01 e4 01 30 06 e7 01 fd 01 f5 05 00 02 17 02     ....0...........
      b8:	f5 05 1a 02 33 02 d5 05 36 02 4b 02 f5 05 4e 02     ....3...6.K...N.
      c8:	60 02 30 06 63 02 00 00 00 00 00 00                 `.0.c.......

000000d4 <cmd_quit_name>:
      d4:	71 00                                               q.

000000d6 <cmd_quit_help>:
      d6:	71 75 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     quit command mod
      e6:	65 00                                               e.

000000e8 <cmd_device_reset_name>:
      e8:	72 00                                               r.

000000ea <cmd_device_reset_help>:
      ea:	73 6f 66 74 20 72 65 73 65 74 20 64 65 76 69 63     soft reset devic
      fa:	65 00                                               e.

000000fc <cmd_version_name>:
      fc:	76 00                                               v.

000000fe <cmd_version_help>:
      fe:	70 72 69 6e 74 20 66 69 72 6d 77 61 72 65 20 76     print firmware v
     10e:	65 72 73 69 6f 6e 00                                ersion.

00000115 <cmd_param_dump_name>:
     115:	70 00                                               p.

00000117 <cmd_param_dump_help>:
     117:	70 72 69 6e 74 20 70 61 72 61 6d 65 74 65 72 73     print parameters
	...

00000128 <cmd_param_save_name>:
     128:	70 73 00                                            ps.

0000012b <cmd_param_save_help>:
     12b:	73 61 76 65 20 70 61 72 61 6d 65 74 65 72 73 20     save parameters 
     13b:	74 6f 20 45 45 50 52 4f 4d 00                       to EEPROM.

00000145 <cmd_param_load_name>:
     145:	70 6c 00                                            pl.

00000148 <cmd_param_load_help>:
     148:	6c 6f 61 64 20 70 61 72 61 6d 65 74 65 72 73 20     load parameters 
     158:	66 72 6f 6d 20 45 45 50 52 4f 4d 00                 from EEPROM.

00000164 <cmd_param_reset_name>:
     164:	70 72 00                                            pr.

00000167 <cmd_param_reset_help>:
     167:	72 65 73 65 74 20 70 61 72 61 6d 65 74 65 72 73     reset parameters
     177:	20 74 6f 20 64 65 66 61 75 6c 74 00                  to default.

00000183 <cmd_stats_dump_name>:
     183:	73 64 00                                            sd.

00000186 <cmd_stats_dump_help>:
     186:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

00000196 <cmd_stats_reset_name>:
     196:	73 72 00                                            sr.

00000199 <cmd_stats_reset_help>:
     199:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

000001aa <cmd_gen_m_name>:
     1aa:	6d 00                                               m.

000001ac <cmd_gen_m_help>:
     1ac:	6d 61 63 20 61 64 64 72 65 73 73 20 6f 66 20 64     mac address of d
     1bc:	65 76 69 63 65 20 3c 6d 61 63 3e 00                 evice <mac>.

000001c8 <cmd_gen_fd_name>:
     1c8:	66 64 00                                            fd.

000001cb <cmd_gen_fd_help>:
     1cb:	73 65 74 20 66 75 6c 6c 20 64 75 70 6c 65 20 6d     set full duple m
     1db:	6f 64 65 20 5b 6f 6e 5d 00                          ode [on].

000001e4 <cmd_gen_fc_name>:
     1e4:	66 63 00                                            fc.

000001e7 <cmd_gen_fc_help>:
     1e7:	73 65 74 20 66 6c 6f 77 20 63 6f 6e 74 72 6f 6c     set flow control
     1f7:	20 5b 6f 6e 5d 00                                    [on].

000001fd <cmd_gen_tl_name>:
     1fd:	74 6c 00                                            tl.

00000200 <cmd_gen_tl_help>:
     200:	74 65 73 74 20 70 61 63 6b 65 74 20 6c 65 6e 67     test packet leng
     210:	74 68 20 3c 6e 3e 00                                th <n>.

00000217 <cmd_gen_tt_name>:
     217:	74 74 00                                            tt.

0000021a <cmd_gen_tt_help>:
     21a:	74 65 73 74 20 70 61 63 6b 65 74 20 65 74 68 20     test packet eth 
     22a:	74 79 70 65 20 3c 6e 3e 00                          type <n>.

00000233 <cmd_gen_ti_name>:
     233:	74 69 00                                            ti.

00000236 <cmd_gen_ti_help>:
     236:	74 65 73 74 20 49 50 20 61 64 64 72 65 73 73 20     test IP address 
     246:	3c 69 70 3e 00                                      <ip>.

0000024b <cmd_gen_tp_name>:
     24b:	74 70 00                                            tp.

0000024e <cmd_gen_tp_help>:
     24e:	74 65 73 74 20 55 44 50 20 70 6f 72 74 20 3c 6e     test UDP port <n
     25e:	3e 00                                               >.

00000260 <cmd_gen_tm_name>:
     260:	74 6d 00                                            tm.

00000263 <cmd_gen_tm_help>:
     263:	74 65 73 74 20 6d 6f 64 65 20 5b 30 7c 31 5d 00     test mode [0|1].

00000273 <cmdkey_table>:
     273:	31 be 06 aa 02 32 c1 06 bc 02 33 ba 06 d3 02 34     1....2....3....4
     283:	b6 06 e7 02 73 dc 06 fa 02 53 d9 06 0a 03 76 c5     ....s....S....v.
     293:	06 1b 03 70 d5 06 31 03 50 d1 06 52 03 61 ce 06     ...p..1.P..R.a..
     2a3:	7c 03 00 00 00 00 00                                |......

000002aa <cmd_enter_bridge_mode_help>:
     2aa:	65 6e 74 65 72 20 62 72 69 64 67 65 20 6d 6f 64     enter bridge mod
     2ba:	65 00                                               e.

000002bc <cmd_enter_bridge_test_mode_help>:
     2bc:	65 6e 74 65 72 20 62 72 69 64 67 65 20 74 65 73     enter bridge tes
     2cc:	74 20 6d 6f 64 65 00                                t mode.

000002d3 <cmd_enter_pio_test_mode_help>:
     2d3:	65 6e 74 65 72 20 50 49 4f 20 74 65 73 74 20 6d     enter PIO test m
     2e3:	6f 64 65 00                                         ode.

000002e7 <cmd_enter_pb_test_mode_help>:
     2e7:	65 6e 74 65 72 20 50 42 20 74 65 73 74 20 6d 6f     enter PB test mo
     2f7:	64 65 00                                            de.

000002fa <cmd_dump_stats_help>:
     2fa:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

0000030a <cmd_reset_stats_help>:
     30a:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

0000031b <cmd_toggle_verbose_help>:
     31b:	74 6f 67 67 6c 65 20 76 65 72 62 6f 73 65 20 6f     toggle verbose o
     32b:	75 74 70 75 74 00                                   utput.

00000331 <cmd_send_test_packet_help>:
     331:	73 65 6e 64 20 61 20 74 65 73 74 20 70 61 63 6b     send a test pack
     341:	65 74 20 28 70 62 74 65 73 74 20 6d 6f 64 65 29     et (pbtest mode)
	...

00000352 <cmd_send_test_packet_silent_help>:
     352:	73 65 6e 64 20 61 20 74 65 73 74 20 70 61 63 6b     send a test pack
     362:	65 74 20 28 73 69 6c 65 6e 74 29 20 28 70 62 74     et (silent) (pbt
     372:	65 73 74 20 6d 6f 64 65 29 00                       est mode).

0000037c <cmd_toggle_auto_mode_help>:
     37c:	74 6f 67 67 6c 65 20 61 75 74 6f 20 73 65 6e 64     toggle auto send
     38c:	20 28 70 62 74 65 73 74 20 6d 6f 64 65 29 00         (pbtest mode).

0000039b <default_param>:
     39b:	1a 11 af a0 47 11 00 00 ea 05 fd ff c0 a8 02 de     ....G...........
     3ab:	90 1a 00                                            ...

000003ae <__ctors_end>:
     3ae:	11 24       	eor	r1, r1
     3b0:	1f be       	out	0x3f, r1	; 63
     3b2:	cf ef       	ldi	r28, 0xFF	; 255
     3b4:	d8 e0       	ldi	r29, 0x08	; 8
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	cd bf       	out	0x3d, r28	; 61

000003ba <__do_copy_data>:
     3ba:	11 e0       	ldi	r17, 0x01	; 1
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
     3be:	b1 e0       	ldi	r27, 0x01	; 1
     3c0:	e4 ec       	ldi	r30, 0xC4	; 196
     3c2:	f6 e2       	ldi	r31, 0x26	; 38
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <.do_copy_data_start>

000003c6 <.do_copy_data_loop>:
     3c6:	05 90       	lpm	r0, Z+
     3c8:	0d 92       	st	X+, r0

000003ca <.do_copy_data_start>:
     3ca:	ac 33       	cpi	r26, 0x3C	; 60
     3cc:	b1 07       	cpc	r27, r17
     3ce:	d9 f7       	brne	.-10     	; 0x3c6 <.do_copy_data_loop>

000003d0 <__do_clear_bss>:
     3d0:	17 e0       	ldi	r17, 0x07	; 7
     3d2:	ac e3       	ldi	r26, 0x3C	; 60
     3d4:	b1 e0       	ldi	r27, 0x01	; 1
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <.do_clear_bss_start>

000003d8 <.do_clear_bss_loop>:
     3d8:	1d 92       	st	X+, r1

000003da <.do_clear_bss_start>:
     3da:	ad 39       	cpi	r26, 0x9D	; 157
     3dc:	b1 07       	cpc	r27, r17
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <.do_clear_bss_loop>
     3e0:	0e 94 30 07 	call	0xe60	; 0xe60 <main>
     3e4:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <_exit>

000003e8 <__bad_interrupt>:
     3e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ec <timer_init>:
/// 100us is 1/10k of a second
/// NOTE(KaiN#): time was reduced by 1, should it be?
#define T2_100us ((F_CPU/8)/10000)

void timer_init(void) {
  cli();
     3ec:	f8 94       	cli

	/// Set timer 2 to CTC, prescaler 8 & compare value: 100us
  TCCR2A = _BV(WGM21);  // CTC
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	80 93 b0 00 	sts	0x00B0, r24
  TCCR2B = _BV(CS21);   // Prescaler 8
     3f4:	80 93 b1 00 	sts	0x00B1, r24
  OCR2A = T2_100us;     // Output compare
     3f8:	9a ef       	ldi	r25, 0xFA	; 250
     3fa:	90 93 b3 00 	sts	0x00B3, r25
  TCNT2  = 0x00;        // Reset timer state
     3fe:	10 92 b2 00 	sts	0x00B2, r1
  TIMSK2 = _BV(OCIE2A); // Enable compare interrupt
     402:	80 93 70 00 	sts	0x0070, r24
  // ----- TIMER1 (16bit) -----
  // prescale 64
  // 16 MHz -> 250 KHz = 4 us timer

  // set to CTC on OCR1A with prescale 8
  TCCR1A = 0x00;
     406:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = _BV(CS11) | _BV(CS10); // prescale 64
     40a:	83 e0       	ldi	r24, 0x03	; 3
     40c:	80 93 81 00 	sts	0x0081, r24
  TCCR1C = 0x00;
     410:	10 92 82 00 	sts	0x0082, r1

  // reset timer
  TCNT1 = 0;
     414:	10 92 85 00 	sts	0x0085, r1
     418:	10 92 84 00 	sts	0x0084, r1

  timer_100us = 0;
     41c:	10 92 5f 01 	sts	0x015F, r1
     420:	10 92 5e 01 	sts	0x015E, r1
  timer_10ms = 0;
     424:	10 92 5d 01 	sts	0x015D, r1
     428:	10 92 5c 01 	sts	0x015C, r1
  time_stamp = 0;
     42c:	10 92 58 01 	sts	0x0158, r1
     430:	10 92 59 01 	sts	0x0159, r1
     434:	10 92 5a 01 	sts	0x015A, r1
     438:	10 92 5b 01 	sts	0x015B, r1
  count = 0;
     43c:	10 92 3d 01 	sts	0x013D, r1
     440:	10 92 3c 01 	sts	0x013C, r1

  sei();
     444:	78 94       	sei
}
     446:	08 95       	ret

00000448 <__vector_7>:

// timer2 compare A handler
ISR(T2_vect) {
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	2f 93       	push	r18
     454:	8f 93       	push	r24
     456:	9f 93       	push	r25
     458:	af 93       	push	r26
     45a:	bf 93       	push	r27
  ++timer_100us;
     45c:	80 91 5e 01 	lds	r24, 0x015E
     460:	90 91 5f 01 	lds	r25, 0x015F
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	90 93 5f 01 	sts	0x015F, r25
     46a:	80 93 5e 01 	sts	0x015E, r24
  ++time_stamp;
     46e:	80 91 58 01 	lds	r24, 0x0158
     472:	90 91 59 01 	lds	r25, 0x0159
     476:	a0 91 5a 01 	lds	r26, 0x015A
     47a:	b0 91 5b 01 	lds	r27, 0x015B
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	a1 1d       	adc	r26, r1
     482:	b1 1d       	adc	r27, r1
     484:	80 93 58 01 	sts	0x0158, r24
     488:	90 93 59 01 	sts	0x0159, r25
     48c:	a0 93 5a 01 	sts	0x015A, r26
     490:	b0 93 5b 01 	sts	0x015B, r27
  ++count;
     494:	80 91 3c 01 	lds	r24, 0x013C
     498:	90 91 3d 01 	lds	r25, 0x013D
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	90 93 3d 01 	sts	0x013D, r25
     4a2:	80 93 3c 01 	sts	0x013C, r24
  if(count >= 1000) {
     4a6:	88 5e       	subi	r24, 0xE8	; 232
     4a8:	93 40       	sbci	r25, 0x03	; 3
     4aa:	68 f0       	brcs	.+26     	; 0x4c6 <__vector_7+0x7e>
    count = 0;
     4ac:	10 92 3d 01 	sts	0x013D, r1
     4b0:	10 92 3c 01 	sts	0x013C, r1
    timer_10ms++;
     4b4:	80 91 5c 01 	lds	r24, 0x015C
     4b8:	90 91 5d 01 	lds	r25, 0x015D
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	90 93 5d 01 	sts	0x015D, r25
     4c2:	80 93 5c 01 	sts	0x015C, r24
  }
}
     4c6:	bf 91       	pop	r27
     4c8:	af 91       	pop	r26
     4ca:	9f 91       	pop	r25
     4cc:	8f 91       	pop	r24
     4ce:	2f 91       	pop	r18
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	0f 90       	pop	r0
     4d6:	1f 90       	pop	r1
     4d8:	18 95       	reti

000004da <timer_delay_10ms>:

/// Busy-wait for supplied number of 10ms intervals
void timer_delay_10ms(uint16_t uwIntervalCount) {
     4da:	9c 01       	movw	r18, r24
	timer_10ms=0;
     4dc:	10 92 5d 01 	sts	0x015D, r1
     4e0:	10 92 5c 01 	sts	0x015C, r1
	while(timer_10ms<uwIntervalCount);
     4e4:	80 91 5c 01 	lds	r24, 0x015C
     4e8:	90 91 5d 01 	lds	r25, 0x015D
     4ec:	82 17       	cp	r24, r18
     4ee:	93 07       	cpc	r25, r19
     4f0:	c8 f3       	brcs	.-14     	; 0x4e4 <timer_delay_10ms+0xa>
}
     4f2:	08 95       	ret

000004f4 <timer_delay_100us>:

/// Busy-wait for supplied number of 100us intervals
void timer_delay_100us(uint16_t uwIntervalCount) {
     4f4:	9c 01       	movw	r18, r24
	timer_100us=0;
     4f6:	10 92 5f 01 	sts	0x015F, r1
     4fa:	10 92 5e 01 	sts	0x015E, r1
	while(timer_100us<uwIntervalCount);
     4fe:	80 91 5e 01 	lds	r24, 0x015E
     502:	90 91 5f 01 	lds	r25, 0x015F
     506:	82 17       	cp	r24, r18
     508:	93 07       	cpc	r25, r19
     50a:	c8 f3       	brcs	.-14     	; 0x4fe <timer_delay_100us+0xa>
}
     50c:	08 95       	ret

0000050e <timer_hw_calc_rate_kbs>:

/// Calculates bitrate based on transferred byte count and elapsed time
uint16_t timer_hw_calc_rate_kbs(uint16_t bytes, uint16_t delta) {
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	eb 01       	movw	r28, r22
  if(delta != 0) {
     514:	61 15       	cp	r22, r1
     516:	71 05       	cpc	r23, r1
     518:	19 f4       	brne	.+6      	; 0x520 <timer_hw_calc_rate_kbs+0x12>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	16 c0       	rjmp	.+44     	; 0x54c <timer_hw_calc_rate_kbs+0x3e>
    uint32_t nom = 1000 * (uint32_t)bytes * 100;
    uint32_t denom = (uint32_t)delta * 4;
    uint32_t rate = nom / denom;
    return (uint16_t)rate;
     520:	bc 01       	movw	r22, r24
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	20 ea       	ldi	r18, 0xA0	; 160
     528:	36 e8       	ldi	r19, 0x86	; 134
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__mulsi3>
     532:	9e 01       	movw	r18, r28
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	22 0f       	add	r18, r18
     53a:	33 1f       	adc	r19, r19
     53c:	44 1f       	adc	r20, r20
     53e:	55 1f       	adc	r21, r21
     540:	22 0f       	add	r18, r18
     542:	33 1f       	adc	r19, r19
     544:	44 1f       	adc	r20, r20
     546:	55 1f       	adc	r21, r21
     548:	0e 94 0b 13 	call	0x2616	; 0x2616 <__udivmodsi4>
  }
	else
		return 0;
}
     54c:	82 2f       	mov	r24, r18
     54e:	93 2f       	mov	r25, r19
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <utilNibbleToHex>:
/**
 * Converts nibble (0..15) value to hex char.
 */
char utilNibbleToHex(uint8_t ubIn)
{
  if(ubIn < 10)
     556:	8a 30       	cpi	r24, 0x0A	; 10
     558:	10 f4       	brcc	.+4      	; 0x55e <utilNibbleToHex+0x8>
    return '0' + ubIn;
     55a:	80 5d       	subi	r24, 0xD0	; 208
     55c:	08 95       	ret
  else
    return 'A' + ubIn - 10;
     55e:	89 5c       	subi	r24, 0xC9	; 201
}
     560:	08 95       	ret

00000562 <utilByteToHex>:

/**
 * Converts byte value to hex chars.
 */
void utilByteToHex(uint8_t ubIn, char *pOut)
{
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	f8 2e       	mov	r15, r24
     56a:	8b 01       	movw	r16, r22
  pOut[0] = utilNibbleToHex(ubIn >> 4);
     56c:	82 95       	swap	r24
     56e:	8f 70       	andi	r24, 0x0F	; 15
     570:	0e 94 ab 02 	call	0x556	; 0x556 <utilNibbleToHex>
     574:	f8 01       	movw	r30, r16
     576:	80 83       	st	Z, r24
  pOut[1] = utilNibbleToHex(ubIn & 0xf);
     578:	8f 2d       	mov	r24, r15
     57a:	8f 70       	andi	r24, 0x0F	; 15
     57c:	0e 94 ab 02 	call	0x556	; 0x556 <utilNibbleToHex>
     580:	f8 01       	movw	r30, r16
     582:	81 83       	std	Z+1, r24	; 0x01
}
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	08 95       	ret

0000058c <utilWordToHex>:

void utilWordToHex(uint16_t uwIn, char *pOut)
{
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	f8 2e       	mov	r15, r24
     594:	8b 01       	movw	r16, r22
  utilByteToHex((uint8_t)(uwIn>>8), pOut);
     596:	89 2f       	mov	r24, r25
     598:	0e 94 b1 02 	call	0x562	; 0x562 <utilByteToHex>
  utilByteToHex((uint8_t)(uwIn&0xff), pOut+2);
     59c:	0e 5f       	subi	r16, 0xFE	; 254
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
     5a0:	8f 2d       	mov	r24, r15
     5a2:	b8 01       	movw	r22, r16
     5a4:	0e 94 b1 02 	call	0x562	; 0x562 <utilByteToHex>
}
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	08 95       	ret

000005b0 <utilDwordToHex>:

void utilDwordToHex(uint32_t ulIn, char *pOut)
{
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	6b 01       	movw	r12, r22
     5be:	7c 01       	movw	r14, r24
     5c0:	8a 01       	movw	r16, r20
  utilWordToHex((uint16_t)(ulIn>>16), pOut);
     5c2:	aa 27       	eor	r26, r26
     5c4:	bb 27       	eor	r27, r27
     5c6:	ba 01       	movw	r22, r20
     5c8:	0e 94 c6 02 	call	0x58c	; 0x58c <utilWordToHex>
  utilWordToHex((uint16_t)(ulIn&0xffff), pOut+4);
     5cc:	0c 5f       	subi	r16, 0xFC	; 252
     5ce:	1f 4f       	sbci	r17, 0xFF	; 255
     5d0:	c6 01       	movw	r24, r12
     5d2:	b8 01       	movw	r22, r16
     5d4:	0e 94 c6 02 	call	0x58c	; 0x58c <utilWordToHex>
}
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	08 95       	ret

000005e6 <utilByteToDec>:

void utilByteToDec(uint8_t value, uint8_t *out)
{
     5e6:	28 2f       	mov	r18, r24
     5e8:	fb 01       	movw	r30, r22
  uint8_t h = value / 100;
  uint8_t t = value % 100;
     5ea:	64 e6       	ldi	r22, 0x64	; 100
     5ec:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__udivmodqi4>
     5f0:	39 2f       	mov	r19, r25
  uint8_t o = t % 10;
  t = t / 10;
  out[0] = '0' + h;
     5f2:	82 2f       	mov	r24, r18
     5f4:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__udivmodqi4>
     5f8:	80 5d       	subi	r24, 0xD0	; 208
     5fa:	80 83       	st	Z, r24
  out[1] = '0' + t;
     5fc:	83 2f       	mov	r24, r19
     5fe:	6a e0       	ldi	r22, 0x0A	; 10
     600:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__udivmodqi4>
     604:	80 5d       	subi	r24, 0xD0	; 208
     606:	81 83       	std	Z+1, r24	; 0x01
  out[2] = '0' + o;
     608:	83 2f       	mov	r24, r19
     60a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__udivmodqi4>
     60e:	90 5d       	subi	r25, 0xD0	; 208
     610:	92 83       	std	Z+2, r25	; 0x02
}
     612:	08 95       	ret

00000614 <utilDwordToDec>:

void utilDwordToDec(uint32_t value, uint8_t *out, uint8_t num_digits, uint8_t point_pos)
{
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	c6 2e       	mov	r12, r22
     62a:	d7 2e       	mov	r13, r23
     62c:	e8 2e       	mov	r14, r24
     62e:	f9 2e       	mov	r15, r25
     630:	b2 2e       	mov	r11, r18
	uint8_t i;
  // start backwards
  uint8_t *pos = out + num_digits - 1;
     632:	82 2f       	mov	r24, r18
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	ea 01       	movw	r28, r20
     63a:	c8 0f       	add	r28, r24
     63c:	d9 1f       	adc	r29, r25
  if(point_pos < num_digits) {
     63e:	02 17       	cp	r16, r18
     640:	08 f4       	brcc	.+2      	; 0x644 <utilDwordToDec+0x30>
    pos++;
     642:	21 96       	adiw	r28, 0x01	; 1
  }
  for(i=0;i<num_digits;i++) {
     644:	bb 20       	and	r11, r11
     646:	41 f1       	breq	.+80     	; 0x698 <utilDwordToDec+0x84>
     648:	10 e0       	ldi	r17, 0x00	; 0
    if(i == point_pos) {
      *pos = '.';
     64a:	0f 2e       	mov	r0, r31
     64c:	fe e2       	ldi	r31, 0x2E	; 46
     64e:	af 2e       	mov	r10, r31
     650:	f0 2d       	mov	r31, r0
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
    if(i == point_pos) {
     652:	10 17       	cp	r17, r16
     654:	11 f4       	brne	.+4      	; 0x65a <utilDwordToDec+0x46>
      *pos = '.';
     656:	a8 82       	st	Y, r10
      pos--;
     658:	21 97       	sbiw	r28, 0x01	; 1
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
     65a:	6c 2d       	mov	r22, r12
     65c:	7d 2d       	mov	r23, r13
     65e:	8e 2d       	mov	r24, r14
     660:	9f 2d       	mov	r25, r15
     662:	2a e0       	ldi	r18, 0x0A	; 10
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	0e 94 0b 13 	call	0x2616	; 0x2616 <__udivmodsi4>
     66e:	60 5d       	subi	r22, 0xD0	; 208
     670:	68 83       	st	Y, r22
  // start backwards
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
     672:	1f 5f       	subi	r17, 0xFF	; 255
     674:	1b 15       	cp	r17, r11
     676:	80 f4       	brcc	.+32     	; 0x698 <utilDwordToDec+0x84>
      *pos = '.';
      pos--;
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
    pos--;
     678:	21 97       	sbiw	r28, 0x01	; 1
    value /= 10;
     67a:	6c 2d       	mov	r22, r12
     67c:	7d 2d       	mov	r23, r13
     67e:	8e 2d       	mov	r24, r14
     680:	9f 2d       	mov	r25, r15
     682:	2a e0       	ldi	r18, 0x0A	; 10
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	0e 94 0b 13 	call	0x2616	; 0x2616 <__udivmodsi4>
     68e:	c2 2e       	mov	r12, r18
     690:	d3 2e       	mov	r13, r19
     692:	e4 2e       	mov	r14, r20
     694:	f5 2e       	mov	r15, r21
     696:	dd cf       	rjmp	.-70     	; 0x652 <utilDwordToDec+0x3e>
  }
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	bf 90       	pop	r11
     6aa:	af 90       	pop	r10
     6ac:	08 95       	ret

000006ae <utilParseNibbleHex>:

// parse

uint8_t utilParseNibbleHex(char c,uint8_t *value)
{
     6ae:	fb 01       	movw	r30, r22
  if((c>='a')&&(c<='f')) {
     6b0:	98 2f       	mov	r25, r24
     6b2:	81 56       	subi	r24, 0x61	; 97
     6b4:	86 30       	cpi	r24, 0x06	; 6
     6b6:	20 f4       	brcc	.+8      	; 0x6c0 <utilParseNibbleHex+0x12>
    *value = c + 10 - 'a';
     6b8:	86 5f       	subi	r24, 0xF6	; 246
     6ba:	80 83       	st	Z, r24
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	08 95       	ret
    return 1;
  }
  else if((c>='A')&&(c<='F')) {
     6c0:	89 2f       	mov	r24, r25
     6c2:	81 54       	subi	r24, 0x41	; 65
     6c4:	86 30       	cpi	r24, 0x06	; 6
     6c6:	20 f4       	brcc	.+8      	; 0x6d0 <utilParseNibbleHex+0x22>
    *value = c + 10 - 'A';
     6c8:	86 5f       	subi	r24, 0xF6	; 246
     6ca:	80 83       	st	Z, r24
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	08 95       	ret
    return 1;
  }
  else if((c>='0')&&(c<='9')) {
     6d0:	89 2f       	mov	r24, r25
     6d2:	80 53       	subi	r24, 0x30	; 48
     6d4:	8a 30       	cpi	r24, 0x0A	; 10
     6d6:	10 f0       	brcs	.+4      	; 0x6dc <utilParseNibbleHex+0x2e>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret
    *value = c - '0';
     6dc:	80 83       	st	Z, r24
     6de:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
  }
  else
    return 0;
}
     6e0:	08 95       	ret

000006e2 <utilParseByteHex>:

uint8_t utilParseByteHex(const char *str,uint8_t *value)
{
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	df 93       	push	r29
     6ec:	cf 93       	push	r28
     6ee:	0f 92       	push	r0
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	8c 01       	movw	r16, r24
     6f6:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseNibbleHex(str[0],&val))
     6f8:	fc 01       	movw	r30, r24
     6fa:	80 81       	ld	r24, Z
     6fc:	be 01       	movw	r22, r28
     6fe:	6f 5f       	subi	r22, 0xFF	; 255
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	0e 94 57 03 	call	0x6ae	; 0x6ae <utilParseNibbleHex>
     706:	88 23       	and	r24, r24
     708:	91 f0       	breq	.+36     	; 0x72e <utilParseByteHex+0x4c>
    return 0;
  val <<= 4;
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	82 95       	swap	r24
     70e:	80 7f       	andi	r24, 0xF0	; 240
     710:	89 83       	std	Y+1, r24	; 0x01
  if(!utilParseNibbleHex(str[1],value))
     712:	f8 01       	movw	r30, r16
     714:	81 81       	ldd	r24, Z+1	; 0x01
     716:	b7 01       	movw	r22, r14
     718:	0e 94 57 03 	call	0x6ae	; 0x6ae <utilParseNibbleHex>
     71c:	88 23       	and	r24, r24
     71e:	39 f0       	breq	.+14     	; 0x72e <utilParseByteHex+0x4c>
    return 0;
  *value |= val;
     720:	f7 01       	movw	r30, r14
     722:	80 81       	ld	r24, Z
     724:	99 81       	ldd	r25, Y+1	; 0x01
     726:	89 2b       	or	r24, r25
     728:	80 83       	st	Z, r24
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	01 c0       	rjmp	.+2      	; 0x730 <utilParseByteHex+0x4e>
  return 1;
     72e:	80 e0       	ldi	r24, 0x00	; 0
}
     730:	0f 90       	pop	r0
     732:	cf 91       	pop	r28
     734:	df 91       	pop	r29
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	08 95       	ret

00000740 <utilParseWordHex>:

uint8_t utilParseWordHex(const char *str,uint16_t *value)
{
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	df 93       	push	r29
     74a:	cf 93       	push	r28
     74c:	00 d0       	rcall	.+0      	; 0x74e <utilParseWordHex+0xe>
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	8c 01       	movw	r16, r24
     754:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     756:	be 01       	movw	r22, r28
     758:	6f 5f       	subi	r22, 0xFF	; 255
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <utilParseByteHex>
     760:	88 23       	and	r24, r24
     762:	a1 f0       	breq	.+40     	; 0x78c <utilParseWordHex+0x4c>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     764:	c8 01       	movw	r24, r16
     766:	02 96       	adiw	r24, 0x02	; 2
     768:	be 01       	movw	r22, r28
     76a:	6e 5f       	subi	r22, 0xFE	; 254
     76c:	7f 4f       	sbci	r23, 0xFF	; 255
     76e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <utilParseByteHex>
     772:	88 23       	and	r24, r24
     774:	59 f0       	breq	.+22     	; 0x78c <utilParseWordHex+0x4c>
    return 0;
  *value = (uint16_t)val << 8 | val2;
     776:	99 81       	ldd	r25, Y+1	; 0x01
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	2a 81       	ldd	r18, Y+2	; 0x02
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	82 2b       	or	r24, r18
     780:	93 2b       	or	r25, r19
     782:	f7 01       	movw	r30, r14
     784:	91 83       	std	Z+1, r25	; 0x01
     786:	80 83       	st	Z, r24
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	01 c0       	rjmp	.+2      	; 0x78e <utilParseWordHex+0x4e>
  return 1;
     78c:	80 e0       	ldi	r24, 0x00	; 0
}
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	cf 91       	pop	r28
     794:	df 91       	pop	r29
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	08 95       	ret

000007a0 <utilParseDwordHex>:

uint8_t utilParseDwordHex(const char *str,uint32_t *value)
{
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	df 93       	push	r29
     7aa:	cf 93       	push	r28
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <utilParseDwordHex+0xe>
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <utilParseDwordHex+0x10>
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	8c 01       	movw	r16, r24
     7b6:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     7b8:	be 01       	movw	r22, r28
     7ba:	6f 5f       	subi	r22, 0xFF	; 255
     7bc:	7f 4f       	sbci	r23, 0xFF	; 255
     7be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <utilParseByteHex>
     7c2:	88 23       	and	r24, r24
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <utilParseDwordHex+0x28>
     7c6:	4a c0       	rjmp	.+148    	; 0x85c <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     7c8:	c8 01       	movw	r24, r16
     7ca:	02 96       	adiw	r24, 0x02	; 2
     7cc:	be 01       	movw	r22, r28
     7ce:	6e 5f       	subi	r22, 0xFE	; 254
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <utilParseByteHex>
     7d6:	88 23       	and	r24, r24
     7d8:	09 f4       	brne	.+2      	; 0x7dc <utilParseDwordHex+0x3c>
     7da:	40 c0       	rjmp	.+128    	; 0x85c <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val3;
  if(!utilParseByteHex(&str[4],&val3))
     7dc:	c8 01       	movw	r24, r16
     7de:	04 96       	adiw	r24, 0x04	; 4
     7e0:	be 01       	movw	r22, r28
     7e2:	6d 5f       	subi	r22, 0xFD	; 253
     7e4:	7f 4f       	sbci	r23, 0xFF	; 255
     7e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <utilParseByteHex>
     7ea:	88 23       	and	r24, r24
     7ec:	b9 f1       	breq	.+110    	; 0x85c <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val4;
  if(!utilParseByteHex(&str[6],&val4))
     7ee:	c8 01       	movw	r24, r16
     7f0:	06 96       	adiw	r24, 0x06	; 6
     7f2:	be 01       	movw	r22, r28
     7f4:	6c 5f       	subi	r22, 0xFC	; 252
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
     7f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <utilParseByteHex>
     7fc:	88 23       	and	r24, r24
     7fe:	71 f1       	breq	.+92     	; 0x85c <utilParseDwordHex+0xbc>
    return 0;
  *value = (uint32_t)val << 24 | (uint32_t)val2 << 16 | (uint32_t)val3 << 8 | val4;
     800:	29 81       	ldd	r18, Y+1	; 0x01
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	52 2f       	mov	r21, r18
     80a:	44 27       	eor	r20, r20
     80c:	33 27       	eor	r19, r19
     80e:	22 27       	eor	r18, r18
     810:	8a 81       	ldd	r24, Y+2	; 0x02
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	a0 e0       	ldi	r26, 0x00	; 0
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	dc 01       	movw	r26, r24
     81a:	99 27       	eor	r25, r25
     81c:	88 27       	eor	r24, r24
     81e:	28 2b       	or	r18, r24
     820:	39 2b       	or	r19, r25
     822:	4a 2b       	or	r20, r26
     824:	5b 2b       	or	r21, r27
     826:	8c 81       	ldd	r24, Y+4	; 0x04
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	28 2b       	or	r18, r24
     830:	39 2b       	or	r19, r25
     832:	4a 2b       	or	r20, r26
     834:	5b 2b       	or	r21, r27
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	a0 e0       	ldi	r26, 0x00	; 0
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	ba 2f       	mov	r27, r26
     840:	a9 2f       	mov	r26, r25
     842:	98 2f       	mov	r25, r24
     844:	88 27       	eor	r24, r24
     846:	28 2b       	or	r18, r24
     848:	39 2b       	or	r19, r25
     84a:	4a 2b       	or	r20, r26
     84c:	5b 2b       	or	r21, r27
     84e:	f7 01       	movw	r30, r14
     850:	20 83       	st	Z, r18
     852:	31 83       	std	Z+1, r19	; 0x01
     854:	42 83       	std	Z+2, r20	; 0x02
     856:	53 83       	std	Z+3, r21	; 0x03
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	01 c0       	rjmp	.+2      	; 0x85e <utilParseDwordHex+0xbe>
  return 1;
     85c:	80 e0       	ldi	r24, 0x00	; 0
}
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	cf 91       	pop	r28
     868:	df 91       	pop	r29
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	08 95       	ret

00000874 <utilParseByteDec>:

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
     874:	db 01       	movw	r26, r22
     876:	fc 01       	movw	r30, r24
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
      break;
    }
    c -= '0';
    value *= 10;
     87c:	4a e0       	ldi	r20, 0x0A	; 10
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
     87e:	80 81       	ld	r24, Z
     880:	98 2f       	mov	r25, r24
     882:	90 53       	subi	r25, 0x30	; 48
     884:	9a 30       	cpi	r25, 0x0A	; 10
     886:	50 f4       	brcc	.+20     	; 0x89c <utilParseByteDec+0x28>
      break;
    }
    c -= '0';
    value *= 10;
     888:	34 9f       	mul	r19, r20
     88a:	80 2d       	mov	r24, r0
     88c:	11 24       	eor	r1, r1
    value += c;
     88e:	38 2f       	mov	r19, r24
     890:	39 0f       	add	r19, r25
    digits++;
     892:	2f 5f       	subi	r18, 0xFF	; 255
     894:	31 96       	adiw	r30, 0x01	; 1

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
     896:	23 30       	cpi	r18, 0x03	; 3
     898:	91 f7       	brne	.-28     	; 0x87e <utilParseByteDec+0xa>
     89a:	01 c0       	rjmp	.+2      	; 0x89e <utilParseByteDec+0x2a>
    c -= '0';
    value *= 10;
    value += c;
    digits++;
  }
  if(digits > 0) {
     89c:	21 11       	cpse	r18, r1
    *out = value;
     89e:	3c 93       	st	X, r19
  }
  return digits;
}
     8a0:	82 2f       	mov	r24, r18
     8a2:	08 95       	ret

000008a4 <trigger_request>:
static uint8_t flags;
static uint8_t req_is_pending;

static void trigger_request(void)
{
  if(!req_is_pending) {
     8a4:	80 91 3f 01 	lds	r24, 0x013F
     8a8:	88 23       	and	r24, r24
     8aa:	29 f4       	brne	.+10     	; 0x8b6 <trigger_request+0x12>
    req_is_pending = 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 3f 01 	sts	0x013F, r24
    pb_proto_request_recv();
     8b2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <pb_proto_request_recv>
     8b6:	08 95       	ret

000008b8 <bridge_loop>:
}

// ---------- loop ----------

uint8_t bridge_loop(void)
{
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	df 93       	push	r29
     8c4:	cf 93       	push	r28
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <bridge_loop+0x10>
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
  uint8_t result = CMD_WORKER_IDLE;

  // NOTE: UART - time_stamp_spc() [BRIDGE] on\r\n

  // Associate protocol fns with given ptrs
  pb_proto_init(fill_pkt, proc_pkt, pkt_buf, PKT_BUF_SIZE);
     8cc:	8e e0       	ldi	r24, 0x0E	; 14
     8ce:	95 e0       	ldi	r25, 0x05	; 5
     8d0:	6d eb       	ldi	r22, 0xBD	; 189
     8d2:	74 e0       	ldi	r23, 0x04	; 4
     8d4:	43 e8       	ldi	r20, 0x83	; 131
     8d6:	51 e0       	ldi	r21, 0x01	; 1
     8d8:	2a ee       	ldi	r18, 0xEA	; 234
     8da:	35 e0       	ldi	r19, 0x05	; 5
     8dc:	0e 94 ae 09 	call	0x135c	; 0x135c <pb_proto_init>

  // Init ENC28j60
  enc28j60_init(param.mac_addr, pio_util_get_init_flags());
     8e0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <pio_util_get_init_flags>
     8e4:	68 2f       	mov	r22, r24
     8e6:	00 e6       	ldi	r16, 0x60	; 96
     8e8:	11 e0       	ldi	r17, 0x01	; 1
     8ea:	c8 01       	movw	r24, r16
     8ec:	0e 94 1d 11 	call	0x223a	; 0x223a <enc28j60_init>

  // Reset stats
  stats_reset();
     8f0:	0e 94 a0 12 	call	0x2540	; 0x2540 <stats_reset>

  // Reset flags & request state
  flags = 0;
     8f4:	10 92 3e 01 	sts	0x013E, r1
  req_is_pending = 0;
     8f8:	10 92 3f 01 	sts	0x013F, r1

  uint8_t flow_control = param.flow_ctl;
     8fc:	f8 01       	movw	r30, r16
     8fe:	f6 80       	ldd	r15, Z+6	; 0x06
     900:	10 e0       	ldi	r17, 0x00	; 0
        trigger_request();
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     902:	6e 01       	movw	r12, r28
     904:	08 94       	sec
     906:	c1 1c       	adc	r12, r1
     908:	d1 1c       	adc	r13, r1
     90a:	24 c0       	rjmp	.+72     	; 0x954 <__stack+0x55>
  uint8_t ubDisplayPacketInfo = 1;
  while(run_mode == RUN_MODE_BRIDGE) {
    // NOTE: UART command handling was here

    // Calls pb_proto_handle - this is where PAR communication is done
    pb_util_handle();
     90c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <pb_util_handle>

    // Handle packets coming from network
    uint8_t ubPacketCount = enc28j60_has_recv();
     910:	0e 94 19 11 	call	0x2232	; 0x2232 <enc28j60_has_recv>
     914:	08 2f       	mov	r16, r24
    if(ubPacketCount) {
     916:	88 23       	and	r24, r24
     918:	51 f0       	breq	.+20     	; 0x92e <__stack+0x2f>
      if(ubDisplayPacketInfo) {
        // NOTE: UART - time_stamp_spc() FIRST INCOMING!\r\n
        ubDisplayPacketInfo = 0;
      }

      if(flags & FLAG_ONLINE) {
     91a:	80 91 3e 01 	lds	r24, 0x013E
     91e:	80 ff       	sbrs	r24, 0
     920:	03 c0       	rjmp	.+6      	; 0x928 <__stack+0x29>
				// Comm online: let Amiga know about new packet
        trigger_request();
     922:	0e 94 52 04 	call	0x8a4	; 0x8a4 <trigger_request>
     926:	03 c0       	rjmp	.+6      	; 0x92e <__stack+0x2f>
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     928:	c6 01       	movw	r24, r12
     92a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <pio_util_recv_packet>
        // NOTE: UART - time_stamp_spc() OFFLINE DROP: hex_word(size)\r\n
      }
    }

    // flow control
    if(flow_control) {
     92e:	ff 20       	and	r15, r15
     930:	89 f0       	breq	.+34     	; 0x954 <__stack+0x55>
      // flow limited
      if(limit_flow) {
     932:	11 23       	and	r17, r17
     934:	41 f0       	breq	.+16     	; 0x946 <__stack+0x47>
        // disable again?
        if(!ubPacketCount) {
     936:	00 23       	and	r16, r16
     938:	69 f4       	brne	.+26     	; 0x954 <__stack+0x55>
          enc28j60_control(PIO_CONTROL_FLOW, 0);
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <enc28j60_control>
     942:	10 e0       	ldi	r17, 0x00	; 0
     944:	07 c0       	rjmp	.+14     	; 0x954 <__stack+0x55>
        }
      }
      // no flow limit
      else {
        // enable?
        if(ubPacketCount) {
     946:	00 23       	and	r16, r16
     948:	29 f0       	breq	.+10     	; 0x954 <__stack+0x55>
          enc28j60_control(PIO_CONTROL_FLOW, 1);
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <enc28j60_control>
     952:	11 e0       	ldi	r17, 0x01	; 1
  req_is_pending = 0;

  uint8_t flow_control = param.flow_ctl;
  uint8_t limit_flow = 0;
  uint8_t ubDisplayPacketInfo = 1;
  while(run_mode == RUN_MODE_BRIDGE) {
     954:	80 91 42 01 	lds	r24, 0x0142
     958:	88 23       	and	r24, r24
     95a:	c1 f2       	breq	.-80     	; 0x90c <__stack+0xd>
        }
      }
    }
  }

  stats_dump_all();
     95c:	0e 94 de 12 	call	0x25bc	; 0x25bc <stats_dump_all>
  enc28j60_exit();
     960:	0e 94 73 10 	call	0x20e6	; 0x20e6 <enc28j60_exit>

	// NOTE: UART - time_stamp_spc() [BRIDGE] off\r\n

  return result;
}
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	cf 91       	pop	r28
     96c:	df 91       	pop	r29
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	08 95       	ret

0000097a <proc_pkt>:
 * @param buf Buffer containing sent data
 * @param size Packet length
 * @return Always PBPROTO_STATUS_OK
 */
static uint8_t proc_pkt(const uint8_t *buf, uint16_t size)
{
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
     984:	8b 01       	movw	r16, r22
     986:	0c 96       	adiw	r24, 0x0c	; 12
     988:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
  // get eth type
  uint16_t eth_type = eth_get_pkt_type(buf);
  switch(eth_type) {
     98c:	2f ef       	ldi	r18, 0xFF	; 255
     98e:	8e 3f       	cpi	r24, 0xFE	; 254
     990:	92 07       	cpc	r25, r18
     992:	21 f1       	breq	.+72     	; 0x9dc <proc_pkt+0x62>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	8f 3f       	cpi	r24, 0xFF	; 255
     998:	92 07       	cpc	r25, r18
     99a:	20 f4       	brcc	.+8      	; 0x9a4 <proc_pkt+0x2a>
     99c:	8d 5f       	subi	r24, 0xFD	; 253
     99e:	9f 4f       	sbci	r25, 0xFF	; 255
     9a0:	59 f5       	brne	.+86     	; 0x9f8 <proc_pkt+0x7e>
     9a2:	22 c0       	rjmp	.+68     	; 0x9e8 <proc_pkt+0x6e>
 * @param buf Pointer to magic packet.
 */
static void magic_online(const uint8_t *buf)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] online \r\n
  flags |= FLAG_ONLINE | FLAG_FIRST_TRANSFER;
     9a4:	80 91 3e 01 	lds	r24, 0x013E
     9a8:	85 60       	ori	r24, 0x05	; 5
     9aa:	80 93 3e 01 	sts	0x013E, r24
     9ae:	26 96       	adiw	r28, 0x06	; 6

  // validate mac address and if it does not match then reconfigure PIO
  const uint8_t *src_mac = eth_get_src_mac(buf);
  if(!net_compare_mac(param.mac_addr, src_mac)) {
     9b0:	80 e6       	ldi	r24, 0x60	; 96
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	be 01       	movw	r22, r28
     9b6:	0e 94 4a 08 	call	0x1094	; 0x1094 <net_compare_mac>
     9ba:	88 23       	and	r24, r24
     9bc:	49 f5       	brne	.+82     	; 0xa10 <proc_pkt+0x96>
    // update mac param and save
    net_copy_mac(src_mac, param.mac_addr);
     9be:	00 e6       	ldi	r16, 0x60	; 96
     9c0:	11 e0       	ldi	r17, 0x01	; 1
     9c2:	ce 01       	movw	r24, r28
     9c4:	b8 01       	movw	r22, r16
     9c6:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>
    param_save();
     9ca:	0e 94 93 09 	call	0x1326	; 0x1326 <param_save>

    // re-configure PIO
    enc28j60_exit();
     9ce:	0e 94 73 10 	call	0x20e6	; 0x20e6 <enc28j60_exit>
    enc28j60_init(param.mac_addr, PIO_INIT_BROAD_CAST);
     9d2:	c8 01       	movw	r24, r16
     9d4:	64 e0       	ldi	r22, 0x04	; 4
     9d6:	0e 94 1d 11 	call	0x223a	; 0x223a <enc28j60_init>
     9da:	1a c0       	rjmp	.+52     	; 0xa10 <proc_pkt+0x96>
 * Disables ethernet communication.
 */
static void magic_offline(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] offline
  flags &= ~FLAG_ONLINE;
     9dc:	80 91 3e 01 	lds	r24, 0x013E
     9e0:	8e 7f       	andi	r24, 0xFE	; 254
     9e2:	80 93 3e 01 	sts	0x013E, r24
     9e6:	14 c0       	rjmp	.+40     	; 0xa10 <proc_pkt+0x96>
}

static void magic_loopback(uint16_t size)
{
  flags |= FLAG_SEND_MAGIC;
     9e8:	80 91 3e 01 	lds	r24, 0x013E
     9ec:	82 60       	ori	r24, 0x02	; 2
     9ee:	80 93 3e 01 	sts	0x013E, r24
  trigger_request();
     9f2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <trigger_request>
     9f6:	0c c0       	rjmp	.+24     	; 0xa10 <proc_pkt+0x96>
    case ETH_TYPE_MAGIC_LOOPBACK:
      magic_loopback(size);
      break;
    default:
      // send packet via pio
      pio_util_send_packet(size);
     9f8:	c8 01       	movw	r24, r16
     9fa:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <pio_util_send_packet>
      // if a packet arrived and we are not online then request online state
      if((flags & FLAG_ONLINE)==0) {
     9fe:	80 91 3e 01 	lds	r24, 0x013E
     a02:	80 fd       	sbrc	r24, 0
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <proc_pkt+0x96>
static void request_magic(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] request\r\n

  // request receive
  flags |= FLAG_SEND_MAGIC | FLAG_FIRST_TRANSFER;
     a06:	86 60       	ori	r24, 0x06	; 6
     a08:	80 93 3e 01 	sts	0x013E, r24
  trigger_request();
     a0c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <trigger_request>
        request_magic();
      }
      break;
  }
  return PBPROTO_STATUS_OK;
}
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <fill_pkt>:
// ----- packet callbacks -----

// the Amiga requests a new packet

static uint8_t fill_pkt(uint8_t *buf, uint16_t max_size, uint16_t *size)
{
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ea 01       	movw	r28, r20
  // need to send a magic?
  if((flags & FLAG_SEND_MAGIC) == FLAG_SEND_MAGIC) {
     a26:	80 91 3e 01 	lds	r24, 0x013E
     a2a:	81 ff       	sbrs	r24, 1
     a2c:	1c c0       	rjmp	.+56     	; 0xa66 <fill_pkt+0x4a>
    flags &= ~FLAG_SEND_MAGIC;
     a2e:	8d 7f       	andi	r24, 0xFD	; 253
     a30:	80 93 3e 01 	sts	0x013E, r24
     a34:	03 e8       	ldi	r16, 0x83	; 131
     a36:	11 e0       	ldi	r17, 0x01	; 1
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	b8 01       	movw	r22, r16
     a3e:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>

    // Build magic packet
    // Target (bcast) MAC, src (plipbox) MAC, 0xFFFF => size: 14 bytes
    net_copy_bcast_mac(pkt_buf + ETH_OFF_TGT_MAC);
    net_copy_mac(param.mac_addr, pkt_buf + ETH_OFF_SRC_MAC);
     a42:	b8 01       	movw	r22, r16
     a44:	6a 5f       	subi	r22, 0xFA	; 250
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	80 e6       	ldi	r24, 0x60	; 96
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>
    net_put_word(pkt_buf + ETH_OFF_TYPE, ETH_TYPE_MAGIC_ONLINE);
     a50:	c8 01       	movw	r24, r16
     a52:	0c 96       	adiw	r24, 0x0c	; 12
     a54:	6f ef       	ldi	r22, 0xFF	; 255
     a56:	7f ef       	ldi	r23, 0xFF	; 255
     a58:	0e 94 08 08 	call	0x1010	; 0x1010 <net_put_word>

    *size = ETH_HDR_SIZE;
     a5c:	8e e0       	ldi	r24, 0x0E	; 14
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	99 83       	std	Y+1, r25	; 0x01
     a62:	88 83       	st	Y, r24
     a64:	0a c0       	rjmp	.+20     	; 0xa7a <fill_pkt+0x5e>
  }
  else {
    // pending PIO packet?
    pio_util_recv_packet(size);
     a66:	ca 01       	movw	r24, r20
     a68:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <pio_util_recv_packet>

    // report first packet transfer
    if(flags & FLAG_FIRST_TRANSFER) {
     a6c:	80 91 3e 01 	lds	r24, 0x013E
     a70:	82 ff       	sbrs	r24, 2
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <fill_pkt+0x5e>
      flags &= ~FLAG_FIRST_TRANSFER;
     a74:	8b 7f       	andi	r24, 0xFB	; 251
     a76:	80 93 3e 01 	sts	0x013E, r24
      // NOTE: UART - time_stamp_spc() FIRST TRANSFER!\r\n
    }
  }

  req_is_pending = 0;
     a7a:	10 92 3f 01 	sts	0x013F, r1

  return PBPROTO_STATUS_OK;
}
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <bridge_test_loop>:

  return PBPROTO_STATUS_OK;
}

uint8_t bridge_test_loop(void)
{
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	00 d0       	rcall	.+0      	; 0xa94 <bridge_test_loop+0xa>
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
  uint8_t result = CMD_WORKER_IDLE;

	// NOTE: UART - time_stamp_spc [BRIDGE_TEST] on\r\n

  pb_proto_init(fill_pkt, proc_pkt, pkt_buf, PKT_BUF_SIZE);
     a98:	82 e9       	ldi	r24, 0x92	; 146
     a9a:	95 e0       	ldi	r25, 0x05	; 5
     a9c:	6f ea       	ldi	r22, 0xAF	; 175
     a9e:	75 e0       	ldi	r23, 0x05	; 5
     aa0:	43 e8       	ldi	r20, 0x83	; 131
     aa2:	51 e0       	ldi	r21, 0x01	; 1
     aa4:	2a ee       	ldi	r18, 0xEA	; 234
     aa6:	35 e0       	ldi	r19, 0x05	; 5
     aa8:	0e 94 ae 09 	call	0x135c	; 0x135c <pb_proto_init>
  enc28j60_init(param.mac_addr, pio_util_get_init_flags());
     aac:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <pio_util_get_init_flags>
     ab0:	68 2f       	mov	r22, r24
     ab2:	80 e6       	ldi	r24, 0x60	; 96
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	0e 94 1d 11 	call	0x223a	; 0x223a <enc28j60_init>
  stats_reset();
     aba:	0e 94 a0 12 	call	0x2540	; 0x2540 <stats_reset>
    pb_util_handle();

    // incoming packet via PIO?
    if(enc28j60_has_recv()) {
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
     abe:	8e 01       	movw	r16, r28
     ac0:	0f 5f       	subi	r16, 0xFF	; 255
     ac2:	1f 4f       	sbci	r17, 0xFF	; 255
     ac4:	1f c0       	rjmp	.+62     	; 0xb04 <bridge_test_loop+0x7a>
  while(run_mode == RUN_MODE_BRIDGE_TEST) {
    // handle commands
    // NOTE: cmd_worker was here, reset by loop break

    // handle pbproto
    pb_util_handle();
     ac6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <pb_util_handle>

    // incoming packet via PIO?
    if(enc28j60_has_recv()) {
     aca:	0e 94 19 11 	call	0x2232	; 0x2232 <enc28j60_has_recv>
     ace:	88 23       	and	r24, r24
     ad0:	c9 f0       	breq	.+50     	; 0xb04 <bridge_test_loop+0x7a>
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <pio_util_recv_packet>
     ad8:	88 23       	and	r24, r24
     ada:	a1 f4       	brne	.+40     	; 0xb04 <bridge_test_loop+0x7a>
        // handle ARP?
        if(!pio_util_handle_arp(size)) {
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <pio_util_handle_arp>
     ae4:	88 23       	and	r24, r24
     ae6:	71 f4       	brne	.+28     	; 0xb04 <bridge_test_loop+0x7a>
          // is it a UDP test packet?
          if(pio_util_handle_udp_test(size)) {
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <pio_util_handle_udp_test>
     af0:	88 23       	and	r24, r24
     af2:	41 f0       	breq	.+16     	; 0xb04 <bridge_test_loop+0x7a>
            if(pio_pkt_size != 0) {
							// NOTE: UART - OVERWRITE?!\r\n
            }

            // request receive
            pio_pkt_size = size;
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	90 93 41 01 	sts	0x0141, r25
     afc:	80 93 40 01 	sts	0x0140, r24
            pb_proto_request_recv();
     b00:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <pb_proto_request_recv>

  pb_proto_init(fill_pkt, proc_pkt, pkt_buf, PKT_BUF_SIZE);
  enc28j60_init(param.mac_addr, pio_util_get_init_flags());
  stats_reset();

  while(run_mode == RUN_MODE_BRIDGE_TEST) {
     b04:	80 91 42 01 	lds	r24, 0x0142
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	e9 f2       	breq	.-70     	; 0xac6 <bridge_test_loop+0x3c>
        }
      }
    }
  }

  stats_dump_all();
     b0c:	0e 94 de 12 	call	0x25bc	; 0x25bc <stats_dump_all>
  enc28j60_exit();
     b10:	0e 94 73 10 	call	0x20e6	; 0x20e6 <enc28j60_exit>

  // NOTE: UART - time_stamp_spc() [BRIDGE_TEST] off\r\n

  return result;
}
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	cf 91       	pop	r28
     b1c:	df 91       	pop	r29
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	08 95       	ret

00000b24 <fill_pkt>:
/* a RECV command arrived from Amiga.
   this should only happen if we got a packet here from PIO
   in the first place
*/
static uint8_t fill_pkt(uint8_t *buf, uint16_t max_size, uint16_t *size)
{
     b24:	9c 01       	movw	r18, r24
     b26:	fa 01       	movw	r30, r20
  *size = pio_pkt_size;
     b28:	80 91 40 01 	lds	r24, 0x0140
     b2c:	90 91 41 01 	lds	r25, 0x0141
     b30:	91 83       	std	Z+1, r25	; 0x01
     b32:	80 83       	st	Z, r24
  if(*size > max_size) {
     b34:	68 17       	cp	r22, r24
     b36:	79 07       	cpc	r23, r25
     b38:	10 f4       	brcc	.+4      	; 0xb3e <fill_pkt+0x1a>
     b3a:	85 e0       	ldi	r24, 0x05	; 5
     b3c:	08 95       	ret
    return PBPROTO_STATUS_PACKET_TOO_LARGE;
  }

  // in test mode 0 send via internal device loopback
  if(param.test_mode == 0) {
     b3e:	80 91 72 01 	lds	r24, 0x0172
     b42:	88 23       	and	r24, r24
     b44:	31 f4       	brne	.+12     	; 0xb52 <fill_pkt+0x2e>
    // switch eth type to magic for loop back
    net_put_word(buf + ETH_OFF_TYPE, ETH_TYPE_MAGIC_LOOPBACK);
     b46:	c9 01       	movw	r24, r18
     b48:	0c 96       	adiw	r24, 0x0c	; 12
     b4a:	6d ef       	ldi	r22, 0xFD	; 253
     b4c:	7f ef       	ldi	r23, 0xFF	; 255
     b4e:	0e 94 08 08 	call	0x1010	; 0x1010 <net_put_word>
  }

  // consumed packet
  pio_pkt_size = 0;
     b52:	10 92 41 01 	sts	0x0141, r1
     b56:	10 92 40 01 	sts	0x0140, r1
     b5a:	81 e0       	ldi	r24, 0x01	; 1

  return PBPROTO_STATUS_OK;
}
     b5c:	08 95       	ret

00000b5e <proc_pkt>:

/* a SEND command arrvied from Amiga.
   we got our packet back. forward to PIO
*/
static uint8_t proc_pkt(const uint8_t *buf, uint16_t size)
{
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	eb 01       	movw	r28, r22
  // make sure its the expected packet type
  uint16_t type = net_get_word(pkt_buf + ETH_OFF_TYPE);
     b64:	8f e8       	ldi	r24, 0x8F	; 143
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
     b6c:	9c 01       	movw	r18, r24

  // in test mode 0 packet was sent by internal device loopback
  if(param.test_mode == 0) {
     b6e:	80 91 72 01 	lds	r24, 0x0172
     b72:	88 23       	and	r24, r24
     b74:	51 f4       	brne	.+20     	; 0xb8a <proc_pkt+0x2c>
    if(type != ETH_TYPE_MAGIC_LOOPBACK) {
     b76:	2d 5f       	subi	r18, 0xFD	; 253
     b78:	3f 4f       	sbci	r19, 0xFF	; 255
     b7a:	69 f4       	brne	.+26     	; 0xb96 <proc_pkt+0x38>
			// NOTE: UART - NO MAGIC!!\r\n
      return PBPROTO_STATUS_OK;
    } else {
      // switch eth type back to IPv4
      net_put_word(pkt_buf + ETH_OFF_TYPE, ETH_TYPE_IPV4);
     b7c:	8f e8       	ldi	r24, 0x8F	; 143
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	78 e0       	ldi	r23, 0x08	; 8
     b84:	0e 94 08 08 	call	0x1010	; 0x1010 <net_put_word>
     b88:	03 c0       	rjmp	.+6      	; 0xb90 <proc_pkt+0x32>
    }
  } else {
    if(type != ETH_TYPE_IPV4) {
     b8a:	20 50       	subi	r18, 0x00	; 0
     b8c:	38 40       	sbci	r19, 0x08	; 8
     b8e:	19 f4       	brne	.+6      	; 0xb96 <proc_pkt+0x38>
      return PBPROTO_STATUS_OK;
    }
  }

  // send packet via pio
  pio_util_send_packet(size);
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <pio_util_send_packet>

  return PBPROTO_STATUS_OK;
}
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <cmd_quit>:
#include "stats.h"

COMMAND(cmd_quit)
{
  return CMD_QUIT;
}
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	08 95       	ret

00000ba2 <cmd_device_reset>:

COMMAND(cmd_device_reset)
{
  return CMD_RESET;
}
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	08 95       	ret

00000ba6 <cmd_version>:

COMMAND(cmd_version)
{
	// NOTE: UART - VERSION BUILD_DATE\r\n
  return CMD_OK;
}
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	08 95       	ret

00000baa <cmd_param_ip_addr>:
    return CMD_PARSE_ERROR;
  }
}

COMMAND(cmd_param_ip_addr)
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <cmd_param_ip_addr+0x6>
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <cmd_param_ip_addr+0x8>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	fb 01       	movw	r30, r22
  uint8_t ip[4];

  if(net_parse_ip((char*)argv[1], ip)) {
     bb8:	82 81       	ldd	r24, Z+2	; 0x02
     bba:	93 81       	ldd	r25, Z+3	; 0x03
     bbc:	be 01       	movw	r22, r28
     bbe:	6f 5f       	subi	r22, 0xFF	; 255
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <net_parse_ip>
     bc6:	88 23       	and	r24, r24
     bc8:	11 f4       	brne	.+4      	; 0xbce <cmd_param_ip_addr+0x24>
     bca:	81 e1       	ldi	r24, 0x11	; 17
     bcc:	07 c0       	rjmp	.+14     	; 0xbdc <cmd_param_ip_addr+0x32>
    net_copy_ip(ip, param.test_ip);
     bce:	ce 01       	movw	r24, r28
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	6c e6       	ldi	r22, 0x6C	; 108
     bd4:	71 e0       	ldi	r23, 0x01	; 1
     bd6:	0e 94 ed 07 	call	0xfda	; 0xfda <net_copy_ip>
     bda:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <cmd_param_word>:
  }
  return result;
}

COMMAND(cmd_param_word)
{
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <cmd_param_word+0xa>
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	28 2f       	mov	r18, r24
     bfa:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	11 97       	sbiw	r26, 0x01	; 1
  uint8_t type = argv[0][1];
     c02:	91 81       	ldd	r25, Z+1	; 0x01
  uint16_t *val = 0;

  if(group == 't') {
     c04:	80 81       	ld	r24, Z
     c06:	84 37       	cpi	r24, 0x74	; 116
     c08:	19 f5       	brne	.+70     	; 0xc50 <cmd_param_word+0x66>
    switch(type) {
     c0a:	90 37       	cpi	r25, 0x70	; 112
     c0c:	59 f0       	breq	.+22     	; 0xc24 <cmd_param_word+0x3a>
     c0e:	94 37       	cpi	r25, 0x74	; 116
     c10:	19 f0       	breq	.+6      	; 0xc18 <cmd_param_word+0x2e>
     c12:	9c 36       	cpi	r25, 0x6C	; 108
     c14:	e9 f4       	brne	.+58     	; 0xc50 <cmd_param_word+0x66>
     c16:	03 c0       	rjmp	.+6      	; 0xc1e <cmd_param_word+0x34>
     c18:	0a e6       	ldi	r16, 0x6A	; 106
     c1a:	11 e0       	ldi	r17, 0x01	; 1
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <cmd_param_word+0x3e>
     c1e:	08 e6       	ldi	r16, 0x68	; 104
     c20:	11 e0       	ldi	r17, 0x01	; 1
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <cmd_param_word+0x3e>
     c24:	00 e7       	ldi	r16, 0x70	; 112
     c26:	11 e0       	ldi	r17, 0x01	; 1
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     c28:	21 30       	cpi	r18, 0x01	; 1
     c2a:	91 f0       	breq	.+36     	; 0xc50 <cmd_param_word+0x66>
    return CMD_PARSE_ERROR;
  } else {
    uint16_t new_val;
    if(utilParseWordHex((char*)argv[1],&new_val)) {
     c2c:	12 96       	adiw	r26, 0x02	; 2
     c2e:	8d 91       	ld	r24, X+
     c30:	9c 91       	ld	r25, X
     c32:	13 97       	sbiw	r26, 0x03	; 3
     c34:	be 01       	movw	r22, r28
     c36:	6f 5f       	subi	r22, 0xFF	; 255
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	0e 94 a0 03 	call	0x740	; 0x740 <utilParseWordHex>
     c3e:	88 23       	and	r24, r24
     c40:	39 f0       	breq	.+14     	; 0xc50 <cmd_param_word+0x66>
      *val = new_val;
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	f8 01       	movw	r30, r16
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	80 83       	st	Z, r24
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <cmd_param_word+0x68>
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return CMD_OK;
     c50:	81 e1       	ldi	r24, 0x11	; 17
}
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <cmd_param_toggle>:
  param_reset();
  return CMD_OK;
}

COMMAND(cmd_param_toggle)
{
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	1f 93       	push	r17
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	0f 92       	push	r0
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     c72:	ed 91       	ld	r30, X+
     c74:	fc 91       	ld	r31, X
     c76:	11 97       	sbiw	r26, 0x01	; 1
     c78:	90 81       	ld	r25, Z
  uint8_t type = argv[0][1];
     c7a:	21 81       	ldd	r18, Z+1	; 0x01
  uint8_t *val = 0;
  uint8_t result = CMD_OK;

  if(group == 't') {
     c7c:	94 37       	cpi	r25, 0x74	; 116
     c7e:	41 f4       	brne	.+16     	; 0xc90 <cmd_param_toggle+0x30>
    switch(type) {
     c80:	2d 36       	cpi	r18, 0x6D	; 109
     c82:	71 f5       	brne	.+92     	; 0xce0 <cmd_param_toggle+0x80>
     c84:	e2 e7       	ldi	r30, 0x72	; 114
     c86:	f1 e0       	ldi	r31, 0x01	; 1
     c88:	90 81       	ld	r25, Z
     c8a:	7f 01       	movw	r14, r30
     c8c:	10 e0       	ldi	r17, 0x00	; 0
     c8e:	11 c0       	rjmp	.+34     	; 0xcb2 <cmd_param_toggle+0x52>
      case 'm': val = &param.test_mode; break;
      default: return CMD_PARSE_ERROR;
    }
  }
  else if(group == 'f') {
     c90:	96 36       	cpi	r25, 0x66	; 102
     c92:	31 f5       	brne	.+76     	; 0xce0 <cmd_param_toggle+0x80>
    switch(type) {
     c94:	23 36       	cpi	r18, 0x63	; 99
     c96:	41 f0       	breq	.+16     	; 0xca8 <cmd_param_toggle+0x48>
     c98:	24 36       	cpi	r18, 0x64	; 100
     c9a:	11 f5       	brne	.+68     	; 0xce0 <cmd_param_toggle+0x80>
     c9c:	e7 e6       	ldi	r30, 0x67	; 103
     c9e:	f1 e0       	ldi	r31, 0x01	; 1
     ca0:	90 81       	ld	r25, Z
     ca2:	7f 01       	movw	r14, r30
     ca4:	13 e0       	ldi	r17, 0x03	; 3
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <cmd_param_toggle+0x52>
     ca8:	e6 e6       	ldi	r30, 0x66	; 102
     caa:	f1 e0       	ldi	r31, 0x01	; 1
     cac:	90 81       	ld	r25, Z
     cae:	7f 01       	movw	r14, r30
     cb0:	13 e0       	ldi	r17, 0x03	; 3
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	31 f4       	brne	.+12     	; 0xcc2 <cmd_param_toggle+0x62>
    // toggle value if no argument is given
    *val = *val ? 0 : 1;
     cb6:	f7 01       	movw	r30, r14
     cb8:	10 82       	st	Z, r1
     cba:	99 23       	and	r25, r25
     cbc:	91 f4       	brne	.+36     	; 0xce2 <cmd_param_toggle+0x82>
     cbe:	80 83       	st	Z, r24
     cc0:	10 c0       	rjmp	.+32     	; 0xce2 <cmd_param_toggle+0x82>
  } else {
    uint8_t new_val;
    if(utilParseByteHex((char*)argv[1],&new_val)) {
     cc2:	12 96       	adiw	r26, 0x02	; 2
     cc4:	8d 91       	ld	r24, X+
     cc6:	9c 91       	ld	r25, X
     cc8:	13 97       	sbiw	r26, 0x03	; 3
     cca:	be 01       	movw	r22, r28
     ccc:	6f 5f       	subi	r22, 0xFF	; 255
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <utilParseByteHex>
     cd4:	88 23       	and	r24, r24
     cd6:	21 f0       	breq	.+8      	; 0xce0 <cmd_param_toggle+0x80>
      *val = new_val;
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	f7 01       	movw	r30, r14
     cdc:	80 83       	st	Z, r24
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <cmd_param_toggle+0x82>
     ce0:	11 e1       	ldi	r17, 0x11	; 17
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return result;
}
     ce2:	81 2f       	mov	r24, r17
     ce4:	0f 90       	pop	r0
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	1f 91       	pop	r17
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	08 95       	ret

00000cf2 <cmd_param_mac_addr>:
  }
  return CMD_OK;
}

COMMAND(cmd_param_mac_addr)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <cmd_param_mac_addr+0x6>
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <cmd_param_mac_addr+0x8>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <cmd_param_mac_addr+0xa>
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	fb 01       	movw	r30, r22
  uint8_t mac[6];

  if(net_parse_mac((char*)argv[1], mac)) {
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	93 81       	ldd	r25, Z+3	; 0x03
     d06:	be 01       	movw	r22, r28
     d08:	6f 5f       	subi	r22, 0xFF	; 255
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	0e 94 99 08 	call	0x1132	; 0x1132 <net_parse_mac>
     d10:	88 23       	and	r24, r24
     d12:	11 f4       	brne	.+4      	; 0xd18 <cmd_param_mac_addr+0x26>
     d14:	81 e1       	ldi	r24, 0x11	; 17
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <cmd_param_mac_addr+0x34>
    net_copy_mac(mac, param.mac_addr);
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	60 e6       	ldi	r22, 0x60	; 96
     d1e:	71 e0       	ldi	r23, 0x01	; 1
     d20:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>
     d24:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     d26:	26 96       	adiw	r28, 0x06	; 6
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <cmd_stats_reset>:
  return CMD_OK;
}

COMMAND(cmd_stats_reset)
{
  stats_reset();
     d38:	0e 94 a0 12 	call	0x2540	; 0x2540 <stats_reset>
  return CMD_OK;
}
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	08 95       	ret

00000d40 <cmd_stats_dump>:
  }
}

COMMAND(cmd_stats_dump)
{
  stats_dump_all();
     d40:	0e 94 de 12 	call	0x25bc	; 0x25bc <stats_dump_all>
  return CMD_OK;
}
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	08 95       	ret

00000d48 <cmd_param_reset>:
  }
}

COMMAND(cmd_param_reset)
{
  param_reset();
     d48:	0e 94 53 09 	call	0x12a6	; 0x12a6 <param_reset>
  return CMD_OK;
}
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	08 95       	ret

00000d50 <cmd_param_load>:
  }
}

COMMAND(cmd_param_load)
{
  uint8_t result = param_load();
     d50:	0e 94 62 09 	call	0x12c4	; 0x12c4 <param_load>
  if(result == PARAM_OK) {
     d54:	81 11       	cpse	r24, r1
    return CMD_OK;
  } else {
    return CMD_MASK_ERROR | result;
     d56:	80 62       	ori	r24, 0x20	; 32
  }
}
     d58:	08 95       	ret

00000d5a <cmd_param_save>:
  return CMD_OK;
}

COMMAND(cmd_param_save)
{
  uint8_t result = param_save();
     d5a:	0e 94 93 09 	call	0x1326	; 0x1326 <param_save>
  if(result == PARAM_OK) {
     d5e:	81 11       	cpse	r24, r1
    return CMD_OK;
  } else {
    return CMD_MASK_ERROR | result;
     d60:	80 62       	ori	r24, 0x20	; 32
  }
}
     d62:	08 95       	ret

00000d64 <cmd_param_dump>:
  return CMD_OK;
}

COMMAND(cmd_param_dump)
{
  param_dump();
     d64:	0e 94 2d 09 	call	0x125a	; 0x125a <param_dump>
  return CMD_OK;
}
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	08 95       	ret

00000d6c <cmd_enter_pb_test_mode>:
  stats_reset();
}

COMMAND_KEY(cmd_enter_pb_test_mode)
{
  run_mode = RUN_MODE_PB_TEST;
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	80 93 42 01 	sts	0x0142, r24
}
     d72:	08 95       	ret

00000d74 <cmd_enter_pio_test_mode>:

COMMAND_KEY(cmd_enter_pio_test_mode)
{
  run_mode = RUN_MODE_PIO_TEST;
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	80 93 42 01 	sts	0x0142, r24
}
     d7a:	08 95       	ret

00000d7c <cmd_enter_bridge_mode>:

COMMAND_KEY(cmd_enter_bridge_mode)
{
  run_mode = RUN_MODE_BRIDGE;
     d7c:	10 92 42 01 	sts	0x0142, r1
}
     d80:	08 95       	ret

00000d82 <cmd_enter_bridge_test_mode>:

COMMAND_KEY(cmd_enter_bridge_test_mode)
{
  run_mode = RUN_MODE_BRIDGE_TEST;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 93 42 01 	sts	0x0142, r24
}
     d88:	08 95       	ret

00000d8a <cmd_toggle_verbose>:
  pb_test_toggle_auto();
}

COMMAND_KEY(cmd_toggle_verbose)
{
  global_verbose = !global_verbose;
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	80 91 43 01 	lds	r24, 0x0143
     d90:	88 23       	and	r24, r24
     d92:	09 f4       	brne	.+2      	; 0xd96 <cmd_toggle_verbose+0xc>
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	90 93 43 01 	sts	0x0143, r25
  // NOTE: UART - VERBOSE: global_verbose ? "ON\r\n" : "OFF\r\n"
}
     d9a:	08 95       	ret

00000d9c <cmd_toggle_auto_mode>:
  pb_test_send_packet(1);
}

COMMAND_KEY(cmd_toggle_auto_mode)
{
  pb_test_toggle_auto();
     d9c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <pb_test_toggle_auto>
}
     da0:	08 95       	ret

00000da2 <cmd_send_test_packet_silent>:
  pb_test_send_packet(0);
}

COMMAND_KEY(cmd_send_test_packet_silent)
{
  pb_test_send_packet(1);
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <pb_test_send_packet>
}
     da8:	08 95       	ret

00000daa <cmd_send_test_packet>:
  run_mode = RUN_MODE_BRIDGE_TEST;
}

COMMAND_KEY(cmd_send_test_packet)
{
  pb_test_send_packet(0);
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <pb_test_send_packet>
}
     db0:	08 95       	ret

00000db2 <cmd_reset_stats>:
  stats_dump_all();
}

COMMAND_KEY(cmd_reset_stats)
{
  stats_reset();
     db2:	0e 94 a0 12 	call	0x2540	; 0x2540 <stats_reset>
}
     db6:	08 95       	ret

00000db8 <cmd_dump_stats>:
#include "main.h"
#include "base/uartutil.h"

COMMAND_KEY(cmd_dump_stats)
{
  stats_dump_all();
     db8:	0e 94 de 12 	call	0x25bc	; 0x25bc <stats_dump_all>
}
     dbc:	08 95       	ret

00000dbe <dump_eth_pkt>:
void dump_eth_pkt(const uint8_t *eth_buf, uint16_t size)
{
  uint8_t buf[4];

  // NOTE: UART - [dword_to_dec(size), hex_word(eth_get_pkt_type(eth_buf)), eth_get_src_mac(eth_buf) > eth_get_tgt_mac(eth_buf)]
}
     dbe:	08 95       	ret

00000dc0 <dump_ip_pkt>:
		// NOTE: UART - , hex_word(proto)
  }

  // src/tgt ip
  // NOTE: UART - , net_dump_ip(ip_get_src_ip(ip_buf)) > net_dump_ip(ip_get_tgt_ip(ip_buf)) ]
}
     dc0:	08 95       	ret

00000dc2 <dump_pb_cmd>:
  if(!ps->is_send) {
		// NOTE: UART - +req= uart_send_delta(ps->recv_delta);
  }

  // NOTE: UART - \r\n
}
     dc2:	08 95       	ret

00000dc4 <dump_arp_pkt>:

extern uint8_t arp_is_ipv4(const uint8_t *buf, uint16_t len);
extern void arp_make_reply(uint8_t *buf, const uint8_t *my_mac, const uint8_t *my_ip);

/* getter */
inline uint16_t arp_get_op(const uint8_t *buf) { return net_get_word(buf + ARP_OFF_OP); }
     dc4:	06 96       	adiw	r24, 0x06	; 6
     dc6:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
		// NOTE: UART - hex_word(op)
  }

  // src-tgt pair
  // NOTE: UART - ,(net_dump_mac(arp_get_src_mac(arp_buf)), net_dump_ip(arp_get_src_ip(arp_buf))) > (net_dump_mac(arp_get_tgt_mac(arp_buf)) , net_dump_ip(arp_get_tgt_ip(arp_buf)))]
}
     dca:	08 95       	ret

00000dcc <dump_ip_protocol>:
		// NOTE: UART - hex_word(port)
  }
}

extern void dump_ip_protocol(const uint8_t *ip_buf)
{
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	fc 01       	movw	r30, r24
  const uint8_t *proto_buf = ip_buf + ip_get_hdr_length(ip_buf);
     dd4:	80 81       	ld	r24, Z
     dd6:	88 0f       	add	r24, r24
     dd8:	88 0f       	add	r24, r24
     dda:	8c 73       	andi	r24, 0x3C	; 60
     ddc:	ef 01       	movw	r28, r30
     dde:	c8 0f       	add	r28, r24
     de0:	d1 1d       	adc	r29, r1

inline const uint8_t *ip_get_src_ip(const uint8_t *buf) { return buf + 12; }
inline const uint8_t *ip_get_tgt_ip(const uint8_t *buf) { return buf + 16; }
inline uint16_t ip_get_total_length(const uint8_t *buf) { return (uint16_t)buf[2] << 8 | (uint16_t)buf[3]; }
inline uint8_t ip_get_hdr_length(const uint8_t *buf) { return (buf[0] & 0xf) * 4; }
inline uint8_t ip_get_protocol(const uint8_t *buf) { return buf[9]; }
     de2:	81 85       	ldd	r24, Z+9	; 0x09
  uint8_t proto = ip_get_protocol(ip_buf);
  if(proto == IP_PROTOCOL_UDP) {
     de4:	81 31       	cpi	r24, 0x11	; 17
     de6:	41 f4       	brne	.+16     	; 0xdf8 <dump_ip_protocol+0x2c>
#define UDP_LENGTH_OFF    4
#define UDP_CHECKSUM_OFF  6
#define UDP_DATA_OFF      8

inline const uint8_t *udp_get_data_ptr(const uint8_t *udp_buf) { return udp_buf + UDP_DATA_OFF; }
inline uint16_t  udp_get_src_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_SRC_PORT_OFF); }
     de8:	ce 01       	movw	r24, r28
     dea:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
inline uint16_t  udp_get_tgt_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_TGT_PORT_OFF); }
     dee:	ce 01       	movw	r24, r28
     df0:	02 96       	adiw	r24, 0x02	; 2
     df2:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
     df6:	18 c0       	rjmp	.+48     	; 0xe28 <dump_ip_protocol+0x5c>
		// NOTE: UART - [UDP:
    uint16_t src_port = udp_get_src_port(proto_buf);
    uint16_t tgt_port = udp_get_tgt_port(proto_buf);
    // NOTE: UART - src_port > tgt_port]
  }
  else if(proto == IP_PROTOCOL_TCP) {
     df8:	86 30       	cpi	r24, 0x06	; 6
     dfa:	b1 f4       	brne	.+44     	; 0xe28 <dump_ip_protocol+0x5c>
#define TCP_FLAGS_ECE     0x040
#define TCP_FLAGS_CWR     0x080
#define TCP_FLAGS_NS      0x100

inline const uint8_t *tcp_get_data_ptr(const uint8_t *tcp_buf) { return tcp_buf + (tcp_buf[TCP_DATA_SIZE_OFF] >> 4) * 4; }
inline uint16_t  tcp_get_src_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_SRC_PORT_OFF); }
     dfc:	ce 01       	movw	r24, r28
     dfe:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
inline uint16_t  tcp_get_tgt_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_TGT_PORT_OFF); }
     e02:	ce 01       	movw	r24, r28
     e04:	02 96       	adiw	r24, 0x02	; 2
     e06:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
inline uint32_t  tcp_get_seq_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_SEQ_NUM_OFF); }
inline uint32_t  tcp_get_ack_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_ACK_NUM_OFF); }
inline uint16_t  tcp_get_flags(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_FLAGS_OFF) & 0x1ff; }
     e0a:	ce 01       	movw	r24, r28
     e0c:	0c 96       	adiw	r24, 0x0c	; 12
     e0e:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
     e12:	18 2f       	mov	r17, r24
#define TCP_FLAGS_NS      0x100

inline const uint8_t *tcp_get_data_ptr(const uint8_t *tcp_buf) { return tcp_buf + (tcp_buf[TCP_DATA_SIZE_OFF] >> 4) * 4; }
inline uint16_t  tcp_get_src_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_SRC_PORT_OFF); }
inline uint16_t  tcp_get_tgt_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_TGT_PORT_OFF); }
inline uint32_t  tcp_get_seq_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_SEQ_NUM_OFF); }
     e14:	ce 01       	movw	r24, r28
     e16:	04 96       	adiw	r24, 0x04	; 4
     e18:	0e 94 0c 08 	call	0x1018	; 0x1018 <net_get_long>
		// NOTE: UART - ,flags= hex_word(flags)

    uint32_t seq = tcp_get_seq_num(proto_buf);
    // NOTE: UART - ,seq= hex_word(seq)

    if(flags & TCP_FLAGS_ACK) {
     e1c:	14 ff       	sbrs	r17, 4
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <dump_ip_protocol+0x5c>
inline uint32_t  tcp_get_ack_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_ACK_NUM_OFF); }
     e20:	ce 01       	movw	r24, r28
     e22:	08 96       	adiw	r24, 0x08	; 8
     e24:	0e 94 0c 08 	call	0x1018	; 0x1018 <net_get_long>
      // NOTE: UART - ,ack= hex_word(ack)
    }

    // NOTE: UART - ]
  }
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	08 95       	ret

00000e30 <dump_line>:

extern void dump_line(const uint8_t *eth_buf, uint16_t size)
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
  dump_eth_pkt(eth_buf, size);

  const uint8_t *ip_buf = eth_buf + ETH_HDR_SIZE;
     e34:	ec 01       	movw	r28, r24
     e36:	2e 96       	adiw	r28, 0x0e	; 14
 * Returns EtherType field value in given eth frame.
 * @param pkt Pointer to eth frame.
 * @return 2-byte EtherType field value.
 */
inline uint16_t eth_get_pkt_type(const uint8_t *pkt) {
	return net_get_word(pkt + ETH_OFF_TYPE);
     e38:	0c 96       	adiw	r24, 0x0c	; 12
     e3a:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
  uint16_t type = eth_get_pkt_type(eth_buf);
  if(type == ETH_TYPE_ARP) {
     e3e:	28 e0       	ldi	r18, 0x08	; 8
     e40:	86 30       	cpi	r24, 0x06	; 6
     e42:	92 07       	cpc	r25, r18
     e44:	21 f4       	brne	.+8      	; 0xe4e <dump_line+0x1e>
    dump_arp_pkt(ip_buf);
     e46:	ce 01       	movw	r24, r28
     e48:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <dump_arp_pkt>
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <dump_line+0x2a>
  } else if(type == ETH_TYPE_IPV4) {
     e4e:	80 50       	subi	r24, 0x00	; 0
     e50:	98 40       	sbci	r25, 0x08	; 8
     e52:	19 f4       	brne	.+6      	; 0xe5a <dump_line+0x2a>
    dump_ip_pkt(ip_buf);
    dump_ip_protocol(ip_buf);
     e54:	ce 01       	movw	r24, r28
     e56:	0e 94 e6 06 	call	0xdcc	; 0xdcc <dump_ip_protocol>
  }
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <main>:
 * 	NAck:    output, default: 1
 */
static void init_hw(void)
{
	// Disable watchdog
	wdt_disable();
     e60:	88 e1       	ldi	r24, 0x18	; 24
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	80 93 60 00 	sts	0x0060, r24
     e6a:	10 92 60 00 	sts	0x0060, r1
     e6e:	0f be       	out	0x3f, r0	; 63
	sei();
     e70:	78 94       	sei

	// Setup timers
	timer_init();
     e72:	0e 94 f6 01 	call	0x3ec	; 0x3ec <timer_init>

	// Zero DDR and PORT status
  PAR_STATUS_DDR &= ~PAR_STATUS_MASK;
     e76:	a7 e2       	ldi	r26, 0x27	; 39
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	8c 91       	ld	r24, X
     e7c:	80 7e       	andi	r24, 0xE0	; 224
     e7e:	8c 93       	st	X, r24
  PAR_STATUS_PORT &= ~PAR_STATUS_MASK;
     e80:	e8 e2       	ldi	r30, 0x28	; 40
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 7e       	andi	r24, 0xE0	; 224
     e88:	80 83       	st	Z, r24

  // Set them correctly
  PAR_STATUS_DDR |= BUSY | NACK;
     e8a:	8c 91       	ld	r24, X
     e8c:	86 60       	ori	r24, 0x06	; 6
     e8e:	8c 93       	st	X, r24
  PAR_STATUS_PORT |= NSTROBE | SEL | POUT | NACK;
     e90:	80 81       	ld	r24, Z
     e92:	8b 61       	ori	r24, 0x1B	; 27
     e94:	80 83       	st	Z, r24

  PAR_DATA_DDR = 0xFF;
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	8a b9       	out	0x0a, r24	; 10

	// Send welcome message
	// NOTE: UART - \r\nWelcome to plipbox " VERSION " " BUILD_DATE "\r\n

	// Load & display parameters (config)
	param_init();
     e9a:	0e 94 8c 09 	call	0x1318	; 0x1318 <param_init>
	param_dump();
     e9e:	0e 94 2d 09 	call	0x125a	; 0x125a <param_dump>
	#endif

	// Enter main loop depending on current run mode
	uint8_t result = CMD_WORKER_IDLE;
	while(result != CMD_WORKER_RESET)
		switch(run_mode) {
     ea2:	80 91 42 01 	lds	r24, 0x0142
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	29 f0       	breq	.+10     	; 0xeb4 <main+0x54>
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	31 f0       	breq	.+12     	; 0xeba <main+0x5a>
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	51 f4       	brne	.+20     	; 0xec6 <main+0x66>
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <main+0x60>
			case RUN_MODE_PB_TEST:
				result = pb_test_loop();
     eb4:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <pb_test_loop>
     eb8:	08 c0       	rjmp	.+16     	; 0xeca <main+0x6a>
				break;
			case RUN_MODE_PIO_TEST:
				result = pio_test_loop();
     eba:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <pio_test_loop>
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <main+0x6a>
				break;
			case RUN_MODE_BRIDGE_TEST:
				result = bridge_test_loop();
     ec0:	0e 94 45 05 	call	0xa8a	; 0xa8a <bridge_test_loop>
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <main+0x6a>
				break;
			case RUN_MODE_BRIDGE:
			default:
				result = bridge_loop();
     ec6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <bridge_loop>
		uart_send_free_stack();
	#endif

	// Enter main loop depending on current run mode
	uint8_t result = CMD_WORKER_IDLE;
	while(result != CMD_WORKER_RESET)
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	51 f7       	brne	.-44     	; 0xea2 <main+0x42>
				result = bridge_loop();
				break;
		}

	// Wait a bit and do a reset
	timer_delay_10ms(10);
     ece:	8a e0       	ldi	r24, 0x0A	; 10
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 6d 02 	call	0x4da	; 0x4da <timer_delay_10ms>
	wdt_enable(WDTO_15MS);
     ed6:	28 e0       	ldi	r18, 0x08	; 8
     ed8:	88 e1       	ldi	r24, 0x18	; 24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	a8 95       	wdr
     ee2:	80 93 60 00 	sts	0x0060, r24
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	20 93 60 00 	sts	0x0060, r18
     eec:	ff cf       	rjmp	.-2      	; 0xeec <main+0x8c>

00000eee <arp_make_reply>:

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
}

void arp_make_reply(uint8_t *buf, const uint8_t *my_mac, const uint8_t *my_ip)
{
     eee:	8f 92       	push	r8
     ef0:	9f 92       	push	r9
     ef2:	af 92       	push	r10
     ef4:	bf 92       	push	r11
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	8c 01       	movw	r16, r24
     f04:	5b 01       	movw	r10, r22
     f06:	4a 01       	movw	r8, r20
	// make a reply
	net_put_word(buf + ARP_OFF_OP, ARP_REPLY);
     f08:	06 96       	adiw	r24, 0x06	; 6
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	0e 94 08 08 	call	0x1010	; 0x1010 <net_put_word>
	net_copy_mac(buf + ARP_OFF_SRC_MAC, buf + ARP_OFF_TGT_MAC);
     f12:	cc 24       	eor	r12, r12
     f14:	dd 24       	eor	r13, r13
     f16:	68 94       	set
     f18:	c3 f8       	bld	r12, 3
     f1a:	c0 0e       	add	r12, r16
     f1c:	d1 1e       	adc	r13, r17
     f1e:	b8 01       	movw	r22, r16
     f20:	6e 5e       	subi	r22, 0xEE	; 238
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	c6 01       	movw	r24, r12
     f26:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>
	net_copy_ip(buf + ARP_OFF_SRC_IP, buf + ARP_OFF_TGT_IP);
     f2a:	0f 2e       	mov	r0, r31
     f2c:	fe e0       	ldi	r31, 0x0E	; 14
     f2e:	ef 2e       	mov	r14, r31
     f30:	ff 24       	eor	r15, r15
     f32:	f0 2d       	mov	r31, r0
     f34:	e0 0e       	add	r14, r16
     f36:	f1 1e       	adc	r15, r17
     f38:	08 5e       	subi	r16, 0xE8	; 232
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	c7 01       	movw	r24, r14
     f3e:	b8 01       	movw	r22, r16
     f40:	0e 94 ed 07 	call	0xfda	; 0xfda <net_copy_ip>
	net_copy_mac(my_mac, buf + ARP_OFF_SRC_MAC);
     f44:	c5 01       	movw	r24, r10
     f46:	b6 01       	movw	r22, r12
     f48:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>
	net_copy_ip(my_ip, buf + ARP_OFF_SRC_IP);
     f4c:	c4 01       	movw	r24, r8
     f4e:	b7 01       	movw	r22, r14
     f50:	0e 94 ed 07 	call	0xfda	; 0xfda <net_copy_ip>
}
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	cf 90       	pop	r12
     f60:	bf 90       	pop	r11
     f62:	af 90       	pop	r10
     f64:	9f 90       	pop	r9
     f66:	8f 90       	pop	r8
     f68:	08 95       	ret

00000f6a <arp_is_ipv4>:

#include "arp.h"
#include "net.h"

uint8_t arp_is_ipv4(const uint8_t *buf, uint16_t len)
{
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	ec 01       	movw	r28, r24
  if(len < ARP_SIZE) {
     f74:	6c 31       	cpi	r22, 0x1C	; 28
     f76:	71 05       	cpc	r23, r1
     f78:	10 f4       	brcc	.+4      	; 0xf7e <arp_is_ipv4+0x14>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	1a c0       	rjmp	.+52     	; 0xfb2 <arp_is_ipv4+0x48>
    return 0;
  }

  uint16_t hw_type = net_get_word(buf + ARP_OFF_HW_TYPE);
     f7e:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
     f82:	8c 01       	movw	r16, r24
  uint16_t pt_type = net_get_word(buf + ARP_OFF_PROT_TYPE);
     f84:	ce 01       	movw	r24, r28
     f86:	02 96       	adiw	r24, 0x02	; 2
     f88:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
  uint8_t hw_size = buf[ARP_OFF_HW_SIZE];
     f8c:	2c 81       	ldd	r18, Y+4	; 0x04
  uint8_t pt_size = buf[ARP_OFF_PROT_SIZE];
     f8e:	3d 81       	ldd	r19, Y+5	; 0x05

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
     f90:	01 30       	cpi	r16, 0x01	; 1
     f92:	11 05       	cpc	r17, r1
     f94:	61 f4       	brne	.+24     	; 0xfae <arp_is_ipv4+0x44>
     f96:	80 50       	subi	r24, 0x00	; 0
     f98:	98 40       	sbci	r25, 0x08	; 8
     f9a:	49 f4       	brne	.+18     	; 0xfae <arp_is_ipv4+0x44>
     f9c:	26 30       	cpi	r18, 0x06	; 6
     f9e:	39 f4       	brne	.+14     	; 0xfae <arp_is_ipv4+0x44>
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	34 30       	cpi	r19, 0x04	; 4
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <arp_is_ipv4+0x3e>
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 27       	eor	r24, r25
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <arp_is_ipv4+0x48>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	08 95       	ret

00000fbc <net_copy_mac>:
const uint8_t net_bcast_mac[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
const uint8_t net_zero_mac[6] = { 0,0,0,0,0,0 };
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
     fbc:	ac 01       	movw	r20, r24
     fbe:	25 e0       	ldi	r18, 0x05	; 5
	uint8_t i;
  for(i=6; i--;)
    out[i] = in[i];
     fc0:	82 2f       	mov	r24, r18
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	db 01       	movw	r26, r22
     fc6:	a8 0f       	add	r26, r24
     fc8:	b9 1f       	adc	r27, r25
     fca:	fa 01       	movw	r30, r20
     fcc:	e8 0f       	add	r30, r24
     fce:	f9 1f       	adc	r31, r25
     fd0:	80 81       	ld	r24, Z
     fd2:	8c 93       	st	X, r24
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
	uint8_t i;
  for(i=6; i--;)
     fd4:	21 50       	subi	r18, 0x01	; 1
     fd6:	a0 f7       	brcc	.-24     	; 0xfc0 <net_copy_mac+0x4>
    out[i] = in[i];
}
     fd8:	08 95       	ret

00000fda <net_copy_ip>:

void net_copy_ip(const uint8_t *in, uint8_t *out) {
     fda:	fc 01       	movw	r30, r24
     fdc:	db 01       	movw	r26, r22
	uint8_t i;
  for(i = 4; i--;)
		out[i] = in[i];
     fde:	83 81       	ldd	r24, Z+3	; 0x03
     fe0:	13 96       	adiw	r26, 0x03	; 3
     fe2:	8c 93       	st	X, r24
     fe4:	13 97       	sbiw	r26, 0x03	; 3
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	12 96       	adiw	r26, 0x02	; 2
     fea:	8c 93       	st	X, r24
     fec:	12 97       	sbiw	r26, 0x02	; 2
     fee:	81 81       	ldd	r24, Z+1	; 0x01
     ff0:	11 96       	adiw	r26, 0x01	; 1
     ff2:	8c 93       	st	X, r24
     ff4:	11 97       	sbiw	r26, 0x01	; 1
     ff6:	80 81       	ld	r24, Z
     ff8:	8c 93       	st	X, r24
}
     ffa:	08 95       	ret

00000ffc <net_get_word>:

uint16_t  net_get_word(const uint8_t *buf) {
     ffc:	fc 01       	movw	r30, r24
     ffe:	21 81       	ldd	r18, Z+1	; 0x01
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	90 81       	ld	r25, Z
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	28 2b       	or	r18, r24
    1008:	39 2b       	or	r19, r25
  return (uint16_t)buf[0] << 8 | (uint16_t)buf[1];
}
    100a:	82 2f       	mov	r24, r18
    100c:	93 2f       	mov	r25, r19
    100e:	08 95       	ret

00001010 <net_put_word>:

void net_put_word(uint8_t *buf, uint16_t value)
{
    1010:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 8);
    1012:	70 83       	st	Z, r23
  buf[1] = (uint8_t)(value & 0xff);
    1014:	61 83       	std	Z+1, r22	; 0x01
}
    1016:	08 95       	ret

00001018 <net_get_long>:

uint32_t  net_get_long(const uint8_t *buf)
{
    1018:	fc 01       	movw	r30, r24
    101a:	23 81       	ldd	r18, Z+3	; 0x03
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	a0 e0       	ldi	r26, 0x00	; 0
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	b8 2f       	mov	r27, r24
    102c:	aa 27       	eor	r26, r26
    102e:	99 27       	eor	r25, r25
    1030:	88 27       	eor	r24, r24
    1032:	28 2b       	or	r18, r24
    1034:	39 2b       	or	r19, r25
    1036:	4a 2b       	or	r20, r26
    1038:	5b 2b       	or	r21, r27
    103a:	81 81       	ldd	r24, Z+1	; 0x01
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a0 e0       	ldi	r26, 0x00	; 0
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	dc 01       	movw	r26, r24
    1044:	99 27       	eor	r25, r25
    1046:	88 27       	eor	r24, r24
    1048:	28 2b       	or	r18, r24
    104a:	39 2b       	or	r19, r25
    104c:	4a 2b       	or	r20, r26
    104e:	5b 2b       	or	r21, r27
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ba 2f       	mov	r27, r26
    105a:	a9 2f       	mov	r26, r25
    105c:	98 2f       	mov	r25, r24
    105e:	88 27       	eor	r24, r24
    1060:	28 2b       	or	r18, r24
    1062:	39 2b       	or	r19, r25
    1064:	4a 2b       	or	r20, r26
    1066:	5b 2b       	or	r21, r27
  return (uint32_t)buf[0] << 24 | (uint32_t)buf[1] << 16 | (uint32_t)buf[2] << 8 | (uint32_t)buf[3];
}
    1068:	62 2f       	mov	r22, r18
    106a:	73 2f       	mov	r23, r19
    106c:	84 2f       	mov	r24, r20
    106e:	95 2f       	mov	r25, r21
    1070:	08 95       	ret

00001072 <net_put_long>:

void net_put_long(uint8_t *buf, uint32_t value)
{
    1072:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 24);
    1074:	87 2f       	mov	r24, r23
    1076:	99 27       	eor	r25, r25
    1078:	aa 27       	eor	r26, r26
    107a:	bb 27       	eor	r27, r27
    107c:	80 83       	st	Z, r24
  buf[1] = (uint8_t)((value >> 16) & 0xff);
    107e:	cb 01       	movw	r24, r22
    1080:	aa 27       	eor	r26, r26
    1082:	bb 27       	eor	r27, r27
    1084:	81 83       	std	Z+1, r24	; 0x01
  buf[2] = (uint8_t)((value >> 8) & 0xff);
    1086:	bb 27       	eor	r27, r27
    1088:	a7 2f       	mov	r26, r23
    108a:	96 2f       	mov	r25, r22
    108c:	85 2f       	mov	r24, r21
    108e:	82 83       	std	Z+2, r24	; 0x02
  buf[3] = (uint8_t)(value & 0xff);
    1090:	43 83       	std	Z+3, r20	; 0x03
}
    1092:	08 95       	ret

00001094 <net_compare_mac>:
    pos += 4;
  }
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
    1094:	ac 01       	movw	r20, r24
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++)
    if(a[i] != b[i])
    109a:	fa 01       	movw	r30, r20
    109c:	e2 0f       	add	r30, r18
    109e:	f3 1f       	adc	r31, r19
    10a0:	db 01       	movw	r26, r22
    10a2:	a2 0f       	add	r26, r18
    10a4:	b3 1f       	adc	r27, r19
    10a6:	90 81       	ld	r25, Z
    10a8:	8c 91       	ld	r24, X
    10aa:	98 17       	cp	r25, r24
    10ac:	11 f0       	breq	.+4      	; 0x10b2 <net_compare_mac+0x1e>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	08 95       	ret
    10b2:	2f 5f       	subi	r18, 0xFF	; 255
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<6;i++)
    10b6:	26 30       	cpi	r18, 0x06	; 6
    10b8:	31 05       	cpc	r19, r1
    10ba:	79 f7       	brne	.-34     	; 0x109a <net_compare_mac+0x6>
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
    10be:	08 95       	ret

000010c0 <net_compare_ip>:

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
    10c0:	ac 01       	movw	r20, r24
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++)
    if(a[i] != b[i])
    10c6:	fa 01       	movw	r30, r20
    10c8:	e2 0f       	add	r30, r18
    10ca:	f3 1f       	adc	r31, r19
    10cc:	db 01       	movw	r26, r22
    10ce:	a2 0f       	add	r26, r18
    10d0:	b3 1f       	adc	r27, r19
    10d2:	90 81       	ld	r25, Z
    10d4:	8c 91       	ld	r24, X
    10d6:	98 17       	cp	r25, r24
    10d8:	11 f0       	breq	.+4      	; 0x10de <net_compare_ip+0x1e>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	08 95       	ret
    10de:	2f 5f       	subi	r18, 0xFF	; 255
    10e0:	3f 4f       	sbci	r19, 0xFF	; 255
  return 1;
}

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<4;i++)
    10e2:	24 30       	cpi	r18, 0x04	; 4
    10e4:	31 05       	cpc	r19, r1
    10e6:	79 f7       	brne	.-34     	; 0x10c6 <net_compare_ip+0x6>
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
    10ea:	08 95       	ret

000010ec <net_dump_ip>:
    mac[i] = value;
  }
  return 1;
}

void net_dump_ip(const uint8_t *in) {
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    10f8:	20 91 24 01 	lds	r18, 0x0124
    10fc:	30 91 25 01 	lds	r19, 0x0125
    1100:	8c 01       	movw	r16, r24
    1102:	e9 01       	movw	r28, r18
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    1104:	ee 24       	eor	r14, r14
    1106:	ff 24       	eor	r15, r15
    1108:	68 94       	set
    110a:	e4 f8       	bld	r14, 4
    110c:	e2 0e       	add	r14, r18
    110e:	f3 1e       	adc	r15, r19
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    1110:	f8 01       	movw	r30, r16
    1112:	81 91       	ld	r24, Z+
    1114:	8f 01       	movw	r16, r30
    1116:	be 01       	movw	r22, r28
    1118:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <utilByteToDec>
    111c:	24 96       	adiw	r28, 0x04	; 4
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    111e:	ce 15       	cp	r28, r14
    1120:	df 05       	cpc	r29, r15
    1122:	b1 f7       	brne	.-20     	; 0x1110 <net_dump_ip+0x24>
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    pos += 4;
  }
  // NOTE: UART - ip_str
}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	08 95       	ret

00001132 <net_parse_mac>:
    ip[i] = value;
  }
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
    1132:	af 92       	push	r10
    1134:	bf 92       	push	r11
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	7c 01       	movw	r14, r24
    114e:	6b 01       	movw	r12, r22
    1150:	00 e0       	ldi	r16, 0x00	; 0
    1152:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++) {
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
    1154:	5e 01       	movw	r10, r28
    1156:	08 94       	sec
    1158:	a1 1c       	adc	r10, r1
    115a:	b1 1c       	adc	r11, r1
    115c:	c7 01       	movw	r24, r14
    115e:	b5 01       	movw	r22, r10
    1160:	0e 94 71 03 	call	0x6e2	; 0x6e2 <utilParseByteHex>
    1164:	88 23       	and	r24, r24
    1166:	89 f0       	breq	.+34     	; 0x118a <net_parse_mac+0x58>
      return 0;
    }
    buf += 3;
    mac[i] = value;
    1168:	f6 01       	movw	r30, r12
    116a:	e0 0f       	add	r30, r16
    116c:	f1 1f       	adc	r31, r17
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	80 83       	st	Z, r24
    1172:	0f 5f       	subi	r16, 0xFF	; 255
    1174:	1f 4f       	sbci	r17, 0xFF	; 255
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
	uint8_t i;
  for(i=0;i<6;i++) {
    1176:	06 30       	cpi	r16, 0x06	; 6
    1178:	11 05       	cpc	r17, r1
    117a:	11 f4       	brne	.+4      	; 0x1180 <net_parse_mac+0x4e>
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	06 c0       	rjmp	.+12     	; 0x118c <net_parse_mac+0x5a>
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
      return 0;
    }
    buf += 3;
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	e8 0e       	add	r14, r24
    1186:	f9 1e       	adc	r15, r25
    1188:	e9 cf       	rjmp	.-46     	; 0x115c <net_parse_mac+0x2a>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    mac[i] = value;
  }
  return 1;
}
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ff 90       	pop	r15
    1198:	ef 90       	pop	r14
    119a:	df 90       	pop	r13
    119c:	cf 90       	pop	r12
    119e:	bf 90       	pop	r11
    11a0:	af 90       	pop	r10
    11a2:	08 95       	ret

000011a4 <net_parse_ip>:
    pos += 3;
  }
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
    11a4:	af 92       	push	r10
    11a6:	bf 92       	push	r11
    11a8:	cf 92       	push	r12
    11aa:	df 92       	push	r13
    11ac:	ef 92       	push	r14
    11ae:	ff 92       	push	r15
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	0f 92       	push	r0
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	7c 01       	movw	r14, r24
    11c0:	6b 01       	movw	r12, r22
    11c2:	00 e0       	ldi	r16, 0x00	; 0
    11c4:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++) {
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
    11c6:	5e 01       	movw	r10, r28
    11c8:	08 94       	sec
    11ca:	a1 1c       	adc	r10, r1
    11cc:	b1 1c       	adc	r11, r1
    11ce:	c7 01       	movw	r24, r14
    11d0:	b5 01       	movw	r22, r10
    11d2:	0e 94 3a 04 	call	0x874	; 0x874 <utilParseByteDec>
    11d6:	98 2f       	mov	r25, r24
    if(digits == 0)
    11d8:	88 23       	and	r24, r24
    11da:	91 f0       	breq	.+36     	; 0x1200 <net_parse_ip+0x5c>
      return 0;
    buf += digits + 1;
    ip[i] = value;
    11dc:	f6 01       	movw	r30, r12
    11de:	e0 0f       	add	r30, r16
    11e0:	f1 1f       	adc	r31, r17
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	80 83       	st	Z, r24
    11e6:	0f 5f       	subi	r16, 0xFF	; 255
    11e8:	1f 4f       	sbci	r17, 0xFF	; 255
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
	uint8_t i;
  for(i=0;i<4;i++) {
    11ea:	04 30       	cpi	r16, 0x04	; 4
    11ec:	11 05       	cpc	r17, r1
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <net_parse_ip+0x50>
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	07 c0       	rjmp	.+14     	; 0x1202 <net_parse_ip+0x5e>
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
    if(digits == 0)
      return 0;
    buf += digits + 1;
    11f4:	89 2f       	mov	r24, r25
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	e8 0e       	add	r14, r24
    11fc:	f9 1e       	adc	r15, r25
    11fe:	e7 cf       	rjmp	.-50     	; 0x11ce <net_parse_ip+0x2a>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    ip[i] = value;
  }
  return 1;
}
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	08 95       	ret

0000121a <net_dump_mac>:
}

static char *mac_str = "00:00:00:00:00:00";
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
    utilByteToHex(in[i], mac_str+pos);
    1226:	e0 90 38 01 	lds	r14, 0x0138
    122a:	f0 90 39 01 	lds	r15, 0x0139
    122e:	8c 01       	movw	r16, r24
    1230:	c0 e0       	ldi	r28, 0x00	; 0
    1232:	d0 e0       	ldi	r29, 0x00	; 0
    1234:	b7 01       	movw	r22, r14
    1236:	6c 0f       	add	r22, r28
    1238:	7d 1f       	adc	r23, r29
    123a:	f8 01       	movw	r30, r16
    123c:	81 91       	ld	r24, Z+
    123e:	8f 01       	movw	r16, r30
    1240:	0e 94 b1 02 	call	0x562	; 0x562 <utilByteToHex>
    pos += 3;
    1244:	23 96       	adiw	r28, 0x03	; 3
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
    1246:	c2 31       	cpi	r28, 0x12	; 18
    1248:	d1 05       	cpc	r29, r1
    124a:	a1 f7       	brne	.-24     	; 0x1234 <net_dump_mac+0x1a>
    utilByteToHex(in[i], mac_str+pos);
    pos += 3;
  }
  // NOTE: UART - mac_str
}
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	08 95       	ret

0000125a <param_dump>:
	// NOTE: UART - \r\n tt: packet type param.test_ptype
	// NOTE: UART - \r\n ti: ip address param.test_ip
	// NOTE: UART - \r\n tp: udp port param.test_port
	// NOTE: UART - \r\n tm: test mode param.test_mode
	// NOTE: UART - \r\n
}
    125a:	08 95       	ret

0000125c <calc_crc16>:

// build check sum for parameter block
static uint16_t calc_crc16(param_t *p)
{
  uint16_t crc16 = 0xffff;
  uint8_t *data = (uint8_t *)p;
    125c:	fc 01       	movw	r30, r24
    125e:	4f ef       	ldi	r20, 0xFF	; 255
    1260:	5f ef       	ldi	r21, 0xFF	; 255
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    1266:	81 91       	ld	r24, Z+
    1268:	48 27       	eor	r20, r24
    126a:	84 2f       	mov	r24, r20
    126c:	82 95       	swap	r24
    126e:	84 27       	eor	r24, r20
    1270:	08 2e       	mov	r0, r24
    1272:	86 95       	lsr	r24
    1274:	86 95       	lsr	r24
    1276:	80 25       	eor	r24, r0
    1278:	08 2e       	mov	r0, r24
    127a:	86 95       	lsr	r24
    127c:	80 25       	eor	r24, r0
    127e:	87 70       	andi	r24, 0x07	; 7
    1280:	04 2e       	mov	r0, r20
    1282:	45 2f       	mov	r20, r21
    1284:	86 95       	lsr	r24
    1286:	07 94       	ror	r0
    1288:	87 95       	ror	r24
    128a:	50 2d       	mov	r21, r0
    128c:	48 27       	eor	r20, r24
    128e:	06 94       	lsr	r0
    1290:	87 95       	ror	r24
    1292:	50 25       	eor	r21, r0
    1294:	48 27       	eor	r20, r24
  uint16_t i;
  for(i=0;i<sizeof(param_t);i++) {
    1296:	2f 5f       	subi	r18, 0xFF	; 255
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	23 31       	cpi	r18, 0x13	; 19
    129c:	31 05       	cpc	r19, r1
    129e:	19 f7       	brne	.-58     	; 0x1266 <calc_crc16+0xa>
    crc16 = _crc16_update(crc16,*data);
    data++;
  }
  return crc16;
}
    12a0:	84 2f       	mov	r24, r20
    12a2:	95 2f       	mov	r25, r21
    12a4:	08 95       	ret

000012a6 <param_reset>:

  return PARAM_OK;
}

void param_reset(void)
{
    12a6:	a0 e6       	ldi	r26, 0x60	; 96
    12a8:	b1 e0       	ldi	r27, 0x01	; 1
    12aa:	2b e9       	ldi	r18, 0x9B	; 155
    12ac:	33 e0       	ldi	r19, 0x03	; 3
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&param;
  const uint8_t *in = (const uint8_t *)&default_param;
  for(i=0;i<sizeof(param_t);i++) {
    12ae:	43 e7       	ldi	r20, 0x73	; 115
    12b0:	51 e0       	ldi	r21, 0x01	; 1

  return PARAM_OK;
}

void param_reset(void)
{
    12b2:	f9 01       	movw	r30, r18
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&param;
  const uint8_t *in = (const uint8_t *)&default_param;
  for(i=0;i<sizeof(param_t);i++) {
    *(out++) = pgm_read_byte_near(in++);
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	e4 91       	lpm	r30, Z+
    12ba:	ed 93       	st	X+, r30
{
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&param;
  const uint8_t *in = (const uint8_t *)&default_param;
  for(i=0;i<sizeof(param_t);i++) {
    12bc:	a4 17       	cp	r26, r20
    12be:	b5 07       	cpc	r27, r21
    12c0:	c1 f7       	brne	.-16     	; 0x12b2 <param_reset+0xc>
    *(out++) = pgm_read_byte_near(in++);
  }
}
    12c2:	08 95       	ret

000012c4 <param_load>:

  return PARAM_OK;
}

uint8_t param_load(void)
{
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
  // check that eeprom is readable
  if(!eeprom_is_ready())
    12cc:	f9 9b       	sbis	0x1f, 1	; 31
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <param_load+0x10>
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	1d c0       	rjmp	.+58     	; 0x130e <param_load+0x4a>
    return PARAM_EEPROM_NOT_READY;

  // read param
  eeprom_read_block(&param,&eeprom_param,sizeof(param_t));
    12d4:	0f 2e       	mov	r0, r31
    12d6:	f0 e6       	ldi	r31, 0x60	; 96
    12d8:	ef 2e       	mov	r14, r31
    12da:	f1 e0       	ldi	r31, 0x01	; 1
    12dc:	ff 2e       	mov	r15, r31
    12de:	f0 2d       	mov	r31, r0
    12e0:	c7 01       	movw	r24, r14
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	43 e1       	ldi	r20, 0x13	; 19
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	0e 94 2d 13 	call	0x265a	; 0x265a <__eerd_block_m328p>

  // read crc16
  uint16_t crc16 = eeprom_read_word(&eeprom_crc16);
    12ee:	83 e1       	ldi	r24, 0x13	; 19
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 3d 13 	call	0x267a	; 0x267a <__eerd_word_m328p>
    12f6:	8c 01       	movw	r16, r24
  uint16_t my_crc16 = calc_crc16(&param);
    12f8:	c7 01       	movw	r24, r14
    12fa:	0e 94 2e 09 	call	0x125c	; 0x125c <calc_crc16>
  if(crc16 != my_crc16) {
    12fe:	08 17       	cp	r16, r24
    1300:	19 07       	cpc	r17, r25
    1302:	11 f4       	brne	.+4      	; 0x1308 <param_load+0x44>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	03 c0       	rjmp	.+6      	; 0x130e <param_load+0x4a>
    param_reset();
    1308:	0e 94 53 09 	call	0x12a6	; 0x12a6 <param_reset>
    130c:	82 e0       	ldi	r24, 0x02	; 2
    return PARAM_EEPROM_CRC_MISMATCH;
  }

  return PARAM_OK;
}
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	08 95       	ret

00001318 <param_init>:
  }
}

void param_init(void)
{
  if(param_load()!=PARAM_OK)
    1318:	0e 94 62 09 	call	0x12c4	; 0x12c4 <param_load>
    131c:	88 23       	and	r24, r24
    131e:	11 f0       	breq	.+4      	; 0x1324 <param_init+0xc>
    param_reset();
    1320:	0e 94 53 09 	call	0x12a6	; 0x12a6 <param_reset>
    1324:	08 95       	ret

00001326 <param_save>:
  }
  return crc16;
}

uint8_t param_save(void)
{
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
  // check that eeprom is writable
  if(!eeprom_is_ready())
    132a:	f9 9b       	sbis	0x1f, 1	; 31
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <param_save+0xc>
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	12 c0       	rjmp	.+36     	; 0x1356 <param_save+0x30>
    return PARAM_EEPROM_NOT_READY;

  // write current param to eeprom
  eeprom_write_block(&param,&eeprom_param,sizeof(param_t));
    1332:	00 e6       	ldi	r16, 0x60	; 96
    1334:	11 e0       	ldi	r17, 0x01	; 1
    1336:	c8 01       	movw	r24, r16
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	43 e1       	ldi	r20, 0x13	; 19
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	0e 94 43 13 	call	0x2686	; 0x2686 <__eewr_block_m328p>

  // calc current parameter crc
  uint16_t crc16 = calc_crc16(&param);
    1344:	c8 01       	movw	r24, r16
    1346:	0e 94 2e 09 	call	0x125c	; 0x125c <calc_crc16>
    134a:	bc 01       	movw	r22, r24
  eeprom_write_word(&eeprom_crc16,crc16);
    134c:	83 e1       	ldi	r24, 0x13	; 19
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__eewr_word_m328p>
    1354:	80 e0       	ldi	r24, 0x00	; 0

  return PARAM_OK;
}
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <pb_proto_init>:

// ----- Init -----

void pb_proto_init(pb_proto_fill_func ff, pb_proto_proc_func pf, uint8_t *buf, uint16_t buf_size)
{
  fill_func = ff;
    135c:	90 93 45 01 	sts	0x0145, r25
    1360:	80 93 44 01 	sts	0x0144, r24
  proc_func = pf;
    1364:	70 93 47 01 	sts	0x0147, r23
    1368:	60 93 46 01 	sts	0x0146, r22
  pb_buf = buf;
    136c:	50 93 49 01 	sts	0x0149, r21
    1370:	40 93 48 01 	sts	0x0148, r20
  pb_buf_size = buf_size;
    1374:	30 93 4b 01 	sts	0x014B, r19
    1378:	20 93 4a 01 	sts	0x014A, r18

  // init signals
  PAR_DATA_DDR = 0x00;
    137c:	1a b8       	out	0x0a, r1	; 10
  PAR_STATUS_PIN &= ~BUSY;
    137e:	e6 e2       	ldi	r30, 0x26	; 38
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	8b 7f       	andi	r24, 0xFB	; 251
    1386:	80 83       	st	Z, r24
}
    1388:	08 95       	ret

0000138a <pb_proto_get_line_status>:

uint8_t pb_proto_get_line_status(void) {
	uint8_t ubIn, ubStrobe, ubSelect, ubPOut;
	ubIn = PAR_STATUS_PIN;
    138a:	86 b1       	in	r24, 0x06	; 6
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	20 71       	andi	r18, 0x10	; 16
    1392:	30 70       	andi	r19, 0x00	; 0
    1394:	35 95       	asr	r19
    1396:	27 95       	ror	r18
    1398:	35 95       	asr	r19
    139a:	27 95       	ror	r18
    139c:	35 95       	asr	r19
    139e:	27 95       	ror	r18
    13a0:	35 95       	asr	r19
    13a2:	27 95       	ror	r18
    13a4:	22 0f       	add	r18, r18
    13a6:	33 1f       	adc	r19, r19
    13a8:	88 70       	andi	r24, 0x08	; 8
    13aa:	88 0f       	add	r24, r24
    13ac:	88 0f       	add	r24, r24
  ubStrobe = (ubIn & NSTROBE) >> POUT_PIN;
  ubSelect = (ubIn & SEL)     >> SEL_PIN;
  ubPOut   = (ubIn & POUT)    >> NSTROBE_PIN;
  return ((ubPOut << 2) | (ubSelect << 1) | ubStrobe);
}
    13ae:	82 2b       	or	r24, r18
    13b0:	08 95       	ret

000013b2 <pb_proto_request_recv>:
 * Sends data receive request (?) to Amiga.
 * Done as pulse on ACK line.
 */
void pb_proto_request_recv(void)
{
  PAR_STATUS_PORT &= ~NACK;
    13b2:	e8 e2       	ldi	r30, 0x28	; 40
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8d 7f       	andi	r24, 0xFD	; 253
    13ba:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	8a 95       	dec	r24
    13c0:	f1 f7       	brne	.-4      	; 0x13be <pb_proto_request_recv+0xc>
  _delay_loop_1(1);
  PAR_STATUS_PORT |= NACK;
    13c2:	80 81       	ld	r24, Z
    13c4:	82 60       	ori	r24, 0x02	; 2
    13c6:	80 83       	st	Z, r24
  // TODO(KaiN#9): Perhaps should be longer as atmega clk is faster?
  trigger_ts = time_stamp;
    13c8:	80 91 58 01 	lds	r24, 0x0158
    13cc:	90 91 59 01 	lds	r25, 0x0159
    13d0:	a0 91 5a 01 	lds	r26, 0x015A
    13d4:	b0 91 5b 01 	lds	r27, 0x015B
    13d8:	80 93 4c 01 	sts	0x014C, r24
    13dc:	90 93 4d 01 	sts	0x014D, r25
    13e0:	a0 93 4e 01 	sts	0x014E, r26
    13e4:	b0 93 4f 01 	sts	0x014F, r27
}
    13e8:	08 95       	ret

000013ea <wait_req>:
 * Waits for PaperOut pin state specified by ubReqValue, for ubStateFlag purposes.
 * @param ubReqValue Requested PaperOut pin state (1: hi, 0: lo)
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t wait_req(uint8_t ubReqValue, uint8_t ubStateFlag) {
    13ea:	78 2f       	mov	r23, r24
  // wait for new REQ value
  timer_100us = 0;
    13ec:	10 92 5f 01 	sts	0x015F, r1
    13f0:	10 92 5e 01 	sts	0x015E, r1
  while(timer_100us < pb_proto_timeout) {
    13f4:	40 91 3a 01 	lds	r20, 0x013A
    13f8:	50 91 3b 01 	lds	r21, 0x013B
		uint8_t ubIn = PAR_STATUS_PIN;
    13fc:	e6 e2       	ldi	r30, 0x26	; 38
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	15 c0       	rjmp	.+42     	; 0x142c <wait_req+0x42>
    1402:	80 81       	ld	r24, Z
    uint8_t ubPOut = (ubIn & POUT) >> POUT_PIN;
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    if(ubReqValue == ubPOut)
    1408:	c9 01       	movw	r24, r18
    140a:	88 70       	andi	r24, 0x08	; 8
    140c:	90 70       	andi	r25, 0x00	; 0
    140e:	95 95       	asr	r25
    1410:	87 95       	ror	r24
    1412:	95 95       	asr	r25
    1414:	87 95       	ror	r24
    1416:	95 95       	asr	r25
    1418:	87 95       	ror	r24
    141a:	78 17       	cp	r23, r24
    141c:	11 f4       	brne	.+4      	; 0x1422 <wait_req+0x38>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	08 95       	ret
      return PBPROTO_STATUS_OK;
    // during transfer client aborted and removed SEL
    if(!(ubIn & SEL))
    1422:	24 fd       	sbrc	r18, 4
    1424:	03 c0       	rjmp	.+6      	; 0x142c <wait_req+0x42>
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
    1426:	86 2f       	mov	r24, r22
    1428:	83 60       	ori	r24, 0x03	; 3
    142a:	08 95       	ret
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t wait_req(uint8_t ubReqValue, uint8_t ubStateFlag) {
  // wait for new REQ value
  timer_100us = 0;
  while(timer_100us < pb_proto_timeout) {
    142c:	80 91 5e 01 	lds	r24, 0x015E
    1430:	90 91 5f 01 	lds	r25, 0x015F
    1434:	84 17       	cp	r24, r20
    1436:	95 07       	cpc	r25, r21
    1438:	20 f3       	brcs	.-56     	; 0x1402 <wait_req+0x18>
      return PBPROTO_STATUS_OK;
    // during transfer client aborted and removed SEL
    if(!(ubIn & SEL))
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
    143a:	86 2f       	mov	r24, r22
    143c:	82 60       	ori	r24, 0x02	; 2
}
    143e:	08 95       	ret

00001440 <pb_proto_handle>:
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    1440:	2f 92       	push	r2
    1442:	3f 92       	push	r3
    1444:	4f 92       	push	r4
    1446:	5f 92       	push	r5
    1448:	6f 92       	push	r6
    144a:	7f 92       	push	r7
    144c:	8f 92       	push	r8
    144e:	9f 92       	push	r9
    1450:	af 92       	push	r10
    1452:	bf 92       	push	r11
    1454:	cf 92       	push	r12
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <pb_proto_handle+0x26>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
  uint8_t result;
  pb_proto_stat_t *ps = &pb_proto_stat;

  // handle server side of plipbox protocol
  ps->cmd = 0;
    146a:	10 92 73 01 	sts	0x0173, r1

  // make sure that SEL == 1 and REQ == 0
  if(!(PAR_STATUS_PIN & SEL) || (PAR_STATUS_PIN & POUT)) {
    146e:	34 9b       	sbis	0x06, 4	; 6
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <pb_proto_handle+0x36>
    1472:	33 9b       	sbis	0x06, 3	; 6
    1474:	04 c0       	rjmp	.+8      	; 0x147e <pb_proto_handle+0x3e>
    ps->status = PBPROTO_STATUS_IDLE;
    1476:	10 92 74 01 	sts	0x0174, r1
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	c4 c2       	rjmp	.+1416   	; 0x1a06 <pb_proto_handle+0x5c6>
    return PBPROTO_STATUS_IDLE;
  }

  // Read command byte
  uint8_t cmd = PAR_DATA_PIN;
    147e:	a9 b0       	in	r10, 0x09	; 9

  // fill buffer for recv command
  /// Amiga wants to receive data - prepare
  uint16_t pkt_size = 0;
    1480:	1a 82       	std	Y+2, r1	; 0x02
    1482:	19 82       	std	Y+1, r1	; 0x01
  if((cmd == PBPROTO_CMD_RECV) || (cmd == PBPROTO_CMD_RECV_BURST)) {
    1484:	82 e2       	ldi	r24, 0x22	; 34
    1486:	a8 16       	cp	r10, r24
    1488:	19 f0       	breq	.+6      	; 0x1490 <pb_proto_handle+0x50>
    148a:	a4 e4       	ldi	r26, 0x44	; 68
    148c:	aa 16       	cp	r10, r26
    148e:	a9 f4       	brne	.+42     	; 0x14ba <pb_proto_handle+0x7a>
    uint8_t res = fill_func(pb_buf, pb_buf_size, &pkt_size);
    1490:	60 91 4a 01 	lds	r22, 0x014A
    1494:	70 91 4b 01 	lds	r23, 0x014B
    1498:	e0 91 44 01 	lds	r30, 0x0144
    149c:	f0 91 45 01 	lds	r31, 0x0145
    14a0:	80 91 48 01 	lds	r24, 0x0148
    14a4:	90 91 49 01 	lds	r25, 0x0149
    14a8:	ae 01       	movw	r20, r28
    14aa:	4f 5f       	subi	r20, 0xFF	; 255
    14ac:	5f 4f       	sbci	r21, 0xFF	; 255
    14ae:	09 95       	icall
    if(res != PBPROTO_STATUS_OK) {
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	19 f0       	breq	.+6      	; 0x14ba <pb_proto_handle+0x7a>
      ps->status = res;
    14b4:	80 93 74 01 	sts	0x0174, r24
    14b8:	a6 c2       	rjmp	.+1356   	; 0x1a06 <pb_proto_handle+0x5c6>
      return res;
    }
  }

  // start timer
  uint32_t ts = time_stamp;
    14ba:	60 90 58 01 	lds	r6, 0x0158
    14be:	70 90 59 01 	lds	r7, 0x0159
    14c2:	80 90 5a 01 	lds	r8, 0x015A
    14c6:	90 90 5b 01 	lds	r9, 0x015B
    14ca:	10 92 85 00 	sts	0x0085, r1
    14ce:	10 92 84 00 	sts	0x0084, r1
  timer_hw_reset();

  // confirm cmd with RAK = 1
  PAR_STATUS_PORT |= BUSY;
    14d2:	e8 e2       	ldi	r30, 0x28	; 40
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	84 60       	ori	r24, 0x04	; 4
    14da:	80 83       	st	Z, r24

  uint16_t ret_size = 0;
  switch(cmd) {
    14dc:	b2 e2       	ldi	r27, 0x22	; 34
    14de:	ab 16       	cp	r10, r27
    14e0:	a1 f0       	breq	.+40     	; 0x150a <pb_proto_handle+0xca>
    14e2:	ba 15       	cp	r27, r10
    14e4:	20 f0       	brcs	.+8      	; 0x14ee <pb_proto_handle+0xae>
    14e6:	e1 e1       	ldi	r30, 0x11	; 17
    14e8:	ae 16       	cp	r10, r30
    14ea:	49 f4       	brne	.+18     	; 0x14fe <pb_proto_handle+0xbe>
    14ec:	73 c0       	rjmp	.+230    	; 0x15d4 <pb_proto_handle+0x194>
    14ee:	f3 e3       	ldi	r31, 0x33	; 51
    14f0:	af 16       	cp	r10, r31
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <pb_proto_handle+0xb6>
    14f4:	7b c1       	rjmp	.+758    	; 0x17ec <pb_proto_handle+0x3ac>
    14f6:	84 e4       	ldi	r24, 0x44	; 68
    14f8:	a8 16       	cp	r10, r24
    14fa:	09 f4       	brne	.+2      	; 0x14fe <pb_proto_handle+0xbe>
    14fc:	dc c0       	rjmp	.+440    	; 0x16b6 <pb_proto_handle+0x276>
    14fe:	bb 24       	eor	r11, r11
    1500:	68 94       	set
    1502:	b2 f8       	bld	r11, 2
    1504:	cc 24       	eor	r12, r12
    1506:	dd 24       	eor	r13, r13
    1508:	06 c2       	rjmp	.+1036   	; 0x1916 <pb_proto_handle+0x4d6>
    case PBPROTO_CMD_RECV:
      result = cmd_recv(pkt_size, &ret_size);
    150a:	c9 80       	ldd	r12, Y+1	; 0x01
    150c:	da 80       	ldd	r13, Y+2	; 0x02
 */
static uint8_t cmd_recv(uint16_t uwSize, uint16_t *pWriteSize)
{
	uint8_t ubStatus;

  PAR_DATA_DDR = 0xFF;
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	8a b9       	out	0x0a, r24	; 10

  // Send packet size - high part
  ubStatus = wait_req(1, PBPROTO_STAGE_SIZE_HI);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	60 e2       	ldi	r22, 0x20	; 32
    1516:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    151a:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    151c:	a1 e0       	ldi	r26, 0x01	; 1
    151e:	8a 17       	cp	r24, r26
    1520:	09 f0       	breq	.+2      	; 0x1524 <pb_proto_handle+0xe4>
    1522:	55 c0       	rjmp	.+170    	; 0x15ce <pb_proto_handle+0x18e>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize >> 8;
    1524:	db b8       	out	0x0b, r13	; 11
  PAR_STATUS_PORT &= ~BUSY;
    1526:	e8 e2       	ldi	r30, 0x28	; 40
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8b 7f       	andi	r24, 0xFB	; 251
    152e:	80 83       	st	Z, r24

  // Send packet size - low part
  ubStatus = wait_req(0, PBPROTO_STAGE_SIZE_LO);
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	60 e3       	ldi	r22, 0x30	; 48
    1534:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    1538:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    153a:	b1 e0       	ldi	r27, 0x01	; 1
    153c:	8b 17       	cp	r24, r27
    153e:	09 f0       	breq	.+2      	; 0x1542 <pb_proto_handle+0x102>
    1540:	46 c0       	rjmp	.+140    	; 0x15ce <pb_proto_handle+0x18e>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize & 0xFF;
    1542:	cb b8       	out	0x0b, r12	; 11
  PAR_STATUS_PORT |= BUSY;
    1544:	e8 e2       	ldi	r30, 0x28	; 40
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	84 60       	ori	r24, 0x04	; 4
    154c:	80 83       	st	Z, r24

  // --- data ---
  uint16_t uwWriteSize = 0;
  const uint8_t *ptr = pb_buf;
    154e:	e0 90 48 01 	lds	r14, 0x0148
    1552:	f0 90 49 01 	lds	r15, 0x0149
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    1556:	c6 01       	movw	r24, r12
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	0f 2e       	mov	r0, r31
    155c:	fe ef       	ldi	r31, 0xFE	; 254
    155e:	2f 2e       	mov	r2, r31
    1560:	ff ef       	ldi	r31, 0xFF	; 255
    1562:	3f 2e       	mov	r3, r31
    1564:	f0 2d       	mov	r31, r0
    1566:	28 22       	and	r2, r24
    1568:	39 22       	and	r3, r25
  while(uwSize--) {
    156a:	21 14       	cp	r2, r1
    156c:	31 04       	cpc	r3, r1
    156e:	31 f1       	breq	.+76     	; 0x15bc <pb_proto_handle+0x17c>
    1570:	01 e0       	ldi	r16, 0x01	; 1
    1572:	cc 24       	eor	r12, r12
    1574:	dd 24       	eor	r13, r13
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    PAR_STATUS_PORT ^= BUSY;
    1576:	0f 2e       	mov	r0, r31
    1578:	f8 e2       	ldi	r31, 0x28	; 40
    157a:	4f 2e       	mov	r4, r31
    157c:	55 24       	eor	r5, r5
    157e:	f0 2d       	mov	r31, r0
    1580:	14 e0       	ldi	r17, 0x04	; 4
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    1582:	80 2f       	mov	r24, r16
    1584:	60 e4       	ldi	r22, 0x40	; 64
    1586:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    158a:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    158c:	e1 e0       	ldi	r30, 0x01	; 1
    158e:	8e 17       	cp	r24, r30
    1590:	e1 f4       	brne	.+56     	; 0x15ca <pb_proto_handle+0x18a>
      break;
    PAR_DATA_PORT = *(ptr++);
    1592:	d7 01       	movw	r26, r14
    1594:	8c 91       	ld	r24, X
    1596:	eb e2       	ldi	r30, 0x2B	; 43
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 83       	st	Z, r24
    PAR_STATUS_PORT ^= BUSY;
    159c:	d2 01       	movw	r26, r4
    159e:	8c 91       	ld	r24, X
    15a0:	81 27       	eor	r24, r17
    15a2:	8c 93       	st	X, r24
    ++uwWriteSize;
    15a4:	08 94       	sec
    15a6:	c1 1c       	adc	r12, r1
    15a8:	d1 1c       	adc	r13, r1
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    15aa:	2c 14       	cp	r2, r12
    15ac:	3d 04       	cpc	r3, r13
    15ae:	41 f0       	breq	.+16     	; 0x15c0 <pb_proto_handle+0x180>
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    15b0:	08 94       	sec
    15b2:	e1 1c       	adc	r14, r1
    15b4:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= BUSY;
    ++uwWriteSize;
    ubPOutWait ^= 1;
    15b6:	b1 e0       	ldi	r27, 0x01	; 1
    15b8:	0b 27       	eor	r16, r27
    15ba:	e3 cf       	rjmp	.-58     	; 0x1582 <pb_proto_handle+0x142>
    15bc:	cc 24       	eor	r12, r12
    15be:	dd 24       	eor	r13, r13
  }

  // Final wait
  if(ubStatus == PBPROTO_STATUS_OK)
    ubStatus = wait_req(1, PBPROTO_STAGE_LAST_DATA);
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	60 e5       	ldi	r22, 0x50	; 80
    15c4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    15c8:	b8 2e       	mov	r11, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    15ca:	1a b8       	out	0x0a, r1	; 10
    15cc:	a4 c1       	rjmp	.+840    	; 0x1916 <pb_proto_handle+0x4d6>
    15ce:	cc 24       	eor	r12, r12
    15d0:	dd 24       	eor	r13, r13
    15d2:	a1 c1       	rjmp	.+834    	; 0x1916 <pb_proto_handle+0x4d6>
{
  uint8_t ubStatus;
  uint16_t uwSize;

  // --- get size hi ---
  ubStatus = wait_req(1, PBPROTO_STAGE_SIZE_HI);
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	60 e2       	ldi	r22, 0x20	; 32
    15d8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    15dc:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    15de:	e1 e0       	ldi	r30, 0x01	; 1
    15e0:	8e 17       	cp	r24, r30
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <pb_proto_handle+0x1a6>
    15e4:	65 c0       	rjmp	.+202    	; 0x16b0 <pb_proto_handle+0x270>
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    15e6:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~BUSY;
    15e8:	e8 e2       	ldi	r30, 0x28	; 40
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8b 7f       	andi	r24, 0xFB	; 251
    15f0:	80 83       	st	Z, r24

  // --- get size lo ---
  ubStatus = wait_req(0, PBPROTO_STAGE_SIZE_LO);
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	60 e3       	ldi	r22, 0x30	; 48
    15f6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    15fa:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    15fc:	f1 e0       	ldi	r31, 0x01	; 1
    15fe:	8f 17       	cp	r24, r31
    1600:	09 f0       	breq	.+2      	; 0x1604 <pb_proto_handle+0x1c4>
    1602:	56 c0       	rjmp	.+172    	; 0x16b0 <pb_proto_handle+0x270>
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    1604:	29 b1       	in	r18, 0x09	; 9

  // --- get size hi ---
  ubStatus = wait_req(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    1606:	90 2f       	mov	r25, r16
    1608:	80 e0       	ldi	r24, 0x00	; 0

  // --- get size lo ---
  ubStatus = wait_req(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	28 2b       	or	r18, r24
    160e:	39 2b       	or	r19, r25
  PAR_STATUS_PORT ^= BUSY;
    1610:	e8 e2       	ldi	r30, 0x28	; 40
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	94 e0       	ldi	r25, 0x04	; 4
    1618:	89 27       	eor	r24, r25
    161a:	80 83       	st	Z, r24

  // Check with buffer size
  if(uwSize > pb_buf_size) {
    161c:	80 91 4a 01 	lds	r24, 0x014A
    1620:	90 91 4b 01 	lds	r25, 0x014B
    1624:	82 17       	cp	r24, r18
    1626:	93 07       	cpc	r25, r19
    1628:	38 f4       	brcc	.+14     	; 0x1638 <pb_proto_handle+0x1f8>
    162a:	0f 2e       	mov	r0, r31
    162c:	f5 e0       	ldi	r31, 0x05	; 5
    162e:	bf 2e       	mov	r11, r31
    1630:	f0 2d       	mov	r31, r0
    1632:	cc 24       	eor	r12, r12
    1634:	dd 24       	eor	r13, r13
    1636:	6f c1       	rjmp	.+734    	; 0x1916 <pb_proto_handle+0x4d6>
  }

  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    1638:	c9 01       	movw	r24, r18
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	0f 2e       	mov	r0, r31
    163e:	fe ef       	ldi	r31, 0xFE	; 254
    1640:	2f 2e       	mov	r2, r31
    1642:	ff ef       	ldi	r31, 0xFF	; 255
    1644:	3f 2e       	mov	r3, r31
    1646:	f0 2d       	mov	r31, r0
    1648:	28 22       	and	r2, r24
    164a:	39 22       	and	r3, r25

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = pb_buf;
    164c:	e0 90 48 01 	lds	r14, 0x0148
    1650:	f0 90 49 01 	lds	r15, 0x0149
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    1654:	21 14       	cp	r2, r1
    1656:	31 04       	cpc	r3, r1
    1658:	41 f1       	breq	.+80     	; 0x16aa <pb_proto_handle+0x26a>
    165a:	01 e0       	ldi	r16, 0x01	; 1
    165c:	cc 24       	eor	r12, r12
    165e:	dd 24       	eor	r13, r13
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    PAR_STATUS_PORT ^= BUSY;
    1660:	0f 2e       	mov	r0, r31
    1662:	f8 e2       	ldi	r31, 0x28	; 40
    1664:	4f 2e       	mov	r4, r31
    1666:	55 24       	eor	r5, r5
    1668:	f0 2d       	mov	r31, r0
    166a:	14 e0       	ldi	r17, 0x04	; 4
  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = pb_buf;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    166c:	80 2f       	mov	r24, r16
    166e:	60 e4       	ldi	r22, 0x40	; 64
    1670:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    1674:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	b8 16       	cp	r11, r24
    167a:	09 f0       	breq	.+2      	; 0x167e <pb_proto_handle+0x23e>
    167c:	4c c1       	rjmp	.+664    	; 0x1916 <pb_proto_handle+0x4d6>
      break;
    *(ptr++) = PAR_DATA_PIN;
    167e:	a9 e2       	ldi	r26, 0x29	; 41
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	8c 91       	ld	r24, X
    1684:	f7 01       	movw	r30, r14
    1686:	80 83       	st	Z, r24
    PAR_STATUS_PORT ^= BUSY;
    1688:	d2 01       	movw	r26, r4
    168a:	8c 91       	ld	r24, X
    168c:	81 27       	eor	r24, r17
    168e:	8c 93       	st	X, r24
    ubPOutWait ^= 1;
    uwReadSize++;
    1690:	08 94       	sec
    1692:	c1 1c       	adc	r12, r1
    1694:	d1 1c       	adc	r13, r1

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = pb_buf;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    1696:	2c 14       	cp	r2, r12
    1698:	3d 04       	cpc	r3, r13
    169a:	09 f4       	brne	.+2      	; 0x169e <pb_proto_handle+0x25e>
    169c:	3c c1       	rjmp	.+632    	; 0x1916 <pb_proto_handle+0x4d6>
    ubStatus = wait_req(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    169e:	08 94       	sec
    16a0:	e1 1c       	adc	r14, r1
    16a2:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= BUSY;
    ubPOutWait ^= 1;
    16a4:	b1 e0       	ldi	r27, 0x01	; 1
    16a6:	0b 27       	eor	r16, r27
    16a8:	e1 cf       	rjmp	.-62     	; 0x166c <pb_proto_handle+0x22c>
    16aa:	cc 24       	eor	r12, r12
    16ac:	dd 24       	eor	r13, r13
    16ae:	33 c1       	rjmp	.+614    	; 0x1916 <pb_proto_handle+0x4d6>
    16b0:	cc 24       	eor	r12, r12
    16b2:	dd 24       	eor	r13, r13
    16b4:	30 c1       	rjmp	.+608    	; 0x1916 <pb_proto_handle+0x4d6>
      break;
    case PBPROTO_CMD_SEND:
      result = cmd_send(&ret_size);
      break;
    case PBPROTO_CMD_RECV_BURST:
      result = cmd_recv_burst(pkt_size, &ret_size);
    16b6:	e9 80       	ldd	r14, Y+1	; 0x01
    16b8:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t cmd_recv_burst(uint16_t size, uint16_t *ret_size) {
  uint8_t status;

  // --- set packet size hi
  status = wait_req(1, PBPROTO_STAGE_SIZE_HI);
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	60 e2       	ldi	r22, 0x20	; 32
    16be:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    16c2:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    16c4:	e1 e0       	ldi	r30, 0x01	; 1
    16c6:	8e 17       	cp	r24, r30
    16c8:	09 f0       	breq	.+2      	; 0x16cc <pb_proto_handle+0x28c>
    16ca:	8d c0       	rjmp	.+282    	; 0x17e6 <pb_proto_handle+0x3a6>
    return status;

	PAR_DATA_DDR = 0xFF;
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	8a b9       	out	0x0a, r24	; 10
	PAR_DATA_PORT = size >> 8;
    16d0:	fb b8       	out	0x0b, r15	; 11
	PAR_STATUS_PORT &= ~BUSY;
    16d2:	e8 e2       	ldi	r30, 0x28	; 40
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	8b 7f       	andi	r24, 0xFB	; 251
    16da:	80 83       	st	Z, r24

  // --- set packet size lo ---
  status = wait_req(0, PBPROTO_STAGE_SIZE_LO);
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	60 e3       	ldi	r22, 0x30	; 48
    16e0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    16e4:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    16e6:	f1 e0       	ldi	r31, 0x01	; 1
    16e8:	8f 17       	cp	r24, r31
    16ea:	09 f0       	breq	.+2      	; 0x16ee <pb_proto_handle+0x2ae>
    16ec:	7c c0       	rjmp	.+248    	; 0x17e6 <pb_proto_handle+0x3a6>
    return status;

	PAR_DATA_PORT = size & 0xFF;
    16ee:	eb b8       	out	0x0b, r14	; 11
	PAR_STATUS_PORT ^= BUSY;
    16f0:	e8 e2       	ldi	r30, 0x28	; 40
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	94 e0       	ldi	r25, 0x04	; 4
    16f8:	89 27       	eor	r24, r25
    16fa:	80 83       	st	Z, r24

  // --- burst ready? ---
  status = wait_req(1, PBPROTO_STAGE_DATA);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	60 e4       	ldi	r22, 0x40	; 64
    1700:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    1704:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	b8 16       	cp	r11, r24
    170a:	09 f0       	breq	.+2      	; 0x170e <pb_proto_handle+0x2ce>
    170c:	6c c0       	rjmp	.+216    	; 0x17e6 <pb_proto_handle+0x3a6>
    return status;

  // round to even and convert to words
  uint16_t words = (size + 1) >> 1;
    170e:	c7 01       	movw	r24, r14
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	9c 01       	movw	r18, r24
    1714:	36 95       	lsr	r19
    1716:	27 95       	ror	r18
  uint8_t result = PBPROTO_STATUS_OK;
  uint16_t i;
  uint8_t *ptr = pb_buf;
    1718:	00 91 48 01 	lds	r16, 0x0148
    171c:	10 91 49 01 	lds	r17, 0x0149

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    1720:	f8 94       	cli
	PAR_STATUS_PORT ^= BUSY;
    1722:	e8 e2       	ldi	r30, 0x28	; 40
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	94 e0       	ldi	r25, 0x04	; 4
    172a:	89 27       	eor	r24, r25
    172c:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    172e:	21 15       	cp	r18, r1
    1730:	31 05       	cpc	r19, r1
    1732:	81 f1       	breq	.+96     	; 0x1794 <pb_proto_handle+0x354>
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	9f e0       	ldi	r25, 0x0F	; 15
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    173a:	4b e2       	ldi	r20, 0x2B	; 43
    173c:	50 e0       	ldi	r21, 0x00	; 0

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    173e:	e6 e2       	ldi	r30, 0x26	; 38
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	89 2f       	mov	r24, r25
    1744:	8a 95       	dec	r24
    1746:	f1 f7       	brne	.-4      	; 0x1744 <pb_proto_handle+0x304>
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= BUSY;
  for(i=0;i<words;i++) {
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    1748:	d8 01       	movw	r26, r16
    174a:	8c 91       	ld	r24, X
    174c:	da 01       	movw	r26, r20
    174e:	8c 93       	st	X, r24

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    1750:	80 81       	ld	r24, Z
    1752:	83 ff       	sbrs	r24, 3
    1754:	03 c0       	rjmp	.+6      	; 0x175c <pb_proto_handle+0x31c>
    1756:	80 81       	ld	r24, Z
    1758:	84 fd       	sbrc	r24, 4
    175a:	fa cf       	rjmp	.-12     	; 0x1750 <pb_proto_handle+0x310>
		if(!(PAR_STATUS_PIN & SEL))
    175c:	80 81       	ld	r24, Z
    175e:	84 ff       	sbrs	r24, 4
    1760:	1b c0       	rjmp	.+54     	; 0x1798 <pb_proto_handle+0x358>
    1762:	89 2f       	mov	r24, r25
    1764:	8a 95       	dec	r24
    1766:	f1 f7       	brne	.-4      	; 0x1764 <pb_proto_handle+0x324>
			break;

    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    1768:	d8 01       	movw	r26, r16
    176a:	11 96       	adiw	r26, 0x01	; 1
    176c:	8c 91       	ld	r24, X
    176e:	da 01       	movw	r26, r20
    1770:	8c 93       	st	X, r24

    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    1772:	80 81       	ld	r24, Z
    1774:	83 fd       	sbrc	r24, 3
    1776:	03 c0       	rjmp	.+6      	; 0x177e <pb_proto_handle+0x33e>
    1778:	80 81       	ld	r24, Z
    177a:	84 fd       	sbrc	r24, 4
    177c:	fa cf       	rjmp	.-12     	; 0x1772 <pb_proto_handle+0x332>
		if(!(PAR_STATUS_PIN & SEL))
    177e:	80 81       	ld	r24, Z
    1780:	84 ff       	sbrs	r24, 4
    1782:	0a c0       	rjmp	.+20     	; 0x1798 <pb_proto_handle+0x358>

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= BUSY;
  for(i=0;i<words;i++) {
    1784:	6f 5f       	subi	r22, 0xFF	; 255
    1786:	7f 4f       	sbci	r23, 0xFF	; 255
    1788:	62 17       	cp	r22, r18
    178a:	73 07       	cpc	r23, r19
    178c:	28 f4       	brcc	.+10     	; 0x1798 <pb_proto_handle+0x358>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    178e:	0e 5f       	subi	r16, 0xFE	; 254
    1790:	1f 4f       	sbci	r17, 0xFF	; 255
    1792:	d7 cf       	rjmp	.-82     	; 0x1742 <pb_proto_handle+0x302>
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	70 e0       	ldi	r23, 0x00	; 0
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    1798:	e6 e2       	ldi	r30, 0x26	; 38
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;
    179c:	a8 e2       	ldi	r26, 0x28	; 40
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
		if(!(PAR_STATUS_PIN & SEL))
			break;
  }
  recv_burst_exit:
  sei();
    17a0:	78 94       	sei
    17a2:	03 c0       	rjmp	.+6      	; 0x17aa <pb_proto_handle+0x36a>
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    if(!(PAR_STATUS_PIN & SEL))
    17a4:	80 81       	ld	r24, Z
    17a6:	84 ff       	sbrs	r24, 4
    17a8:	fb cf       	rjmp	.-10     	; 0x17a0 <pb_proto_handle+0x360>
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    17aa:	80 81       	ld	r24, Z
    17ac:	83 fd       	sbrc	r24, 3
    17ae:	fa cf       	rjmp	.-12     	; 0x17a4 <pb_proto_handle+0x364>
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;
    17b0:	8c 91       	ld	r24, X
    17b2:	84 60       	ori	r24, 0x04	; 4
    17b4:	8c 93       	st	X, r24
    17b6:	03 c0       	rjmp	.+6      	; 0x17be <pb_proto_handle+0x37e>

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & POUT))
    if(!(PAR_STATUS_PIN & SEL))
    17b8:	80 81       	ld	r24, Z
    17ba:	84 ff       	sbrs	r24, 4
    17bc:	f1 cf       	rjmp	.-30     	; 0x17a0 <pb_proto_handle+0x360>
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & POUT))
    17be:	80 81       	ld	r24, Z
    17c0:	83 ff       	sbrs	r24, 3
    17c2:	fa cf       	rjmp	.-12     	; 0x17b8 <pb_proto_handle+0x378>
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

  // error?
  if(i<words)
    17c4:	62 17       	cp	r22, r18
    17c6:	73 07       	cpc	r23, r19
    17c8:	20 f4       	brcc	.+8      	; 0x17d2 <pb_proto_handle+0x392>
    17ca:	0f 2e       	mov	r0, r31
    17cc:	f2 e4       	ldi	r31, 0x42	; 66
    17ce:	bf 2e       	mov	r11, r31
    17d0:	f0 2d       	mov	r31, r0
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT &= ~BUSY;
    17d2:	e8 e2       	ldi	r30, 0x28	; 40
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8b 7f       	andi	r24, 0xFB	; 251
    17da:	80 83       	st	Z, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    17dc:	1a b8       	out	0x0a, r1	; 10

  *ret_size = i << 1;
    17de:	6b 01       	movw	r12, r22
    17e0:	cc 0c       	add	r12, r12
    17e2:	dd 1c       	adc	r13, r13
    17e4:	98 c0       	rjmp	.+304    	; 0x1916 <pb_proto_handle+0x4d6>
    17e6:	cc 24       	eor	r12, r12
    17e8:	dd 24       	eor	r13, r13
    17ea:	95 c0       	rjmp	.+298    	; 0x1916 <pb_proto_handle+0x4d6>
{
  uint16_t uwSize;
  uint8_t ubStatus;

  // --- packet size hi ---
  ubStatus = wait_req(1, PBPROTO_STAGE_SIZE_HI);
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	60 e2       	ldi	r22, 0x20	; 32
    17f0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    17f4:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    17f6:	b1 e0       	ldi	r27, 0x01	; 1
    17f8:	8b 17       	cp	r24, r27
    17fa:	09 f0       	breq	.+2      	; 0x17fe <pb_proto_handle+0x3be>
    17fc:	8a c0       	rjmp	.+276    	; 0x1912 <pb_proto_handle+0x4d2>
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    17fe:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~BUSY;
    1800:	e8 e2       	ldi	r30, 0x28	; 40
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8b 7f       	andi	r24, 0xFB	; 251
    1808:	80 83       	st	Z, r24

  // --- packet size lo ---
  ubStatus = wait_req(0, PBPROTO_STAGE_SIZE_LO);
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	60 e3       	ldi	r22, 0x30	; 48
    180e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <wait_req>
    1812:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    1814:	e1 e0       	ldi	r30, 0x01	; 1
    1816:	8e 17       	cp	r24, r30
    1818:	09 f0       	breq	.+2      	; 0x181c <pb_proto_handle+0x3dc>
    181a:	7b c0       	rjmp	.+246    	; 0x1912 <pb_proto_handle+0x4d2>
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    181c:	89 b1       	in	r24, 0x09	; 9
  // --- packet size hi ---
  ubStatus = wait_req(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    181e:	30 2f       	mov	r19, r16
    1820:	20 e0       	ldi	r18, 0x00	; 0
  // --- packet size lo ---
  ubStatus = wait_req(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	28 2b       	or	r18, r24
    1826:	39 2b       	or	r19, r25
  // delay SET_RAK until burst begin...

  // check size
  if(uwSize > pb_buf_size)
    1828:	80 91 4a 01 	lds	r24, 0x014A
    182c:	90 91 4b 01 	lds	r25, 0x014B
    1830:	82 17       	cp	r24, r18
    1832:	93 07       	cpc	r25, r19
    1834:	38 f4       	brcc	.+14     	; 0x1844 <pb_proto_handle+0x404>
    1836:	0f 2e       	mov	r0, r31
    1838:	f5 e0       	ldi	r31, 0x05	; 5
    183a:	bf 2e       	mov	r11, r31
    183c:	f0 2d       	mov	r31, r0
    183e:	cc 24       	eor	r12, r12
    1840:	dd 24       	eor	r13, r13
    1842:	69 c0       	rjmp	.+210    	; 0x1916 <pb_proto_handle+0x4d6>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;

  // round to even and convert to words
  uint16_t words = (uwSize +1) >> 1;
    1844:	c9 01       	movw	r24, r18
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	9c 01       	movw	r18, r24
    184a:	36 95       	lsr	r19
    184c:	27 95       	ror	r18
  uint16_t i;
  uint8_t result = PBPROTO_STATUS_OK;
  uint8_t *ptr = pb_buf;
    184e:	00 91 48 01 	lds	r16, 0x0148
    1852:	10 91 49 01 	lds	r17, 0x0149

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    1856:	f8 94       	cli
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
    1858:	e8 e2       	ldi	r30, 0x28	; 40
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	94 e0       	ldi	r25, 0x04	; 4
    1860:	89 27       	eor	r24, r25
    1862:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    1864:	21 15       	cp	r18, r1
    1866:	31 05       	cpc	r19, r1
    1868:	29 f4       	brne	.+10     	; 0x1874 <pb_proto_handle+0x434>
    186a:	2e c0       	rjmp	.+92     	; 0x18c8 <pb_proto_handle+0x488>
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
    186c:	80 81       	ld	r24, Z
    186e:	84 fd       	sbrc	r24, 4
    1870:	0a c0       	rjmp	.+20     	; 0x1886 <pb_proto_handle+0x446>
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <pb_proto_handle+0x452>
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	50 e0       	ldi	r21, 0x00	; 0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    1878:	e6 e2       	ldi	r30, 0x26	; 38
    187a:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    187c:	0f 2e       	mov	r0, r31
    187e:	f9 e2       	ldi	r31, 0x29	; 41
    1880:	ef 2e       	mov	r14, r31
    1882:	ff 24       	eor	r15, r15
    1884:	f0 2d       	mov	r31, r0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    1886:	80 81       	ld	r24, Z
    1888:	83 fd       	sbrc	r24, 3
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <pb_proto_handle+0x452>
    188c:	80 81       	ld	r24, Z
    188e:	84 fd       	sbrc	r24, 4
    1890:	ed cf       	rjmp	.-38     	; 0x186c <pb_proto_handle+0x42c>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    1892:	d7 01       	movw	r26, r14
    1894:	8c 91       	ld	r24, X
    1896:	d8 01       	movw	r26, r16
    1898:	8c 93       	st	X, r24
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <pb_proto_handle+0x462>

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
    189c:	80 81       	ld	r24, Z
    189e:	84 ff       	sbrs	r24, 4
    18a0:	06 c0       	rjmp	.+12     	; 0x18ae <pb_proto_handle+0x46e>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    18a2:	80 81       	ld	r24, Z
    18a4:	83 ff       	sbrs	r24, 3
    18a6:	03 c0       	rjmp	.+6      	; 0x18ae <pb_proto_handle+0x46e>
    18a8:	80 81       	ld	r24, Z
    18aa:	84 fd       	sbrc	r24, 4
    18ac:	f7 cf       	rjmp	.-18     	; 0x189c <pb_proto_handle+0x45c>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    18ae:	d7 01       	movw	r26, r14
    18b0:	8c 91       	ld	r24, X
    18b2:	d8 01       	movw	r26, r16
    18b4:	11 96       	adiw	r26, 0x01	; 1
    18b6:	8c 93       	st	X, r24

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    18b8:	4f 5f       	subi	r20, 0xFF	; 255
    18ba:	5f 4f       	sbci	r21, 0xFF	; 255
    18bc:	42 17       	cp	r20, r18
    18be:	53 07       	cpc	r21, r19
    18c0:	18 f4       	brcc	.+6      	; 0x18c8 <pb_proto_handle+0x488>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    18c2:	0e 5f       	subi	r16, 0xFE	; 254
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	df cf       	rjmp	.-66     	; 0x1886 <pb_proto_handle+0x446>
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
  }
  sei();
    18c8:	78 94       	sei
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    18ca:	e6 e2       	ldi	r30, 0x26	; 38
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & SEL))
			continue;

		PAR_STATUS_PORT ^= BUSY;
    18ce:	a8 e2       	ldi	r26, 0x28	; 40
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	94 e0       	ldi	r25, 0x04	; 4
  sei();
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    18d4:	80 81       	ld	r24, Z
    18d6:	83 fd       	sbrc	r24, 3
    18d8:	03 c0       	rjmp	.+6      	; 0x18e0 <pb_proto_handle+0x4a0>
    18da:	80 81       	ld	r24, Z
    18dc:	84 fd       	sbrc	r24, 4
    18de:	fa cf       	rjmp	.-12     	; 0x18d4 <pb_proto_handle+0x494>
		if(!(PAR_STATUS_PIN & SEL))
    18e0:	80 81       	ld	r24, Z
    18e2:	84 ff       	sbrs	r24, 4
    18e4:	09 c0       	rjmp	.+18     	; 0x18f8 <pb_proto_handle+0x4b8>
			continue;

		PAR_STATUS_PORT ^= BUSY;
    18e6:	8c 91       	ld	r24, X
    18e8:	89 27       	eor	r24, r25
    18ea:	8c 93       	st	X, r24
		// Wait for POUT == 0
		while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    18ec:	80 81       	ld	r24, Z
    18ee:	83 ff       	sbrs	r24, 3
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <pb_proto_handle+0x4b8>
    18f2:	80 81       	ld	r24, Z
    18f4:	84 fd       	sbrc	r24, 4
    18f6:	fa cf       	rjmp	.-12     	; 0x18ec <pb_proto_handle+0x4ac>
  } while(!(PAR_STATUS_PIN & SEL));
    18f8:	80 81       	ld	r24, Z
    18fa:	84 ff       	sbrs	r24, 4
    18fc:	eb cf       	rjmp	.-42     	; 0x18d4 <pb_proto_handle+0x494>
  // error?
  if(i<words)
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT ^= BUSY;
    18fe:	e8 e2       	ldi	r30, 0x28	; 40
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	94 e0       	ldi	r25, 0x04	; 4
    1906:	89 27       	eor	r24, r25
    1908:	80 83       	st	Z, r24

  *ret_size = i << 1;
    190a:	69 01       	movw	r12, r18
    190c:	cc 0c       	add	r12, r12
    190e:	dd 1c       	adc	r13, r13
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <pb_proto_handle+0x4d6>
    1912:	cc 24       	eor	r12, r12
    1914:	dd 24       	eor	r13, r13
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t wait_sel(uint8_t select_state, uint8_t state_flag) {
  timer_100us = 0;
    1916:	10 92 5f 01 	sts	0x015F, r1
    191a:	10 92 5e 01 	sts	0x015E, r1
  while(timer_100us < pb_proto_timeout) {
    191e:	20 91 3a 01 	lds	r18, 0x013A
    1922:	30 91 3b 01 	lds	r19, 0x013B
    if(((PAR_STATUS_PIN & SEL) >> SEL_PIN) == select_state)
    1926:	e6 e2       	ldi	r30, 0x26	; 38
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <pb_proto_handle+0x4f2>
    192c:	80 81       	ld	r24, Z
    192e:	84 ff       	sbrs	r24, 4
    1930:	07 c0       	rjmp	.+14     	; 0x1940 <pb_proto_handle+0x500>
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t wait_sel(uint8_t select_state, uint8_t state_flag) {
  timer_100us = 0;
  while(timer_100us < pb_proto_timeout) {
    1932:	80 91 5e 01 	lds	r24, 0x015E
    1936:	90 91 5f 01 	lds	r25, 0x015F
    193a:	82 17       	cp	r24, r18
    193c:	93 07       	cpc	r25, r19
    193e:	b0 f3       	brcs	.-20     	; 0x192c <pb_proto_handle+0x4ec>

  // wait for SEL == 0
  wait_sel(0, PBPROTO_STAGE_END_SELECT);

  // reset RAK = 0
  PAR_STATUS_PORT &= ~BUSY;
    1940:	e8 e2       	ldi	r30, 0x28	; 40
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8b 7f       	andi	r24, 0xFB	; 251
    1948:	80 83       	st	Z, r24
    194a:	e0 90 84 00 	lds	r14, 0x0084
    194e:	f0 90 85 00 	lds	r15, 0x0085
  // read timer
  uint16_t delta = timer_hw_get();

  // process buffer for send command
  /// Amiga sent data - process it
  if(result == PBPROTO_STATUS_OK) {
    1952:	b1 e0       	ldi	r27, 0x01	; 1
    1954:	bb 16       	cp	r11, r27
    1956:	91 f4       	brne	.+36     	; 0x197c <pb_proto_handle+0x53c>
    if((cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST)) {
    1958:	e1 e1       	ldi	r30, 0x11	; 17
    195a:	ae 16       	cp	r10, r30
    195c:	21 f0       	breq	.+8      	; 0x1966 <pb_proto_handle+0x526>
    195e:	f3 e3       	ldi	r31, 0x33	; 51
    1960:	af 16       	cp	r10, r31
    1962:	09 f0       	breq	.+2      	; 0x1966 <pb_proto_handle+0x526>
    1964:	65 c0       	rjmp	.+202    	; 0x1a30 <pb_proto_handle+0x5f0>
      result = proc_func(pb_buf, ret_size);
    1966:	e0 91 46 01 	lds	r30, 0x0146
    196a:	f0 91 47 01 	lds	r31, 0x0147
    196e:	80 91 48 01 	lds	r24, 0x0148
    1972:	90 91 49 01 	lds	r25, 0x0149
    1976:	b6 01       	movw	r22, r12
    1978:	09 95       	icall
    197a:	b8 2e       	mov	r11, r24
    }
  }

  // fill in stats
  ps->cmd = cmd;
    197c:	03 e7       	ldi	r16, 0x73	; 115
    197e:	11 e0       	ldi	r17, 0x01	; 1
    1980:	f8 01       	movw	r30, r16
    1982:	a1 92       	st	Z+, r10
  ps->status = result;
    1984:	b0 82       	st	Z, r11
  ps->size = ret_size;
    1986:	d8 01       	movw	r26, r16
    1988:	15 96       	adiw	r26, 0x05	; 5
    198a:	dc 92       	st	X, r13
    198c:	ce 92       	st	-X, r12
    198e:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = delta;
    1990:	17 96       	adiw	r26, 0x07	; 7
    1992:	fc 92       	st	X, r15
    1994:	ee 92       	st	-X, r14
    1996:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timer_hw_calc_rate_kbs(ret_size, delta);
    1998:	c6 01       	movw	r24, r12
    199a:	b7 01       	movw	r22, r14
    199c:	0e 94 87 02 	call	0x50e	; 0x50e <timer_hw_calc_rate_kbs>
    19a0:	f8 01       	movw	r30, r16
    19a2:	91 87       	std	Z+9, r25	; 0x09
    19a4:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    19a6:	d8 01       	movw	r26, r16
    19a8:	1c 96       	adiw	r26, 0x0c	; 12
    19aa:	6d 92       	st	X+, r6
    19ac:	7d 92       	st	X+, r7
    19ae:	8d 92       	st	X+, r8
    19b0:	9c 92       	st	X, r9
    19b2:	1f 97       	sbiw	r26, 0x0f	; 15
  ps->is_send = (cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST);
    19b4:	b1 e1       	ldi	r27, 0x11	; 17
    19b6:	ab 16       	cp	r10, r27
    19b8:	31 f0       	breq	.+12     	; 0x19c6 <pb_proto_handle+0x586>
    19ba:	e3 e3       	ldi	r30, 0x33	; 51
    19bc:	ae 16       	cp	r10, r30
    19be:	19 f0       	breq	.+6      	; 0x19c6 <pb_proto_handle+0x586>
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <pb_proto_handle+0x58a>
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	e5 e7       	ldi	r30, 0x75	; 117
    19cc:	f1 e0       	ldi	r31, 0x01	; 1
    19ce:	81 93       	st	Z+, r24
  ps->stats_id = ps->is_send ? STATS_ID_PB_TX : STATS_ID_PB_RX;
    19d0:	10 82       	st	Z, r1
    19d2:	88 23       	and	r24, r24
    19d4:	11 f0       	breq	.+4      	; 0x19da <pb_proto_handle+0x59a>
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	80 83       	st	Z, r24
  ps->recv_delta = ps->is_send ? 0 : (uint16_t)(ps->ts - trigger_ts);
    19da:	80 91 75 01 	lds	r24, 0x0175
    19de:	88 23       	and	r24, r24
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <pb_proto_handle+0x5a8>
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	0a c0       	rjmp	.+20     	; 0x19fc <pb_proto_handle+0x5bc>
    19e8:	20 91 7f 01 	lds	r18, 0x017F
    19ec:	30 91 80 01 	lds	r19, 0x0180
    19f0:	80 91 4c 01 	lds	r24, 0x014C
    19f4:	90 91 4d 01 	lds	r25, 0x014D
    19f8:	28 1b       	sub	r18, r24
    19fa:	39 0b       	sbc	r19, r25
    19fc:	30 93 7e 01 	sts	0x017E, r19
    1a00:	20 93 7d 01 	sts	0x017D, r18
    1a04:	8b 2d       	mov	r24, r11
  return result;
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
    1a1a:	bf 90       	pop	r11
    1a1c:	af 90       	pop	r10
    1a1e:	9f 90       	pop	r9
    1a20:	8f 90       	pop	r8
    1a22:	7f 90       	pop	r7
    1a24:	6f 90       	pop	r6
    1a26:	5f 90       	pop	r5
    1a28:	4f 90       	pop	r4
    1a2a:	3f 90       	pop	r3
    1a2c:	2f 90       	pop	r2
    1a2e:	08 95       	ret
      result = proc_func(pb_buf, ret_size);
    }
  }

  // fill in stats
  ps->cmd = cmd;
    1a30:	03 e7       	ldi	r16, 0x73	; 115
    1a32:	11 e0       	ldi	r17, 0x01	; 1
    1a34:	f8 01       	movw	r30, r16
    1a36:	a1 92       	st	Z+, r10
  ps->status = result;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	80 83       	st	Z, r24
  ps->size = ret_size;
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	15 96       	adiw	r26, 0x05	; 5
    1a40:	dc 92       	st	X, r13
    1a42:	ce 92       	st	-X, r12
    1a44:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = delta;
    1a46:	17 96       	adiw	r26, 0x07	; 7
    1a48:	fc 92       	st	X, r15
    1a4a:	ee 92       	st	-X, r14
    1a4c:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timer_hw_calc_rate_kbs(ret_size, delta);
    1a4e:	c6 01       	movw	r24, r12
    1a50:	b7 01       	movw	r22, r14
    1a52:	0e 94 87 02 	call	0x50e	; 0x50e <timer_hw_calc_rate_kbs>
    1a56:	f8 01       	movw	r30, r16
    1a58:	91 87       	std	Z+9, r25	; 0x09
    1a5a:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    1a5c:	d8 01       	movw	r26, r16
    1a5e:	1c 96       	adiw	r26, 0x0c	; 12
    1a60:	6d 92       	st	X+, r6
    1a62:	7d 92       	st	X+, r7
    1a64:	8d 92       	st	X+, r8
    1a66:	9c 92       	st	X, r9
    1a68:	1f 97       	sbiw	r26, 0x0f	; 15
    1a6a:	aa cf       	rjmp	.-172    	; 0x19c0 <pb_proto_handle+0x580>

00001a6c <pb_test_send_packet>:
  return result;
}

void pb_test_send_packet(uint8_t silent)
{
  silent_mode = silent;
    1a6c:	80 93 52 01 	sts	0x0152, r24
  pb_proto_request_recv();
    1a70:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <pb_proto_request_recv>
}
    1a74:	08 95       	ret

00001a76 <pb_test_toggle_auto>:

void pb_test_toggle_auto(void)
{
  auto_mode = !auto_mode;
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	80 91 51 01 	lds	r24, 0x0151
    1a7c:	88 23       	and	r24, r24
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <pb_test_toggle_auto+0xc>
    1a80:	91 e0       	ldi	r25, 0x01	; 1
    1a82:	90 93 51 01 	sts	0x0151, r25
		// NOTE: UART - on
  } else {
		// NOTE: UART - off
  }

  if(auto_mode) {
    1a86:	99 23       	and	r25, r25
    1a88:	29 f0       	breq	.+10     	; 0x1a94 <pb_test_toggle_auto+0x1e>
    // send first packet
    pb_test_send_packet(1);
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <pb_test_send_packet>
    // clear stats
    stats_reset();
    1a90:	0e 94 a0 12 	call	0x2540	; 0x2540 <stats_reset>
    1a94:	08 95       	ret

00001a96 <pb_test_loop>:
    }
  }
}

uint8_t pb_test_loop(void)
{
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
	// NOTE: time_stamp_spc() [PB_TEST] on\r\n

  stats_reset();
    1a9e:	0e 94 a0 12 	call	0x2540	; 0x2540 <stats_reset>

  // setup handlers for pb testing
  pb_proto_init(fill_pkt, proc_pkt, pkt_buf, PKT_BUF_SIZE);
    1aa2:	8b ec       	ldi	r24, 0xCB	; 203
    1aa4:	9d e0       	ldi	r25, 0x0D	; 13
    1aa6:	65 e9       	ldi	r22, 0x95	; 149
    1aa8:	7d e0       	ldi	r23, 0x0D	; 13
    1aaa:	43 e8       	ldi	r20, 0x83	; 131
    1aac:	51 e0       	ldi	r21, 0x01	; 1
    1aae:	2a ee       	ldi	r18, 0xEA	; 234
    1ab0:	35 e0       	ldi	r19, 0x05	; 5
    1ab2:	0e 94 ae 09 	call	0x135c	; 0x135c <pb_proto_init>
  auto_mode = 0;
    1ab6:	10 92 51 01 	sts	0x0151, r1
  toggle_request = 0;
    1aba:	10 92 50 01 	sts	0x0150, r1
  silent_mode = 0;
    1abe:	10 92 52 01 	sts	0x0152, r1
    if(!silent_mode) {
      dump_pb_cmd(&pb_proto_stat);
    }

    // next iteration?
    if(pb_proto_stat.is_send) {
    1ac2:	c5 e7       	ldi	r28, 0x75	; 117
    1ac4:	d1 e0       	ldi	r29, 0x01	; 1
  // ok!
  if(status == PBPROTO_STATUS_OK) {

    // always dump I/O
    if(!silent_mode) {
      dump_pb_cmd(&pb_proto_stat);
    1ac6:	03 e7       	ldi	r16, 0x73	; 115
    1ac8:	11 e0       	ldi	r17, 0x01	; 1
    1aca:	21 c0       	rjmp	.+66     	; 0x1b0e <pb_test_loop+0x78>

// ----- function table -----

static void pb_test_worker(void)
{
  uint8_t status = pb_util_handle();
    1acc:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <pb_util_handle>

  // ok!
  if(status == PBPROTO_STATUS_OK) {
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	a9 f4       	brne	.+42     	; 0x1afe <pb_test_loop+0x68>

    // always dump I/O
    if(!silent_mode) {
    1ad4:	80 91 52 01 	lds	r24, 0x0152
    1ad8:	88 23       	and	r24, r24
    1ada:	19 f4       	brne	.+6      	; 0x1ae2 <pb_test_loop+0x4c>
      dump_pb_cmd(&pb_proto_stat);
    1adc:	c8 01       	movw	r24, r16
    1ade:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <dump_pb_cmd>
    }

    // next iteration?
    if(pb_proto_stat.is_send) {
    1ae2:	88 81       	ld	r24, Y
    1ae4:	88 23       	and	r24, r24
    1ae6:	99 f0       	breq	.+38     	; 0x1b0e <pb_test_loop+0x78>
      if(auto_mode) {
    1ae8:	80 91 51 01 	lds	r24, 0x0151
    1aec:	88 23       	and	r24, r24
    1aee:	21 f0       	breq	.+8      	; 0x1af8 <pb_test_loop+0x62>
        // next iteration after
        pb_test_send_packet(1);
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <pb_test_send_packet>
    1af6:	0b c0       	rjmp	.+22     	; 0x1b0e <pb_test_loop+0x78>
      } else {
        silent_mode = 0;
    1af8:	10 92 52 01 	sts	0x0152, r1
    1afc:	08 c0       	rjmp	.+16     	; 0x1b0e <pb_test_loop+0x78>
      }
    }
  }
  // pb proto failed with an error
  else if(status != PBPROTO_STATUS_IDLE) {
    1afe:	88 23       	and	r24, r24
    1b00:	31 f0       	breq	.+12     	; 0x1b0e <pb_test_loop+0x78>
    // disable auto mode
    if(auto_mode) {
    1b02:	80 91 51 01 	lds	r24, 0x0151
    1b06:	88 23       	and	r24, r24
    1b08:	11 f0       	breq	.+4      	; 0x1b0e <pb_test_loop+0x78>
      pb_test_toggle_auto();
    1b0a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <pb_test_toggle_auto>
  toggle_request = 0;
  silent_mode = 0;

  // test loop
  uint8_t result = CMD_WORKER_IDLE;
  while(run_mode == RUN_MODE_PB_TEST) {
    1b0e:	80 91 42 01 	lds	r24, 0x0142
    1b12:	82 30       	cpi	r24, 0x02	; 2
    1b14:	d9 f2       	breq	.-74     	; 0x1acc <pb_test_loop+0x36>
    // NOTE: UART cmd_worker handling was here, reset by loop break

    pb_test_worker();
  }

  stats_dump(1,0);
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	0e 94 df 12 	call	0x25be	; 0x25be <stats_dump>

	// NOTE: UART - time_stamp_spc() [PB_TEST] off\r\n

  return result;
}
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <proc_pkt>:

  return PBPROTO_STATUS_OK;
}

static uint8_t proc_pkt(const uint8_t *buf, uint16_t size)
{
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	8c 01       	movw	r16, r24
    1b34:	c0 e0       	ldi	r28, 0x00	; 0
    1b36:	d0 e0       	ldi	r29, 0x00	; 0
    1b38:	80 91 68 01 	lds	r24, 0x0168
    1b3c:	90 91 69 01 	lds	r25, 0x0169
    1b40:	86 17       	cp	r24, r22
    1b42:	97 07       	cpc	r25, r23
    1b44:	11 f0       	breq	.+4      	; 0x1b4a <proc_pkt+0x20>
    1b46:	c1 e0       	ldi	r28, 0x01	; 1
    1b48:	d0 e0       	ldi	r29, 0x00	; 0
    errors = 1;
    // NOTE: UART - ERR: size\r\n
  }

  // +0: check dst mac
  if(!net_compare_mac(buf, net_bcast_mac)) {
    1b4a:	c8 01       	movw	r24, r16
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	71 e0       	ldi	r23, 0x01	; 1
    1b50:	0e 94 4a 08 	call	0x1094	; 0x1094 <net_compare_mac>
    1b54:	88 23       	and	r24, r24
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <proc_pkt+0x30>
    errors++;
    1b58:	21 96       	adiw	r28, 0x01	; 1
    // NOTE: UART - ERR: dst mac\r\n
  }
  // +6: check src mac
  if(!net_compare_mac(buf+6, param.mac_addr)) {
    1b5a:	c8 01       	movw	r24, r16
    1b5c:	06 96       	adiw	r24, 0x06	; 6
    1b5e:	60 e6       	ldi	r22, 0x60	; 96
    1b60:	71 e0       	ldi	r23, 0x01	; 1
    1b62:	0e 94 4a 08 	call	0x1094	; 0x1094 <net_compare_mac>
    1b66:	88 23       	and	r24, r24
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <proc_pkt+0x42>
    errors++;
    1b6a:	21 96       	adiw	r28, 0x01	; 1
    // NOTE: UART - ERR: src mac\r\n
  }
  // +12,+13: pkt type
  uint8_t ptype_hi = (uint8_t)(param.test_ptype >> 8);
    1b6c:	ea e6       	ldi	r30, 0x6A	; 106
    1b6e:	f1 e0       	ldi	r31, 0x01	; 1
    1b70:	20 81       	ld	r18, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
  uint8_t ptype_lo = (uint8_t)(param.test_ptype & 0xff);
  if((buf[12] != ptype_hi) || (buf[13] != ptype_lo)) {
    1b74:	f8 01       	movw	r30, r16
    1b76:	84 85       	ldd	r24, Z+12	; 0x0c
    1b78:	89 17       	cp	r24, r25
    1b7a:	11 f4       	brne	.+4      	; 0x1b80 <proc_pkt+0x56>
    1b7c:	85 85       	ldd	r24, Z+13	; 0x0d
    1b7e:	82 13       	cpse	r24, r18
    errors++;
    1b80:	21 96       	adiw	r28, 0x01	; 1
    uart_send_spc();
  }
  uart_send_crlf();
#endif

  if(errors > 0) {
    1b82:	cd 2b       	or	r28, r29
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <proc_pkt+0x60>
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <proc_pkt+0x62>
    1b8a:	86 e0       	ldi	r24, 0x06	; 6
		// NOTE: UART - TOTAL ERRORS hex_word(errors)\r\n
    return PBPROTO_STATUS_ERROR;
  } else {
    return PBPROTO_STATUS_OK;
  }
}
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	08 95       	ret

00001b96 <fill_pkt>:
static uint8_t silent_mode;

// ----- Packet Callbacks -----

static uint8_t fill_pkt(uint8_t *buf, uint16_t max_size, uint16_t *size)
{
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	ec 01       	movw	r28, r24
    1ba4:	7a 01       	movw	r14, r20
  *size = param.test_plen;
    1ba6:	80 91 68 01 	lds	r24, 0x0168
    1baa:	90 91 69 01 	lds	r25, 0x0169
    1bae:	fa 01       	movw	r30, r20
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	80 83       	st	Z, r24
  if(*size > max_size) {
    1bb4:	68 17       	cp	r22, r24
    1bb6:	79 07       	cpc	r23, r25
    1bb8:	10 f4       	brcc	.+4      	; 0x1bbe <fill_pkt+0x28>
    1bba:	85 e0       	ldi	r24, 0x05	; 5
    1bbc:	29 c0       	rjmp	.+82     	; 0x1c10 <fill_pkt+0x7a>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;
  }

  net_copy_mac(net_bcast_mac, buf);
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	be 01       	movw	r22, r28
    1bc4:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>
  net_copy_mac(param.mac_addr, buf+6);
    1bc8:	00 e6       	ldi	r16, 0x60	; 96
    1bca:	11 e0       	ldi	r17, 0x01	; 1
    1bcc:	be 01       	movw	r22, r28
    1bce:	6a 5f       	subi	r22, 0xFA	; 250
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	c8 01       	movw	r24, r16
    1bd4:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>

  uint8_t ptype_hi = (uint8_t)(param.test_ptype >> 8);
    1bd8:	06 5f       	subi	r16, 0xF6	; 246
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	f8 01       	movw	r30, r16
    1bde:	90 81       	ld	r25, Z
    1be0:	81 81       	ldd	r24, Z+1	; 0x01
  uint8_t ptype_lo = (uint8_t)(param.test_ptype & 0xff);
  buf[12] = ptype_hi;
    1be2:	8c 87       	std	Y+12, r24	; 0x0c
  buf[13] = ptype_lo;
    1be4:	9d 87       	std	Y+13, r25	; 0x0d

  uint8_t *ptr = buf + 14;
  uint16_t num = *size - 14;
    1be6:	f7 01       	movw	r30, r14
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	ac 01       	movw	r20, r24
    1bee:	4e 50       	subi	r20, 0x0E	; 14
    1bf0:	50 40       	sbci	r21, 0x00	; 0
  uint8_t val = 0;
  while(num > 0) {
    1bf2:	69 f0       	breq	.+26     	; 0x1c0e <fill_pkt+0x78>
    1bf4:	6c 2f       	mov	r22, r28
    1bf6:	2c 2f       	mov	r18, r28
    1bf8:	3d 2f       	mov	r19, r29
    1bfa:	f9 01       	movw	r30, r18
    *ptr = val;
    1bfc:	8e 2f       	mov	r24, r30
    1bfe:	86 1b       	sub	r24, r22
    1c00:	86 87       	std	Z+14, r24	; 0x0e
    ptr++;
    val++;
    num--;
    1c02:	41 50       	subi	r20, 0x01	; 1
    1c04:	50 40       	sbci	r21, 0x00	; 0
    1c06:	31 96       	adiw	r30, 0x01	; 1
  buf[13] = ptype_lo;

  uint8_t *ptr = buf + 14;
  uint16_t num = *size - 14;
  uint8_t val = 0;
  while(num > 0) {
    1c08:	41 15       	cp	r20, r1
    1c0a:	51 05       	cpc	r21, r1
    1c0c:	b9 f7       	brne	.-18     	; 0x1bfc <fill_pkt+0x66>
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    val++;
    num--;
  }

  return PBPROTO_STATUS_OK;
}
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	ef 90       	pop	r14
    1c1c:	08 95       	ret

00001c1e <pb_util_handle>:
#include "stats.h"
#include "dump.h"
#include "main.h"

uint8_t pb_util_handle(void)
{
    1c1e:	0f 93       	push	r16
  const pb_proto_stat_t *ps = &pb_proto_stat;

  // call protocol handler (low level transmit)
  uint8_t status = pb_proto_handle();
    1c20:	0e 94 20 0a 	call	0x1440	; 0x1440 <pb_proto_handle>
    1c24:	08 2f       	mov	r16, r24
  if(status == PBPROTO_STATUS_IDLE)
    1c26:	88 23       	and	r24, r24
    1c28:	29 f1       	breq	.+74     	; 0x1c74 <pb_util_handle+0x56>
    return PBPROTO_STATUS_IDLE; // Nothing done... return

  if(status == PBPROTO_STATUS_OK) {
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	91 f4       	brne	.+36     	; 0x1c52 <pb_util_handle+0x34>
		// Everything went OK
    // Update stats
    stats_update_ok(ps->stats_id, ps->size, ps->rate);
    1c2e:	e6 e7       	ldi	r30, 0x76	; 118
    1c30:	f1 e0       	ldi	r31, 0x01	; 1
    1c32:	61 81       	ldd	r22, Z+1	; 0x01
    1c34:	72 81       	ldd	r23, Z+2	; 0x02
    1c36:	45 81       	ldd	r20, Z+5	; 0x05
    1c38:	56 81       	ldd	r21, Z+6	; 0x06
    1c3a:	80 81       	ld	r24, Z
    1c3c:	0e 94 b5 12 	call	0x256a	; 0x256a <stats_update_ok>
    if(global_verbose)
    1c40:	80 91 43 01 	lds	r24, 0x0143
    1c44:	88 23       	and	r24, r24
    1c46:	b1 f0       	breq	.+44     	; 0x1c74 <pb_util_handle+0x56>
      dump_pb_cmd(ps); // In interactive (verbose) mode show result
    1c48:	83 e7       	ldi	r24, 0x73	; 115
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <dump_pb_cmd>
    1c50:	11 c0       	rjmp	.+34     	; 0x1c74 <pb_util_handle+0x56>
  }
  else {
		// PB proto failed with an error
    // Dump error
    dump_pb_cmd(ps);
    1c52:	83 e7       	ldi	r24, 0x73	; 115
    1c54:	91 e0       	ldi	r25, 0x01	; 1
    1c56:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <dump_pb_cmd>
    1c5a:	e0 91 76 01 	lds	r30, 0x0176
    1c5e:	8c e0       	ldi	r24, 0x0C	; 12
    1c60:	e8 9f       	mul	r30, r24
    1c62:	f0 01       	movw	r30, r0
    1c64:	11 24       	eor	r1, r1
    1c66:	e3 59       	subi	r30, 0x93	; 147
    1c68:	f8 4f       	sbci	r31, 0xF8	; 248
    // Update stats
    stats_get(ps->stats_id)->err++;
    1c6a:	86 81       	ldd	r24, Z+6	; 0x06
    1c6c:	97 81       	ldd	r25, Z+7	; 0x07
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	97 83       	std	Z+7, r25	; 0x07
    1c72:	86 83       	std	Z+6, r24	; 0x06
  }
  return status;
}
    1c74:	80 2f       	mov	r24, r16
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <pio_test_loop>:
/**
 * Packet IO test mode loop.
 * Used to benchmark Amiga-PlipBox comm.
 */
uint8_t pio_test_loop(void)
{
    1c7a:	ef 92       	push	r14
    1c7c:	ff 92       	push	r15
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <pio_test_loop+0xe>
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
  uint8_t result = CMD_WORKER_IDLE;

  // NOTE: UART - time_stamp_spc() [PIO_TEST] on\r\n

  enc28j60_init(param.mac_addr, pio_util_get_init_flags());
    1c8c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <pio_util_get_init_flags>
    1c90:	68 2f       	mov	r22, r24
    1c92:	80 e6       	ldi	r24, 0x60	; 96
    1c94:	91 e0       	ldi	r25, 0x01	; 1
    1c96:	0e 94 1d 11 	call	0x223a	; 0x223a <enc28j60_init>
  stats_reset();
    1c9a:	0e 94 a0 12 	call	0x2540	; 0x2540 <stats_reset>
    // NOTE: UART cmd_worker() processing here, reset by loop break

    // incoming packet?
    if(enc28j60_has_recv()) {
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
    1c9e:	7e 01       	movw	r14, r28
    1ca0:	08 94       	sec
    1ca2:	e1 1c       	adc	r14, r1
    1ca4:	f1 1c       	adc	r15, r1
            // directly send back test packet
            pio_util_send_packet(size);
          }
        }
      } else {
        stats_get(STATS_ID_PIO_RX)->err++;
    1ca6:	0b e8       	ldi	r16, 0x8B	; 139
    1ca8:	17 e0       	ldi	r17, 0x07	; 7
    1caa:	20 c0       	rjmp	.+64     	; 0x1cec <pio_test_loop+0x72>
  while(run_mode == RUN_MODE_PIO_TEST) {
    // handle commands
    // NOTE: UART cmd_worker() processing here, reset by loop break

    // incoming packet?
    if(enc28j60_has_recv()) {
    1cac:	0e 94 19 11 	call	0x2232	; 0x2232 <enc28j60_has_recv>
    1cb0:	88 23       	and	r24, r24
    1cb2:	e1 f0       	breq	.+56     	; 0x1cec <pio_test_loop+0x72>
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
    1cb4:	c7 01       	movw	r24, r14
    1cb6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <pio_util_recv_packet>
    1cba:	88 23       	and	r24, r24
    1cbc:	89 f4       	brne	.+34     	; 0x1ce0 <pio_test_loop+0x66>
        // handle ARP?
        if(!pio_util_handle_arp(size)) {
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <pio_util_handle_arp>
    1cc6:	88 23       	and	r24, r24
    1cc8:	89 f4       	brne	.+34     	; 0x1cec <pio_test_loop+0x72>
          // is it a UDP test packet?
          if(pio_util_handle_udp_test(size)) {
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <pio_util_handle_udp_test>
    1cd2:	88 23       	and	r24, r24
    1cd4:	59 f0       	breq	.+22     	; 0x1cec <pio_test_loop+0x72>
            // directly send back test packet
            pio_util_send_packet(size);
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <pio_util_send_packet>
    1cde:	06 c0       	rjmp	.+12     	; 0x1cec <pio_test_loop+0x72>
          }
        }
      } else {
        stats_get(STATS_ID_PIO_RX)->err++;
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
  // NOTE: UART - time_stamp_spc() [PIO_TEST] on\r\n

  enc28j60_init(param.mac_addr, pio_util_get_init_flags());
  stats_reset();

  while(run_mode == RUN_MODE_PIO_TEST) {
    1cec:	80 91 42 01 	lds	r24, 0x0142
    1cf0:	83 30       	cpi	r24, 0x03	; 3
    1cf2:	e1 f2       	breq	.-72     	; 0x1cac <pio_test_loop+0x32>
        stats_get(STATS_ID_PIO_RX)->err++;
      }
    }
  }

  stats_dump(0,1);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	0e 94 df 12 	call	0x25be	; 0x25be <stats_dump>
  enc28j60_exit();
    1cfc:	0e 94 73 10 	call	0x20e6	; 0x20e6 <enc28j60_exit>

	// NOTE: UART - time_stamp_spc() [PIO_TEST] off\r\n

  return result;
}
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	08 95       	ret

00001d14 <pio_util_get_init_flags>:

uint8_t pio_util_get_init_flags()
{
  uint8_t flags = PIO_INIT_BROAD_CAST;

  if(param.flow_ctl) {
    1d14:	80 91 66 01 	lds	r24, 0x0166
    1d18:	88 23       	and	r24, r24
    1d1a:	11 f0       	breq	.+4      	; 0x1d20 <pio_util_get_init_flags+0xc>
    1d1c:	9c e0       	ldi	r25, 0x0C	; 12
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <pio_util_get_init_flags+0xe>
    1d20:	94 e0       	ldi	r25, 0x04	; 4
    flags |= PIO_INIT_FLOW_CONTROL;
  }
  if(param.full_duplex) {
    1d22:	80 91 67 01 	lds	r24, 0x0167
    1d26:	81 11       	cpse	r24, r1
    flags |= PIO_INIT_FULL_DUPLEX;
    1d28:	91 60       	ori	r25, 0x01	; 1
  }

  return flags;
}
    1d2a:	89 2f       	mov	r24, r25
    1d2c:	08 95       	ret

00001d2e <pio_util_handle_udp_test>:

  return 1;
}

uint8_t pio_util_handle_udp_test(uint16_t size)
{
    1d2e:	8f 92       	push	r8
    1d30:	9f 92       	push	r9
    1d32:	af 92       	push	r10
    1d34:	bf 92       	push	r11
    1d36:	cf 92       	push	r12
    1d38:	df 92       	push	r13
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
  uint8_t *ip_buf = pkt_buf + ETH_HDR_SIZE;
  uint8_t *udp_buf = ip_buf + ip_get_hdr_length(ip_buf);
    1d46:	01 e9       	ldi	r16, 0x91	; 145
    1d48:	11 e0       	ldi	r17, 0x01	; 1
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 0f       	add	r24, r24
    1d50:	88 0f       	add	r24, r24
    1d52:	8c 73       	andi	r24, 0x3C	; 60
    1d54:	58 01       	movw	r10, r16
    1d56:	a8 0e       	add	r10, r24
    1d58:	b1 1c       	adc	r11, r1
    1d5a:	c5 01       	movw	r24, r10
    1d5c:	02 96       	adiw	r24, 0x02	; 2
    1d5e:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
    1d62:	ec 01       	movw	r28, r24
  const uint8_t *dst_ip = ip_get_tgt_ip(ip_buf);
  uint16_t dst_port = udp_get_tgt_port(udp_buf);
  const uint8_t *data_ptr = udp_get_data_ptr(udp_buf);

  // for us?
  if(net_compare_ip(param.test_ip, dst_ip) && (dst_port == param.test_port)) {
    1d64:	00 5f       	subi	r16, 0xF0	; 240
    1d66:	1f 4f       	sbci	r17, 0xFF	; 255
    1d68:	8c e6       	ldi	r24, 0x6C	; 108
    1d6a:	91 e0       	ldi	r25, 0x01	; 1
    1d6c:	b8 01       	movw	r22, r16
    1d6e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <net_compare_ip>
    1d72:	88 23       	and	r24, r24
    1d74:	d9 f1       	breq	.+118    	; 0x1dec <pio_util_handle_udp_test+0xbe>
    1d76:	80 90 70 01 	lds	r8, 0x0170
    1d7a:	90 90 71 01 	lds	r9, 0x0171
    1d7e:	8c 16       	cp	r8, r28
    1d80:	9d 06       	cpc	r9, r29
    1d82:	a1 f5       	brne	.+104    	; 0x1dec <pio_util_handle_udp_test+0xbe>
    }

    // send UDP packet back again
    // flip IP/UDP
    const uint8_t *src_ip = ip_get_src_ip(ip_buf);
    net_copy_ip(src_ip, ip_buf + 16); // set tgt ip
    1d84:	0d e9       	ldi	r16, 0x9D	; 157
    1d86:	11 e0       	ldi	r17, 0x01	; 1
    1d88:	b8 01       	movw	r22, r16
    1d8a:	6c 5f       	subi	r22, 0xFC	; 252
    1d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8e:	c8 01       	movw	r24, r16
    1d90:	0e 94 ed 07 	call	0xfda	; 0xfda <net_copy_ip>
    net_copy_ip(param.test_ip, ip_buf + 12); // set src ip
    1d94:	0f 2e       	mov	r0, r31
    1d96:	fc e6       	ldi	r31, 0x6C	; 108
    1d98:	cf 2e       	mov	r12, r31
    1d9a:	f1 e0       	ldi	r31, 0x01	; 1
    1d9c:	df 2e       	mov	r13, r31
    1d9e:	f0 2d       	mov	r31, r0
    1da0:	c6 01       	movw	r24, r12
    1da2:	b8 01       	movw	r22, r16
    1da4:	0e 94 ed 07 	call	0xfda	; 0xfda <net_copy_ip>
#define UDP_LENGTH_OFF    4
#define UDP_CHECKSUM_OFF  6
#define UDP_DATA_OFF      8

inline const uint8_t *udp_get_data_ptr(const uint8_t *udp_buf) { return udp_buf + UDP_DATA_OFF; }
inline uint16_t  udp_get_src_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_SRC_PORT_OFF); }
    1da8:	c5 01       	movw	r24, r10
    1daa:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
    1dae:	7c 01       	movw	r14, r24
    uint16_t src_port = udp_get_src_port(udp_buf);
    net_put_word(udp_buf + UDP_SRC_PORT_OFF, dst_port);
    1db0:	c5 01       	movw	r24, r10
    1db2:	b4 01       	movw	r22, r8
    1db4:	0e 94 08 08 	call	0x1010	; 0x1010 <net_put_word>
    net_put_word(udp_buf + UDP_TGT_PORT_OFF, src_port);
    1db8:	c5 01       	movw	r24, r10
    1dba:	02 96       	adiw	r24, 0x02	; 2
    1dbc:	b7 01       	movw	r22, r14
    1dbe:	0e 94 08 08 	call	0x1010	; 0x1010 <net_put_word>

    // flip eth
    net_copy_mac(pkt_buf + ETH_OFF_SRC_MAC, pkt_buf + ETH_OFF_TGT_MAC);
    1dc2:	0f 2e       	mov	r0, r31
    1dc4:	fc ee       	ldi	r31, 0xEC	; 236
    1dc6:	ef 2e       	mov	r14, r31
    1dc8:	ff ef       	ldi	r31, 0xFF	; 255
    1dca:	ff 2e       	mov	r15, r31
    1dcc:	f0 2d       	mov	r31, r0
    1dce:	e0 0e       	add	r14, r16
    1dd0:	f1 1e       	adc	r15, r17
    1dd2:	0a 51       	subi	r16, 0x1A	; 26
    1dd4:	10 40       	sbci	r17, 0x00	; 0
    1dd6:	c7 01       	movw	r24, r14
    1dd8:	b8 01       	movw	r22, r16
    1dda:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>
    net_copy_mac(param.mac_addr, pkt_buf + ETH_OFF_SRC_MAC);
    1dde:	c6 01       	movw	r24, r12
    1de0:	0c 97       	sbiw	r24, 0x0c	; 12
    1de2:	b7 01       	movw	r22, r14
    1de4:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <pio_util_handle_udp_test+0xc0>

    return 1;
    1dec:	80 e0       	ldi	r24, 0x00	; 0
 } else {
 	return 0;
 }
}
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	ff 90       	pop	r15
    1df8:	ef 90       	pop	r14
    1dfa:	df 90       	pop	r13
    1dfc:	cf 90       	pop	r12
    1dfe:	bf 90       	pop	r11
    1e00:	af 90       	pop	r10
    1e02:	9f 90       	pop	r9
    1e04:	8f 90       	pop	r8
    1e06:	08 95       	ret

00001e08 <pio_util_send_packet>:
  }
  return ubRecvResult;
}

uint8_t pio_util_send_packet(uint16_t size)
{
    1e08:	ff 92       	push	r15
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	ec 01       	movw	r28, r24
extern void timer_delay_100us(uint16_t timeout);

// ----- hardware timer -----

// 16 bit hw timer with 4us resolution
inline void timer_hw_reset(void) { TCNT1 = 0; }
    1e14:	04 e8       	ldi	r16, 0x84	; 132
    1e16:	10 e0       	ldi	r17, 0x00	; 0
    1e18:	f8 01       	movw	r30, r16
    1e1a:	11 82       	std	Z+1, r1	; 0x01
    1e1c:	10 82       	st	Z, r1
  timer_hw_reset();
  uint8_t result = enc28j60_send(pkt_buf, size);
    1e1e:	83 e8       	ldi	r24, 0x83	; 131
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	be 01       	movw	r22, r28
    1e24:	0e 94 c0 10 	call	0x2180	; 0x2180 <enc28j60_send>
    1e28:	f8 2e       	mov	r15, r24
inline uint16_t  timer_hw_get(void) { return TCNT1; }
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	60 81       	ld	r22, Z
    1e2e:	71 81       	ldd	r23, Z+1	; 0x01
  uint16_t delta = timer_hw_get();

  uint16_t rate = timer_hw_calc_rate_kbs(size, delta);
    1e30:	ce 01       	movw	r24, r28
    1e32:	0e 94 87 02 	call	0x50e	; 0x50e <timer_hw_calc_rate_kbs>
    1e36:	ac 01       	movw	r20, r24
  if(result == PIO_OK) {
    1e38:	ff 20       	and	r15, r15
    1e3a:	29 f4       	brne	.+10     	; 0x1e46 <pio_util_send_packet+0x3e>
    stats_update_ok(STATS_ID_PIO_TX, size, rate);
    1e3c:	83 e0       	ldi	r24, 0x03	; 3
    1e3e:	be 01       	movw	r22, r28
    1e40:	0e 94 b5 12 	call	0x256a	; 0x256a <stats_update_ok>
    1e44:	07 c0       	rjmp	.+14     	; 0x1e54 <pio_util_send_packet+0x4c>
  } else {
    stats_get(STATS_ID_PIO_TX)->err++;
    1e46:	e7 e9       	ldi	r30, 0x97	; 151
    1e48:	f7 e0       	ldi	r31, 0x07	; 7
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	80 83       	st	Z, r24
    } else {
			// NOTE: UART - ERROR=hex_byte(result)\r\n
    }
  }
  return result;
}
    1e54:	8f 2d       	mov	r24, r15
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	08 95       	ret

00001e62 <pio_util_handle_arp>:

uint8_t pio_util_handle_arp(uint16_t size)
{
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	ec 01       	movw	r28, r24
    1e70:	8f e8       	ldi	r24, 0x8F	; 143
    1e72:	91 e0       	ldi	r25, 0x01	; 1
    1e74:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
  uint16_t type = eth_get_pkt_type(pkt_buf);
  if(type != ETH_TYPE_ARP) {
    1e78:	86 50       	subi	r24, 0x06	; 6
    1e7a:	98 40       	sbci	r25, 0x08	; 8
    1e7c:	d9 f5       	brne	.+118    	; 0x1ef4 <pio_util_handle_arp+0x92>
    return 0;
  }
  if(size <= ETH_HDR_SIZE) {
    1e7e:	cf 30       	cpi	r28, 0x0F	; 15
    1e80:	d1 05       	cpc	r29, r1
    1e82:	c0 f1       	brcs	.+112    	; 0x1ef4 <pio_util_handle_arp+0x92>
  // payload buf/size
  uint8_t *pl_buf = pkt_buf + ETH_HDR_SIZE;
  uint16_t pl_size = size - ETH_HDR_SIZE;

  // is an ARP request
  if(arp_is_ipv4(pl_buf, pl_size) && (arp_get_op(pl_buf) == ARP_REQUEST)) {
    1e84:	be 01       	movw	r22, r28
    1e86:	6e 50       	subi	r22, 0x0E	; 14
    1e88:	70 40       	sbci	r23, 0x00	; 0
    1e8a:	81 e9       	ldi	r24, 0x91	; 145
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <arp_is_ipv4>
    1e92:	88 23       	and	r24, r24
    1e94:	89 f1       	breq	.+98     	; 0x1ef8 <pio_util_handle_arp+0x96>
    1e96:	87 e9       	ldi	r24, 0x97	; 151
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	0e 94 fe 07 	call	0xffc	; 0xffc <net_get_word>
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	59 f5       	brne	.+86     	; 0x1ef8 <pio_util_handle_arp+0x96>

    if(global_verbose) {
			// NOTE: UART - time_stamp_spc() ARP REQ: IP=tgt_ip\r\n
    }

    if(net_compare_ip(tgt_ip, param.test_ip)) {
    1ea2:	89 ea       	ldi	r24, 0xA9	; 169
    1ea4:	91 e0       	ldi	r25, 0x01	; 1
    1ea6:	6c e6       	ldi	r22, 0x6C	; 108
    1ea8:	71 e0       	ldi	r23, 0x01	; 1
    1eaa:	0e 94 60 08 	call	0x10c0	; 0x10c0 <net_compare_ip>
    1eae:	88 23       	and	r24, r24
    1eb0:	19 f1       	breq	.+70     	; 0x1ef8 <pio_util_handle_arp+0x96>
      arp_make_reply(pl_buf, param.mac_addr, param.test_ip);
    1eb2:	01 e9       	ldi	r16, 0x91	; 145
    1eb4:	11 e0       	ldi	r17, 0x01	; 1
    1eb6:	0f 2e       	mov	r0, r31
    1eb8:	f0 e6       	ldi	r31, 0x60	; 96
    1eba:	ef 2e       	mov	r14, r31
    1ebc:	f1 e0       	ldi	r31, 0x01	; 1
    1ebe:	ff 2e       	mov	r15, r31
    1ec0:	f0 2d       	mov	r31, r0
    1ec2:	a7 01       	movw	r20, r14
    1ec4:	44 5f       	subi	r20, 0xF4	; 244
    1ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec8:	c8 01       	movw	r24, r16
    1eca:	b7 01       	movw	r22, r14
    1ecc:	0e 94 77 07 	call	0xeee	; 0xeee <arp_make_reply>
	net_put_word(pkt + ETH_OFF_TYPE, type);
}

inline void eth_make_bcast(uint8_t *pkt, const uint8_t *my_mac)
{
	net_copy_mac(net_bcast_mac, pkt + ETH_OFF_TGT_MAC);
    1ed0:	0e 50       	subi	r16, 0x0E	; 14
    1ed2:	10 40       	sbci	r17, 0x00	; 0
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	b8 01       	movw	r22, r16
    1eda:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>
	net_copy_mac(my_mac, pkt + ETH_OFF_SRC_MAC);
    1ede:	0a 5f       	subi	r16, 0xFA	; 250
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	c7 01       	movw	r24, r14
    1ee4:	b8 01       	movw	r22, r16
    1ee6:	0e 94 de 07 	call	0xfbc	; 0xfbc <net_copy_mac>
      eth_make_bcast(pkt_buf, param.mac_addr);
      pio_util_send_packet(size);
    1eea:	ce 01       	movw	r24, r28
    1eec:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <pio_util_send_packet>
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <pio_util_handle_arp+0x98>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <pio_util_handle_arp+0x98>
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
  }

  return 1;
}
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	08 95       	ret

00001f08 <pio_util_recv_packet>:
/**
 * Receives data from ENC28j60, calculates stats & does logging.
 * @param pDataSize Pointer to addr to be filled with read data size.
 */
uint8_t pio_util_recv_packet(uint16_t *pDataSize)
{
    1f08:	ff 92       	push	r15
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	ec 01       	movw	r28, r24
extern void timer_delay_100us(uint16_t timeout);

// ----- hardware timer -----

// 16 bit hw timer with 4us resolution
inline void timer_hw_reset(void) { TCNT1 = 0; }
    1f14:	04 e8       	ldi	r16, 0x84	; 132
    1f16:	10 e0       	ldi	r17, 0x00	; 0
    1f18:	f8 01       	movw	r30, r16
    1f1a:	11 82       	std	Z+1, r1	; 0x01
    1f1c:	10 82       	st	Z, r1
  // Fetch packet from ENC28j60, measure elapsed time
  timer_hw_reset();
  uint8_t ubRecvResult = enc28j60_recv(pkt_buf, PKT_BUF_SIZE, pDataSize);
    1f1e:	83 e8       	ldi	r24, 0x83	; 131
    1f20:	91 e0       	ldi	r25, 0x01	; 1
    1f22:	6a ee       	ldi	r22, 0xEA	; 234
    1f24:	75 e0       	ldi	r23, 0x05	; 5
    1f26:	ae 01       	movw	r20, r28
    1f28:	0e 94 11 12 	call	0x2422	; 0x2422 <enc28j60_recv>
    1f2c:	f8 2e       	mov	r15, r24
inline uint16_t  timer_hw_get(void) { return TCNT1; }
    1f2e:	f8 01       	movw	r30, r16
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
  uint16_t uwTimeDelta = timer_hw_get();
  uint16_t uwDataRate = timer_hw_calc_rate_kbs(*pDataSize, uwTimeDelta);
    1f34:	88 81       	ld	r24, Y
    1f36:	99 81       	ldd	r25, Y+1	; 0x01
    1f38:	0e 94 87 02 	call	0x50e	; 0x50e <timer_hw_calc_rate_kbs>
    1f3c:	ac 01       	movw	r20, r24

  if(ubRecvResult == PIO_OK) {
    1f3e:	ff 20       	and	r15, r15
    1f40:	31 f4       	brne	.+12     	; 0x1f4e <pio_util_recv_packet+0x46>
		// Update stats - write new data size & rate
    stats_update_ok(STATS_ID_PIO_RX, *pDataSize, uwDataRate);
    1f42:	68 81       	ld	r22, Y
    1f44:	79 81       	ldd	r23, Y+1	; 0x01
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	0e 94 b5 12 	call	0x256a	; 0x256a <stats_update_ok>
    1f4c:	07 c0       	rjmp	.+14     	; 0x1f5c <pio_util_recv_packet+0x54>
  }
  else {
		// Update stats - increase error count
    stats_get(STATS_ID_PIO_RX)->err++;
    1f4e:	eb e8       	ldi	r30, 0x8B	; 139
    1f50:	f7 e0       	ldi	r31, 0x07	; 7
    1f52:	80 81       	ld	r24, Z
    1f54:	91 81       	ldd	r25, Z+1	; 0x01
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	80 83       	st	Z, r24
    else {
			// NOTE: UART - ERROR=hex_byte(ubRecvResult)\r\n
    }
  }
  return ubRecvResult;
}
    1f5c:	8f 2d       	mov	r24, r15
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	ff 90       	pop	r15
    1f68:	08 95       	ret

00001f6a <readOp>:
    1f6a:	e5 e2       	ldi	r30, 0x25	; 37
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	90 81       	ld	r25, Z
    1f70:	9b 7f       	andi	r25, 0xFB	; 251
    1f72:	90 83       	st	Z, r25
static uint8_t is_full_duplex;
static uint8_t rev;

static uint8_t readOp (uint8_t op, uint8_t address) {
    spi_enable_eth();
    spi_out(op | (address & ADDR_MASK));
    1f74:	96 2f       	mov	r25, r22
    1f76:	9f 71       	andi	r25, 0x1F	; 31
    1f78:	98 2b       	or	r25, r24
    1f7a:	9e bd       	out	0x2e, r25	; 46
    1f7c:	ed e4       	ldi	r30, 0x4D	; 77
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	88 23       	and	r24, r24
    1f84:	ec f7       	brge	.-6      	; 0x1f80 <readOp+0x16>
    if (address & 0x80)
    1f86:	66 23       	and	r22, r22
    1f88:	34 f4       	brge	.+12     	; 0x1f96 <readOp+0x2c>
    1f8a:	1e bc       	out	0x2e, r1	; 46
    1f8c:	ed e4       	ldi	r30, 0x4D	; 77
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	88 23       	and	r24, r24
    1f94:	ec f7       	brge	.-6      	; 0x1f90 <readOp+0x26>
    1f96:	1e bc       	out	0x2e, r1	; 46
    1f98:	ed e4       	ldi	r30, 0x4D	; 77
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 23       	and	r24, r24
    1fa0:	ec f7       	brge	.-6      	; 0x1f9c <readOp+0x32>
    1fa2:	8e b5       	in	r24, 0x2e	; 46
    1fa4:	e5 e2       	ldi	r30, 0x25	; 37
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	90 81       	ld	r25, Z
    1faa:	94 60       	ori	r25, 0x04	; 4
    1fac:	90 83       	st	Z, r25
        spi_out(0x00);
    uint8_t result = spi_in();
    spi_disable_eth();
    return result;
}
    1fae:	08 95       	ret

00001fb0 <writeOp>:
    1fb0:	e5 e2       	ldi	r30, 0x25	; 37
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	90 81       	ld	r25, Z
    1fb6:	9b 7f       	andi	r25, 0xFB	; 251
    1fb8:	90 83       	st	Z, r25

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
    spi_enable_eth();
    spi_out(op | (address & ADDR_MASK));
    1fba:	6f 71       	andi	r22, 0x1F	; 31
    1fbc:	68 2b       	or	r22, r24
    1fbe:	6e bd       	out	0x2e, r22	; 46
    1fc0:	ed e4       	ldi	r30, 0x4D	; 77
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	88 23       	and	r24, r24
    1fc8:	ec f7       	brge	.-6      	; 0x1fc4 <writeOp+0x14>
    1fca:	4e bd       	out	0x2e, r20	; 46
    1fcc:	ed e4       	ldi	r30, 0x4D	; 77
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 23       	and	r24, r24
    1fd4:	ec f7       	brge	.-6      	; 0x1fd0 <writeOp+0x20>
    1fd6:	e5 e2       	ldi	r30, 0x25	; 37
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	84 60       	ori	r24, 0x04	; 4
    1fde:	80 83       	st	Z, r24
    spi_out(data);
    spi_disable_eth();
}
    1fe0:	08 95       	ret

00001fe2 <readBuf>:

static void readBuf(uint16_t len, uint8_t* data) {
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	9c 01       	movw	r18, r24
    1fe8:	db 01       	movw	r26, r22
    1fea:	e5 e2       	ldi	r30, 0x25	; 37
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	8b 7f       	andi	r24, 0xFB	; 251
    1ff2:	80 83       	st	Z, r24
    1ff4:	8a e3       	ldi	r24, 0x3A	; 58
    1ff6:	8e bd       	out	0x2e, r24	; 46
    1ff8:	ed e4       	ldi	r30, 0x4D	; 77
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	88 23       	and	r24, r24
    2000:	ec f7       	brge	.-6      	; 0x1ffc <readBuf+0x1a>
    spi_enable_eth();
    spi_out(ENC28J60_READ_BUF_MEM);
    while (len--) {
    2002:	21 15       	cp	r18, r1
    2004:	31 05       	cpc	r19, r1
    2006:	79 f0       	breq	.+30     	; 0x2026 <readBuf+0x44>
    2008:	ce e4       	ldi	r28, 0x4E	; 78
    200a:	d0 e0       	ldi	r29, 0x00	; 0
    200c:	ed e4       	ldi	r30, 0x4D	; 77
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	18 82       	st	Y, r1
    2012:	80 81       	ld	r24, Z
    2014:	88 23       	and	r24, r24
    2016:	ec f7       	brge	.-6      	; 0x2012 <readBuf+0x30>
    2018:	88 81       	ld	r24, Y
        *data++ = spi_in();
    201a:	8c 93       	st	X, r24
    201c:	21 50       	subi	r18, 0x01	; 1
    201e:	30 40       	sbci	r19, 0x00	; 0
}

static void readBuf(uint16_t len, uint8_t* data) {
    spi_enable_eth();
    spi_out(ENC28J60_READ_BUF_MEM);
    while (len--) {
    2020:	11 f0       	breq	.+4      	; 0x2026 <readBuf+0x44>
        *data++ = spi_in();
    2022:	11 96       	adiw	r26, 0x01	; 1
    2024:	f5 cf       	rjmp	.-22     	; 0x2010 <readBuf+0x2e>
    2026:	e5 e2       	ldi	r30, 0x25	; 37
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	84 60       	ori	r24, 0x04	; 4
    202e:	80 83       	st	Z, r24
    }
    spi_disable_eth();
}
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <SetBank>:

static void SetBank (uint8_t address) {
    2036:	1f 93       	push	r17
    2038:	18 2f       	mov	r17, r24
    if ((address & BANK_MASK) != Enc28j60Bank) {
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	20 76       	andi	r18, 0x60	; 96
    2040:	30 70       	andi	r19, 0x00	; 0
    2042:	80 91 53 01 	lds	r24, 0x0153
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	28 17       	cp	r18, r24
    204a:	39 07       	cpc	r19, r25
    204c:	81 f0       	breq	.+32     	; 0x206e <SetBank+0x38>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
    204e:	80 ea       	ldi	r24, 0xA0	; 160
    2050:	6f e1       	ldi	r22, 0x1F	; 31
    2052:	43 e0       	ldi	r20, 0x03	; 3
    2054:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
        Enc28j60Bank = address & BANK_MASK;
    2058:	41 2f       	mov	r20, r17
    205a:	40 76       	andi	r20, 0x60	; 96
    205c:	40 93 53 01 	sts	0x0153, r20
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
    2060:	42 95       	swap	r20
    2062:	46 95       	lsr	r20
    2064:	47 70       	andi	r20, 0x07	; 7
    2066:	80 e8       	ldi	r24, 0x80	; 128
    2068:	6f e1       	ldi	r22, 0x1F	; 31
    206a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
    }
}
    206e:	1f 91       	pop	r17
    2070:	08 95       	ret

00002072 <readRegByte>:

static uint8_t readRegByte (uint8_t address) {
    2072:	1f 93       	push	r17
    2074:	18 2f       	mov	r17, r24
    SetBank(address);
    2076:	0e 94 1b 10 	call	0x2036	; 0x2036 <SetBank>
    return readOp(ENC28J60_READ_CTRL_REG, address);
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	61 2f       	mov	r22, r17
    207e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <readOp>
}
    2082:	1f 91       	pop	r17
    2084:	08 95       	ret

00002086 <writeRegByte>:
static uint16_t readReg(uint8_t address) {
	return readRegByte(address) + (readRegByte(address+1) << 8);
}
#endif

static void writeRegByte (uint8_t address, uint8_t data) {
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
    208a:	18 2f       	mov	r17, r24
    208c:	06 2f       	mov	r16, r22
    SetBank(address);
    208e:	0e 94 1b 10 	call	0x2036	; 0x2036 <SetBank>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
    2092:	80 e4       	ldi	r24, 0x40	; 64
    2094:	61 2f       	mov	r22, r17
    2096:	40 2f       	mov	r20, r16
    2098:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
}
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	08 95       	ret

000020a2 <writeReg>:

static void writeReg(uint8_t address, uint16_t data) {
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	18 2f       	mov	r17, r24
    20a8:	07 2f       	mov	r16, r23
    writeRegByte(address, data);
    20aa:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
    writeRegByte(address + 1, data >> 8);
    20ae:	81 2f       	mov	r24, r17
    20b0:	8f 5f       	subi	r24, 0xFF	; 255
    20b2:	60 2f       	mov	r22, r16
    20b4:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
}
    20b8:	1f 91       	pop	r17
    20ba:	0f 91       	pop	r16
    20bc:	08 95       	ret

000020be <writePhy>:
        ;
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (uint8_t address, uint16_t data) {
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	98 2f       	mov	r25, r24
    20c4:	8b 01       	movw	r16, r22
    writeRegByte(MIREGADR, address);
    20c6:	84 ed       	ldi	r24, 0xD4	; 212
    20c8:	69 2f       	mov	r22, r25
    20ca:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
    writeReg(MIWR, data);
    20ce:	86 ed       	ldi	r24, 0xD6	; 214
    20d0:	b8 01       	movw	r22, r16
    20d2:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
    20d6:	8a ee       	ldi	r24, 0xEA	; 234
    20d8:	0e 94 39 10 	call	0x2072	; 0x2072 <readRegByte>
    20dc:	80 fd       	sbrc	r24, 0
    20de:	fb cf       	rjmp	.-10     	; 0x20d6 <writePhy+0x18>
        ;
}
    20e0:	1f 91       	pop	r17
    20e2:	0f 91       	pop	r16
    20e4:	08 95       	ret

000020e6 <enc28j60_exit>:

void enc28j60_exit(void)
{
	// Moved notice from pio_exit
	// NOTE: UART - time_stamp_spc() pio: exit\r\n
  SetBank(ECON1);
    20e6:	8f e1       	ldi	r24, 0x1F	; 31
    20e8:	0e 94 1b 10 	call	0x2036	; 0x2036 <SetBank>
  writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_RXEN);
    20ec:	80 ea       	ldi	r24, 0xA0	; 160
    20ee:	6f e1       	ldi	r22, 0x1F	; 31
    20f0:	44 e0       	ldi	r20, 0x04	; 4
    20f2:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
}
    20f6:	08 95       	ret

000020f8 <enc28j60_control>:

// ---------- control ----------

uint8_t enc28j60_control(uint8_t control_id, uint8_t value)
{
  switch(control_id) {
    20f8:	88 23       	and	r24, r24
    20fa:	11 f0       	breq	.+4      	; 0x2100 <enc28j60_control+0x8>
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	08 95       	ret
    case PIO_CONTROL_FLOW:
      {
        uint8_t flag;
        if(is_full_duplex) {
    2100:	80 91 56 01 	lds	r24, 0x0156
    2104:	88 23       	and	r24, r24
    2106:	31 f0       	breq	.+12     	; 0x2114 <enc28j60_control+0x1c>
          flag = value ? 2 : 3;
    2108:	66 23       	and	r22, r22
    210a:	11 f4       	brne	.+4      	; 0x2110 <enc28j60_control+0x18>
    210c:	63 e0       	ldi	r22, 0x03	; 3
    210e:	04 c0       	rjmp	.+8      	; 0x2118 <enc28j60_control+0x20>
    2110:	62 e0       	ldi	r22, 0x02	; 2
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <enc28j60_control+0x20>
        } else {
          flag = value ? 1 : 0;
    2114:	61 11       	cpse	r22, r1
    2116:	61 e0       	ldi	r22, 0x01	; 1
        }
        writeRegByte(EFLOCON, flag);
    2118:	87 e7       	ldi	r24, 0x77	; 119
    211a:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
    211e:	80 e0       	ldi	r24, 0x00	; 0
        return PIO_OK;
      }
    default:
      return PIO_NOT_FOUND;
  }
}
    2120:	08 95       	ret

00002122 <enc28j60_status>:

// ---------- status ----------

uint8_t enc28j60_status(uint8_t status_id, uint8_t *value)
{
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	eb 01       	movw	r28, r22
  switch(status_id) {
    2128:	88 23       	and	r24, r24
    212a:	19 f0       	breq	.+6      	; 0x2132 <enc28j60_status+0x10>
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	19 f5       	brne	.+70     	; 0x2176 <enc28j60_status+0x54>
    2130:	05 c0       	rjmp	.+10     	; 0x213c <enc28j60_status+0x1a>
    case PIO_STATUS_VERSION:
      *value = rev;
    2132:	80 91 57 01 	lds	r24, 0x0157
    2136:	88 83       	st	Y, r24
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	1f c0       	rjmp	.+62     	; 0x217a <enc28j60_status+0x58>
    writeRegByte(address, data);
    writeRegByte(address + 1, data >> 8);
}

static uint16_t readPhyByte (uint8_t address) {
    writeRegByte(MIREGADR, address);
    213c:	84 ed       	ldi	r24, 0xD4	; 212
    213e:	61 e1       	ldi	r22, 0x11	; 17
    2140:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
    writeRegByte(MICMD, MICMD_MIIRD);
    2144:	82 ed       	ldi	r24, 0xD2	; 210
    2146:	61 e0       	ldi	r22, 0x01	; 1
    2148:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
    214c:	8a ee       	ldi	r24, 0xEA	; 234
    214e:	0e 94 39 10 	call	0x2072	; 0x2072 <readRegByte>
    2152:	80 fd       	sbrc	r24, 0
    2154:	fb cf       	rjmp	.-10     	; 0x214c <enc28j60_status+0x2a>
        ;
    writeRegByte(MICMD, 0x00);
    2156:	82 ed       	ldi	r24, 0xD2	; 210
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
    return readRegByte(MIRD+1);
    215e:	89 ed       	ldi	r24, 0xD9	; 217
    2160:	0e 94 39 10 	call	0x2072	; 0x2072 <readRegByte>
  switch(status_id) {
    case PIO_STATUS_VERSION:
      *value = rev;
      return PIO_OK;
    case PIO_STATUS_LINK_UP:
      *value = (readPhyByte(PHSTAT2) >> 2) & 1;
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	96 95       	lsr	r25
    2168:	87 95       	ror	r24
    216a:	96 95       	lsr	r25
    216c:	87 95       	ror	r24
    216e:	81 70       	andi	r24, 0x01	; 1
    2170:	88 83       	st	Y, r24
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	02 c0       	rjmp	.+4      	; 0x217a <enc28j60_status+0x58>
      return PIO_OK;
    default:
      *value = 0;
    2176:	18 82       	st	Y, r1
    2178:	81 e0       	ldi	r24, 0x01	; 1
      return PIO_NOT_FOUND;
  }
}
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	08 95       	ret

00002180 <enc28j60_send>:
#endif

// ---------- send ----------

uint8_t enc28j60_send(const uint8_t *data, uint16_t size)
{
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	ec 01       	movw	r28, r24
    218a:	8b 01       	movw	r16, r22
  // prepare tx buffer write
  writeReg(EWRPT, TXSTART_INIT);
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	7a e1       	ldi	r23, 0x1A	; 26
    2192:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
  writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    2196:	8a e7       	ldi	r24, 0x7A	; 122
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
    21a0:	e5 e2       	ldi	r30, 0x25	; 37
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	8b 7f       	andi	r24, 0xFB	; 251
    21a8:	80 83       	st	Z, r24
    21aa:	8a e7       	ldi	r24, 0x7A	; 122
    21ac:	8e bd       	out	0x2e, r24	; 46
    21ae:	ed e4       	ldi	r30, 0x4D	; 77
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	88 23       	and	r24, r24
    21b6:	ec f7       	brge	.-6      	; 0x21b2 <enc28j60_send+0x32>
    21b8:	98 01       	movw	r18, r16
    21ba:	ae e4       	ldi	r26, 0x4E	; 78
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	ed e4       	ldi	r30, 0x4D	; 77
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <enc28j60_send+0x54>
  // fill buffer
  uint16_t num = size;
  spi_enable_eth(),
  spi_out(ENC28J60_WRITE_BUF_MEM);
  while(num--) {
    spi_out(*data++);
    21c4:	88 81       	ld	r24, Y
    21c6:	8c 93       	st	X, r24
    21c8:	80 81       	ld	r24, Z
    21ca:	88 23       	and	r24, r24
    21cc:	ec f7       	brge	.-6      	; 0x21c8 <enc28j60_send+0x48>
    21ce:	21 96       	adiw	r28, 0x01	; 1
    21d0:	21 50       	subi	r18, 0x01	; 1
    21d2:	30 40       	sbci	r19, 0x00	; 0

  // fill buffer
  uint16_t num = size;
  spi_enable_eth(),
  spi_out(ENC28J60_WRITE_BUF_MEM);
  while(num--) {
    21d4:	21 15       	cp	r18, r1
    21d6:	31 05       	cpc	r19, r1
    21d8:	a9 f7       	brne	.-22     	; 0x21c4 <enc28j60_send+0x44>
    21da:	e5 e2       	ldi	r30, 0x25	; 37
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	84 60       	ori	r24, 0x04	; 4
    21e2:	80 83       	st	Z, r24
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <enc28j60_send+0x84>
  }
  spi_disable_eth();

  // wait for tx ready
  while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
      if (readRegByte(EIR) & EIR_TXERIF) {
    21e6:	8c e1       	ldi	r24, 0x1C	; 28
    21e8:	0e 94 39 10 	call	0x2072	; 0x2072 <readRegByte>
    21ec:	81 ff       	sbrs	r24, 1
    21ee:	0a c0       	rjmp	.+20     	; 0x2204 <enc28j60_send+0x84>
          writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
    21f0:	80 e8       	ldi	r24, 0x80	; 128
    21f2:	6f e1       	ldi	r22, 0x1F	; 31
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
          writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
    21fa:	80 ea       	ldi	r24, 0xA0	; 160
    21fc:	6f e1       	ldi	r22, 0x1F	; 31
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
    spi_out(*data++);
  }
  spi_disable_eth();

  // wait for tx ready
  while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	6f e1       	ldi	r22, 0x1F	; 31
    2208:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <readOp>
    220c:	83 fd       	sbrc	r24, 3
    220e:	eb cf       	rjmp	.-42     	; 0x21e6 <enc28j60_send+0x66>
          writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
          writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
      }

  // initiate send
  writeReg(ETXND, TXSTART_INIT+size);
    2210:	b8 01       	movw	r22, r16
    2212:	60 50       	subi	r22, 0x00	; 0
    2214:	76 4e       	sbci	r23, 0xE6	; 230
    2216:	86 e0       	ldi	r24, 0x06	; 6
    2218:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
    221c:	80 e8       	ldi	r24, 0x80	; 128
    221e:	6f e1       	ldi	r22, 0x1F	; 31
    2220:	48 e0       	ldi	r20, 0x08	; 8
    2222:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
  return PIO_OK;
}
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <enc28j60_has_recv>:

// ---------- has_recv ----------

uint8_t enc28j60_has_recv(void)
{
  return readRegByte(EPKTCNT);
    2232:	89 e3       	ldi	r24, 0x39	; 57
    2234:	0e 94 39 10 	call	0x2072	; 0x2072 <readRegByte>
}
    2238:	08 95       	ret

0000223a <enc28j60_init>:
{
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/);
}

uint8_t enc28j60_init(const uint8_t macaddr[6], uint8_t flags)
{
    223a:	df 92       	push	r13
    223c:	ef 92       	push	r14
    223e:	ff 92       	push	r15
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	0f 92       	push	r0
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	7c 01       	movw	r14, r24
    2250:	d6 2e       	mov	r13, r22
  spi_init();
    2252:	0e 94 8b 12 	call	0x2516	; 0x2516 <spi_init>
    2256:	e5 e2       	ldi	r30, 0x25	; 37
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	84 60       	ori	r24, 0x04	; 4
    225e:	80 83       	st	Z, r24
  spi_disable_eth();

  is_full_duplex = (flags & PIO_INIT_FULL_DUPLEX) == PIO_INIT_FULL_DUPLEX;
    2260:	8d 2d       	mov	r24, r13
    2262:	81 70       	andi	r24, 0x01	; 1
    2264:	80 93 56 01 	sts	0x0156, r24

  // soft reset cpu
  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
    2268:	8f ef       	ldi	r24, 0xFF	; 255
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	4f ef       	ldi	r20, 0xFF	; 255
    226e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
  timer_delay_100us(20); // errata B7/2
    2272:	84 e1       	ldi	r24, 0x14	; 20
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <timer_delay_100us>
    227a:	00 e0       	ldi	r16, 0x00	; 0
    227c:	10 e0       	ldi	r17, 0x00	; 0
    227e:	08 c0       	rjmp	.+16     	; 0x2290 <enc28j60_init+0x56>

  // wait or error
  uint16_t count = 0;
  while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY) {
    count ++;
    2280:	0f 5f       	subi	r16, 0xFF	; 255
    2282:	1f 4f       	sbci	r17, 0xFF	; 255
    if(count == 0xfff) {
    2284:	8f e0       	ldi	r24, 0x0F	; 15
    2286:	0f 3f       	cpi	r16, 0xFF	; 255
    2288:	18 07       	cpc	r17, r24
    228a:	11 f4       	brne	.+4      	; 0x2290 <enc28j60_init+0x56>
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	c0 c0       	rjmp	.+384    	; 0x2410 <enc28j60_init+0x1d6>
  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
  timer_delay_100us(20); // errata B7/2

  // wait or error
  uint16_t count = 0;
  while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY) {
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	6d e1       	ldi	r22, 0x1D	; 29
    2294:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <readOp>
    2298:	88 23       	and	r24, r24
    229a:	91 f3       	breq	.-28     	; 0x2280 <enc28j60_init+0x46>
      return PIO_NOT_FOUND;
    }
  }

  // set packet pointers
  gNextPacketPtr = RXSTART_INIT;
    229c:	10 92 55 01 	sts	0x0155, r1
    22a0:	10 92 54 01 	sts	0x0154, r1
  writeReg(ERXST, RXSTART_INIT);
    22a4:	88 e0       	ldi	r24, 0x08	; 8
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
  writeReg(ERXRDPT, RXSTART_INIT);
    22ae:	8c e0       	ldi	r24, 0x0C	; 12
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
  writeReg(ERXND, RXSTOP_INIT);
    22b8:	8a e0       	ldi	r24, 0x0A	; 10
    22ba:	6f ef       	ldi	r22, 0xFF	; 255
    22bc:	79 e1       	ldi	r23, 0x19	; 25
    22be:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
  writeReg(ETXST, TXSTART_INIT);
    22c2:	84 e0       	ldi	r24, 0x04	; 4
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	7a e1       	ldi	r23, 0x1A	; 26
    22c8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
  writeReg(ETXND, TXSTOP_INIT);
    22cc:	86 e0       	ldi	r24, 0x06	; 6
    22ce:	6f ef       	ldi	r22, 0xFF	; 255
    22d0:	7f e1       	ldi	r23, 0x1F	; 31
    22d2:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>

  // set packet filter
  if(flags & PIO_INIT_BROAD_CAST) {
    22d6:	d2 fe       	sbrs	r13, 2
    22d8:	05 c0       	rjmp	.+10     	; 0x22e4 <enc28j60_init+0xaa>

// Functions to enable/disable broadcast filter bits
// With the bit set, broadcast packets are filtered.
static inline void enc28j60_enable_broadcast ( void )
{
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/|ERXFCON_BCEN);
    22da:	88 e3       	ldi	r24, 0x38	; 56
    22dc:	61 ea       	ldi	r22, 0xA1	; 161
    22de:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <enc28j60_init+0xb2>
}

static inline void enc28j60_disable_broadcast ( void )
{
  writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN/*|ERXFCON_PMEN*/);
    22e4:	88 e3       	ldi	r24, 0x38	; 56
    22e6:	60 ea       	ldi	r22, 0xA0	; 160
    22e8:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
  } else {
    enc28j60_disable_broadcast(); // change to add ERXFCON_BCEN recommended by epam
  }

  // BIST pattern generator?
  writeReg(EPMM0, 0x303f);
    22ec:	88 e2       	ldi	r24, 0x28	; 40
    22ee:	6f e3       	ldi	r22, 0x3F	; 63
    22f0:	70 e3       	ldi	r23, 0x30	; 48
    22f2:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
  writeReg(EPMCS, 0xf7f9);
    22f6:	80 e3       	ldi	r24, 0x30	; 48
    22f8:	69 ef       	ldi	r22, 0xF9	; 249
    22fa:	77 ef       	ldi	r23, 0xF7	; 247
    22fc:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>

  // MAC init (with flow control)
  writeRegByte(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
    2300:	80 ec       	ldi	r24, 0xC0	; 192
    2302:	6d e0       	ldi	r22, 0x0D	; 13
    2304:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
  writeRegByte(MACON2, 0x00);
    2308:	81 ec       	ldi	r24, 0xC1	; 193
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
  uint8_t mac3val = MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN;
  if(is_full_duplex) {
    2310:	80 91 56 01 	lds	r24, 0x0156
    2314:	88 23       	and	r24, r24
    2316:	11 f0       	breq	.+4      	; 0x231c <enc28j60_init+0xe2>
    2318:	63 e3       	ldi	r22, 0x33	; 51
    231a:	01 c0       	rjmp	.+2      	; 0x231e <enc28j60_init+0xe4>
    231c:	62 e3       	ldi	r22, 0x32	; 50
    mac3val |= MACON3_FULDPX;
  }
  writeRegByte(MACON3, mac3val);
    231e:	82 ec       	ldi	r24, 0xC2	; 194
    2320:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>

  if(is_full_duplex) {
    2324:	80 91 56 01 	lds	r24, 0x0156
    2328:	88 23       	and	r24, r24
    232a:	51 f0       	breq	.+20     	; 0x2340 <enc28j60_init+0x106>
    writeRegByte(MABBIPG, 0x15);
    232c:	84 ec       	ldi	r24, 0xC4	; 196
    232e:	65 e1       	ldi	r22, 0x15	; 21
    2330:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
    writeReg(MAIPG, 0x0012);
    2334:	86 ec       	ldi	r24, 0xC6	; 198
    2336:	62 e1       	ldi	r22, 0x12	; 18
    2338:	70 e0       	ldi	r23, 0x00	; 0
    233a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
    233e:	09 c0       	rjmp	.+18     	; 0x2352 <enc28j60_init+0x118>
  } else {
    writeRegByte(MABBIPG, 0x12);
    2340:	84 ec       	ldi	r24, 0xC4	; 196
    2342:	62 e1       	ldi	r22, 0x12	; 18
    2344:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
    writeReg(MAIPG, 0x0C12);
    2348:	86 ec       	ldi	r24, 0xC6	; 198
    234a:	62 e1       	ldi	r22, 0x12	; 18
    234c:	7c e0       	ldi	r23, 0x0C	; 12
    234e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
  }
  writeReg(MAMXFL, MAX_FRAMELEN);
    2352:	8a ec       	ldi	r24, 0xCA	; 202
    2354:	6e ee       	ldi	r22, 0xEE	; 238
    2356:	75 e0       	ldi	r23, 0x05	; 5
    2358:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>

  // PHY init
  if(is_full_duplex) {
    235c:	80 91 56 01 	lds	r24, 0x0156
    2360:	88 23       	and	r24, r24
    2362:	59 f0       	breq	.+22     	; 0x237a <enc28j60_init+0x140>
    writePhy(PHCON1, PHCON1_PDPXMD);
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	71 e0       	ldi	r23, 0x01	; 1
    236a:	0e 94 5f 10 	call	0x20be	; 0x20be <writePhy>
    writePhy(PHCON2, 0);
    236e:	80 e1       	ldi	r24, 0x10	; 16
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	0e 94 5f 10 	call	0x20be	; 0x20be <writePhy>
    2378:	0a c0       	rjmp	.+20     	; 0x238e <enc28j60_init+0x154>
  } else {
    writePhy(PHCON1, 0);
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	0e 94 5f 10 	call	0x20be	; 0x20be <writePhy>
    writePhy(PHCON2, PHCON2_HDLDIS);
    2384:	80 e1       	ldi	r24, 0x10	; 16
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	71 e0       	ldi	r23, 0x01	; 1
    238a:	0e 94 5f 10 	call	0x20be	; 0x20be <writePhy>
  }

  // prepare flow control
  writeReg(EPAUS, 20 * 100); // 100ms
    238e:	88 e7       	ldi	r24, 0x78	; 120
    2390:	60 ed       	ldi	r22, 0xD0	; 208
    2392:	77 e0       	ldi	r23, 0x07	; 7
    2394:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>

  // return rev
  rev = readRegByte(EREVID);
    2398:	82 e7       	ldi	r24, 0x72	; 114
    239a:	0e 94 39 10 	call	0x2072	; 0x2072 <readRegByte>
    239e:	80 93 57 01 	sts	0x0157, r24
  // microchip forgot to step the number on the silcon when they
  // released the revision B7. 6 is now rev B7. We still have
  // to see what they do when they release B8. At the moment
  // there is no B8 out yet
  if (rev > 5) ++rev;
    23a2:	86 30       	cpi	r24, 0x06	; 6
    23a4:	18 f0       	brcs	.+6      	; 0x23ac <enc28j60_init+0x172>
    23a6:	8f 5f       	subi	r24, 0xFF	; 255
    23a8:	80 93 57 01 	sts	0x0157, r24

  // set mac
  writeRegByte(MAADR5, macaddr[0]);
    23ac:	84 ee       	ldi	r24, 0xE4	; 228
    23ae:	f7 01       	movw	r30, r14
    23b0:	60 81       	ld	r22, Z
    23b2:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
  writeRegByte(MAADR4, macaddr[1]);
    23b6:	85 ee       	ldi	r24, 0xE5	; 229
    23b8:	f7 01       	movw	r30, r14
    23ba:	61 81       	ldd	r22, Z+1	; 0x01
    23bc:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
  writeRegByte(MAADR3, macaddr[2]);
    23c0:	82 ee       	ldi	r24, 0xE2	; 226
    23c2:	f7 01       	movw	r30, r14
    23c4:	62 81       	ldd	r22, Z+2	; 0x02
    23c6:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
  writeRegByte(MAADR2, macaddr[3]);
    23ca:	83 ee       	ldi	r24, 0xE3	; 227
    23cc:	f7 01       	movw	r30, r14
    23ce:	63 81       	ldd	r22, Z+3	; 0x03
    23d0:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
  writeRegByte(MAADR1, macaddr[4]);
    23d4:	80 ee       	ldi	r24, 0xE0	; 224
    23d6:	f7 01       	movw	r30, r14
    23d8:	64 81       	ldd	r22, Z+4	; 0x04
    23da:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>
  writeRegByte(MAADR0, macaddr[5]);
    23de:	81 ee       	ldi	r24, 0xE1	; 225
    23e0:	f7 01       	movw	r30, r14
    23e2:	65 81       	ldd	r22, Z+5	; 0x05
    23e4:	0e 94 43 10 	call	0x2086	; 0x2086 <writeRegByte>

  SetBank(ECON1);
    23e8:	8f e1       	ldi	r24, 0x1F	; 31
    23ea:	0e 94 1b 10 	call	0x2036	; 0x2036 <SetBank>
  writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
    23ee:	80 e8       	ldi	r24, 0x80	; 128
    23f0:	6b e1       	ldi	r22, 0x1B	; 27
    23f2:	40 ec       	ldi	r20, 0xC0	; 192
    23f4:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
    23f8:	80 e8       	ldi	r24, 0x80	; 128
    23fa:	6f e1       	ldi	r22, 0x1F	; 31
    23fc:	44 e0       	ldi	r20, 0x04	; 4
    23fe:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>

  // Code moved from pio_init
	uint8_t rev, result;
	result = enc28j60_status(PIO_STATUS_VERSION, &rev);
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	be 01       	movw	r22, r28
    2406:	6f 5f       	subi	r22, 0xFF	; 255
    2408:	7f 4f       	sbci	r23, 0xFF	; 255
    240a:	0e 94 91 10 	call	0x2122	; 0x2122 <enc28j60_status>
    240e:	80 e0       	ldi	r24, 0x00	; 0
	if(result == PIO_OK) {
		// NOTE: UART - rev=hex_byte(rev)
	}

  return PIO_OK;
}
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	1f 91       	pop	r17
    2418:	0f 91       	pop	r16
    241a:	ff 90       	pop	r15
    241c:	ef 90       	pop	r14
    241e:	df 90       	pop	r13
    2420:	08 95       	ret

00002422 <enc28j60_recv>:
  *got_size = header.byteCount - 4; //remove the CRC count
  return header.status;
}

uint8_t enc28j60_recv(uint8_t *data, uint16_t max_size, uint16_t *got_size)
{
    2422:	af 92       	push	r10
    2424:	bf 92       	push	r11
    2426:	cf 92       	push	r12
    2428:	df 92       	push	r13
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	00 d0       	rcall	.+0      	; 0x2438 <enc28j60_recv+0x16>
    2438:	00 d0       	rcall	.+0      	; 0x243a <enc28j60_recv+0x18>
    243a:	00 d0       	rcall	.+0      	; 0x243c <enc28j60_recv+0x1a>
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	5c 01       	movw	r10, r24
    2442:	6b 01       	movw	r12, r22
    2444:	8a 01       	movw	r16, r20
  writeReg(ERDPT, gNextPacketPtr);
    2446:	60 91 54 01 	lds	r22, 0x0154
    244a:	70 91 55 01 	lds	r23, 0x0155
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
      uint16_t nextPacket;
      uint16_t byteCount;
      uint16_t status;
  } header;

  readBuf(sizeof header, (uint8_t*) &header);
    2454:	86 e0       	ldi	r24, 0x06	; 6
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	be 01       	movw	r22, r28
    245a:	6f 5f       	subi	r22, 0xFF	; 255
    245c:	7f 4f       	sbci	r23, 0xFF	; 255
    245e:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <readBuf>

  gNextPacketPtr  = header.nextPacket;
    2462:	e9 80       	ldd	r14, Y+1	; 0x01
    2464:	fa 80       	ldd	r15, Y+2	; 0x02
    2466:	f0 92 55 01 	sts	0x0155, r15
    246a:	e0 92 54 01 	sts	0x0154, r14
  *got_size = header.byteCount - 4; //remove the CRC count
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	9c 01       	movw	r18, r24
    2474:	24 50       	subi	r18, 0x04	; 4
    2476:	30 40       	sbci	r19, 0x00	; 0
    2478:	f8 01       	movw	r30, r16
    247a:	31 83       	std	Z+1, r19	; 0x01
    247c:	20 83       	st	Z, r18

  // read chip's packet header
  uint8_t status = read_hdr(got_size);

  // was a receive error?
  if ((status & 0x80)==0) {
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	88 23       	and	r24, r24
    2482:	bc f0       	brlt	.+46     	; 0x24b2 <enc28j60_recv+0x90>

// ---------- recv ----------

inline static void next_pkt(void)
{
  if (gNextPacketPtr - 1 > RXSTOP_INIT)
    2484:	b7 01       	movw	r22, r14
    2486:	61 50       	subi	r22, 0x01	; 1
    2488:	70 40       	sbci	r23, 0x00	; 0
    248a:	fa e1       	ldi	r31, 0x1A	; 26
    248c:	60 30       	cpi	r22, 0x00	; 0
    248e:	7f 07       	cpc	r23, r31
    2490:	30 f0       	brcs	.+12     	; 0x249e <enc28j60_recv+0x7c>
      writeReg(ERXRDPT, RXSTOP_INIT);
    2492:	8c e0       	ldi	r24, 0x0C	; 12
    2494:	6f ef       	ldi	r22, 0xFF	; 255
    2496:	79 e1       	ldi	r23, 0x19	; 25
    2498:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <enc28j60_recv+0x82>
  else
      writeReg(ERXRDPT, gNextPacketPtr - 1);
    249e:	8c e0       	ldi	r24, 0x0C	; 12
    24a0:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    24a4:	80 e8       	ldi	r24, 0x80	; 128
    24a6:	6e e1       	ldi	r22, 0x1E	; 30
    24a8:	40 e4       	ldi	r20, 0x40	; 64
    24aa:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
    24ae:	03 e0       	ldi	r16, 0x03	; 3
    24b0:	20 c0       	rjmp	.+64     	; 0x24f2 <enc28j60_recv+0xd0>
  }

  // check size
  uint16_t len = *got_size;
  uint8_t result = PIO_OK;
  if(len > max_size) {
    24b2:	c2 16       	cp	r12, r18
    24b4:	d3 06       	cpc	r13, r19
    24b6:	18 f4       	brcc	.+6      	; 0x24be <enc28j60_recv+0x9c>
    24b8:	96 01       	movw	r18, r12
    24ba:	02 e0       	ldi	r16, 0x02	; 2
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <enc28j60_recv+0x9e>
    24be:	00 e0       	ldi	r16, 0x00	; 0
    len = max_size;
    result = PIO_TOO_LARGE;
  }

  // read packet
  readBuf(len, data);
    24c0:	c9 01       	movw	r24, r18
    24c2:	b5 01       	movw	r22, r10
    24c4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <readBuf>

// ---------- recv ----------

inline static void next_pkt(void)
{
  if (gNextPacketPtr - 1 > RXSTOP_INIT)
    24c8:	b7 01       	movw	r22, r14
    24ca:	61 50       	subi	r22, 0x01	; 1
    24cc:	70 40       	sbci	r23, 0x00	; 0
    24ce:	8a e1       	ldi	r24, 0x1A	; 26
    24d0:	60 30       	cpi	r22, 0x00	; 0
    24d2:	78 07       	cpc	r23, r24
    24d4:	30 f0       	brcs	.+12     	; 0x24e2 <enc28j60_recv+0xc0>
      writeReg(ERXRDPT, RXSTOP_INIT);
    24d6:	8c e0       	ldi	r24, 0x0C	; 12
    24d8:	6f ef       	ldi	r22, 0xFF	; 255
    24da:	79 e1       	ldi	r23, 0x19	; 25
    24dc:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
    24e0:	03 c0       	rjmp	.+6      	; 0x24e8 <enc28j60_recv+0xc6>
  else
      writeReg(ERXRDPT, gNextPacketPtr - 1);
    24e2:	8c e0       	ldi	r24, 0x0C	; 12
    24e4:	0e 94 51 10 	call	0x20a2	; 0x20a2 <writeReg>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    24e8:	80 e8       	ldi	r24, 0x80	; 128
    24ea:	6e e1       	ldi	r22, 0x1E	; 30
    24ec:	40 e4       	ldi	r20, 0x40	; 64
    24ee:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <writeOp>
  // read packet
  readBuf(len, data);

  next_pkt();
  return result;
}
    24f2:	80 2f       	mov	r24, r16
    24f4:	26 96       	adiw	r28, 0x06	; 6
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	1f 91       	pop	r17
    2506:	0f 91       	pop	r16
    2508:	ff 90       	pop	r15
    250a:	ef 90       	pop	r14
    250c:	df 90       	pop	r13
    250e:	cf 90       	pop	r12
    2510:	bf 90       	pop	r11
    2512:	af 90       	pop	r10
    2514:	08 95       	ret

00002516 <spi_init>:
#include "spi.h"

void spi_init(void)
{
	// output: CS, MOSI, SCK, input: MISO, card detect, write protect
	SPI_DDR |= SPI_SCK | SPI_MOSI | SD_CS | ETH_CS;
    2516:	e4 e2       	ldi	r30, 0x24	; 36
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	8e 62       	ori	r24, 0x2E	; 46
    251e:	80 83       	st	Z, r24
	SPI_DDR &= ~(SPI_MISO | SD_DETECT | SD_LOCK);
    2520:	80 81       	ld	r24, Z
    2522:	8e 76       	andi	r24, 0x6E	; 110
    2524:	80 83       	st	Z, r24

	// MOSI, SCK = 0, Eth CS = 1
	SPI_PORT &= ~(SPI_MOSI | SPI_SCK);
    2526:	e5 e2       	ldi	r30, 0x25	; 37
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	87 7d       	andi	r24, 0xD7	; 215
    252e:	80 83       	st	Z, r24
	SPI_PORT |= ETH_CS;
    2530:	80 81       	ld	r24, Z
    2532:	84 60       	ori	r24, 0x04	; 4
    2534:	80 83       	st	Z, r24

  SPCR = _BV(SPE) | _BV(MSTR); // 8 MHz @ 16
    2536:	80 e5       	ldi	r24, 0x50	; 80
    2538:	8c bd       	out	0x2c, r24	; 44
	SPSR = _BV(SPI2X);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	8d bd       	out	0x2d, r24	; 45
}
    253e:	08 95       	ret

00002540 <stats_reset>:
#include "base/uart.h"

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
    2540:	ed e6       	ldi	r30, 0x6D	; 109
    2542:	f7 e0       	ldi	r31, 0x07	; 7
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    2544:	2d e9       	ldi	r18, 0x9D	; 157
    2546:	37 e0       	ldi	r19, 0x07	; 7
    stats_t *s = &stats[i];
    s->bytes = 0;
    2548:	10 82       	st	Z, r1
    254a:	11 82       	std	Z+1, r1	; 0x01
    254c:	12 82       	std	Z+2, r1	; 0x02
    254e:	13 82       	std	Z+3, r1	; 0x03
    s->cnt = 0;
    2550:	15 82       	std	Z+5, r1	; 0x05
    2552:	14 82       	std	Z+4, r1	; 0x04
    s->err = 0;
    2554:	17 82       	std	Z+7, r1	; 0x07
    2556:	16 82       	std	Z+6, r1	; 0x06
    s->drop = 0;
    2558:	11 86       	std	Z+9, r1	; 0x09
    255a:	10 86       	std	Z+8, r1	; 0x08
    s->max_rate = 0;
    255c:	13 86       	std	Z+11, r1	; 0x0b
    255e:	12 86       	std	Z+10, r1	; 0x0a
    2560:	3c 96       	adiw	r30, 0x0c	; 12

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    2562:	e2 17       	cp	r30, r18
    2564:	f3 07       	cpc	r31, r19
    2566:	81 f7       	brne	.-32     	; 0x2548 <stats_reset+0x8>
    s->cnt = 0;
    s->err = 0;
    s->drop = 0;
    s->max_rate = 0;
  }
}
    2568:	08 95       	ret

0000256a <stats_update_ok>:

void stats_update_ok(uint8_t id, uint16_t size, uint16_t rate)
{
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
  stats_t *s = &stats[id];
    256e:	9c e0       	ldi	r25, 0x0C	; 12
    2570:	89 9f       	mul	r24, r25
    2572:	c0 01       	movw	r24, r0
    2574:	11 24       	eor	r1, r1
    2576:	fc 01       	movw	r30, r24
    2578:	e3 59       	subi	r30, 0x93	; 147
    257a:	f8 4f       	sbci	r31, 0xF8	; 248
  s->cnt++;
    257c:	84 81       	ldd	r24, Z+4	; 0x04
    257e:	95 81       	ldd	r25, Z+5	; 0x05
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	95 83       	std	Z+5, r25	; 0x05
    2584:	84 83       	std	Z+4, r24	; 0x04
  s->bytes += size;
    2586:	8b 01       	movw	r16, r22
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	a2 81       	ldd	r26, Z+2	; 0x02
    2592:	b3 81       	ldd	r27, Z+3	; 0x03
    2594:	80 0f       	add	r24, r16
    2596:	91 1f       	adc	r25, r17
    2598:	a2 1f       	adc	r26, r18
    259a:	b3 1f       	adc	r27, r19
    259c:	80 83       	st	Z, r24
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	a2 83       	std	Z+2, r26	; 0x02
    25a2:	b3 83       	std	Z+3, r27	; 0x03
  if(rate > s->max_rate) {
    25a4:	82 85       	ldd	r24, Z+10	; 0x0a
    25a6:	93 85       	ldd	r25, Z+11	; 0x0b
    25a8:	84 17       	cp	r24, r20
    25aa:	95 07       	cpc	r25, r21
    25ac:	10 f4       	brcc	.+4      	; 0x25b2 <stats_update_ok+0x48>
    s->max_rate = rate;
    25ae:	53 87       	std	Z+11, r21	; 0x0b
    25b0:	42 87       	std	Z+10, r20	; 0x0a
  }
}
    25b2:	1f 91       	pop	r17
    25b4:	0f 91       	pop	r16
    25b6:	08 95       	ret

000025b8 <dump_line>:
      break;
    default:
			// NOTE: UART - ?
      break;
  }
}
    25b8:	08 95       	ret

000025ba <dump_header>:

static void dump_header(void)
{
	// NOTE: UART - cnt  bytes    err  drop rate\r\n
}
    25ba:	08 95       	ret

000025bc <stats_dump_all>:
{
  dump_header();
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    dump_line(i);
  }
}
    25bc:	08 95       	ret

000025be <stats_dump>:
  }
  if(pio) {
    dump_line(STATS_ID_PIO_RX);
    dump_line(STATS_ID_PIO_TX);
  }
}
    25be:	08 95       	ret

000025c0 <__mulsi3>:
    25c0:	62 9f       	mul	r22, r18
    25c2:	d0 01       	movw	r26, r0
    25c4:	73 9f       	mul	r23, r19
    25c6:	f0 01       	movw	r30, r0
    25c8:	82 9f       	mul	r24, r18
    25ca:	e0 0d       	add	r30, r0
    25cc:	f1 1d       	adc	r31, r1
    25ce:	64 9f       	mul	r22, r20
    25d0:	e0 0d       	add	r30, r0
    25d2:	f1 1d       	adc	r31, r1
    25d4:	92 9f       	mul	r25, r18
    25d6:	f0 0d       	add	r31, r0
    25d8:	83 9f       	mul	r24, r19
    25da:	f0 0d       	add	r31, r0
    25dc:	74 9f       	mul	r23, r20
    25de:	f0 0d       	add	r31, r0
    25e0:	65 9f       	mul	r22, r21
    25e2:	f0 0d       	add	r31, r0
    25e4:	99 27       	eor	r25, r25
    25e6:	72 9f       	mul	r23, r18
    25e8:	b0 0d       	add	r27, r0
    25ea:	e1 1d       	adc	r30, r1
    25ec:	f9 1f       	adc	r31, r25
    25ee:	63 9f       	mul	r22, r19
    25f0:	b0 0d       	add	r27, r0
    25f2:	e1 1d       	adc	r30, r1
    25f4:	f9 1f       	adc	r31, r25
    25f6:	bd 01       	movw	r22, r26
    25f8:	cf 01       	movw	r24, r30
    25fa:	11 24       	eor	r1, r1
    25fc:	08 95       	ret

000025fe <__udivmodqi4>:
    25fe:	99 1b       	sub	r25, r25
    2600:	79 e0       	ldi	r23, 0x09	; 9
    2602:	04 c0       	rjmp	.+8      	; 0x260c <__udivmodqi4_ep>

00002604 <__udivmodqi4_loop>:
    2604:	99 1f       	adc	r25, r25
    2606:	96 17       	cp	r25, r22
    2608:	08 f0       	brcs	.+2      	; 0x260c <__udivmodqi4_ep>
    260a:	96 1b       	sub	r25, r22

0000260c <__udivmodqi4_ep>:
    260c:	88 1f       	adc	r24, r24
    260e:	7a 95       	dec	r23
    2610:	c9 f7       	brne	.-14     	; 0x2604 <__udivmodqi4_loop>
    2612:	80 95       	com	r24
    2614:	08 95       	ret

00002616 <__udivmodsi4>:
    2616:	a1 e2       	ldi	r26, 0x21	; 33
    2618:	1a 2e       	mov	r1, r26
    261a:	aa 1b       	sub	r26, r26
    261c:	bb 1b       	sub	r27, r27
    261e:	fd 01       	movw	r30, r26
    2620:	0d c0       	rjmp	.+26     	; 0x263c <__udivmodsi4_ep>

00002622 <__udivmodsi4_loop>:
    2622:	aa 1f       	adc	r26, r26
    2624:	bb 1f       	adc	r27, r27
    2626:	ee 1f       	adc	r30, r30
    2628:	ff 1f       	adc	r31, r31
    262a:	a2 17       	cp	r26, r18
    262c:	b3 07       	cpc	r27, r19
    262e:	e4 07       	cpc	r30, r20
    2630:	f5 07       	cpc	r31, r21
    2632:	20 f0       	brcs	.+8      	; 0x263c <__udivmodsi4_ep>
    2634:	a2 1b       	sub	r26, r18
    2636:	b3 0b       	sbc	r27, r19
    2638:	e4 0b       	sbc	r30, r20
    263a:	f5 0b       	sbc	r31, r21

0000263c <__udivmodsi4_ep>:
    263c:	66 1f       	adc	r22, r22
    263e:	77 1f       	adc	r23, r23
    2640:	88 1f       	adc	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	1a 94       	dec	r1
    2646:	69 f7       	brne	.-38     	; 0x2622 <__udivmodsi4_loop>
    2648:	60 95       	com	r22
    264a:	70 95       	com	r23
    264c:	80 95       	com	r24
    264e:	90 95       	com	r25
    2650:	9b 01       	movw	r18, r22
    2652:	ac 01       	movw	r20, r24
    2654:	bd 01       	movw	r22, r26
    2656:	cf 01       	movw	r24, r30
    2658:	08 95       	ret

0000265a <__eerd_block_m328p>:
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22

0000265e <__eerd_blraw_m328p>:
    265e:	fc 01       	movw	r30, r24
    2660:	f9 99       	sbic	0x1f, 1	; 31
    2662:	fe cf       	rjmp	.-4      	; 0x2660 <__eerd_blraw_m328p+0x2>
    2664:	06 c0       	rjmp	.+12     	; 0x2672 <__eerd_blraw_m328p+0x14>
    2666:	f2 bd       	out	0x22, r31	; 34
    2668:	e1 bd       	out	0x21, r30	; 33
    266a:	f8 9a       	sbi	0x1f, 0	; 31
    266c:	31 96       	adiw	r30, 0x01	; 1
    266e:	00 b4       	in	r0, 0x20	; 32
    2670:	0d 92       	st	X+, r0
    2672:	41 50       	subi	r20, 0x01	; 1
    2674:	50 40       	sbci	r21, 0x00	; 0
    2676:	b8 f7       	brcc	.-18     	; 0x2666 <__eerd_blraw_m328p+0x8>
    2678:	08 95       	ret

0000267a <__eerd_word_m328p>:
    267a:	a8 e1       	ldi	r26, 0x18	; 24
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	42 e0       	ldi	r20, 0x02	; 2
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__eerd_blraw_m328p>

00002686 <__eewr_block_m328p>:
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <__eewr_block_m328p+0xc>
    268c:	2d 91       	ld	r18, X+
    268e:	0e 94 4e 13 	call	0x269c	; 0x269c <__eewr_r18_m328p>
    2692:	41 50       	subi	r20, 0x01	; 1
    2694:	50 40       	sbci	r21, 0x00	; 0
    2696:	d0 f7       	brcc	.-12     	; 0x268c <__eewr_block_m328p+0x6>
    2698:	08 95       	ret

0000269a <__eewr_byte_m328p>:
    269a:	26 2f       	mov	r18, r22

0000269c <__eewr_r18_m328p>:
    269c:	f9 99       	sbic	0x1f, 1	; 31
    269e:	fe cf       	rjmp	.-4      	; 0x269c <__eewr_r18_m328p>
    26a0:	1f ba       	out	0x1f, r1	; 31
    26a2:	92 bd       	out	0x22, r25	; 34
    26a4:	81 bd       	out	0x21, r24	; 33
    26a6:	20 bd       	out	0x20, r18	; 32
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	fa 9a       	sbi	0x1f, 2	; 31
    26ae:	f9 9a       	sbi	0x1f, 1	; 31
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	08 95       	ret

000026b6 <__eewr_word_m328p>:
    26b6:	0e 94 4d 13 	call	0x269a	; 0x269a <__eewr_byte_m328p>
    26ba:	27 2f       	mov	r18, r23
    26bc:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__eewr_r18_m328p>

000026c0 <_exit>:
    26c0:	f8 94       	cli

000026c2 <__stop_program>:
    26c2:	ff cf       	rjmp	.-2      	; 0x26c2 <__stop_program>


bin\Debug\plipUltimate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00001b52  00001c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b52  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000651  0080013c  0080013c  00001c62  2**0
                  ALLOC
  3 .eeprom       00000016  00810000  00810000  00001c62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  00001c78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .debug_aranges 000001e0  00000000  00000000  00001c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000006fa  00000000  00000000  00001e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000036f8  00000000  00000000  00002555  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001367  00000000  00000000  00005c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002168  00000000  00000000  00006fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005a0  00000000  00000000  0000911c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001169  00000000  00000000  000096bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018bd  00000000  00000000  0000a825  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  0000c0e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 01 	jmp	0x212	; 0x212 <__ctors_end>
       4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      2c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_11>
      30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      50:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

00000068 <cmd_table>:
      68:	b6 00 a8 05 b9 00 d5 00 a4 05 d8 00 f4 00 a0 05     ................
      78:	f7 00 07 01 9c 05 0a 01 1b 01 79 05 1d 01 39 01     ..........y...9.
      88:	30 05 3c 01 55 01 30 05 58 01 6e 01 f5 04 71 01     0.<.U.0.X.n...q.
      98:	88 01 f5 04 8b 01 a4 01 d5 04 a7 01 bc 01 f5 04     ................
      a8:	bf 01 d1 01 30 05 d4 01 00 00 00 00 00 00           ....0.........

000000b6 <cmd_param_load_name>:
      b6:	70 6c 00                                            pl.

000000b9 <cmd_param_load_help>:
      b9:	6c 6f 61 64 20 70 61 72 61 6d 65 74 65 72 73 20     load parameters 
      c9:	66 72 6f 6d 20 45 45 50 52 4f 4d 00                 from EEPROM.

000000d5 <cmd_param_reset_name>:
      d5:	70 72 00                                            pr.

000000d8 <cmd_param_reset_help>:
      d8:	72 65 73 65 74 20 70 61 72 61 6d 65 74 65 72 73     reset parameters
      e8:	20 74 6f 20 64 65 66 61 75 6c 74 00                  to default.

000000f4 <cmd_stats_dump_name>:
      f4:	73 64 00                                            sd.

000000f7 <cmd_stats_dump_help>:
      f7:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

00000107 <cmd_stats_reset_name>:
     107:	73 72 00                                            sr.

0000010a <cmd_stats_reset_help>:
     10a:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

0000011b <cmd_gen_m_name>:
     11b:	6d 00                                               m.

0000011d <cmd_gen_m_help>:
     11d:	6d 61 63 20 61 64 64 72 65 73 73 20 6f 66 20 64     mac address of d
     12d:	65 76 69 63 65 20 3c 6d 61 63 3e 00                 evice <mac>.

00000139 <cmd_gen_fd_name>:
     139:	66 64 00                                            fd.

0000013c <cmd_gen_fd_help>:
     13c:	73 65 74 20 66 75 6c 6c 20 64 75 70 6c 65 20 6d     set full duple m
     14c:	6f 64 65 20 5b 6f 6e 5d 00                          ode [on].

00000155 <cmd_gen_fc_name>:
     155:	66 63 00                                            fc.

00000158 <cmd_gen_fc_help>:
     158:	73 65 74 20 66 6c 6f 77 20 63 6f 6e 74 72 6f 6c     set flow control
     168:	20 5b 6f 6e 5d 00                                    [on].

0000016e <cmd_gen_tl_name>:
     16e:	74 6c 00                                            tl.

00000171 <cmd_gen_tl_help>:
     171:	74 65 73 74 20 70 61 63 6b 65 74 20 6c 65 6e 67     test packet leng
     181:	74 68 20 3c 6e 3e 00                                th <n>.

00000188 <cmd_gen_tt_name>:
     188:	74 74 00                                            tt.

0000018b <cmd_gen_tt_help>:
     18b:	74 65 73 74 20 70 61 63 6b 65 74 20 65 74 68 20     test packet eth 
     19b:	74 79 70 65 20 3c 6e 3e 00                          type <n>.

000001a4 <cmd_gen_ti_name>:
     1a4:	74 69 00                                            ti.

000001a7 <cmd_gen_ti_help>:
     1a7:	74 65 73 74 20 49 50 20 61 64 64 72 65 73 73 20     test IP address 
     1b7:	3c 69 70 3e 00                                      <ip>.

000001bc <cmd_gen_tp_name>:
     1bc:	74 70 00                                            tp.

000001bf <cmd_gen_tp_help>:
     1bf:	74 65 73 74 20 55 44 50 20 70 6f 72 74 20 3c 6e     test UDP port <n
     1cf:	3e 00                                               >.

000001d1 <cmd_gen_tm_name>:
     1d1:	74 6d 00                                            tm.

000001d4 <cmd_gen_tm_help>:
     1d4:	74 65 73 74 20 6d 6f 64 65 20 5b 30 7c 31 5d 00     test mode [0|1].

000001e4 <cmdkey_table>:
     1e4:	73 ad 05 ee 01 00 00 00 00 00                       s.........

000001ee <cmd_dump_stats_help>:
     1ee:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

000001fe <sc_sDefaultConfig>:
     1fe:	1a 11 af a0 47 11 00 00 ea 05 fd ff c0 a8 02 de     ....G...........
     20e:	90 1a 00 00                                         ....

00000212 <__ctors_end>:
     212:	11 24       	eor	r1, r1
     214:	1f be       	out	0x3f, r1	; 63
     216:	cf ef       	ldi	r28, 0xFF	; 255
     218:	d8 e0       	ldi	r29, 0x08	; 8
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	cd bf       	out	0x3d, r28	; 61

0000021e <__do_copy_data>:
     21e:	11 e0       	ldi	r17, 0x01	; 1
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	e2 e5       	ldi	r30, 0x52	; 82
     226:	fb e1       	ldi	r31, 0x1B	; 27
     228:	02 c0       	rjmp	.+4      	; 0x22e <.do_copy_data_start>

0000022a <.do_copy_data_loop>:
     22a:	05 90       	lpm	r0, Z+
     22c:	0d 92       	st	X+, r0

0000022e <.do_copy_data_start>:
     22e:	ac 33       	cpi	r26, 0x3C	; 60
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <.do_copy_data_loop>

00000234 <__do_clear_bss>:
     234:	17 e0       	ldi	r17, 0x07	; 7
     236:	ac e3       	ldi	r26, 0x3C	; 60
     238:	b1 e0       	ldi	r27, 0x01	; 1
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ad 38       	cpi	r26, 0x8D	; 141
     240:	b1 07       	cpc	r27, r17
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 b0 05 	call	0xb60	; 0xb60 <main>
     248:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <_exit>

0000024c <__bad_interrupt>:
     24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <timerInit>:
/// 100us is 1/10k of a second
/// NOTE(KaiN#): time was reduced by 1, should it be?
#define T1_100us F_CPU/10000

void timerInit(void) {
  cli();
     250:	f8 94       	cli

	/// Set timer 2 to CTC, prescaler 8 & compare value: 100us
  TCCR1A = _BV(WGM12);  // CTC
     252:	88 e0       	ldi	r24, 0x08	; 8
     254:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = _BV(CS10);   // Prescaler 1
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	80 93 81 00 	sts	0x0081, r24
  OCR1A = T1_100us;     // Output compare
     25e:	80 ed       	ldi	r24, 0xD0	; 208
     260:	97 e0       	ldi	r25, 0x07	; 7
     262:	90 93 89 00 	sts	0x0089, r25
     266:	80 93 88 00 	sts	0x0088, r24
  TCNT1  = 0;           // Reset timer state
     26a:	10 92 85 00 	sts	0x0085, r1
     26e:	10 92 84 00 	sts	0x0084, r1
  TIMSK1 = _BV(OCIE1A); // Enable compare interrupt
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	80 93 6f 00 	sts	0x006F, r24

  g_uwTimer100us = 0;
     278:	10 92 47 01 	sts	0x0147, r1
     27c:	10 92 46 01 	sts	0x0146, r1
  g_uwTimer10ms = 0;
     280:	10 92 45 01 	sts	0x0145, r1
     284:	10 92 44 01 	sts	0x0144, r1
  g_uwTimeStamp = 0;
     288:	10 92 48 01 	sts	0x0148, r1
     28c:	10 92 49 01 	sts	0x0149, r1
     290:	10 92 4a 01 	sts	0x014A, r1
     294:	10 92 4b 01 	sts	0x014B, r1
  s_uw10msCounter = 0;
     298:	10 92 3d 01 	sts	0x013D, r1
     29c:	10 92 3c 01 	sts	0x013C, r1

  sei();
     2a0:	78 94       	sei
}
     2a2:	08 95       	ret

000002a4 <__vector_11>:

/**
 * Timer interrupt handler.
 * Increments time stamp and time interval vars accordingly.
 */
ISR(TIMER1_COMPA_vect) {
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	0f 92       	push	r0
     2ac:	11 24       	eor	r1, r1
     2ae:	8f 93       	push	r24
     2b0:	9f 93       	push	r25
     2b2:	af 93       	push	r26
     2b4:	bf 93       	push	r27
	TCNT1 = 0; // Reset timer s_uw10msCounterer
     2b6:	10 92 85 00 	sts	0x0085, r1
     2ba:	10 92 84 00 	sts	0x0084, r1
  ++g_uwTimer100us;
     2be:	80 91 46 01 	lds	r24, 0x0146
     2c2:	90 91 47 01 	lds	r25, 0x0147
     2c6:	01 96       	adiw	r24, 0x01	; 1
     2c8:	90 93 47 01 	sts	0x0147, r25
     2cc:	80 93 46 01 	sts	0x0146, r24
  ++g_uwTimeStamp;
     2d0:	80 91 48 01 	lds	r24, 0x0148
     2d4:	90 91 49 01 	lds	r25, 0x0149
     2d8:	a0 91 4a 01 	lds	r26, 0x014A
     2dc:	b0 91 4b 01 	lds	r27, 0x014B
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	a1 1d       	adc	r26, r1
     2e4:	b1 1d       	adc	r27, r1
     2e6:	80 93 48 01 	sts	0x0148, r24
     2ea:	90 93 49 01 	sts	0x0149, r25
     2ee:	a0 93 4a 01 	sts	0x014A, r26
     2f2:	b0 93 4b 01 	sts	0x014B, r27
  ++s_uw10msCounter;
     2f6:	80 91 3c 01 	lds	r24, 0x013C
     2fa:	90 91 3d 01 	lds	r25, 0x013D
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	90 93 3d 01 	sts	0x013D, r25
     304:	80 93 3c 01 	sts	0x013C, r24
  if(s_uw10msCounter >= 100) {
     308:	84 36       	cpi	r24, 0x64	; 100
     30a:	91 05       	cpc	r25, r1
     30c:	68 f0       	brcs	.+26     	; 0x328 <__vector_11+0x84>
    s_uw10msCounter = 0;
     30e:	10 92 3d 01 	sts	0x013D, r1
     312:	10 92 3c 01 	sts	0x013C, r1
    g_uwTimer10ms++;
     316:	80 91 44 01 	lds	r24, 0x0144
     31a:	90 91 45 01 	lds	r25, 0x0145
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	90 93 45 01 	sts	0x0145, r25
     324:	80 93 44 01 	sts	0x0144, r24
  }
}
     328:	bf 91       	pop	r27
     32a:	af 91       	pop	r26
     32c:	9f 91       	pop	r25
     32e:	8f 91       	pop	r24
     330:	0f 90       	pop	r0
     332:	0f be       	out	0x3f, r0	; 63
     334:	0f 90       	pop	r0
     336:	1f 90       	pop	r1
     338:	18 95       	reti

0000033a <timerDelay10ms>:

/// Busy-wait for supplied number of 10ms intervals
void timerDelay10ms(uint16_t uwCount) {
     33a:	9c 01       	movw	r18, r24
	g_uwTimer10ms=0;
     33c:	10 92 45 01 	sts	0x0145, r1
     340:	10 92 44 01 	sts	0x0144, r1
	while(g_uwTimer10ms<uwCount);
     344:	80 91 44 01 	lds	r24, 0x0144
     348:	90 91 45 01 	lds	r25, 0x0145
     34c:	82 17       	cp	r24, r18
     34e:	93 07       	cpc	r25, r19
     350:	c8 f3       	brcs	.-14     	; 0x344 <timerDelay10ms+0xa>
}
     352:	08 95       	ret

00000354 <timerDelay100us>:

/// Busy-wait for supplied number of 100us intervals
void timerDelay100us(uint16_t uwCount) {
     354:	9c 01       	movw	r18, r24
	g_uwTimer100us=0;
     356:	10 92 47 01 	sts	0x0147, r1
     35a:	10 92 46 01 	sts	0x0146, r1
	while(g_uwTimer100us<uwCount);
     35e:	80 91 46 01 	lds	r24, 0x0146
     362:	90 91 47 01 	lds	r25, 0x0147
     366:	82 17       	cp	r24, r18
     368:	93 07       	cpc	r25, r19
     36a:	c8 f3       	brcs	.-14     	; 0x35e <timerDelay100us+0xa>
}
     36c:	08 95       	ret

0000036e <timerCalculateKbps>:

// TODO(KaiN#9): timerCalculateKbps() is completely messed up
/**
 * Calculates bitrate based on transferred byte count and elapsed time.
 */
uint16_t timerCalculateKbps(uint16_t bytes, uint16_t delta) {
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	eb 01       	movw	r28, r22
  if(delta != 0) {
     374:	61 15       	cp	r22, r1
     376:	71 05       	cpc	r23, r1
     378:	19 f4       	brne	.+6      	; 0x380 <timerCalculateKbps+0x12>
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	16 c0       	rjmp	.+44     	; 0x3ac <timerCalculateKbps+0x3e>
    uint32_t nom = 1000 * (uint32_t)bytes * 100;
    uint32_t denom = (uint32_t)delta * 4;
    uint32_t rate = nom / denom;
    return (uint16_t)rate;
     380:	bc 01       	movw	r22, r24
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	20 ea       	ldi	r18, 0xA0	; 160
     388:	36 e8       	ldi	r19, 0x86	; 134
     38a:	41 e0       	ldi	r20, 0x01	; 1
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__mulsi3>
     392:	9e 01       	movw	r18, r28
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	22 0f       	add	r18, r18
     39a:	33 1f       	adc	r19, r19
     39c:	44 1f       	adc	r20, r20
     39e:	55 1f       	adc	r21, r21
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	44 1f       	adc	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__udivmodsi4>
  }
	else
		return 0;
}
     3ac:	82 2f       	mov	r24, r18
     3ae:	93 2f       	mov	r25, r19
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <utilNibbleToHex>:
/**
 * Converts nibble (0..15) value to hex char.
 */
char utilNibbleToHex(uint8_t ubIn)
{
  if(ubIn < 10)
     3b6:	8a 30       	cpi	r24, 0x0A	; 10
     3b8:	10 f4       	brcc	.+4      	; 0x3be <utilNibbleToHex+0x8>
    return '0' + ubIn;
     3ba:	80 5d       	subi	r24, 0xD0	; 208
     3bc:	08 95       	ret
  else
    return 'A' + ubIn - 10;
     3be:	89 5c       	subi	r24, 0xC9	; 201
}
     3c0:	08 95       	ret

000003c2 <utilByteToHex>:

/**
 * Converts byte value to hex chars.
 */
void utilByteToHex(uint8_t ubIn, char *pOut)
{
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	f8 2e       	mov	r15, r24
     3ca:	8b 01       	movw	r16, r22
  pOut[0] = utilNibbleToHex(ubIn >> 4);
     3cc:	82 95       	swap	r24
     3ce:	8f 70       	andi	r24, 0x0F	; 15
     3d0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <utilNibbleToHex>
     3d4:	f8 01       	movw	r30, r16
     3d6:	80 83       	st	Z, r24
  pOut[1] = utilNibbleToHex(ubIn & 0xf);
     3d8:	8f 2d       	mov	r24, r15
     3da:	8f 70       	andi	r24, 0x0F	; 15
     3dc:	0e 94 db 01 	call	0x3b6	; 0x3b6 <utilNibbleToHex>
     3e0:	f8 01       	movw	r30, r16
     3e2:	81 83       	std	Z+1, r24	; 0x01
}
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	08 95       	ret

000003ec <utilWordToHex>:

void utilWordToHex(uint16_t uwIn, char *pOut)
{
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	f8 2e       	mov	r15, r24
     3f4:	8b 01       	movw	r16, r22
  utilByteToHex((uint8_t)(uwIn>>8), pOut);
     3f6:	89 2f       	mov	r24, r25
     3f8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <utilByteToHex>
  utilByteToHex((uint8_t)(uwIn&0xff), pOut+2);
     3fc:	0e 5f       	subi	r16, 0xFE	; 254
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
     400:	8f 2d       	mov	r24, r15
     402:	b8 01       	movw	r22, r16
     404:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <utilByteToHex>
}
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	08 95       	ret

00000410 <utilDwordToHex>:

void utilDwordToHex(uint32_t ulIn, char *pOut)
{
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	6b 01       	movw	r12, r22
     41e:	7c 01       	movw	r14, r24
     420:	8a 01       	movw	r16, r20
  utilWordToHex((uint16_t)(ulIn>>16), pOut);
     422:	aa 27       	eor	r26, r26
     424:	bb 27       	eor	r27, r27
     426:	ba 01       	movw	r22, r20
     428:	0e 94 f6 01 	call	0x3ec	; 0x3ec <utilWordToHex>
  utilWordToHex((uint16_t)(ulIn&0xffff), pOut+4);
     42c:	0c 5f       	subi	r16, 0xFC	; 252
     42e:	1f 4f       	sbci	r17, 0xFF	; 255
     430:	c6 01       	movw	r24, r12
     432:	b8 01       	movw	r22, r16
     434:	0e 94 f6 01 	call	0x3ec	; 0x3ec <utilWordToHex>
}
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	08 95       	ret

00000446 <utilByteToDec>:

void utilByteToDec(uint8_t value, uint8_t *out)
{
     446:	28 2f       	mov	r18, r24
     448:	fb 01       	movw	r30, r22
  uint8_t h = value / 100;
  uint8_t t = value % 100;
     44a:	64 e6       	ldi	r22, 0x64	; 100
     44c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__udivmodqi4>
     450:	39 2f       	mov	r19, r25
  uint8_t o = t % 10;
  t = t / 10;
  out[0] = '0' + h;
     452:	82 2f       	mov	r24, r18
     454:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__udivmodqi4>
     458:	80 5d       	subi	r24, 0xD0	; 208
     45a:	80 83       	st	Z, r24
  out[1] = '0' + t;
     45c:	83 2f       	mov	r24, r19
     45e:	6a e0       	ldi	r22, 0x0A	; 10
     460:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__udivmodqi4>
     464:	80 5d       	subi	r24, 0xD0	; 208
     466:	81 83       	std	Z+1, r24	; 0x01
  out[2] = '0' + o;
     468:	83 2f       	mov	r24, r19
     46a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__udivmodqi4>
     46e:	90 5d       	subi	r25, 0xD0	; 208
     470:	92 83       	std	Z+2, r25	; 0x02
}
     472:	08 95       	ret

00000474 <utilDwordToDec>:

void utilDwordToDec(uint32_t value, uint8_t *out, uint8_t num_digits, uint8_t point_pos)
{
     474:	af 92       	push	r10
     476:	bf 92       	push	r11
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	c6 2e       	mov	r12, r22
     48a:	d7 2e       	mov	r13, r23
     48c:	e8 2e       	mov	r14, r24
     48e:	f9 2e       	mov	r15, r25
     490:	b2 2e       	mov	r11, r18
	uint8_t i;
  // start backwards
  uint8_t *pos = out + num_digits - 1;
     492:	82 2f       	mov	r24, r18
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	ea 01       	movw	r28, r20
     49a:	c8 0f       	add	r28, r24
     49c:	d9 1f       	adc	r29, r25
  if(point_pos < num_digits) {
     49e:	02 17       	cp	r16, r18
     4a0:	08 f4       	brcc	.+2      	; 0x4a4 <utilDwordToDec+0x30>
    pos++;
     4a2:	21 96       	adiw	r28, 0x01	; 1
  }
  for(i=0;i<num_digits;i++) {
     4a4:	bb 20       	and	r11, r11
     4a6:	41 f1       	breq	.+80     	; 0x4f8 <utilDwordToDec+0x84>
     4a8:	10 e0       	ldi	r17, 0x00	; 0
    if(i == point_pos) {
      *pos = '.';
     4aa:	0f 2e       	mov	r0, r31
     4ac:	fe e2       	ldi	r31, 0x2E	; 46
     4ae:	af 2e       	mov	r10, r31
     4b0:	f0 2d       	mov	r31, r0
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
    if(i == point_pos) {
     4b2:	10 17       	cp	r17, r16
     4b4:	11 f4       	brne	.+4      	; 0x4ba <utilDwordToDec+0x46>
      *pos = '.';
     4b6:	a8 82       	st	Y, r10
      pos--;
     4b8:	21 97       	sbiw	r28, 0x01	; 1
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
     4ba:	6c 2d       	mov	r22, r12
     4bc:	7d 2d       	mov	r23, r13
     4be:	8e 2d       	mov	r24, r14
     4c0:	9f 2d       	mov	r25, r15
     4c2:	2a e0       	ldi	r18, 0x0A	; 10
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__udivmodsi4>
     4ce:	60 5d       	subi	r22, 0xD0	; 208
     4d0:	68 83       	st	Y, r22
  // start backwards
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
     4d2:	1f 5f       	subi	r17, 0xFF	; 255
     4d4:	1b 15       	cp	r17, r11
     4d6:	80 f4       	brcc	.+32     	; 0x4f8 <utilDwordToDec+0x84>
      *pos = '.';
      pos--;
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
    pos--;
     4d8:	21 97       	sbiw	r28, 0x01	; 1
    value /= 10;
     4da:	6c 2d       	mov	r22, r12
     4dc:	7d 2d       	mov	r23, r13
     4de:	8e 2d       	mov	r24, r14
     4e0:	9f 2d       	mov	r25, r15
     4e2:	2a e0       	ldi	r18, 0x0A	; 10
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__udivmodsi4>
     4ee:	c2 2e       	mov	r12, r18
     4f0:	d3 2e       	mov	r13, r19
     4f2:	e4 2e       	mov	r14, r20
     4f4:	f5 2e       	mov	r15, r21
     4f6:	dd cf       	rjmp	.-70     	; 0x4b2 <utilDwordToDec+0x3e>
  }
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	df 90       	pop	r13
     506:	cf 90       	pop	r12
     508:	bf 90       	pop	r11
     50a:	af 90       	pop	r10
     50c:	08 95       	ret

0000050e <utilParseNibbleHex>:

// parse

uint8_t utilParseNibbleHex(char c,uint8_t *value)
{
     50e:	fb 01       	movw	r30, r22
  if((c>='a')&&(c<='f')) {
     510:	98 2f       	mov	r25, r24
     512:	81 56       	subi	r24, 0x61	; 97
     514:	86 30       	cpi	r24, 0x06	; 6
     516:	20 f4       	brcc	.+8      	; 0x520 <utilParseNibbleHex+0x12>
    *value = c + 10 - 'a';
     518:	86 5f       	subi	r24, 0xF6	; 246
     51a:	80 83       	st	Z, r24
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	08 95       	ret
    return 1;
  }
  else if((c>='A')&&(c<='F')) {
     520:	89 2f       	mov	r24, r25
     522:	81 54       	subi	r24, 0x41	; 65
     524:	86 30       	cpi	r24, 0x06	; 6
     526:	20 f4       	brcc	.+8      	; 0x530 <utilParseNibbleHex+0x22>
    *value = c + 10 - 'A';
     528:	86 5f       	subi	r24, 0xF6	; 246
     52a:	80 83       	st	Z, r24
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	08 95       	ret
    return 1;
  }
  else if((c>='0')&&(c<='9')) {
     530:	89 2f       	mov	r24, r25
     532:	80 53       	subi	r24, 0x30	; 48
     534:	8a 30       	cpi	r24, 0x0A	; 10
     536:	10 f0       	brcs	.+4      	; 0x53c <utilParseNibbleHex+0x2e>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	08 95       	ret
    *value = c - '0';
     53c:	80 83       	st	Z, r24
     53e:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
  }
  else
    return 0;
}
     540:	08 95       	ret

00000542 <utilParseByteHex>:

uint8_t utilParseByteHex(const char *str,uint8_t *value)
{
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	0f 92       	push	r0
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	8c 01       	movw	r16, r24
     556:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseNibbleHex(str[0],&val))
     558:	fc 01       	movw	r30, r24
     55a:	80 81       	ld	r24, Z
     55c:	be 01       	movw	r22, r28
     55e:	6f 5f       	subi	r22, 0xFF	; 255
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	0e 94 87 02 	call	0x50e	; 0x50e <utilParseNibbleHex>
     566:	88 23       	and	r24, r24
     568:	91 f0       	breq	.+36     	; 0x58e <utilParseByteHex+0x4c>
    return 0;
  val <<= 4;
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	82 95       	swap	r24
     56e:	80 7f       	andi	r24, 0xF0	; 240
     570:	89 83       	std	Y+1, r24	; 0x01
  if(!utilParseNibbleHex(str[1],value))
     572:	f8 01       	movw	r30, r16
     574:	81 81       	ldd	r24, Z+1	; 0x01
     576:	b7 01       	movw	r22, r14
     578:	0e 94 87 02 	call	0x50e	; 0x50e <utilParseNibbleHex>
     57c:	88 23       	and	r24, r24
     57e:	39 f0       	breq	.+14     	; 0x58e <utilParseByteHex+0x4c>
    return 0;
  *value |= val;
     580:	f7 01       	movw	r30, r14
     582:	80 81       	ld	r24, Z
     584:	99 81       	ldd	r25, Y+1	; 0x01
     586:	89 2b       	or	r24, r25
     588:	80 83       	st	Z, r24
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	01 c0       	rjmp	.+2      	; 0x590 <utilParseByteHex+0x4e>
  return 1;
     58e:	80 e0       	ldi	r24, 0x00	; 0
}
     590:	0f 90       	pop	r0
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	08 95       	ret

000005a0 <utilParseWordHex>:

uint8_t utilParseWordHex(const char *str,uint16_t *value)
{
     5a0:	ef 92       	push	r14
     5a2:	ff 92       	push	r15
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
     5a8:	df 93       	push	r29
     5aa:	cf 93       	push	r28
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <utilParseWordHex+0xe>
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	8c 01       	movw	r16, r24
     5b4:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     5b6:	be 01       	movw	r22, r28
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	0e 94 a1 02 	call	0x542	; 0x542 <utilParseByteHex>
     5c0:	88 23       	and	r24, r24
     5c2:	a1 f0       	breq	.+40     	; 0x5ec <utilParseWordHex+0x4c>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     5c4:	c8 01       	movw	r24, r16
     5c6:	02 96       	adiw	r24, 0x02	; 2
     5c8:	be 01       	movw	r22, r28
     5ca:	6e 5f       	subi	r22, 0xFE	; 254
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	0e 94 a1 02 	call	0x542	; 0x542 <utilParseByteHex>
     5d2:	88 23       	and	r24, r24
     5d4:	59 f0       	breq	.+22     	; 0x5ec <utilParseWordHex+0x4c>
    return 0;
  *value = (uint16_t)val << 8 | val2;
     5d6:	99 81       	ldd	r25, Y+1	; 0x01
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	2a 81       	ldd	r18, Y+2	; 0x02
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	82 2b       	or	r24, r18
     5e0:	93 2b       	or	r25, r19
     5e2:	f7 01       	movw	r30, r14
     5e4:	91 83       	std	Z+1, r25	; 0x01
     5e6:	80 83       	st	Z, r24
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <utilParseWordHex+0x4e>
  return 1;
     5ec:	80 e0       	ldi	r24, 0x00	; 0
}
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	cf 91       	pop	r28
     5f4:	df 91       	pop	r29
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	08 95       	ret

00000600 <utilParseDwordHex>:

uint8_t utilParseDwordHex(const char *str,uint32_t *value)
{
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	00 d0       	rcall	.+0      	; 0x60e <utilParseDwordHex+0xe>
     60e:	00 d0       	rcall	.+0      	; 0x610 <utilParseDwordHex+0x10>
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	8c 01       	movw	r16, r24
     616:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     618:	be 01       	movw	r22, r28
     61a:	6f 5f       	subi	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	0e 94 a1 02 	call	0x542	; 0x542 <utilParseByteHex>
     622:	88 23       	and	r24, r24
     624:	09 f4       	brne	.+2      	; 0x628 <utilParseDwordHex+0x28>
     626:	4a c0       	rjmp	.+148    	; 0x6bc <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     628:	c8 01       	movw	r24, r16
     62a:	02 96       	adiw	r24, 0x02	; 2
     62c:	be 01       	movw	r22, r28
     62e:	6e 5f       	subi	r22, 0xFE	; 254
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	0e 94 a1 02 	call	0x542	; 0x542 <utilParseByteHex>
     636:	88 23       	and	r24, r24
     638:	09 f4       	brne	.+2      	; 0x63c <utilParseDwordHex+0x3c>
     63a:	40 c0       	rjmp	.+128    	; 0x6bc <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val3;
  if(!utilParseByteHex(&str[4],&val3))
     63c:	c8 01       	movw	r24, r16
     63e:	04 96       	adiw	r24, 0x04	; 4
     640:	be 01       	movw	r22, r28
     642:	6d 5f       	subi	r22, 0xFD	; 253
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	0e 94 a1 02 	call	0x542	; 0x542 <utilParseByteHex>
     64a:	88 23       	and	r24, r24
     64c:	b9 f1       	breq	.+110    	; 0x6bc <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val4;
  if(!utilParseByteHex(&str[6],&val4))
     64e:	c8 01       	movw	r24, r16
     650:	06 96       	adiw	r24, 0x06	; 6
     652:	be 01       	movw	r22, r28
     654:	6c 5f       	subi	r22, 0xFC	; 252
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	0e 94 a1 02 	call	0x542	; 0x542 <utilParseByteHex>
     65c:	88 23       	and	r24, r24
     65e:	71 f1       	breq	.+92     	; 0x6bc <utilParseDwordHex+0xbc>
    return 0;
  *value = (uint32_t)val << 24 | (uint32_t)val2 << 16 | (uint32_t)val3 << 8 | val4;
     660:	29 81       	ldd	r18, Y+1	; 0x01
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	52 2f       	mov	r21, r18
     66a:	44 27       	eor	r20, r20
     66c:	33 27       	eor	r19, r19
     66e:	22 27       	eor	r18, r18
     670:	8a 81       	ldd	r24, Y+2	; 0x02
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 e0       	ldi	r26, 0x00	; 0
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	dc 01       	movw	r26, r24
     67a:	99 27       	eor	r25, r25
     67c:	88 27       	eor	r24, r24
     67e:	28 2b       	or	r18, r24
     680:	39 2b       	or	r19, r25
     682:	4a 2b       	or	r20, r26
     684:	5b 2b       	or	r21, r27
     686:	8c 81       	ldd	r24, Y+4	; 0x04
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	a0 e0       	ldi	r26, 0x00	; 0
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	28 2b       	or	r18, r24
     690:	39 2b       	or	r19, r25
     692:	4a 2b       	or	r20, r26
     694:	5b 2b       	or	r21, r27
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	a0 e0       	ldi	r26, 0x00	; 0
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	ba 2f       	mov	r27, r26
     6a0:	a9 2f       	mov	r26, r25
     6a2:	98 2f       	mov	r25, r24
     6a4:	88 27       	eor	r24, r24
     6a6:	28 2b       	or	r18, r24
     6a8:	39 2b       	or	r19, r25
     6aa:	4a 2b       	or	r20, r26
     6ac:	5b 2b       	or	r21, r27
     6ae:	f7 01       	movw	r30, r14
     6b0:	20 83       	st	Z, r18
     6b2:	31 83       	std	Z+1, r19	; 0x01
     6b4:	42 83       	std	Z+2, r20	; 0x02
     6b6:	53 83       	std	Z+3, r21	; 0x03
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <utilParseDwordHex+0xbe>
  return 1;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
}
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	cf 91       	pop	r28
     6c8:	df 91       	pop	r29
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	08 95       	ret

000006d4 <utilParseByteDec>:

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
     6d4:	db 01       	movw	r26, r22
     6d6:	fc 01       	movw	r30, r24
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
      break;
    }
    c -= '0';
    value *= 10;
     6dc:	4a e0       	ldi	r20, 0x0A	; 10
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
     6de:	80 81       	ld	r24, Z
     6e0:	98 2f       	mov	r25, r24
     6e2:	90 53       	subi	r25, 0x30	; 48
     6e4:	9a 30       	cpi	r25, 0x0A	; 10
     6e6:	50 f4       	brcc	.+20     	; 0x6fc <utilParseByteDec+0x28>
      break;
    }
    c -= '0';
    value *= 10;
     6e8:	34 9f       	mul	r19, r20
     6ea:	80 2d       	mov	r24, r0
     6ec:	11 24       	eor	r1, r1
    value += c;
     6ee:	38 2f       	mov	r19, r24
     6f0:	39 0f       	add	r19, r25
    digits++;
     6f2:	2f 5f       	subi	r18, 0xFF	; 255
     6f4:	31 96       	adiw	r30, 0x01	; 1

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
     6f6:	23 30       	cpi	r18, 0x03	; 3
     6f8:	91 f7       	brne	.-28     	; 0x6de <utilParseByteDec+0xa>
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <utilParseByteDec+0x2a>
    c -= '0';
    value *= 10;
    value += c;
    digits++;
  }
  if(digits > 0) {
     6fc:	21 11       	cpse	r18, r1
    *out = value;
     6fe:	3c 93       	st	X, r19
  }
  return digits;
}
     700:	82 2f       	mov	r24, r18
     702:	08 95       	ret

00000704 <utilReset>:
 * Performs watchdog-based AVR reset, resulting in executing bootloader code
 * in a clean way.
 */
void utilReset(void) {
	// Perform a reset
	cli();
     704:	f8 94       	cli
	wdt_enable(WDTO_250MS);
     706:	2c e0       	ldi	r18, 0x0C	; 12
     708:	88 e1       	ldi	r24, 0x18	; 24
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	a8 95       	wdr
     712:	80 93 60 00 	sts	0x0060, r24
     716:	0f be       	out	0x3f, r0	; 63
     718:	20 93 60 00 	sts	0x0060, r18
     71c:	ff cf       	rjmp	.-2      	; 0x71c <utilReset+0x18>

0000071e <bridgeRequestResponseRead>:
uint8_t s_ubFlags;
static uint8_t req_is_pending;

static void bridgeRequestResponseRead(void)
{
  if(!req_is_pending) {
     71e:	80 91 3e 01 	lds	r24, 0x013E
     722:	88 23       	and	r24, r24
     724:	29 f4       	brne	.+10     	; 0x730 <bridgeRequestResponseRead+0x12>
    req_is_pending = 1;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	80 93 3e 01 	sts	0x013E, r24
    parRequestAmiRead();
     72c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <parRequestAmiRead>
     730:	08 95       	ret

00000732 <bridgeLoop>:
/**
 * Main plip loop.
 * Monitors parallel port and ENC28J60 traffic.
 */
void bridgeLoop(void)
{
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	df 93       	push	r29
     73e:	cf 93       	push	r28
     740:	00 d0       	rcall	.+0      	; 0x742 <bridgeLoop+0x10>
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
  // Associate protocol fns with given ptrs
  parInit();
     746:	0e 94 03 08 	call	0x1006	; 0x1006 <parInit>

  // Init ENC28j60
  enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
     74a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <pio_util_get_init_flags>
     74e:	68 2f       	mov	r22, r24
     750:	0f e4       	ldi	r16, 0x4F	; 79
     752:	11 e0       	ldi	r17, 0x01	; 1
     754:	c8 01       	movw	r24, r16
     756:	0e 94 c5 0c 	call	0x198a	; 0x198a <enc28j60_init>

  // Reset stats
  stats_reset();
     75a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <stats_reset>

  // Reset flags & request state
  s_ubFlags = 0;
     75e:	10 92 4c 01 	sts	0x014C, r1
  req_is_pending = 0;
     762:	10 92 3e 01 	sts	0x013E, r1

  uint8_t flow_control = g_sConfig.flow_ctl;
     766:	f8 01       	movw	r30, r16
     768:	f6 80       	ldd	r15, Z+6	; 0x06
     76a:	10 e0       	ldi	r17, 0x00	; 0
        bridgeRequestResponseRead();
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     76c:	6e 01       	movw	r12, r28
     76e:	08 94       	sec
     770:	c1 1c       	adc	r12, r1
     772:	d1 1c       	adc	r13, r1
  uint8_t ubPacketCount;
  while(1) {
    // NOTE: UART command handling was here

    // Calls pb_proto_handle - this is where PAR communication is done
    pb_proto_handle();
     774:	0e 94 54 08 	call	0x10a8	; 0x10a8 <pb_proto_handle>

    // Handle packets coming from network
		ubPacketCount = enc28j60_has_recv();
     778:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <enc28j60_has_recv>
     77c:	08 2f       	mov	r16, r24
    if(ubPacketCount) {
     77e:	88 23       	and	r24, r24
     780:	51 f0       	breq	.+20     	; 0x796 <bridgeLoop+0x64>
      if(ubDisplayPacketInfo) {
        // NOTE: UART - time_stamp_spc() FIRST INCOMING!\r\n
        ubDisplayPacketInfo = 0;
      }

      if(s_ubFlags & FLAG_ONLINE) {
     782:	80 91 4c 01 	lds	r24, 0x014C
     786:	80 ff       	sbrs	r24, 0
     788:	03 c0       	rjmp	.+6      	; 0x790 <bridgeLoop+0x5e>
				// Comm online: let Amiga know about new packet
        bridgeRequestResponseRead();
     78a:	0e 94 8f 03 	call	0x71e	; 0x71e <bridgeRequestResponseRead>
     78e:	03 c0       	rjmp	.+6      	; 0x796 <bridgeLoop+0x64>
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     790:	c6 01       	movw	r24, r12
     792:	0e 94 94 0c 	call	0x1928	; 0x1928 <pio_util_recv_packet>
        // NOTE: UART - time_stamp_spc() OFFLINE DROP: hex_word(size)\r\n
      }
    }

    // flow control
    if(flow_control) {
     796:	ff 20       	and	r15, r15
     798:	69 f3       	breq	.-38     	; 0x774 <bridgeLoop+0x42>
      // flow limited
      if(limit_flow) {
     79a:	11 23       	and	r17, r17
     79c:	41 f0       	breq	.+16     	; 0x7ae <bridgeLoop+0x7c>
        // disable again?
        if(!ubPacketCount) {
     79e:	00 23       	and	r16, r16
     7a0:	49 f7       	brne	.-46     	; 0x774 <bridgeLoop+0x42>
          enc28j60_control(PIO_CONTROL_FLOW, 0);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <enc28j60_control>
     7aa:	10 e0       	ldi	r17, 0x00	; 0
     7ac:	e3 cf       	rjmp	.-58     	; 0x774 <bridgeLoop+0x42>
        }
      }
      // no flow limit
      else {
        // enable?
        if(ubPacketCount) {
     7ae:	00 23       	and	r16, r16
     7b0:	09 f3       	breq	.-62     	; 0x774 <bridgeLoop+0x42>
          enc28j60_control(PIO_CONTROL_FLOW, 1);
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <enc28j60_control>
     7ba:	11 e0       	ldi	r17, 0x01	; 1
     7bc:	db cf       	rjmp	.-74     	; 0x774 <bridgeLoop+0x42>

000007be <bridgeProcessPacket>:
 * by ETH_TYPE_* defines.
 * Custom "Magic" packets are defined as topmost EtherType values.
 * @param uwSize Packet length
 * @return Always PBPROTO_STATUS_OK
 */
uint8_t bridgeProcessPacket(uint16_t uwSize) {
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	ec 01       	movw	r28, r24
 * Returns EtherType field value in given eth frame.
 * @param pkt Pointer to eth frame.
 * @return 2-byte EtherType field value.
 */
inline uint16_t eth_get_pkt_type(const uint8_t *pkt) {
	return net_get_word(pkt + ETH_OFF_TYPE);
     7c8:	8f e7       	ldi	r24, 0x7F	; 127
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	0e 94 54 06 	call	0xca8	; 0xca8 <net_get_word>
  // get eth type
  uint16_t eth_type = eth_get_pkt_type(g_pDataBuffer);
  switch(eth_type) {
     7d0:	2f ef       	ldi	r18, 0xFF	; 255
     7d2:	8d 3f       	cpi	r24, 0xFD	; 253
     7d4:	92 07       	cpc	r25, r18
     7d6:	99 f1       	breq	.+102    	; 0x83e <bridgeProcessPacket+0x80>
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	8e 3f       	cpi	r24, 0xFE	; 254
     7dc:	92 07       	cpc	r25, r18
     7de:	28 f4       	brcc	.+10     	; 0x7ea <bridgeProcessPacket+0x2c>
     7e0:	8c 5f       	subi	r24, 0xFC	; 252
     7e2:	9f 4f       	sbci	r25, 0xFF	; 255
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <bridgeProcessPacket+0x2a>
     7e6:	40 c0       	rjmp	.+128    	; 0x868 <bridgeProcessPacket+0xaa>
     7e8:	32 c0       	rjmp	.+100    	; 0x84e <bridgeProcessPacket+0x90>
     7ea:	2f ef       	ldi	r18, 0xFF	; 255
     7ec:	8e 3f       	cpi	r24, 0xFE	; 254
     7ee:	92 07       	cpc	r25, r18
     7f0:	01 f1       	breq	.+64     	; 0x832 <bridgeProcessPacket+0x74>
     7f2:	8f 5f       	subi	r24, 0xFF	; 255
     7f4:	9f 4f       	sbci	r25, 0xFF	; 255
     7f6:	c1 f5       	brne	.+112    	; 0x868 <bridgeProcessPacket+0xaa>
 * @param buf Pointer to magic packet.
 */
static void bridgeCommOnline(const uint8_t *buf)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] online \r\n
  s_ubFlags |= FLAG_ONLINE | FLAG_FIRST_TRANSFER;
     7f8:	80 91 4c 01 	lds	r24, 0x014C
     7fc:	85 60       	ori	r24, 0x05	; 5
     7fe:	80 93 4c 01 	sts	0x014C, r24

  // validate mac address and if it does not match then reconfigure PIO
  const uint8_t *src_mac = eth_get_src_mac(buf);
  if(!net_compare_mac(g_sConfig.mac_addr, src_mac)) {
     802:	8f e4       	ldi	r24, 0x4F	; 79
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	69 e7       	ldi	r22, 0x79	; 121
     808:	71 e0       	ldi	r23, 0x01	; 1
     80a:	0e 94 a0 06 	call	0xd40	; 0xd40 <net_compare_mac>
     80e:	88 23       	and	r24, r24
     810:	b9 f5       	brne	.+110    	; 0x880 <bridgeProcessPacket+0xc2>
    // update mac param and save
    net_copy_mac(src_mac, g_sConfig.mac_addr);
     812:	0f e4       	ldi	r16, 0x4F	; 79
     814:	11 e0       	ldi	r17, 0x01	; 1
     816:	89 e7       	ldi	r24, 0x79	; 121
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	b8 01       	movw	r22, r16
     81c:	0e 94 34 06 	call	0xc68	; 0xc68 <net_copy_mac>
    param_save();
     820:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <param_save>

    // re-configure PIO
    enc28j60_exit();
     824:	0e 94 c7 0c 	call	0x198e	; 0x198e <enc28j60_exit>
    enc28j60_init(g_sConfig.mac_addr, PIO_INIT_BROAD_CAST);
     828:	c8 01       	movw	r24, r16
     82a:	64 e0       	ldi	r22, 0x04	; 4
     82c:	0e 94 c5 0c 	call	0x198a	; 0x198a <enc28j60_init>
     830:	27 c0       	rjmp	.+78     	; 0x880 <bridgeProcessPacket+0xc2>
 * Disables ethernet communication.
 */
static void bridgeCommOffline(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] offline
  s_ubFlags &= ~FLAG_ONLINE;
     832:	80 91 4c 01 	lds	r24, 0x014C
     836:	8e 7f       	andi	r24, 0xFE	; 254
     838:	80 93 4c 01 	sts	0x014C, r24
     83c:	21 c0       	rjmp	.+66     	; 0x880 <bridgeProcessPacket+0xc2>
}

static void bridgeLoopback(uint16_t size)
{
  s_ubFlags |= FLAG_SEND_MAGIC;
     83e:	80 91 4c 01 	lds	r24, 0x014C
     842:	82 60       	ori	r24, 0x02	; 2
     844:	80 93 4c 01 	sts	0x014C, r24
  bridgeRequestResponseRead();
     848:	0e 94 8f 03 	call	0x71e	; 0x71e <bridgeRequestResponseRead>
     84c:	19 c0       	rjmp	.+50     	; 0x880 <bridgeProcessPacket+0xc2>
      break;
    case ETH_TYPE_MAGIC_LOOPBACK:
      bridgeLoopback(uwSize);
      break;
		case ETH_TYPE_MAGIC_CMD:
			cmdProcess(uwSize);
     84e:	ce 01       	movw	r24, r28
     850:	0e 94 86 04 	call	0x90c	; 0x90c <cmdProcess>
			s_ubFlags |= FLAG_SEND_CMD_RESPONSE;
     854:	80 91 4c 01 	lds	r24, 0x014C
     858:	88 60       	ori	r24, 0x08	; 8
     85a:	80 93 4c 01 	sts	0x014C, r24
			req_is_pending = 0;
     85e:	10 92 3e 01 	sts	0x013E, r1
			bridgeRequestResponseRead();
     862:	0e 94 8f 03 	call	0x71e	; 0x71e <bridgeRequestResponseRead>
     866:	0c c0       	rjmp	.+24     	; 0x880 <bridgeProcessPacket+0xc2>
			break;
    default:
      // send packet via pio
      pio_util_send_packet(uwSize);
     868:	ce 01       	movw	r24, r28
     86a:	0e 94 14 0c 	call	0x1828	; 0x1828 <pio_util_send_packet>
      // if a packet arrived and we are not online then request online state
      if((s_ubFlags & FLAG_ONLINE)==0) {
     86e:	80 91 4c 01 	lds	r24, 0x014C
     872:	80 fd       	sbrc	r24, 0
     874:	05 c0       	rjmp	.+10     	; 0x880 <bridgeProcessPacket+0xc2>
static void request_magic(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] request\r\n

  // request receive
  s_ubFlags |= FLAG_SEND_MAGIC | FLAG_FIRST_TRANSFER;
     876:	86 60       	ori	r24, 0x06	; 6
     878:	80 93 4c 01 	sts	0x014C, r24
  bridgeRequestResponseRead();
     87c:	0e 94 8f 03 	call	0x71e	; 0x71e <bridgeRequestResponseRead>
        request_magic();
      }
      break;
  }
  return PBPROTO_STATUS_OK;
}
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	08 95       	ret

0000088c <bridgeFillPacket>:

// ----- packet callbacks -----

// the Amiga requests a new packet

uint8_t bridgeFillPacket(uint16_t *pFilledSize) {
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
  if((s_ubFlags & FLAG_SEND_MAGIC) == FLAG_SEND_MAGIC) {
     896:	80 91 4c 01 	lds	r24, 0x014C
     89a:	81 ff       	sbrs	r24, 1
     89c:	1c c0       	rjmp	.+56     	; 0x8d6 <bridgeFillPacket+0x4a>
		// Send magic packet to Amiga
    s_ubFlags &= ~FLAG_SEND_MAGIC;
     89e:	8d 7f       	andi	r24, 0xFD	; 253
     8a0:	80 93 4c 01 	sts	0x014C, r24
extern const uint8_t net_zero_mac[6];
extern const uint8_t net_zero_ip[4];
extern const uint8_t net_ones_ip[4];

/* convenience functions */
inline void net_copy_bcast_mac(uint8_t *out) { net_copy_mac(net_bcast_mac, out); }
     8a4:	03 e7       	ldi	r16, 0x73	; 115
     8a6:	11 e0       	ldi	r17, 0x01	; 1
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	b8 01       	movw	r22, r16
     8ae:	0e 94 34 06 	call	0xc68	; 0xc68 <net_copy_mac>

    // Build magic packet header
    // Target (bcast) MAC, src (plipbox) MAC, 0xFFFF => pFilledSize: 14 bytes
    net_copy_bcast_mac(g_pDataBuffer + ETH_OFF_TGT_MAC);
    net_copy_mac(g_sConfig.mac_addr, g_pDataBuffer + ETH_OFF_SRC_MAC);
     8b2:	b8 01       	movw	r22, r16
     8b4:	6a 5f       	subi	r22, 0xFA	; 250
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	8f e4       	ldi	r24, 0x4F	; 79
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	0e 94 34 06 	call	0xc68	; 0xc68 <net_copy_mac>
    net_put_word(g_pDataBuffer + ETH_OFF_TYPE, ETH_TYPE_MAGIC_ONLINE);
     8c0:	c8 01       	movw	r24, r16
     8c2:	0c 96       	adiw	r24, 0x0c	; 12
     8c4:	6f ef       	ldi	r22, 0xFF	; 255
     8c6:	7f ef       	ldi	r23, 0xFF	; 255
     8c8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <net_put_word>

    *pFilledSize = ETH_HDR_SIZE;
     8cc:	8e e0       	ldi	r24, 0x0E	; 14
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	99 83       	std	Y+1, r25	; 0x01
     8d2:	88 83       	st	Y, r24
     8d4:	13 c0       	rjmp	.+38     	; 0x8fc <bridgeFillPacket+0x70>
  }
  else if((s_ubFlags & FLAG_SEND_CMD_RESPONSE) == FLAG_SEND_CMD_RESPONSE) {
     8d6:	83 ff       	sbrs	r24, 3
     8d8:	07 c0       	rjmp	.+14     	; 0x8e8 <bridgeFillPacket+0x5c>
    // Send CMD response - it's already in buffer
    *pFilledSize = g_uwCmdResponseSize;
     8da:	80 91 4d 01 	lds	r24, 0x014D
     8de:	90 91 4e 01 	lds	r25, 0x014E
     8e2:	99 83       	std	Y+1, r25	; 0x01
     8e4:	88 83       	st	Y, r24
     8e6:	0a c0       	rjmp	.+20     	; 0x8fc <bridgeFillPacket+0x70>
  }
  else {
		// Receive packet buffer with data from ENC28j60 if pending
    pio_util_recv_packet(pFilledSize);
     8e8:	ce 01       	movw	r24, r28
     8ea:	0e 94 94 0c 	call	0x1928	; 0x1928 <pio_util_recv_packet>

    if(s_ubFlags & FLAG_FIRST_TRANSFER) {
     8ee:	80 91 4c 01 	lds	r24, 0x014C
     8f2:	82 ff       	sbrs	r24, 2
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <bridgeFillPacket+0x70>
			// report first packet transfer
      // NOTE: UART - time_stamp_spc() FIRST TRANSFER!\r\n
      s_ubFlags &= ~FLAG_FIRST_TRANSFER;
     8f6:	8b 7f       	andi	r24, 0xFB	; 251
     8f8:	80 93 4c 01 	sts	0x014C, r24
    }
  }

  req_is_pending = 0;
     8fc:	10 92 3e 01 	sts	0x013E, r1

  return PBPROTO_STATUS_OK;
}
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	08 95       	ret

0000090c <cmdProcess>:

/**
 * PlipUltimate command process function.
 * This function should be called when cmd packet has been received.
 */
void cmdProcess(uint16_t uwPacketSize) {
     90c:	1f 93       	push	r17
	uint8_t ubCmdType = g_pDataBuffer[0];
     90e:	e3 e7       	ldi	r30, 0x73	; 115
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	90 81       	ld	r25, Z
	g_pDataBuffer[0] |= CMD_RESPONSE;
     914:	89 2f       	mov	r24, r25
     916:	80 68       	ori	r24, 0x80	; 128
     918:	80 83       	st	Z, r24
	switch(ubCmdType) {
     91a:	93 30       	cpi	r25, 0x03	; 3
     91c:	41 f0       	breq	.+16     	; 0x92e <cmdProcess+0x22>
     91e:	94 30       	cpi	r25, 0x04	; 4
     920:	b1 f0       	breq	.+44     	; 0x94e <cmdProcess+0x42>
     922:	91 30       	cpi	r25, 0x01	; 1
     924:	09 f0       	breq	.+2      	; 0x928 <cmdProcess+0x1c>
     926:	3f c0       	rjmp	.+126    	; 0x9a6 <cmdProcess+0x9a>
		case CMD_SDWRITE:   cmdSdWrite();   return;
	}
}

static void cmdReboot(void) {
	utilReset();
     928:	0e 94 82 03 	call	0x704	; 0x704 <utilReset>
     92c:	3c c0       	rjmp	.+120    	; 0x9a6 <cmdProcess+0x9a>
static void cmdGetLog(void) {
	// TODO(KaiN#9): implement cmdGetLog()
}

static void cmdGetConfig(void) {
	memcpy(&g_pDataBuffer[ETH_HDR_SIZE], &g_sConfig, sizeof(tConfig));
     92e:	a1 e8       	ldi	r26, 0x81	; 129
     930:	b1 e0       	ldi	r27, 0x01	; 1
     932:	ef e4       	ldi	r30, 0x4F	; 79
     934:	f1 e0       	ldi	r31, 0x01	; 1
     936:	84 e1       	ldi	r24, 0x14	; 20
     938:	01 90       	ld	r0, Z+
     93a:	0d 92       	st	X+, r0
     93c:	81 50       	subi	r24, 0x01	; 1
     93e:	e1 f7       	brne	.-8      	; 0x938 <cmdProcess+0x2c>
	g_uwCmdResponseSize = ETH_HDR_SIZE + sizeof(tConfig);
     940:	82 e2       	ldi	r24, 0x22	; 34
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	90 93 4e 01 	sts	0x014E, r25
     948:	80 93 4d 01 	sts	0x014D, r24
     94c:	2c c0       	rjmp	.+88     	; 0x9a6 <cmdProcess+0x9a>
}

static void cmdSetConfig(void) {
	uint8_t ubResult = 1;

	if(
     94e:	80 91 74 01 	lds	r24, 0x0174
     952:	81 50       	subi	r24, 0x01	; 1
     954:	82 30       	cpi	r24, 0x02	; 2
     956:	10 f0       	brcs	.+4      	; 0x95c <cmdProcess+0x50>
     958:	13 e0       	ldi	r17, 0x03	; 3
     95a:	1d c0       	rjmp	.+58     	; 0x996 <cmdProcess+0x8a>
	) {
		ubResult |= 0b10;
	}
	else {
		// Update current config
		memcpy(&g_sConfig, &g_pDataBuffer[ETH_HDR_SIZE], sizeof(tConfig));
     95c:	af e4       	ldi	r26, 0x4F	; 79
     95e:	b1 e0       	ldi	r27, 0x01	; 1
     960:	e1 e8       	ldi	r30, 0x81	; 129
     962:	f1 e0       	ldi	r31, 0x01	; 1
     964:	84 e1       	ldi	r24, 0x14	; 20
     966:	01 90       	ld	r0, Z+
     968:	0d 92       	st	X+, r0
     96a:	81 50       	subi	r24, 0x01	; 1
     96c:	e1 f7       	brne	.-8      	; 0x966 <cmdProcess+0x5a>

		// Update ROM config
		if(g_pDataBuffer[1] == WRITE_TYPE_DEFAULT) {
     96e:	80 91 74 01 	lds	r24, 0x0174
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	31 f4       	brne	.+12     	; 0x982 <cmdProcess+0x76>
			if(param_save())
     976:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <param_save>
     97a:	88 23       	and	r24, r24
     97c:	11 f0       	breq	.+4      	; 0x982 <cmdProcess+0x76>
     97e:	15 e0       	ldi	r17, 0x05	; 5
     980:	01 c0       	rjmp	.+2      	; 0x984 <cmdProcess+0x78>
     982:	11 e0       	ldi	r17, 0x01	; 1
				ubResult |= 0b100;
		}

		// Reconfigure plip
		enc28j60_exit();
     984:	0e 94 c7 0c 	call	0x198e	; 0x198e <enc28j60_exit>
		enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
     988:	0e 94 9a 0b 	call	0x1734	; 0x1734 <pio_util_get_init_flags>
     98c:	68 2f       	mov	r22, r24
     98e:	8f e4       	ldi	r24, 0x4F	; 79
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 c5 0c 	call	0x198a	; 0x198a <enc28j60_init>
	}

	// Prepare response
	g_pDataBuffer[1] = ubResult;
     996:	10 93 74 01 	sts	0x0174, r17
	g_uwCmdResponseSize = ETH_HDR_SIZE;
     99a:	8e e0       	ldi	r24, 0x0E	; 14
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	90 93 4e 01 	sts	0x014E, r25
     9a2:	80 93 4d 01 	sts	0x014D, r24
		case CMD_SETCONFIG: cmdSetConfig(); return;
		case CMD_SDINFO:    cmdGetSdInfo(); return;
		case CMD_SDREAD:    cmdSdRead();    return;
		case CMD_SDWRITE:   cmdSdWrite();   return;
	}
}
     9a6:	1f 91       	pop	r17
     9a8:	08 95       	ret

000009aa <cmd_param_ip_addr>:
    return CMD_PARSE_ERROR;
  }
}

COMMAND(cmd_param_ip_addr)
{
     9aa:	df 93       	push	r29
     9ac:	cf 93       	push	r28
     9ae:	00 d0       	rcall	.+0      	; 0x9b0 <cmd_param_ip_addr+0x6>
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <cmd_param_ip_addr+0x8>
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	fb 01       	movw	r30, r22
  uint8_t ip[4];

  if(net_parse_ip((char*)argv[1], ip)) {
     9b8:	82 81       	ldd	r24, Z+2	; 0x02
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	be 01       	movw	r22, r28
     9be:	6f 5f       	subi	r22, 0xFF	; 255
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 28 07 	call	0xe50	; 0xe50 <net_parse_ip>
     9c6:	88 23       	and	r24, r24
     9c8:	11 f4       	brne	.+4      	; 0x9ce <cmd_param_ip_addr+0x24>
     9ca:	81 e1       	ldi	r24, 0x11	; 17
     9cc:	07 c0       	rjmp	.+14     	; 0x9dc <cmd_param_ip_addr+0x32>
    net_copy_ip(ip, g_sConfig.test_ip);
     9ce:	ce 01       	movw	r24, r28
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	6b e5       	ldi	r22, 0x5B	; 91
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	0e 94 43 06 	call	0xc86	; 0xc86 <net_copy_ip>
     9da:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	cf 91       	pop	r28
     9e6:	df 91       	pop	r29
     9e8:	08 95       	ret

000009ea <cmd_param_word>:
  }
  return result;
}

COMMAND(cmd_param_word)
{
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <cmd_param_word+0xa>
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	28 2f       	mov	r18, r24
     9fa:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     9fc:	ed 91       	ld	r30, X+
     9fe:	fc 91       	ld	r31, X
     a00:	11 97       	sbiw	r26, 0x01	; 1
  uint8_t type = argv[0][1];
     a02:	91 81       	ldd	r25, Z+1	; 0x01
  uint16_t *val = 0;

  if(group == 't') {
     a04:	80 81       	ld	r24, Z
     a06:	84 37       	cpi	r24, 0x74	; 116
     a08:	19 f5       	brne	.+70     	; 0xa50 <cmd_param_word+0x66>
    switch(type) {
     a0a:	90 37       	cpi	r25, 0x70	; 112
     a0c:	59 f0       	breq	.+22     	; 0xa24 <cmd_param_word+0x3a>
     a0e:	94 37       	cpi	r25, 0x74	; 116
     a10:	19 f0       	breq	.+6      	; 0xa18 <cmd_param_word+0x2e>
     a12:	9c 36       	cpi	r25, 0x6C	; 108
     a14:	e9 f4       	brne	.+58     	; 0xa50 <cmd_param_word+0x66>
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <cmd_param_word+0x34>
     a18:	09 e5       	ldi	r16, 0x59	; 89
     a1a:	11 e0       	ldi	r17, 0x01	; 1
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <cmd_param_word+0x3e>
     a1e:	07 e5       	ldi	r16, 0x57	; 87
     a20:	11 e0       	ldi	r17, 0x01	; 1
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <cmd_param_word+0x3e>
     a24:	0f e5       	ldi	r16, 0x5F	; 95
     a26:	11 e0       	ldi	r17, 0x01	; 1
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     a28:	21 30       	cpi	r18, 0x01	; 1
     a2a:	91 f0       	breq	.+36     	; 0xa50 <cmd_param_word+0x66>
    return CMD_PARSE_ERROR;
  } else {
    uint16_t new_val;
    if(utilParseWordHex((char*)argv[1],&new_val)) {
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	8d 91       	ld	r24, X+
     a30:	9c 91       	ld	r25, X
     a32:	13 97       	sbiw	r26, 0x03	; 3
     a34:	be 01       	movw	r22, r28
     a36:	6f 5f       	subi	r22, 0xFF	; 255
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <utilParseWordHex>
     a3e:	88 23       	and	r24, r24
     a40:	39 f0       	breq	.+14     	; 0xa50 <cmd_param_word+0x66>
      *val = new_val;
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	f8 01       	movw	r30, r16
     a48:	91 83       	std	Z+1, r25	; 0x01
     a4a:	80 83       	st	Z, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <cmd_param_word+0x68>
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return CMD_OK;
     a50:	81 e1       	ldi	r24, 0x11	; 17
}
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	cf 91       	pop	r28
     a58:	df 91       	pop	r29
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	08 95       	ret

00000a60 <cmd_param_toggle>:
  param_reset();
  return CMD_OK;
}

COMMAND(cmd_param_toggle)
{
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	1f 93       	push	r17
     a66:	df 93       	push	r29
     a68:	cf 93       	push	r28
     a6a:	0f 92       	push	r0
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     a72:	ed 91       	ld	r30, X+
     a74:	fc 91       	ld	r31, X
     a76:	11 97       	sbiw	r26, 0x01	; 1
     a78:	90 81       	ld	r25, Z
  uint8_t type = argv[0][1];
     a7a:	21 81       	ldd	r18, Z+1	; 0x01
  uint8_t *val = 0;
  uint8_t result = CMD_OK;

  if(group == 't') {
     a7c:	94 37       	cpi	r25, 0x74	; 116
     a7e:	41 f4       	brne	.+16     	; 0xa90 <cmd_param_toggle+0x30>
    switch(type) {
     a80:	2d 36       	cpi	r18, 0x6D	; 109
     a82:	71 f5       	brne	.+92     	; 0xae0 <cmd_param_toggle+0x80>
     a84:	e2 e6       	ldi	r30, 0x62	; 98
     a86:	f1 e0       	ldi	r31, 0x01	; 1
     a88:	90 81       	ld	r25, Z
     a8a:	7f 01       	movw	r14, r30
     a8c:	10 e0       	ldi	r17, 0x00	; 0
     a8e:	11 c0       	rjmp	.+34     	; 0xab2 <cmd_param_toggle+0x52>
      case 'm': val = &g_sConfig.test_mode; break;
      default: return CMD_PARSE_ERROR;
    }
  }
  else if(group == 'f') {
     a90:	96 36       	cpi	r25, 0x66	; 102
     a92:	31 f5       	brne	.+76     	; 0xae0 <cmd_param_toggle+0x80>
    switch(type) {
     a94:	23 36       	cpi	r18, 0x63	; 99
     a96:	41 f0       	breq	.+16     	; 0xaa8 <cmd_param_toggle+0x48>
     a98:	24 36       	cpi	r18, 0x64	; 100
     a9a:	11 f5       	brne	.+68     	; 0xae0 <cmd_param_toggle+0x80>
     a9c:	e6 e5       	ldi	r30, 0x56	; 86
     a9e:	f1 e0       	ldi	r31, 0x01	; 1
     aa0:	90 81       	ld	r25, Z
     aa2:	7f 01       	movw	r14, r30
     aa4:	13 e0       	ldi	r17, 0x03	; 3
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <cmd_param_toggle+0x52>
     aa8:	e5 e5       	ldi	r30, 0x55	; 85
     aaa:	f1 e0       	ldi	r31, 0x01	; 1
     aac:	90 81       	ld	r25, Z
     aae:	7f 01       	movw	r14, r30
     ab0:	13 e0       	ldi	r17, 0x03	; 3
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     ab2:	81 30       	cpi	r24, 0x01	; 1
     ab4:	31 f4       	brne	.+12     	; 0xac2 <cmd_param_toggle+0x62>
    // toggle value if no argument is given
    *val = *val ? 0 : 1;
     ab6:	f7 01       	movw	r30, r14
     ab8:	10 82       	st	Z, r1
     aba:	99 23       	and	r25, r25
     abc:	91 f4       	brne	.+36     	; 0xae2 <cmd_param_toggle+0x82>
     abe:	80 83       	st	Z, r24
     ac0:	10 c0       	rjmp	.+32     	; 0xae2 <cmd_param_toggle+0x82>
  } else {
    uint8_t new_val;
    if(utilParseByteHex((char*)argv[1],&new_val)) {
     ac2:	12 96       	adiw	r26, 0x02	; 2
     ac4:	8d 91       	ld	r24, X+
     ac6:	9c 91       	ld	r25, X
     ac8:	13 97       	sbiw	r26, 0x03	; 3
     aca:	be 01       	movw	r22, r28
     acc:	6f 5f       	subi	r22, 0xFF	; 255
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	0e 94 a1 02 	call	0x542	; 0x542 <utilParseByteHex>
     ad4:	88 23       	and	r24, r24
     ad6:	21 f0       	breq	.+8      	; 0xae0 <cmd_param_toggle+0x80>
      *val = new_val;
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	f7 01       	movw	r30, r14
     adc:	80 83       	st	Z, r24
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <cmd_param_toggle+0x82>
     ae0:	11 e1       	ldi	r17, 0x11	; 17
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return result;
}
     ae2:	81 2f       	mov	r24, r17
     ae4:	0f 90       	pop	r0
     ae6:	cf 91       	pop	r28
     ae8:	df 91       	pop	r29
     aea:	1f 91       	pop	r17
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret

00000af2 <cmd_param_mac_addr>:
  }
  return CMD_OK;
}

COMMAND(cmd_param_mac_addr)
{
     af2:	df 93       	push	r29
     af4:	cf 93       	push	r28
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <cmd_param_mac_addr+0x6>
     af8:	00 d0       	rcall	.+0      	; 0xafa <cmd_param_mac_addr+0x8>
     afa:	00 d0       	rcall	.+0      	; 0xafc <cmd_param_mac_addr+0xa>
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	fb 01       	movw	r30, r22
  uint8_t mac[6];

  if(net_parse_mac((char*)argv[1], mac)) {
     b02:	82 81       	ldd	r24, Z+2	; 0x02
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	be 01       	movw	r22, r28
     b08:	6f 5f       	subi	r22, 0xFF	; 255
     b0a:	7f 4f       	sbci	r23, 0xFF	; 255
     b0c:	0e 94 ef 06 	call	0xdde	; 0xdde <net_parse_mac>
     b10:	88 23       	and	r24, r24
     b12:	11 f4       	brne	.+4      	; 0xb18 <cmd_param_mac_addr+0x26>
     b14:	81 e1       	ldi	r24, 0x11	; 17
     b16:	07 c0       	rjmp	.+14     	; 0xb26 <cmd_param_mac_addr+0x34>
    net_copy_mac(mac, g_sConfig.mac_addr);
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	6f e4       	ldi	r22, 0x4F	; 79
     b1e:	71 e0       	ldi	r23, 0x01	; 1
     b20:	0e 94 34 06 	call	0xc68	; 0xc68 <net_copy_mac>
     b24:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     b26:	26 96       	adiw	r28, 0x06	; 6
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	cf 91       	pop	r28
     b34:	df 91       	pop	r29
     b36:	08 95       	ret

00000b38 <cmd_stats_reset>:
  return CMD_OK;
}

COMMAND(cmd_stats_reset)
{
  stats_reset();
     b38:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <stats_reset>
  return CMD_OK;
}
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	08 95       	ret

00000b40 <cmd_stats_dump>:
  }
}

COMMAND(cmd_stats_dump)
{
  stats_dump_all();
     b40:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <stats_dump_all>
  return CMD_OK;
}
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	08 95       	ret

00000b48 <cmd_param_reset>:
  }
}

COMMAND(cmd_param_reset)
{
  param_reset();
     b48:	0e 94 a8 07 	call	0xf50	; 0xf50 <param_reset>
  return CMD_OK;
}
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 95       	ret

00000b50 <cmd_param_load>:
#include "param.h"
#include "stats.h"

COMMAND(cmd_param_load)
{
  uint8_t result = param_load();
     b50:	0e 94 b7 07 	call	0xf6e	; 0xf6e <param_load>
  if(result == PARAM_OK) {
     b54:	81 11       	cpse	r24, r1
    return CMD_OK;
  } else {
    return CMD_MASK_ERROR | result;
     b56:	80 62       	ori	r24, 0x20	; 32
  }
}
     b58:	08 95       	ret

00000b5a <cmd_dump_stats>:
#include "stats.h"
#include "base/uartutil.h"

COMMAND_KEY(cmd_dump_stats)
{
  stats_dump_all();
     b5a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <stats_dump_all>
}
     b5e:	08 95       	ret

00000b60 <main>:
 */

int main(void)
{
	// Disable watchdog
	cli();
     b60:	f8 94       	cli
	wdt_reset();
     b62:	a8 95       	wdr
	MCUSR=0;
     b64:	14 be       	out	0x34, r1	; 52
	WDTCSR|=_BV(WDCE) | _BV(WDE);
     b66:	e0 e6       	ldi	r30, 0x60	; 96
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	88 61       	ori	r24, 0x18	; 24
     b6e:	80 83       	st	Z, r24
	WDTCSR=0;
     b70:	10 82       	st	Z, r1
	sei();
     b72:	78 94       	sei

	// Setup timers
	timerInit();
     b74:	0e 94 28 01 	call	0x250	; 0x250 <timerInit>

  // Initialize status LED
  LED_DDR |= LED_STATUS;
     b78:	e7 e2       	ldi	r30, 0x27	; 39
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 62       	ori	r24, 0x20	; 32
     b80:	80 83       	st	Z, r24
  LED_PORT |= LED_STATUS;
     b82:	e8 e2       	ldi	r30, 0x28	; 40
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	80 62       	ori	r24, 0x20	; 32
     b8a:	80 83       	st	Z, r24

	// Load config
	param_init();
     b8c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <param_init>

	// Do the main loop
	bridgeLoop();
     b90:	0e 94 99 03 	call	0x732	; 0x732 <bridgeLoop>

  return 0;
}
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	08 95       	ret

00000b9a <arp_make_reply>:

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
}

void arp_make_reply(uint8_t *buf, const uint8_t *my_mac, const uint8_t *my_ip)
{
     b9a:	8f 92       	push	r8
     b9c:	9f 92       	push	r9
     b9e:	af 92       	push	r10
     ba0:	bf 92       	push	r11
     ba2:	cf 92       	push	r12
     ba4:	df 92       	push	r13
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	8c 01       	movw	r16, r24
     bb0:	5b 01       	movw	r10, r22
     bb2:	4a 01       	movw	r8, r20
	// make a reply
	net_put_word(buf + ARP_OFF_OP, ARP_REPLY);
     bb4:	06 96       	adiw	r24, 0x06	; 6
     bb6:	62 e0       	ldi	r22, 0x02	; 2
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	0e 94 5e 06 	call	0xcbc	; 0xcbc <net_put_word>
	net_copy_mac(buf + ARP_OFF_SRC_MAC, buf + ARP_OFF_TGT_MAC);
     bbe:	cc 24       	eor	r12, r12
     bc0:	dd 24       	eor	r13, r13
     bc2:	68 94       	set
     bc4:	c3 f8       	bld	r12, 3
     bc6:	c0 0e       	add	r12, r16
     bc8:	d1 1e       	adc	r13, r17
     bca:	b8 01       	movw	r22, r16
     bcc:	6e 5e       	subi	r22, 0xEE	; 238
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	c6 01       	movw	r24, r12
     bd2:	0e 94 34 06 	call	0xc68	; 0xc68 <net_copy_mac>
	net_copy_ip(buf + ARP_OFF_SRC_IP, buf + ARP_OFF_TGT_IP);
     bd6:	0f 2e       	mov	r0, r31
     bd8:	fe e0       	ldi	r31, 0x0E	; 14
     bda:	ef 2e       	mov	r14, r31
     bdc:	ff 24       	eor	r15, r15
     bde:	f0 2d       	mov	r31, r0
     be0:	e0 0e       	add	r14, r16
     be2:	f1 1e       	adc	r15, r17
     be4:	08 5e       	subi	r16, 0xE8	; 232
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	c7 01       	movw	r24, r14
     bea:	b8 01       	movw	r22, r16
     bec:	0e 94 43 06 	call	0xc86	; 0xc86 <net_copy_ip>
	net_copy_mac(my_mac, buf + ARP_OFF_SRC_MAC);
     bf0:	c5 01       	movw	r24, r10
     bf2:	b6 01       	movw	r22, r12
     bf4:	0e 94 34 06 	call	0xc68	; 0xc68 <net_copy_mac>
	net_copy_ip(my_ip, buf + ARP_OFF_SRC_IP);
     bf8:	c4 01       	movw	r24, r8
     bfa:	b7 01       	movw	r22, r14
     bfc:	0e 94 43 06 	call	0xc86	; 0xc86 <net_copy_ip>
}
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	cf 90       	pop	r12
     c0c:	bf 90       	pop	r11
     c0e:	af 90       	pop	r10
     c10:	9f 90       	pop	r9
     c12:	8f 90       	pop	r8
     c14:	08 95       	ret

00000c16 <arp_is_ipv4>:

#include "arp.h"
#include "net.h"

uint8_t arp_is_ipv4(const uint8_t *buf, uint16_t len)
{
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ec 01       	movw	r28, r24
  if(len < ARP_SIZE) {
     c20:	6c 31       	cpi	r22, 0x1C	; 28
     c22:	71 05       	cpc	r23, r1
     c24:	10 f4       	brcc	.+4      	; 0xc2a <arp_is_ipv4+0x14>
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	1a c0       	rjmp	.+52     	; 0xc5e <arp_is_ipv4+0x48>
    return 0;
  }

  uint16_t hw_type = net_get_word(buf + ARP_OFF_HW_TYPE);
     c2a:	0e 94 54 06 	call	0xca8	; 0xca8 <net_get_word>
     c2e:	8c 01       	movw	r16, r24
  uint16_t pt_type = net_get_word(buf + ARP_OFF_PROT_TYPE);
     c30:	ce 01       	movw	r24, r28
     c32:	02 96       	adiw	r24, 0x02	; 2
     c34:	0e 94 54 06 	call	0xca8	; 0xca8 <net_get_word>
  uint8_t hw_size = buf[ARP_OFF_HW_SIZE];
     c38:	2c 81       	ldd	r18, Y+4	; 0x04
  uint8_t pt_size = buf[ARP_OFF_PROT_SIZE];
     c3a:	3d 81       	ldd	r19, Y+5	; 0x05

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
     c3c:	01 30       	cpi	r16, 0x01	; 1
     c3e:	11 05       	cpc	r17, r1
     c40:	61 f4       	brne	.+24     	; 0xc5a <arp_is_ipv4+0x44>
     c42:	80 50       	subi	r24, 0x00	; 0
     c44:	98 40       	sbci	r25, 0x08	; 8
     c46:	49 f4       	brne	.+18     	; 0xc5a <arp_is_ipv4+0x44>
     c48:	26 30       	cpi	r18, 0x06	; 6
     c4a:	39 f4       	brne	.+14     	; 0xc5a <arp_is_ipv4+0x44>
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	34 30       	cpi	r19, 0x04	; 4
     c50:	09 f0       	breq	.+2      	; 0xc54 <arp_is_ipv4+0x3e>
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	89 27       	eor	r24, r25
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <arp_is_ipv4+0x48>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
}
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <net_copy_mac>:
const uint8_t net_bcast_mac[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
const uint8_t net_zero_mac[6] = { 0,0,0,0,0,0 };
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
     c68:	ac 01       	movw	r20, r24
     c6a:	25 e0       	ldi	r18, 0x05	; 5
	uint8_t i;
  for(i=6; i--;)
    out[i] = in[i];
     c6c:	82 2f       	mov	r24, r18
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	db 01       	movw	r26, r22
     c72:	a8 0f       	add	r26, r24
     c74:	b9 1f       	adc	r27, r25
     c76:	fa 01       	movw	r30, r20
     c78:	e8 0f       	add	r30, r24
     c7a:	f9 1f       	adc	r31, r25
     c7c:	80 81       	ld	r24, Z
     c7e:	8c 93       	st	X, r24
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
	uint8_t i;
  for(i=6; i--;)
     c80:	21 50       	subi	r18, 0x01	; 1
     c82:	a0 f7       	brcc	.-24     	; 0xc6c <net_copy_mac+0x4>
    out[i] = in[i];
}
     c84:	08 95       	ret

00000c86 <net_copy_ip>:

void net_copy_ip(const uint8_t *in, uint8_t *out) {
     c86:	fc 01       	movw	r30, r24
     c88:	db 01       	movw	r26, r22
	uint8_t i;
  for(i = 4; i--;)
		out[i] = in[i];
     c8a:	83 81       	ldd	r24, Z+3	; 0x03
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	13 97       	sbiw	r26, 0x03	; 3
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	12 96       	adiw	r26, 0x02	; 2
     c96:	8c 93       	st	X, r24
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	11 96       	adiw	r26, 0x01	; 1
     c9e:	8c 93       	st	X, r24
     ca0:	11 97       	sbiw	r26, 0x01	; 1
     ca2:	80 81       	ld	r24, Z
     ca4:	8c 93       	st	X, r24
}
     ca6:	08 95       	ret

00000ca8 <net_get_word>:

uint16_t  net_get_word(const uint8_t *buf) {
     ca8:	fc 01       	movw	r30, r24
     caa:	21 81       	ldd	r18, Z+1	; 0x01
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	90 81       	ld	r25, Z
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	28 2b       	or	r18, r24
     cb4:	39 2b       	or	r19, r25
  return (uint16_t)buf[0] << 8 | (uint16_t)buf[1];
}
     cb6:	82 2f       	mov	r24, r18
     cb8:	93 2f       	mov	r25, r19
     cba:	08 95       	ret

00000cbc <net_put_word>:

void net_put_word(uint8_t *buf, uint16_t value)
{
     cbc:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 8);
     cbe:	70 83       	st	Z, r23
  buf[1] = (uint8_t)(value & 0xff);
     cc0:	61 83       	std	Z+1, r22	; 0x01
}
     cc2:	08 95       	ret

00000cc4 <net_get_long>:

uint32_t  net_get_long(const uint8_t *buf)
{
     cc4:	fc 01       	movw	r30, r24
     cc6:	23 81       	ldd	r18, Z+3	; 0x03
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	a0 e0       	ldi	r26, 0x00	; 0
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	b8 2f       	mov	r27, r24
     cd8:	aa 27       	eor	r26, r26
     cda:	99 27       	eor	r25, r25
     cdc:	88 27       	eor	r24, r24
     cde:	28 2b       	or	r18, r24
     ce0:	39 2b       	or	r19, r25
     ce2:	4a 2b       	or	r20, r26
     ce4:	5b 2b       	or	r21, r27
     ce6:	81 81       	ldd	r24, Z+1	; 0x01
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	dc 01       	movw	r26, r24
     cf0:	99 27       	eor	r25, r25
     cf2:	88 27       	eor	r24, r24
     cf4:	28 2b       	or	r18, r24
     cf6:	39 2b       	or	r19, r25
     cf8:	4a 2b       	or	r20, r26
     cfa:	5b 2b       	or	r21, r27
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	a0 e0       	ldi	r26, 0x00	; 0
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ba 2f       	mov	r27, r26
     d06:	a9 2f       	mov	r26, r25
     d08:	98 2f       	mov	r25, r24
     d0a:	88 27       	eor	r24, r24
     d0c:	28 2b       	or	r18, r24
     d0e:	39 2b       	or	r19, r25
     d10:	4a 2b       	or	r20, r26
     d12:	5b 2b       	or	r21, r27
  return (uint32_t)buf[0] << 24 | (uint32_t)buf[1] << 16 | (uint32_t)buf[2] << 8 | (uint32_t)buf[3];
}
     d14:	62 2f       	mov	r22, r18
     d16:	73 2f       	mov	r23, r19
     d18:	84 2f       	mov	r24, r20
     d1a:	95 2f       	mov	r25, r21
     d1c:	08 95       	ret

00000d1e <net_put_long>:

void net_put_long(uint8_t *buf, uint32_t value)
{
     d1e:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 24);
     d20:	87 2f       	mov	r24, r23
     d22:	99 27       	eor	r25, r25
     d24:	aa 27       	eor	r26, r26
     d26:	bb 27       	eor	r27, r27
     d28:	80 83       	st	Z, r24
  buf[1] = (uint8_t)((value >> 16) & 0xff);
     d2a:	cb 01       	movw	r24, r22
     d2c:	aa 27       	eor	r26, r26
     d2e:	bb 27       	eor	r27, r27
     d30:	81 83       	std	Z+1, r24	; 0x01
  buf[2] = (uint8_t)((value >> 8) & 0xff);
     d32:	bb 27       	eor	r27, r27
     d34:	a7 2f       	mov	r26, r23
     d36:	96 2f       	mov	r25, r22
     d38:	85 2f       	mov	r24, r21
     d3a:	82 83       	std	Z+2, r24	; 0x02
  buf[3] = (uint8_t)(value & 0xff);
     d3c:	43 83       	std	Z+3, r20	; 0x03
}
     d3e:	08 95       	ret

00000d40 <net_compare_mac>:
    pos += 4;
  }
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
     d40:	ac 01       	movw	r20, r24
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++)
    if(a[i] != b[i])
     d46:	fa 01       	movw	r30, r20
     d48:	e2 0f       	add	r30, r18
     d4a:	f3 1f       	adc	r31, r19
     d4c:	db 01       	movw	r26, r22
     d4e:	a2 0f       	add	r26, r18
     d50:	b3 1f       	adc	r27, r19
     d52:	90 81       	ld	r25, Z
     d54:	8c 91       	ld	r24, X
     d56:	98 17       	cp	r25, r24
     d58:	11 f0       	breq	.+4      	; 0xd5e <net_compare_mac+0x1e>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	08 95       	ret
     d5e:	2f 5f       	subi	r18, 0xFF	; 255
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<6;i++)
     d62:	26 30       	cpi	r18, 0x06	; 6
     d64:	31 05       	cpc	r19, r1
     d66:	79 f7       	brne	.-34     	; 0xd46 <net_compare_mac+0x6>
     d68:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
     d6a:	08 95       	ret

00000d6c <net_compare_ip>:

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
     d6c:	ac 01       	movw	r20, r24
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++)
    if(a[i] != b[i])
     d72:	fa 01       	movw	r30, r20
     d74:	e2 0f       	add	r30, r18
     d76:	f3 1f       	adc	r31, r19
     d78:	db 01       	movw	r26, r22
     d7a:	a2 0f       	add	r26, r18
     d7c:	b3 1f       	adc	r27, r19
     d7e:	90 81       	ld	r25, Z
     d80:	8c 91       	ld	r24, X
     d82:	98 17       	cp	r25, r24
     d84:	11 f0       	breq	.+4      	; 0xd8a <net_compare_ip+0x1e>
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	08 95       	ret
     d8a:	2f 5f       	subi	r18, 0xFF	; 255
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
  return 1;
}

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<4;i++)
     d8e:	24 30       	cpi	r18, 0x04	; 4
     d90:	31 05       	cpc	r19, r1
     d92:	79 f7       	brne	.-34     	; 0xd72 <net_compare_ip+0x6>
     d94:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
     d96:	08 95       	ret

00000d98 <net_dump_ip>:
    mac[i] = value;
  }
  return 1;
}

void net_dump_ip(const uint8_t *in) {
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
     da4:	20 91 24 01 	lds	r18, 0x0124
     da8:	30 91 25 01 	lds	r19, 0x0125
     dac:	8c 01       	movw	r16, r24
     dae:	e9 01       	movw	r28, r18
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
     db0:	ee 24       	eor	r14, r14
     db2:	ff 24       	eor	r15, r15
     db4:	68 94       	set
     db6:	e4 f8       	bld	r14, 4
     db8:	e2 0e       	add	r14, r18
     dba:	f3 1e       	adc	r15, r19
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
     dbc:	f8 01       	movw	r30, r16
     dbe:	81 91       	ld	r24, Z+
     dc0:	8f 01       	movw	r16, r30
     dc2:	be 01       	movw	r22, r28
     dc4:	0e 94 23 02 	call	0x446	; 0x446 <utilByteToDec>
     dc8:	24 96       	adiw	r28, 0x04	; 4
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
     dca:	ce 15       	cp	r28, r14
     dcc:	df 05       	cpc	r29, r15
     dce:	b1 f7       	brne	.-20     	; 0xdbc <net_dump_ip+0x24>
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    pos += 4;
  }
  // NOTE: UART - ip_str
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	08 95       	ret

00000dde <net_parse_mac>:
    ip[i] = value;
  }
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
     dde:	af 92       	push	r10
     de0:	bf 92       	push	r11
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	7c 01       	movw	r14, r24
     dfa:	6b 01       	movw	r12, r22
     dfc:	00 e0       	ldi	r16, 0x00	; 0
     dfe:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++) {
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
     e00:	5e 01       	movw	r10, r28
     e02:	08 94       	sec
     e04:	a1 1c       	adc	r10, r1
     e06:	b1 1c       	adc	r11, r1
     e08:	c7 01       	movw	r24, r14
     e0a:	b5 01       	movw	r22, r10
     e0c:	0e 94 a1 02 	call	0x542	; 0x542 <utilParseByteHex>
     e10:	88 23       	and	r24, r24
     e12:	89 f0       	breq	.+34     	; 0xe36 <net_parse_mac+0x58>
      return 0;
    }
    buf += 3;
    mac[i] = value;
     e14:	f6 01       	movw	r30, r12
     e16:	e0 0f       	add	r30, r16
     e18:	f1 1f       	adc	r31, r17
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	80 83       	st	Z, r24
     e1e:	0f 5f       	subi	r16, 0xFF	; 255
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
	uint8_t i;
  for(i=0;i<6;i++) {
     e22:	06 30       	cpi	r16, 0x06	; 6
     e24:	11 05       	cpc	r17, r1
     e26:	11 f4       	brne	.+4      	; 0xe2c <net_parse_mac+0x4e>
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <net_parse_mac+0x5a>
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
      return 0;
    }
    buf += 3;
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	e8 0e       	add	r14, r24
     e32:	f9 1e       	adc	r15, r25
     e34:	e9 cf       	rjmp	.-46     	; 0xe08 <net_parse_mac+0x2a>
     e36:	80 e0       	ldi	r24, 0x00	; 0
    mac[i] = value;
  }
  return 1;
}
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	bf 90       	pop	r11
     e4c:	af 90       	pop	r10
     e4e:	08 95       	ret

00000e50 <net_parse_ip>:
    pos += 3;
  }
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
     e50:	af 92       	push	r10
     e52:	bf 92       	push	r11
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	0f 92       	push	r0
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	7c 01       	movw	r14, r24
     e6c:	6b 01       	movw	r12, r22
     e6e:	00 e0       	ldi	r16, 0x00	; 0
     e70:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++) {
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
     e72:	5e 01       	movw	r10, r28
     e74:	08 94       	sec
     e76:	a1 1c       	adc	r10, r1
     e78:	b1 1c       	adc	r11, r1
     e7a:	c7 01       	movw	r24, r14
     e7c:	b5 01       	movw	r22, r10
     e7e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <utilParseByteDec>
     e82:	98 2f       	mov	r25, r24
    if(digits == 0)
     e84:	88 23       	and	r24, r24
     e86:	91 f0       	breq	.+36     	; 0xeac <net_parse_ip+0x5c>
      return 0;
    buf += digits + 1;
    ip[i] = value;
     e88:	f6 01       	movw	r30, r12
     e8a:	e0 0f       	add	r30, r16
     e8c:	f1 1f       	adc	r31, r17
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	80 83       	st	Z, r24
     e92:	0f 5f       	subi	r16, 0xFF	; 255
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
	uint8_t i;
  for(i=0;i<4;i++) {
     e96:	04 30       	cpi	r16, 0x04	; 4
     e98:	11 05       	cpc	r17, r1
     e9a:	11 f4       	brne	.+4      	; 0xea0 <net_parse_ip+0x50>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	07 c0       	rjmp	.+14     	; 0xeae <net_parse_ip+0x5e>
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
    if(digits == 0)
      return 0;
    buf += digits + 1;
     ea0:	89 2f       	mov	r24, r25
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	e8 0e       	add	r14, r24
     ea8:	f9 1e       	adc	r15, r25
     eaa:	e7 cf       	rjmp	.-50     	; 0xe7a <net_parse_ip+0x2a>
     eac:	80 e0       	ldi	r24, 0x00	; 0
    ip[i] = value;
  }
  return 1;
}
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	08 95       	ret

00000ec6 <net_dump_mac>:
}

static char *mac_str = "00:00:00:00:00:00";
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
    utilByteToHex(in[i], mac_str+pos);
     ed2:	e0 90 38 01 	lds	r14, 0x0138
     ed6:	f0 90 39 01 	lds	r15, 0x0139
     eda:	8c 01       	movw	r16, r24
     edc:	c0 e0       	ldi	r28, 0x00	; 0
     ede:	d0 e0       	ldi	r29, 0x00	; 0
     ee0:	b7 01       	movw	r22, r14
     ee2:	6c 0f       	add	r22, r28
     ee4:	7d 1f       	adc	r23, r29
     ee6:	f8 01       	movw	r30, r16
     ee8:	81 91       	ld	r24, Z+
     eea:	8f 01       	movw	r16, r30
     eec:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <utilByteToHex>
    pos += 3;
     ef0:	23 96       	adiw	r28, 0x03	; 3
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
     ef2:	c2 31       	cpi	r28, 0x12	; 18
     ef4:	d1 05       	cpc	r29, r1
     ef6:	a1 f7       	brne	.-24     	; 0xee0 <net_dump_mac+0x1a>
    utilByteToHex(in[i], mac_str+pos);
    pos += 3;
  }
  // NOTE: UART - mac_str
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	08 95       	ret

00000f06 <calc_crc16>:

// build check sum for parameter block
static uint16_t calc_crc16(tConfig *p)
{
  uint16_t crc16 = 0xffff;
  uint8_t *data = (uint8_t *)p;
     f06:	fc 01       	movw	r30, r24
     f08:	4f ef       	ldi	r20, 0xFF	; 255
     f0a:	5f ef       	ldi	r21, 0xFF	; 255
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     f10:	81 91       	ld	r24, Z+
     f12:	48 27       	eor	r20, r24
     f14:	84 2f       	mov	r24, r20
     f16:	82 95       	swap	r24
     f18:	84 27       	eor	r24, r20
     f1a:	08 2e       	mov	r0, r24
     f1c:	86 95       	lsr	r24
     f1e:	86 95       	lsr	r24
     f20:	80 25       	eor	r24, r0
     f22:	08 2e       	mov	r0, r24
     f24:	86 95       	lsr	r24
     f26:	80 25       	eor	r24, r0
     f28:	87 70       	andi	r24, 0x07	; 7
     f2a:	04 2e       	mov	r0, r20
     f2c:	45 2f       	mov	r20, r21
     f2e:	86 95       	lsr	r24
     f30:	07 94       	ror	r0
     f32:	87 95       	ror	r24
     f34:	50 2d       	mov	r21, r0
     f36:	48 27       	eor	r20, r24
     f38:	06 94       	lsr	r0
     f3a:	87 95       	ror	r24
     f3c:	50 25       	eor	r21, r0
     f3e:	48 27       	eor	r20, r24
  uint16_t i;
  for(i=0;i<sizeof(tConfig);i++) {
     f40:	2f 5f       	subi	r18, 0xFF	; 255
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	24 31       	cpi	r18, 0x14	; 20
     f46:	31 05       	cpc	r19, r1
     f48:	19 f7       	brne	.-58     	; 0xf10 <calc_crc16+0xa>
    crc16 = _crc16_update(crc16,*data);
    data++;
  }
  return crc16;
}
     f4a:	84 2f       	mov	r24, r20
     f4c:	95 2f       	mov	r25, r21
     f4e:	08 95       	ret

00000f50 <param_reset>:

  return PARAM_OK;
}

void param_reset(void)
{
     f50:	af e4       	ldi	r26, 0x4F	; 79
     f52:	b1 e0       	ldi	r27, 0x01	; 1
     f54:	2e ef       	ldi	r18, 0xFE	; 254
     f56:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
     f58:	43 e6       	ldi	r20, 0x63	; 99
     f5a:	51 e0       	ldi	r21, 0x01	; 1

  return PARAM_OK;
}

void param_reset(void)
{
     f5c:	f9 01       	movw	r30, r18
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
    *(out++) = pgm_read_byte_near(in++);
     f5e:	2f 5f       	subi	r18, 0xFF	; 255
     f60:	3f 4f       	sbci	r19, 0xFF	; 255
     f62:	e4 91       	lpm	r30, Z+
     f64:	ed 93       	st	X+, r30
{
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
     f66:	a4 17       	cp	r26, r20
     f68:	b5 07       	cpc	r27, r21
     f6a:	c1 f7       	brne	.-16     	; 0xf5c <param_reset+0xc>
    *(out++) = pgm_read_byte_near(in++);
  }
}
     f6c:	08 95       	ret

00000f6e <param_load>:

  return PARAM_OK;
}

uint8_t param_load(void)
{
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
  // check that eeprom is readable
  if(!eeprom_is_ready())
     f76:	f9 9b       	sbis	0x1f, 1	; 31
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <param_load+0x10>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	1d c0       	rjmp	.+58     	; 0xfb8 <param_load+0x4a>
    return PARAM_EEPROM_NOT_READY;

  // read param
  eeprom_read_block(&g_sConfig,&s_sEepromConfig,sizeof(tConfig));
     f7e:	0f 2e       	mov	r0, r31
     f80:	ff e4       	ldi	r31, 0x4F	; 79
     f82:	ef 2e       	mov	r14, r31
     f84:	f1 e0       	ldi	r31, 0x01	; 1
     f86:	ff 2e       	mov	r15, r31
     f88:	f0 2d       	mov	r31, r0
     f8a:	c7 01       	movw	r24, r14
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	44 e1       	ldi	r20, 0x14	; 20
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__eerd_block_m328p>

  // read crc16
  uint16_t crc16 = eeprom_read_word(&s_uwEepromCrc);
     f98:	84 e1       	ldi	r24, 0x14	; 20
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__eerd_word_m328p>
     fa0:	8c 01       	movw	r16, r24
  uint16_t my_crc16 = calc_crc16(&g_sConfig);
     fa2:	c7 01       	movw	r24, r14
     fa4:	0e 94 83 07 	call	0xf06	; 0xf06 <calc_crc16>
  if(crc16 != my_crc16) {
     fa8:	08 17       	cp	r16, r24
     faa:	19 07       	cpc	r17, r25
     fac:	11 f4       	brne	.+4      	; 0xfb2 <param_load+0x44>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <param_load+0x4a>
    param_reset();
     fb2:	0e 94 a8 07 	call	0xf50	; 0xf50 <param_reset>
     fb6:	82 e0       	ldi	r24, 0x02	; 2
    return PARAM_EEPROM_CRC_MISMATCH;
  }

  return PARAM_OK;
}
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	08 95       	ret

00000fc2 <param_init>:
  }
}

void param_init(void)
{
  if(param_load()!=PARAM_OK)
     fc2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <param_load>
     fc6:	88 23       	and	r24, r24
     fc8:	11 f0       	breq	.+4      	; 0xfce <param_init+0xc>
    param_reset();
     fca:	0e 94 a8 07 	call	0xf50	; 0xf50 <param_reset>
     fce:	08 95       	ret

00000fd0 <param_save>:
  }
  return crc16;
}

uint8_t param_save(void)
{
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
  // check that eeprom is writable
  if(!eeprom_is_ready())
     fd4:	f9 9b       	sbis	0x1f, 1	; 31
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <param_save+0xc>
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	12 c0       	rjmp	.+36     	; 0x1000 <param_save+0x30>
    return PARAM_EEPROM_NOT_READY;

  // write current param to eeprom
  eeprom_write_block(&g_sConfig,&s_sEepromConfig,sizeof(tConfig));
     fdc:	0f e4       	ldi	r16, 0x4F	; 79
     fde:	11 e0       	ldi	r17, 0x01	; 1
     fe0:	c8 01       	movw	r24, r16
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	44 e1       	ldi	r20, 0x14	; 20
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__eewr_block_m328p>

  // calc current parameter crc
  uint16_t crc16 = calc_crc16(&g_sConfig);
     fee:	c8 01       	movw	r24, r16
     ff0:	0e 94 83 07 	call	0xf06	; 0xf06 <calc_crc16>
     ff4:	bc 01       	movw	r22, r24
  eeprom_write_word(&s_uwEepromCrc,crc16);
     ff6:	84 e1       	ldi	r24, 0x14	; 20
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__eewr_word_m328p>
     ffe:	80 e0       	ldi	r24, 0x00	; 0

  return PARAM_OK;
}
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	08 95       	ret

00001006 <parInit>:
 * 	POut:    input,  pulled high
 * 	NAck:    output, default: 1
 */
void parInit(void) {
	// Zero DDR and PORT status
  PAR_STATUS_DDR &= ~PAR_STATUS_MASK;
    1006:	a7 e2       	ldi	r26, 0x27	; 39
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	8c 91       	ld	r24, X
    100c:	80 7e       	andi	r24, 0xE0	; 224
    100e:	8c 93       	st	X, r24
  PAR_STATUS_PORT &= ~PAR_STATUS_MASK;
    1010:	e8 e2       	ldi	r30, 0x28	; 40
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 7e       	andi	r24, 0xE0	; 224
    1018:	80 83       	st	Z, r24

  // Set them correctly
  PAR_STATUS_DDR |= PAR_BUSY | PAR_NACK;
    101a:	8c 91       	ld	r24, X
    101c:	86 60       	ori	r24, 0x06	; 6
    101e:	8c 93       	st	X, r24
  PAR_STATUS_PORT |= PAR_NSTROBE | PAR_SEL | PAR_POUT | PAR_NACK;
    1020:	80 81       	ld	r24, Z
    1022:	8b 61       	ori	r24, 0x1B	; 27
    1024:	80 83       	st	Z, r24

  // Set data DDR to input
  PAR_DATA_DDR = 0x00;
    1026:	1a b8       	out	0x0a, r1	; 10
}
    1028:	08 95       	ret

0000102a <parGetStatusLines>:

uint8_t parGetStatusLines(void) {
	uint8_t ubIn, ubStrobe, ubSelect, ubPOut;
	ubIn = PAR_STATUS_PIN;
    102a:	86 b1       	in	r24, 0x06	; 6
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	20 71       	andi	r18, 0x10	; 16
    1032:	30 70       	andi	r19, 0x00	; 0
    1034:	35 95       	asr	r19
    1036:	27 95       	ror	r18
    1038:	35 95       	asr	r19
    103a:	27 95       	ror	r18
    103c:	35 95       	asr	r19
    103e:	27 95       	ror	r18
    1040:	35 95       	asr	r19
    1042:	27 95       	ror	r18
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	88 70       	andi	r24, 0x08	; 8
    104a:	88 0f       	add	r24, r24
    104c:	88 0f       	add	r24, r24
  ubStrobe = (ubIn & PAR_NSTROBE) >> PAR_POUT_PIN;
  ubSelect = (ubIn & PAR_SEL)     >> PAR_SEL_PIN;
  ubPOut   = (ubIn & PAR_POUT)    >> PAR_NSTROBE_PIN;
  return ((ubPOut << 2) | (ubSelect << 1) | ubStrobe);
}
    104e:	82 2b       	or	r24, r18
    1050:	08 95       	ret

00001052 <parWaitForPout>:
 * Waits for PaperOut pin state specified by ubReqValue, for ubStateFlag purposes.
 * @param ubReqValue Requested PaperOut pin state (1: hi, 0: lo)
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t parWaitForPout(uint8_t ubReqValue, uint8_t ubStateFlag) {
    1052:	78 2f       	mov	r23, r24
  g_uwTimer100us = 0;
    1054:	10 92 47 01 	sts	0x0147, r1
    1058:	10 92 46 01 	sts	0x0146, r1
  while(g_uwTimer100us < pb_proto_timeout) {
    105c:	40 91 3a 01 	lds	r20, 0x013A
    1060:	50 91 3b 01 	lds	r21, 0x013B
		uint8_t ubIn = PAR_STATUS_PIN;
    1064:	e6 e2       	ldi	r30, 0x26	; 38
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	15 c0       	rjmp	.+42     	; 0x1094 <parWaitForPout+0x42>
    106a:	80 81       	ld	r24, Z
    uint8_t ubPOut = (ubIn & PAR_POUT) >> PAR_POUT_PIN;
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    if(ubReqValue == ubPOut)
    1070:	c9 01       	movw	r24, r18
    1072:	88 70       	andi	r24, 0x08	; 8
    1074:	90 70       	andi	r25, 0x00	; 0
    1076:	95 95       	asr	r25
    1078:	87 95       	ror	r24
    107a:	95 95       	asr	r25
    107c:	87 95       	ror	r24
    107e:	95 95       	asr	r25
    1080:	87 95       	ror	r24
    1082:	78 17       	cp	r23, r24
    1084:	11 f4       	brne	.+4      	; 0x108a <parWaitForPout+0x38>
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	08 95       	ret
      return PBPROTO_STATUS_OK;
    // During transfer client aborted and removed SEL
    if(!(ubIn & PAR_SEL))
    108a:	24 fd       	sbrc	r18, 4
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <parWaitForPout+0x42>
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
    108e:	86 2f       	mov	r24, r22
    1090:	83 60       	ori	r24, 0x03	; 3
    1092:	08 95       	ret
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t parWaitForPout(uint8_t ubReqValue, uint8_t ubStateFlag) {
  g_uwTimer100us = 0;
  while(g_uwTimer100us < pb_proto_timeout) {
    1094:	80 91 46 01 	lds	r24, 0x0146
    1098:	90 91 47 01 	lds	r25, 0x0147
    109c:	84 17       	cp	r24, r20
    109e:	95 07       	cpc	r25, r21
    10a0:	20 f3       	brcs	.-56     	; 0x106a <parWaitForPout+0x18>
      return PBPROTO_STATUS_OK;
    // During transfer client aborted and removed SEL
    if(!(ubIn & PAR_SEL))
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
    10a2:	86 2f       	mov	r24, r22
    10a4:	82 60       	ori	r24, 0x02	; 2
}
    10a6:	08 95       	ret

000010a8 <pb_proto_handle>:
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    10a8:	2f 92       	push	r2
    10aa:	3f 92       	push	r3
    10ac:	4f 92       	push	r4
    10ae:	5f 92       	push	r5
    10b0:	6f 92       	push	r6
    10b2:	7f 92       	push	r7
    10b4:	8f 92       	push	r8
    10b6:	9f 92       	push	r9
    10b8:	af 92       	push	r10
    10ba:	bf 92       	push	r11
    10bc:	cf 92       	push	r12
    10be:	df 92       	push	r13
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <pb_proto_handle+0x26>
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
  uint8_t result;
  pb_proto_stat_t *ps = &pb_proto_stat;

  // handle server side of plipbox protocol
  ps->cmd = 0;
    10d2:	10 92 63 01 	sts	0x0163, r1

  // make sure that SEL == 1 and POUT == 0
  if(!(PAR_STATUS_PIN & PAR_SEL) || (PAR_STATUS_PIN & PAR_POUT)) {
    10d6:	34 9b       	sbis	0x06, 4	; 6
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <pb_proto_handle+0x36>
    10da:	33 9b       	sbis	0x06, 3	; 6
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <pb_proto_handle+0x3e>
    ps->status = PBPROTO_STATUS_IDLE;
    10de:	10 92 64 01 	sts	0x0164, r1
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	d0 c2       	rjmp	.+1440   	; 0x1686 <pb_proto_handle+0x5de>
    return PBPROTO_STATUS_IDLE;
  }

  // Read command byte
  uint8_t cmd = PAR_DATA_PIN;
    10e6:	a9 b0       	in	r10, 0x09	; 9

  // Amiga wants to receive data - prepare
  uint16_t pkt_size = 0;
    10e8:	1a 82       	std	Y+2, r1	; 0x02
    10ea:	19 82       	std	Y+1, r1	; 0x01
  if((cmd == PBPROTO_CMD_RECV) || (cmd == PBPROTO_CMD_RECV_BURST)) {
    10ec:	22 e2       	ldi	r18, 0x22	; 34
    10ee:	a2 16       	cp	r10, r18
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <pb_proto_handle+0x50>
    10f2:	84 e4       	ldi	r24, 0x44	; 68
    10f4:	a8 16       	cp	r10, r24
    10f6:	b9 f4       	brne	.+46     	; 0x1126 <pb_proto_handle+0x7e>
    uint8_t res = bridgeFillPacket(&pkt_size);
    10f8:	ce 01       	movw	r24, r28
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	0e 94 46 04 	call	0x88c	; 0x88c <bridgeFillPacket>
    1100:	28 2f       	mov	r18, r24
    if(res != PBPROTO_STATUS_OK) {
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	81 f0       	breq	.+32     	; 0x1126 <pb_proto_handle+0x7e>
      ps->status = res;
    1106:	e4 e6       	ldi	r30, 0x64	; 100
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	80 83       	st	Z, r24
    110c:	e2 81       	ldd	r30, Z+2	; 0x02
    110e:	8c e0       	ldi	r24, 0x0C	; 12
    1110:	e8 9f       	mul	r30, r24
    1112:	f0 01       	movw	r30, r0
    1114:	11 24       	eor	r1, r1
    1116:	e3 5a       	subi	r30, 0xA3	; 163
    1118:	f8 4f       	sbci	r31, 0xF8	; 248
			stats_get(ps->stats_id)->err++;
    111a:	86 81       	ldd	r24, Z+6	; 0x06
    111c:	97 81       	ldd	r25, Z+7	; 0x07
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	97 83       	std	Z+7, r25	; 0x07
    1122:	86 83       	std	Z+6, r24	; 0x06
    1124:	b0 c2       	rjmp	.+1376   	; 0x1686 <pb_proto_handle+0x5de>
      return res;
    }
  }

  // start timer
  uint32_t ts = g_uwTimeStamp;
    1126:	60 90 48 01 	lds	r6, 0x0148
    112a:	70 90 49 01 	lds	r7, 0x0149
    112e:	80 90 4a 01 	lds	r8, 0x014A
    1132:	90 90 4b 01 	lds	r9, 0x014B
    1136:	10 92 85 00 	sts	0x0085, r1
    113a:	10 92 84 00 	sts	0x0084, r1
  timerReset();

  // confirm cmd with BUSY = 1
  PAR_STATUS_PORT |= PAR_BUSY;
    113e:	e8 e2       	ldi	r30, 0x28	; 40
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	84 60       	ori	r24, 0x04	; 4
    1146:	80 83       	st	Z, r24

  uint16_t uwParDataSize = 0;
  switch(cmd) {
    1148:	a2 e2       	ldi	r26, 0x22	; 34
    114a:	aa 16       	cp	r10, r26
    114c:	a1 f0       	breq	.+40     	; 0x1176 <pb_proto_handle+0xce>
    114e:	aa 15       	cp	r26, r10
    1150:	20 f0       	brcs	.+8      	; 0x115a <pb_proto_handle+0xb2>
    1152:	b1 e1       	ldi	r27, 0x11	; 17
    1154:	ab 16       	cp	r10, r27
    1156:	49 f4       	brne	.+18     	; 0x116a <pb_proto_handle+0xc2>
    1158:	75 c0       	rjmp	.+234    	; 0x1244 <pb_proto_handle+0x19c>
    115a:	e3 e3       	ldi	r30, 0x33	; 51
    115c:	ae 16       	cp	r10, r30
    115e:	09 f4       	brne	.+2      	; 0x1162 <pb_proto_handle+0xba>
    1160:	7a c1       	rjmp	.+756    	; 0x1456 <pb_proto_handle+0x3ae>
    1162:	f4 e4       	ldi	r31, 0x44	; 68
    1164:	af 16       	cp	r10, r31
    1166:	09 f4       	brne	.+2      	; 0x116a <pb_proto_handle+0xc2>
    1168:	dd c0       	rjmp	.+442    	; 0x1324 <pb_proto_handle+0x27c>
    116a:	bb 24       	eor	r11, r11
    116c:	68 94       	set
    116e:	b2 f8       	bld	r11, 2
    1170:	cc 24       	eor	r12, r12
    1172:	dd 24       	eor	r13, r13
    1174:	fc c1       	rjmp	.+1016   	; 0x156e <pb_proto_handle+0x4c6>
    case PBPROTO_CMD_RECV:
      result = parHandleAmiRead(pkt_size, &uwParDataSize);
    1176:	e9 80       	ldd	r14, Y+1	; 0x01
    1178:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t parHandleAmiRead(uint16_t uwSize, uint16_t *pWriteSize)
{
	uint8_t ubStatus;

  PAR_DATA_DDR = 0xFF;
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	8a b9       	out	0x0a, r24	; 10

  // Send packet size - high part
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	60 e2       	ldi	r22, 0x20	; 32
    1182:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    1186:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    1188:	21 e0       	ldi	r18, 0x01	; 1
    118a:	82 17       	cp	r24, r18
    118c:	09 f0       	breq	.+2      	; 0x1190 <pb_proto_handle+0xe8>
    118e:	57 c0       	rjmp	.+174    	; 0x123e <pb_proto_handle+0x196>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize >> 8;
    1190:	fb b8       	out	0x0b, r15	; 11
  PAR_STATUS_PORT &= ~PAR_BUSY;
    1192:	e8 e2       	ldi	r30, 0x28	; 40
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8b 7f       	andi	r24, 0xFB	; 251
    119a:	80 83       	st	Z, r24

  // Send packet size - low part
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	60 e3       	ldi	r22, 0x30	; 48
    11a0:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    11a4:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	b8 16       	cp	r11, r24
    11aa:	09 f0       	breq	.+2      	; 0x11ae <pb_proto_handle+0x106>
    11ac:	48 c0       	rjmp	.+144    	; 0x123e <pb_proto_handle+0x196>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize & 0xFF;
    11ae:	eb b8       	out	0x0b, r14	; 11
  PAR_STATUS_PORT |= PAR_BUSY;
    11b0:	e8 e2       	ldi	r30, 0x28	; 40
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	84 60       	ori	r24, 0x04	; 4
    11b8:	80 83       	st	Z, r24
  const uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    11ba:	c7 01       	movw	r24, r14
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	0f 2e       	mov	r0, r31
    11c0:	fe ef       	ldi	r31, 0xFE	; 254
    11c2:	2f 2e       	mov	r2, r31
    11c4:	ff ef       	ldi	r31, 0xFF	; 255
    11c6:	3f 2e       	mov	r3, r31
    11c8:	f0 2d       	mov	r31, r0
    11ca:	28 22       	and	r2, r24
    11cc:	39 22       	and	r3, r25
  while(uwSize--) {
    11ce:	21 14       	cp	r2, r1
    11d0:	31 04       	cpc	r3, r1
    11d2:	61 f1       	breq	.+88     	; 0x122c <pb_proto_handle+0x184>
    11d4:	01 e0       	ldi	r16, 0x01	; 1
    11d6:	0f 2e       	mov	r0, r31
    11d8:	f3 e7       	ldi	r31, 0x73	; 115
    11da:	ef 2e       	mov	r14, r31
    11dc:	f1 e0       	ldi	r31, 0x01	; 1
    11de:	ff 2e       	mov	r15, r31
    11e0:	f0 2d       	mov	r31, r0
    11e2:	cc 24       	eor	r12, r12
    11e4:	dd 24       	eor	r13, r13
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    PAR_STATUS_PORT ^= PAR_BUSY;
    11e6:	0f 2e       	mov	r0, r31
    11e8:	f8 e2       	ldi	r31, 0x28	; 40
    11ea:	4f 2e       	mov	r4, r31
    11ec:	55 24       	eor	r5, r5
    11ee:	f0 2d       	mov	r31, r0
    11f0:	14 e0       	ldi	r17, 0x04	; 4
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    11f2:	80 2f       	mov	r24, r16
    11f4:	60 e4       	ldi	r22, 0x40	; 64
    11f6:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    11fa:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    11fc:	a1 e0       	ldi	r26, 0x01	; 1
    11fe:	8a 17       	cp	r24, r26
    1200:	e1 f4       	brne	.+56     	; 0x123a <pb_proto_handle+0x192>
      break;
    PAR_DATA_PORT = *(ptr++);
    1202:	f7 01       	movw	r30, r14
    1204:	80 81       	ld	r24, Z
    1206:	ab e2       	ldi	r26, 0x2B	; 43
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	8c 93       	st	X, r24
    PAR_STATUS_PORT ^= PAR_BUSY;
    120c:	f2 01       	movw	r30, r4
    120e:	80 81       	ld	r24, Z
    1210:	81 27       	eor	r24, r17
    1212:	80 83       	st	Z, r24
    ++uwWriteSize;
    1214:	08 94       	sec
    1216:	c1 1c       	adc	r12, r1
    1218:	d1 1c       	adc	r13, r1
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    121a:	2c 14       	cp	r2, r12
    121c:	3d 04       	cpc	r3, r13
    121e:	41 f0       	breq	.+16     	; 0x1230 <pb_proto_handle+0x188>
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    1220:	08 94       	sec
    1222:	e1 1c       	adc	r14, r1
    1224:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= PAR_BUSY;
    ++uwWriteSize;
    ubPOutWait ^= 1;
    1226:	f1 e0       	ldi	r31, 0x01	; 1
    1228:	0f 27       	eor	r16, r31
    122a:	e3 cf       	rjmp	.-58     	; 0x11f2 <pb_proto_handle+0x14a>
    122c:	cc 24       	eor	r12, r12
    122e:	dd 24       	eor	r13, r13
  }

  // Final wait
  if(ubStatus == PBPROTO_STATUS_OK)
    ubStatus = parWaitForPout(1, PBPROTO_STAGE_LAST_DATA);
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	60 e5       	ldi	r22, 0x50	; 80
    1234:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    1238:	b8 2e       	mov	r11, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    123a:	1a b8       	out	0x0a, r1	; 10
    123c:	98 c1       	rjmp	.+816    	; 0x156e <pb_proto_handle+0x4c6>
    123e:	cc 24       	eor	r12, r12
    1240:	dd 24       	eor	r13, r13
    1242:	95 c1       	rjmp	.+810    	; 0x156e <pb_proto_handle+0x4c6>
{
  uint8_t ubStatus;
  uint16_t uwSize;

  // --- get size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	60 e2       	ldi	r22, 0x20	; 32
    1248:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    124c:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    124e:	21 e0       	ldi	r18, 0x01	; 1
    1250:	82 17       	cp	r24, r18
    1252:	09 f0       	breq	.+2      	; 0x1256 <pb_proto_handle+0x1ae>
    1254:	64 c0       	rjmp	.+200    	; 0x131e <pb_proto_handle+0x276>
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    1256:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~PAR_BUSY;
    1258:	e8 e2       	ldi	r30, 0x28	; 40
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	8b 7f       	andi	r24, 0xFB	; 251
    1260:	80 83       	st	Z, r24

  // --- get size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	60 e3       	ldi	r22, 0x30	; 48
    1266:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    126a:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	b8 16       	cp	r11, r24
    1270:	09 f0       	breq	.+2      	; 0x1274 <pb_proto_handle+0x1cc>
    1272:	55 c0       	rjmp	.+170    	; 0x131e <pb_proto_handle+0x276>
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    1274:	29 b1       	in	r18, 0x09	; 9

  // --- get size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    1276:	90 2f       	mov	r25, r16
    1278:	80 e0       	ldi	r24, 0x00	; 0

  // --- get size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	28 2b       	or	r18, r24
    127e:	39 2b       	or	r19, r25
  PAR_STATUS_PORT ^= PAR_BUSY;
    1280:	e8 e2       	ldi	r30, 0x28	; 40
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	94 e0       	ldi	r25, 0x04	; 4
    1288:	89 27       	eor	r24, r25
    128a:	80 83       	st	Z, r24

  // Check with buffer size
  if(uwSize > DATABUF_SIZE) {
    128c:	a5 e0       	ldi	r26, 0x05	; 5
    128e:	2b 3e       	cpi	r18, 0xEB	; 235
    1290:	3a 07       	cpc	r19, r26
    1292:	38 f0       	brcs	.+14     	; 0x12a2 <pb_proto_handle+0x1fa>
    1294:	0f 2e       	mov	r0, r31
    1296:	f5 e0       	ldi	r31, 0x05	; 5
    1298:	bf 2e       	mov	r11, r31
    129a:	f0 2d       	mov	r31, r0
    129c:	cc 24       	eor	r12, r12
    129e:	dd 24       	eor	r13, r13
    12a0:	66 c1       	rjmp	.+716    	; 0x156e <pb_proto_handle+0x4c6>
  }

  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    12a2:	c9 01       	movw	r24, r18
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	0f 2e       	mov	r0, r31
    12a8:	fe ef       	ldi	r31, 0xFE	; 254
    12aa:	2f 2e       	mov	r2, r31
    12ac:	ff ef       	ldi	r31, 0xFF	; 255
    12ae:	3f 2e       	mov	r3, r31
    12b0:	f0 2d       	mov	r31, r0
    12b2:	28 22       	and	r2, r24
    12b4:	39 22       	and	r3, r25

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    12b6:	21 14       	cp	r2, r1
    12b8:	31 04       	cpc	r3, r1
    12ba:	71 f1       	breq	.+92     	; 0x1318 <pb_proto_handle+0x270>
    12bc:	01 e0       	ldi	r16, 0x01	; 1
    12be:	0f 2e       	mov	r0, r31
    12c0:	f3 e7       	ldi	r31, 0x73	; 115
    12c2:	ef 2e       	mov	r14, r31
    12c4:	f1 e0       	ldi	r31, 0x01	; 1
    12c6:	ff 2e       	mov	r15, r31
    12c8:	f0 2d       	mov	r31, r0
    12ca:	cc 24       	eor	r12, r12
    12cc:	dd 24       	eor	r13, r13
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    PAR_STATUS_PORT ^= PAR_BUSY;
    12ce:	0f 2e       	mov	r0, r31
    12d0:	f8 e2       	ldi	r31, 0x28	; 40
    12d2:	4f 2e       	mov	r4, r31
    12d4:	55 24       	eor	r5, r5
    12d6:	f0 2d       	mov	r31, r0
    12d8:	14 e0       	ldi	r17, 0x04	; 4
  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    12da:	80 2f       	mov	r24, r16
    12dc:	60 e4       	ldi	r22, 0x40	; 64
    12de:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    12e2:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    12e4:	b1 e0       	ldi	r27, 0x01	; 1
    12e6:	8b 17       	cp	r24, r27
    12e8:	09 f0       	breq	.+2      	; 0x12ec <pb_proto_handle+0x244>
    12ea:	41 c1       	rjmp	.+642    	; 0x156e <pb_proto_handle+0x4c6>
      break;
    *(ptr++) = PAR_DATA_PIN;
    12ec:	e9 e2       	ldi	r30, 0x29	; 41
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	d7 01       	movw	r26, r14
    12f4:	8c 93       	st	X, r24
    PAR_STATUS_PORT ^= PAR_BUSY;
    12f6:	f2 01       	movw	r30, r4
    12f8:	80 81       	ld	r24, Z
    12fa:	81 27       	eor	r24, r17
    12fc:	80 83       	st	Z, r24
    ubPOutWait ^= 1;
    uwReadSize++;
    12fe:	08 94       	sec
    1300:	c1 1c       	adc	r12, r1
    1302:	d1 1c       	adc	r13, r1

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    1304:	2c 14       	cp	r2, r12
    1306:	3d 04       	cpc	r3, r13
    1308:	09 f4       	brne	.+2      	; 0x130c <pb_proto_handle+0x264>
    130a:	31 c1       	rjmp	.+610    	; 0x156e <pb_proto_handle+0x4c6>
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    130c:	08 94       	sec
    130e:	e1 1c       	adc	r14, r1
    1310:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= PAR_BUSY;
    ubPOutWait ^= 1;
    1312:	f1 e0       	ldi	r31, 0x01	; 1
    1314:	0f 27       	eor	r16, r31
    1316:	e1 cf       	rjmp	.-62     	; 0x12da <pb_proto_handle+0x232>
    1318:	cc 24       	eor	r12, r12
    131a:	dd 24       	eor	r13, r13
    131c:	28 c1       	rjmp	.+592    	; 0x156e <pb_proto_handle+0x4c6>
    131e:	cc 24       	eor	r12, r12
    1320:	dd 24       	eor	r13, r13
    1322:	25 c1       	rjmp	.+586    	; 0x156e <pb_proto_handle+0x4c6>
      break;
    case PBPROTO_CMD_SEND:
      result = parHandleAmiWrite(&uwParDataSize);
      break;
    case PBPROTO_CMD_RECV_BURST:
      result = parHandleAmiReadBurst(pkt_size, &uwParDataSize);
    1324:	e9 80       	ldd	r14, Y+1	; 0x01
    1326:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t parHandleAmiReadBurst(uint16_t size, uint16_t *ret_size) {
  uint8_t status;

  // --- set packet size hi
  status = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	60 e2       	ldi	r22, 0x20	; 32
    132c:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    1330:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    1332:	21 e0       	ldi	r18, 0x01	; 1
    1334:	82 17       	cp	r24, r18
    1336:	09 f0       	breq	.+2      	; 0x133a <pb_proto_handle+0x292>
    1338:	8b c0       	rjmp	.+278    	; 0x1450 <pb_proto_handle+0x3a8>
    return status;

	PAR_DATA_DDR = 0xFF;
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	8a b9       	out	0x0a, r24	; 10
	PAR_DATA_PORT = size >> 8;
    133e:	fb b8       	out	0x0b, r15	; 11
	PAR_STATUS_PORT &= ~PAR_BUSY;
    1340:	e8 e2       	ldi	r30, 0x28	; 40
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	8b 7f       	andi	r24, 0xFB	; 251
    1348:	80 83       	st	Z, r24

  // --- set packet size lo ---
  status = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	60 e3       	ldi	r22, 0x30	; 48
    134e:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    1352:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	b8 16       	cp	r11, r24
    1358:	09 f0       	breq	.+2      	; 0x135c <pb_proto_handle+0x2b4>
    135a:	7a c0       	rjmp	.+244    	; 0x1450 <pb_proto_handle+0x3a8>
    return status;

	PAR_DATA_PORT = size & 0xFF;
    135c:	eb b8       	out	0x0b, r14	; 11
	PAR_STATUS_PORT ^= PAR_BUSY;
    135e:	e8 e2       	ldi	r30, 0x28	; 40
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	94 e0       	ldi	r25, 0x04	; 4
    1366:	89 27       	eor	r24, r25
    1368:	80 83       	st	Z, r24

  // --- burst ready? ---
  status = parWaitForPout(1, PBPROTO_STAGE_DATA);
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	60 e4       	ldi	r22, 0x40	; 64
    136e:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    1372:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    1374:	a1 e0       	ldi	r26, 0x01	; 1
    1376:	8a 17       	cp	r24, r26
    1378:	09 f0       	breq	.+2      	; 0x137c <pb_proto_handle+0x2d4>
    137a:	6a c0       	rjmp	.+212    	; 0x1450 <pb_proto_handle+0x3a8>
    return status;

  // round to even and convert to words
  uint16_t words = (size + 1) >> 1;
    137c:	c7 01       	movw	r24, r14
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	ac 01       	movw	r20, r24
    1382:	56 95       	lsr	r21
    1384:	47 95       	ror	r20
  uint16_t i;
  uint8_t *ptr = g_pDataBuffer;

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    1386:	f8 94       	cli
	PAR_STATUS_PORT ^= PAR_BUSY;
    1388:	e8 e2       	ldi	r30, 0x28	; 40
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	94 e0       	ldi	r25, 0x04	; 4
    1390:	89 27       	eor	r24, r25
    1392:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    1394:	41 15       	cp	r20, r1
    1396:	51 05       	cpc	r21, r1
    1398:	91 f1       	breq	.+100    	; 0x13fe <pb_proto_handle+0x356>
    139a:	03 e7       	ldi	r16, 0x73	; 115
    139c:	11 e0       	ldi	r17, 0x01	; 1
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13a2:	9f e0       	ldi	r25, 0x0F	; 15
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    13a4:	6b e2       	ldi	r22, 0x2B	; 43
    13a6:	70 e0       	ldi	r23, 0x00	; 0

    // wait REQ == 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    13a8:	e6 e2       	ldi	r30, 0x26	; 38
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	89 2f       	mov	r24, r25
    13ae:	8a 95       	dec	r24
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <pb_proto_handle+0x306>
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= PAR_BUSY;
  for(i=0;i<words;i++) {
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    13b2:	d8 01       	movw	r26, r16
    13b4:	8c 91       	ld	r24, X
    13b6:	db 01       	movw	r26, r22
    13b8:	8c 93       	st	X, r24

    // wait REQ == 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    13ba:	80 81       	ld	r24, Z
    13bc:	83 ff       	sbrs	r24, 3
    13be:	03 c0       	rjmp	.+6      	; 0x13c6 <pb_proto_handle+0x31e>
    13c0:	80 81       	ld	r24, Z
    13c2:	84 fd       	sbrc	r24, 4
    13c4:	fa cf       	rjmp	.-12     	; 0x13ba <pb_proto_handle+0x312>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    13c6:	80 81       	ld	r24, Z
    13c8:	84 ff       	sbrs	r24, 4
    13ca:	1b c0       	rjmp	.+54     	; 0x1402 <pb_proto_handle+0x35a>
    13cc:	89 2f       	mov	r24, r25
    13ce:	8a 95       	dec	r24
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <pb_proto_handle+0x326>
			break;

    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    13d2:	d8 01       	movw	r26, r16
    13d4:	11 96       	adiw	r26, 0x01	; 1
    13d6:	8c 91       	ld	r24, X
    13d8:	db 01       	movw	r26, r22
    13da:	8c 93       	st	X, r24

    // wait REQ == 1
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    13dc:	80 81       	ld	r24, Z
    13de:	83 fd       	sbrc	r24, 3
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <pb_proto_handle+0x340>
    13e2:	80 81       	ld	r24, Z
    13e4:	84 fd       	sbrc	r24, 4
    13e6:	fa cf       	rjmp	.-12     	; 0x13dc <pb_proto_handle+0x334>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    13e8:	80 81       	ld	r24, Z
    13ea:	84 ff       	sbrs	r24, 4
    13ec:	0a c0       	rjmp	.+20     	; 0x1402 <pb_proto_handle+0x35a>

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= PAR_BUSY;
  for(i=0;i<words;i++) {
    13ee:	2f 5f       	subi	r18, 0xFF	; 255
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
    13f2:	24 17       	cp	r18, r20
    13f4:	35 07       	cpc	r19, r21
    13f6:	28 f4       	brcc	.+10     	; 0x1402 <pb_proto_handle+0x35a>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    13f8:	0e 5f       	subi	r16, 0xFE	; 254
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	d7 cf       	rjmp	.-82     	; 0x13ac <pb_proto_handle+0x304>
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & PAR_POUT)
    1402:	e6 e2       	ldi	r30, 0x26	; 38
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    if(!(PAR_STATUS_PIN & PAR_SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= PAR_BUSY;
    1406:	a8 e2       	ldi	r26, 0x28	; 40
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
  }
  recv_burst_exit:
  sei();
    140a:	78 94       	sei
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <pb_proto_handle+0x36c>
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & PAR_POUT)
    if(!(PAR_STATUS_PIN & PAR_SEL))
    140e:	80 81       	ld	r24, Z
    1410:	84 ff       	sbrs	r24, 4
    1412:	fb cf       	rjmp	.-10     	; 0x140a <pb_proto_handle+0x362>
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & PAR_POUT)
    1414:	80 81       	ld	r24, Z
    1416:	83 fd       	sbrc	r24, 3
    1418:	fa cf       	rjmp	.-12     	; 0x140e <pb_proto_handle+0x366>
    if(!(PAR_STATUS_PIN & PAR_SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= PAR_BUSY;
    141a:	8c 91       	ld	r24, X
    141c:	84 60       	ori	r24, 0x04	; 4
    141e:	8c 93       	st	X, r24
    1420:	03 c0       	rjmp	.+6      	; 0x1428 <pb_proto_handle+0x380>

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & PAR_POUT))
    if(!(PAR_STATUS_PIN & PAR_SEL))
    1422:	80 81       	ld	r24, Z
    1424:	84 ff       	sbrs	r24, 4
    1426:	f1 cf       	rjmp	.-30     	; 0x140a <pb_proto_handle+0x362>
			goto recv_burst_exit;

	PAR_STATUS_PORT |= PAR_BUSY;

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & PAR_POUT))
    1428:	80 81       	ld	r24, Z
    142a:	83 ff       	sbrs	r24, 3
    142c:	fa cf       	rjmp	.-12     	; 0x1422 <pb_proto_handle+0x37a>
    if(!(PAR_STATUS_PIN & PAR_SEL))
			goto recv_burst_exit;

  // error?
  if(i<words)
    142e:	24 17       	cp	r18, r20
    1430:	35 07       	cpc	r19, r21
    1432:	20 f4       	brcc	.+8      	; 0x143c <pb_proto_handle+0x394>
    1434:	0f 2e       	mov	r0, r31
    1436:	f2 e4       	ldi	r31, 0x42	; 66
    1438:	bf 2e       	mov	r11, r31
    143a:	f0 2d       	mov	r31, r0
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT &= ~PAR_BUSY;
    143c:	e8 e2       	ldi	r30, 0x28	; 40
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8b 7f       	andi	r24, 0xFB	; 251
    1444:	80 83       	st	Z, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    1446:	1a b8       	out	0x0a, r1	; 10

  *ret_size = i << 1;
    1448:	69 01       	movw	r12, r18
    144a:	cc 0c       	add	r12, r12
    144c:	dd 1c       	adc	r13, r13
    144e:	8f c0       	rjmp	.+286    	; 0x156e <pb_proto_handle+0x4c6>
    1450:	cc 24       	eor	r12, r12
    1452:	dd 24       	eor	r13, r13
    1454:	8c c0       	rjmp	.+280    	; 0x156e <pb_proto_handle+0x4c6>
{
  uint16_t uwSize;
  uint8_t ubStatus;

  // --- packet size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	60 e2       	ldi	r22, 0x20	; 32
    145a:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    145e:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    1460:	b1 e0       	ldi	r27, 0x01	; 1
    1462:	8b 17       	cp	r24, r27
    1464:	09 f0       	breq	.+2      	; 0x1468 <pb_proto_handle+0x3c0>
    1466:	81 c0       	rjmp	.+258    	; 0x156a <pb_proto_handle+0x4c2>
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    1468:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~PAR_BUSY;
    146a:	e8 e2       	ldi	r30, 0x28	; 40
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8b 7f       	andi	r24, 0xFB	; 251
    1472:	80 83       	st	Z, r24

  // --- packet size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	60 e3       	ldi	r22, 0x30	; 48
    1478:	0e 94 29 08 	call	0x1052	; 0x1052 <parWaitForPout>
    147c:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    147e:	e1 e0       	ldi	r30, 0x01	; 1
    1480:	8e 17       	cp	r24, r30
    1482:	09 f0       	breq	.+2      	; 0x1486 <pb_proto_handle+0x3de>
    1484:	72 c0       	rjmp	.+228    	; 0x156a <pb_proto_handle+0x4c2>
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    1486:	29 b1       	in	r18, 0x09	; 9
  // --- packet size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    1488:	90 2f       	mov	r25, r16
    148a:	80 e0       	ldi	r24, 0x00	; 0
  // --- packet size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	82 2b       	or	r24, r18
    1490:	93 2b       	or	r25, r19
  // delay SET_RAK until burst begin...

  // check size
  if(uwSize > DATABUF_SIZE)
    1492:	f5 e0       	ldi	r31, 0x05	; 5
    1494:	8b 3e       	cpi	r24, 0xEB	; 235
    1496:	9f 07       	cpc	r25, r31
    1498:	38 f0       	brcs	.+14     	; 0x14a8 <pb_proto_handle+0x400>
    149a:	0f 2e       	mov	r0, r31
    149c:	f5 e0       	ldi	r31, 0x05	; 5
    149e:	bf 2e       	mov	r11, r31
    14a0:	f0 2d       	mov	r31, r0
    14a2:	cc 24       	eor	r12, r12
    14a4:	dd 24       	eor	r13, r13
    14a6:	63 c0       	rjmp	.+198    	; 0x156e <pb_proto_handle+0x4c6>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;

  // round to even and convert to words
  uint16_t words = (uwSize +1) >> 1;
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	bc 01       	movw	r22, r24
    14ac:	76 95       	lsr	r23
    14ae:	67 95       	ror	r22
  uint8_t result = PBPROTO_STATUS_OK;
  uint8_t *ptr = g_pDataBuffer;

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    14b0:	f8 94       	cli
  PAR_STATUS_PORT ^= PAR_BUSY; // trigger start of burst
    14b2:	e8 e2       	ldi	r30, 0x28	; 40
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	94 e0       	ldi	r25, 0x04	; 4
    14ba:	89 27       	eor	r24, r25
    14bc:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    14be:	61 15       	cp	r22, r1
    14c0:	71 05       	cpc	r23, r1
    14c2:	29 f4       	brne	.+10     	; 0x14ce <pb_proto_handle+0x426>
    14c4:	2d c0       	rjmp	.+90     	; 0x1520 <pb_proto_handle+0x478>
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL))
		if(!(PAR_STATUS_PIN & PAR_SEL))
    14c6:	80 81       	ld	r24, Z
    14c8:	84 fd       	sbrc	r24, 4
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <pb_proto_handle+0x436>
    14cc:	0e c0       	rjmp	.+28     	; 0x14ea <pb_proto_handle+0x442>
    14ce:	03 e7       	ldi	r16, 0x73	; 115
    14d0:	11 e0       	ldi	r17, 0x01	; 1
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= PAR_BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL))
    14d6:	e6 e2       	ldi	r30, 0x26	; 38
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    14da:	49 e2       	ldi	r20, 0x29	; 41
    14dc:	50 e0       	ldi	r21, 0x00	; 0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= PAR_BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL))
    14de:	80 81       	ld	r24, Z
    14e0:	83 fd       	sbrc	r24, 3
    14e2:	03 c0       	rjmp	.+6      	; 0x14ea <pb_proto_handle+0x442>
    14e4:	80 81       	ld	r24, Z
    14e6:	84 fd       	sbrc	r24, 4
    14e8:	ee cf       	rjmp	.-36     	; 0x14c6 <pb_proto_handle+0x41e>
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    14ea:	da 01       	movw	r26, r20
    14ec:	8c 91       	ld	r24, X
    14ee:	d8 01       	movw	r26, r16
    14f0:	8c 93       	st	X, r24
    14f2:	03 c0       	rjmp	.+6      	; 0x14fa <pb_proto_handle+0x452>

    // wait REQ == 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL))
		if(!(PAR_STATUS_PIN & PAR_SEL))
    14f4:	80 81       	ld	r24, Z
    14f6:	84 ff       	sbrs	r24, 4
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <pb_proto_handle+0x45e>
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;

    // wait REQ == 0
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL))
    14fa:	80 81       	ld	r24, Z
    14fc:	83 ff       	sbrs	r24, 3
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <pb_proto_handle+0x45e>
    1500:	80 81       	ld	r24, Z
    1502:	84 fd       	sbrc	r24, 4
    1504:	f7 cf       	rjmp	.-18     	; 0x14f4 <pb_proto_handle+0x44c>
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    1506:	da 01       	movw	r26, r20
    1508:	8c 91       	ld	r24, X
    150a:	d8 01       	movw	r26, r16
    150c:	11 96       	adiw	r26, 0x01	; 1
    150e:	8c 93       	st	X, r24

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= PAR_BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    1510:	2f 5f       	subi	r18, 0xFF	; 255
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	26 17       	cp	r18, r22
    1516:	37 07       	cpc	r19, r23
    1518:	18 f4       	brcc	.+6      	; 0x1520 <pb_proto_handle+0x478>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    151a:	0e 5f       	subi	r16, 0xFE	; 254
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	df cf       	rjmp	.-66     	; 0x14de <pb_proto_handle+0x436>
    while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL))
		if(!(PAR_STATUS_PIN & PAR_SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
  }
  sei();
    1520:	78 94       	sei
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    1522:	e6 e2       	ldi	r30, 0x26	; 38
    1524:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & PAR_SEL))
			continue;

		PAR_STATUS_PORT ^= PAR_BUSY;
    1526:	a8 e2       	ldi	r26, 0x28	; 40
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	94 e0       	ldi	r25, 0x04	; 4
  sei();
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    152c:	80 81       	ld	r24, Z
    152e:	83 fd       	sbrc	r24, 3
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <pb_proto_handle+0x490>
    1532:	80 81       	ld	r24, Z
    1534:	84 fd       	sbrc	r24, 4
    1536:	fa cf       	rjmp	.-12     	; 0x152c <pb_proto_handle+0x484>
		if(!(PAR_STATUS_PIN & PAR_SEL))
    1538:	80 81       	ld	r24, Z
    153a:	84 ff       	sbrs	r24, 4
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <pb_proto_handle+0x4a8>
			continue;

		PAR_STATUS_PORT ^= PAR_BUSY;
    153e:	8c 91       	ld	r24, X
    1540:	89 27       	eor	r24, r25
    1542:	8c 93       	st	X, r24
		// Wait for POUT == 0
		while((PAR_STATUS_PIN & PAR_POUT) && (PAR_STATUS_PIN & PAR_SEL));
    1544:	80 81       	ld	r24, Z
    1546:	83 ff       	sbrs	r24, 3
    1548:	03 c0       	rjmp	.+6      	; 0x1550 <pb_proto_handle+0x4a8>
    154a:	80 81       	ld	r24, Z
    154c:	84 fd       	sbrc	r24, 4
    154e:	fa cf       	rjmp	.-12     	; 0x1544 <pb_proto_handle+0x49c>
  } while(!(PAR_STATUS_PIN & PAR_SEL));
    1550:	80 81       	ld	r24, Z
    1552:	84 ff       	sbrs	r24, 4
    1554:	eb cf       	rjmp	.-42     	; 0x152c <pb_proto_handle+0x484>
  // error?
  if(i<words)
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT ^= PAR_BUSY;
    1556:	e8 e2       	ldi	r30, 0x28	; 40
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	94 e0       	ldi	r25, 0x04	; 4
    155e:	89 27       	eor	r24, r25
    1560:	80 83       	st	Z, r24

  *ret_size = i << 1;
    1562:	6b 01       	movw	r12, r22
    1564:	cc 0c       	add	r12, r12
    1566:	dd 1c       	adc	r13, r13
    1568:	02 c0       	rjmp	.+4      	; 0x156e <pb_proto_handle+0x4c6>
    156a:	cc 24       	eor	r12, r12
    156c:	dd 24       	eor	r13, r13
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t parWaitForSel(uint8_t select_state, uint8_t state_flag) {
  g_uwTimer100us = 0;
    156e:	10 92 47 01 	sts	0x0147, r1
    1572:	10 92 46 01 	sts	0x0146, r1
  while(g_uwTimer100us < pb_proto_timeout) {
    1576:	20 91 3a 01 	lds	r18, 0x013A
    157a:	30 91 3b 01 	lds	r19, 0x013B
    if(((PAR_STATUS_PIN & PAR_SEL) >> PAR_SEL_PIN) == select_state)
    157e:	e6 e2       	ldi	r30, 0x26	; 38
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	03 c0       	rjmp	.+6      	; 0x158a <pb_proto_handle+0x4e2>
    1584:	80 81       	ld	r24, Z
    1586:	84 ff       	sbrs	r24, 4
    1588:	07 c0       	rjmp	.+14     	; 0x1598 <pb_proto_handle+0x4f0>
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t parWaitForSel(uint8_t select_state, uint8_t state_flag) {
  g_uwTimer100us = 0;
  while(g_uwTimer100us < pb_proto_timeout) {
    158a:	80 91 46 01 	lds	r24, 0x0146
    158e:	90 91 47 01 	lds	r25, 0x0147
    1592:	82 17       	cp	r24, r18
    1594:	93 07       	cpc	r25, r19
    1596:	b0 f3       	brcs	.-20     	; 0x1584 <pb_proto_handle+0x4dc>

  // wait for SEL == 0
  parWaitForSel(0, PBPROTO_STAGE_END_SELECT);

  // reset BUSY = 0
  PAR_STATUS_PORT &= ~PAR_BUSY;
    1598:	e8 e2       	ldi	r30, 0x28	; 40
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8b 7f       	andi	r24, 0xFB	; 251
    15a0:	80 83       	st	Z, r24
    15a2:	e0 90 84 00 	lds	r14, 0x0084
    15a6:	f0 90 85 00 	lds	r15, 0x0085
  // Read timer - assuming transfer will be much shorter than 100us
  // TODO(KaiN#7): is it really that short?
  uint16_t uwTimeDelta = timerGetState();

  // Amiga sent data - process it
  if(result == PBPROTO_STATUS_OK) {
    15aa:	b1 e0       	ldi	r27, 0x01	; 1
    15ac:	bb 16       	cp	r11, r27
    15ae:	59 f4       	brne	.+22     	; 0x15c6 <pb_proto_handle+0x51e>
    if((cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST))
    15b0:	e1 e1       	ldi	r30, 0x11	; 17
    15b2:	ae 16       	cp	r10, r30
    15b4:	21 f0       	breq	.+8      	; 0x15be <pb_proto_handle+0x516>
    15b6:	f3 e3       	ldi	r31, 0x33	; 51
    15b8:	af 16       	cp	r10, r31
    15ba:	09 f0       	breq	.+2      	; 0x15be <pb_proto_handle+0x516>
    15bc:	7a c0       	rjmp	.+244    	; 0x16b2 <pb_proto_handle+0x60a>
      result = bridgeProcessPacket(uwParDataSize);
    15be:	c6 01       	movw	r24, r12
    15c0:	0e 94 df 03 	call	0x7be	; 0x7be <bridgeProcessPacket>
    15c4:	b8 2e       	mov	r11, r24
  }

  // fill in stats
  ps->cmd = cmd;
    15c6:	03 e6       	ldi	r16, 0x63	; 99
    15c8:	11 e0       	ldi	r17, 0x01	; 1
    15ca:	f8 01       	movw	r30, r16
    15cc:	a1 92       	st	Z+, r10
  ps->status = result;
    15ce:	b0 82       	st	Z, r11
  ps->size = uwParDataSize;
    15d0:	d8 01       	movw	r26, r16
    15d2:	15 96       	adiw	r26, 0x05	; 5
    15d4:	dc 92       	st	X, r13
    15d6:	ce 92       	st	-X, r12
    15d8:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = uwTimeDelta;
    15da:	17 96       	adiw	r26, 0x07	; 7
    15dc:	fc 92       	st	X, r15
    15de:	ee 92       	st	-X, r14
    15e0:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timerCalculateKbps(uwParDataSize, uwTimeDelta);
    15e2:	c6 01       	movw	r24, r12
    15e4:	b7 01       	movw	r22, r14
    15e6:	0e 94 b7 01 	call	0x36e	; 0x36e <timerCalculateKbps>
    15ea:	f8 01       	movw	r30, r16
    15ec:	91 87       	std	Z+9, r25	; 0x09
    15ee:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    15f0:	d8 01       	movw	r26, r16
    15f2:	1c 96       	adiw	r26, 0x0c	; 12
    15f4:	6d 92       	st	X+, r6
    15f6:	7d 92       	st	X+, r7
    15f8:	8d 92       	st	X+, r8
    15fa:	9c 92       	st	X, r9
    15fc:	1f 97       	sbiw	r26, 0x0f	; 15
  ps->is_send = (cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST);
    15fe:	b1 e1       	ldi	r27, 0x11	; 17
    1600:	ab 16       	cp	r10, r27
    1602:	31 f0       	breq	.+12     	; 0x1610 <pb_proto_handle+0x568>
    1604:	e3 e3       	ldi	r30, 0x33	; 51
    1606:	ae 16       	cp	r10, r30
    1608:	19 f0       	breq	.+6      	; 0x1610 <pb_proto_handle+0x568>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <pb_proto_handle+0x56c>
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	e5 e6       	ldi	r30, 0x65	; 101
    1616:	f1 e0       	ldi	r31, 0x01	; 1
    1618:	81 93       	st	Z+, r24
  ps->stats_id = ps->is_send ? STATS_ID_PB_TX : STATS_ID_PB_RX;
    161a:	10 82       	st	Z, r1
    161c:	88 23       	and	r24, r24
    161e:	11 f0       	breq	.+4      	; 0x1624 <pb_proto_handle+0x57c>
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 83       	st	Z, r24
  ps->recv_delta = ps->is_send ? 0 : (uint16_t)(ps->ts - trigger_ts);
    1624:	80 91 65 01 	lds	r24, 0x0165
    1628:	88 23       	and	r24, r24
    162a:	19 f0       	breq	.+6      	; 0x1632 <pb_proto_handle+0x58a>
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	0a c0       	rjmp	.+20     	; 0x1646 <pb_proto_handle+0x59e>
    1632:	20 91 6f 01 	lds	r18, 0x016F
    1636:	30 91 70 01 	lds	r19, 0x0170
    163a:	80 91 40 01 	lds	r24, 0x0140
    163e:	90 91 41 01 	lds	r25, 0x0141
    1642:	28 1b       	sub	r18, r24
    1644:	39 0b       	sbc	r19, r25
    1646:	30 93 6e 01 	sts	0x016E, r19
    164a:	20 93 6d 01 	sts	0x016D, r18

	if(result == PBPROTO_STATUS_OK)
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	bf 16       	cp	r11, r31
    1652:	59 f4       	brne	.+22     	; 0x166a <pb_proto_handle+0x5c2>
		stats_update_ok(ps->stats_id, ps->size, ps->rate);
    1654:	e6 e6       	ldi	r30, 0x66	; 102
    1656:	f1 e0       	ldi	r31, 0x01	; 1
    1658:	61 81       	ldd	r22, Z+1	; 0x01
    165a:	72 81       	ldd	r23, Z+2	; 0x02
    165c:	45 81       	ldd	r20, Z+5	; 0x05
    165e:	56 81       	ldd	r21, Z+6	; 0x06
    1660:	80 81       	ld	r24, Z
    1662:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <stats_update_ok>
    1666:	21 e0       	ldi	r18, 0x01	; 1
    1668:	0e c0       	rjmp	.+28     	; 0x1686 <pb_proto_handle+0x5de>
    166a:	e0 91 66 01 	lds	r30, 0x0166
    166e:	8c e0       	ldi	r24, 0x0C	; 12
    1670:	e8 9f       	mul	r30, r24
    1672:	f0 01       	movw	r30, r0
    1674:	11 24       	eor	r1, r1
    1676:	e3 5a       	subi	r30, 0xA3	; 163
    1678:	f8 4f       	sbci	r31, 0xF8	; 248
	else
    stats_get(ps->stats_id)->err++;
    167a:	86 81       	ldd	r24, Z+6	; 0x06
    167c:	97 81       	ldd	r25, Z+7	; 0x07
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	97 83       	std	Z+7, r25	; 0x07
    1682:	86 83       	std	Z+6, r24	; 0x06
    1684:	2b 2d       	mov	r18, r11

  return result;
}
    1686:	82 2f       	mov	r24, r18
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	ff 90       	pop	r15
    1696:	ef 90       	pop	r14
    1698:	df 90       	pop	r13
    169a:	cf 90       	pop	r12
    169c:	bf 90       	pop	r11
    169e:	af 90       	pop	r10
    16a0:	9f 90       	pop	r9
    16a2:	8f 90       	pop	r8
    16a4:	7f 90       	pop	r7
    16a6:	6f 90       	pop	r6
    16a8:	5f 90       	pop	r5
    16aa:	4f 90       	pop	r4
    16ac:	3f 90       	pop	r3
    16ae:	2f 90       	pop	r2
    16b0:	08 95       	ret
    if((cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST))
      result = bridgeProcessPacket(uwParDataSize);
  }

  // fill in stats
  ps->cmd = cmd;
    16b2:	03 e6       	ldi	r16, 0x63	; 99
    16b4:	11 e0       	ldi	r17, 0x01	; 1
    16b6:	f8 01       	movw	r30, r16
    16b8:	a1 92       	st	Z+, r10
  ps->status = result;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	80 83       	st	Z, r24
  ps->size = uwParDataSize;
    16be:	d8 01       	movw	r26, r16
    16c0:	15 96       	adiw	r26, 0x05	; 5
    16c2:	dc 92       	st	X, r13
    16c4:	ce 92       	st	-X, r12
    16c6:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = uwTimeDelta;
    16c8:	17 96       	adiw	r26, 0x07	; 7
    16ca:	fc 92       	st	X, r15
    16cc:	ee 92       	st	-X, r14
    16ce:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timerCalculateKbps(uwParDataSize, uwTimeDelta);
    16d0:	c6 01       	movw	r24, r12
    16d2:	b7 01       	movw	r22, r14
    16d4:	0e 94 b7 01 	call	0x36e	; 0x36e <timerCalculateKbps>
    16d8:	f8 01       	movw	r30, r16
    16da:	91 87       	std	Z+9, r25	; 0x09
    16dc:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    16de:	d8 01       	movw	r26, r16
    16e0:	1c 96       	adiw	r26, 0x0c	; 12
    16e2:	6d 92       	st	X+, r6
    16e4:	7d 92       	st	X+, r7
    16e6:	8d 92       	st	X+, r8
    16e8:	9c 92       	st	X, r9
    16ea:	1f 97       	sbiw	r26, 0x0f	; 15
    16ec:	8e cf       	rjmp	.-228    	; 0x160a <pb_proto_handle+0x562>

000016ee <parRequestAmiRead>:

/**
 * Sends information to Amiga that data is ready.
 * Done as 1ms pulse on ACK line.
 */
void parRequestAmiRead(void) {
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
  PAR_STATUS_PORT &= ~PAR_NACK;
    16f2:	08 e2       	ldi	r16, 0x28	; 40
    16f4:	10 e0       	ldi	r17, 0x00	; 0
    16f6:	f8 01       	movw	r30, r16
    16f8:	80 81       	ld	r24, Z
    16fa:	8d 7f       	andi	r24, 0xFD	; 253
    16fc:	80 83       	st	Z, r24
  timerDelay100us(20);
    16fe:	84 e1       	ldi	r24, 0x14	; 20
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 aa 01 	call	0x354	; 0x354 <timerDelay100us>
  PAR_STATUS_PORT |= PAR_NACK;
    1706:	f8 01       	movw	r30, r16
    1708:	80 81       	ld	r24, Z
    170a:	82 60       	ori	r24, 0x02	; 2
    170c:	80 83       	st	Z, r24
  trigger_ts = g_uwTimeStamp;
    170e:	80 91 48 01 	lds	r24, 0x0148
    1712:	90 91 49 01 	lds	r25, 0x0149
    1716:	a0 91 4a 01 	lds	r26, 0x014A
    171a:	b0 91 4b 01 	lds	r27, 0x014B
    171e:	80 93 40 01 	sts	0x0140, r24
    1722:	90 93 41 01 	sts	0x0141, r25
    1726:	a0 93 42 01 	sts	0x0142, r26
    172a:	b0 93 43 01 	sts	0x0143, r27
}
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	08 95       	ret

00001734 <pio_util_get_init_flags>:

uint8_t pio_util_get_init_flags()
{
  uint8_t flags = PIO_INIT_BROAD_CAST;

  if(g_sConfig.flow_ctl) {
    1734:	80 91 55 01 	lds	r24, 0x0155
    1738:	88 23       	and	r24, r24
    173a:	11 f0       	breq	.+4      	; 0x1740 <pio_util_get_init_flags+0xc>
    173c:	9c e0       	ldi	r25, 0x0C	; 12
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <pio_util_get_init_flags+0xe>
    1740:	94 e0       	ldi	r25, 0x04	; 4
    flags |= PIO_INIT_FLOW_CONTROL;
  }
  if(g_sConfig.full_duplex) {
    1742:	80 91 56 01 	lds	r24, 0x0156
    1746:	81 11       	cpse	r24, r1
    flags |= PIO_INIT_FULL_DUPLEX;
    1748:	91 60       	ori	r25, 0x01	; 1
  }

  return flags;
}
    174a:	89 2f       	mov	r24, r25
    174c:	08 95       	ret

0000174e <pio_util_handle_udp_test>:

  return 1;
}

uint8_t pio_util_handle_udp_test(uint16_t size)
{
    174e:	8f 92       	push	r8
    1750:	9f 92       	push	r9
    1752:	af 92       	push	r10
    1754:	bf 92       	push	r11
    1756:	cf 92       	push	r12
    1758:	df 92       	push	r13
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
  uint8_t *ip_buf = g_pDataBuffer + ETH_HDR_SIZE;
  uint8_t *udp_buf = ip_buf + ip_get_hdr_length(ip_buf);
    1766:	01 e8       	ldi	r16, 0x81	; 129
    1768:	11 e0       	ldi	r17, 0x01	; 1
    176a:	f8 01       	movw	r30, r16
    176c:	80 81       	ld	r24, Z
    176e:	88 0f       	add	r24, r24
    1770:	88 0f       	add	r24, r24
    1772:	8c 73       	andi	r24, 0x3C	; 60
    1774:	58 01       	movw	r10, r16
    1776:	a8 0e       	add	r10, r24
    1778:	b1 1c       	adc	r11, r1
#define UDP_CHECKSUM_OFF  6
#define UDP_DATA_OFF      8

inline const uint8_t *udp_get_data_ptr(const uint8_t *udp_buf) { return udp_buf + UDP_DATA_OFF; }
inline uint16_t  udp_get_src_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_SRC_PORT_OFF); }
inline uint16_t  udp_get_tgt_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_TGT_PORT_OFF); }
    177a:	c5 01       	movw	r24, r10
    177c:	02 96       	adiw	r24, 0x02	; 2
    177e:	0e 94 54 06 	call	0xca8	; 0xca8 <net_get_word>
    1782:	ec 01       	movw	r28, r24
  const uint8_t *dst_ip = ip_get_tgt_ip(ip_buf);
  uint16_t dst_port = udp_get_tgt_port(udp_buf);
  const uint8_t *data_ptr = udp_get_data_ptr(udp_buf);

  // for us?
  if(net_compare_ip(g_sConfig.test_ip, dst_ip) && (dst_port == g_sConfig.test_port)) {
    1784:	00 5f       	subi	r16, 0xF0	; 240
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	8b e5       	ldi	r24, 0x5B	; 91
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	b8 01       	movw	r22, r16
    178e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <net_compare_ip>
    1792:	88 23       	and	r24, r24
    1794:	d9 f1       	breq	.+118    	; 0x180c <pio_util_handle_udp_test+0xbe>
    1796:	80 90 5f 01 	lds	r8, 0x015F
    179a:	90 90 60 01 	lds	r9, 0x0160
    179e:	8c 16       	cp	r8, r28
    17a0:	9d 06       	cpc	r9, r29
    17a2:	a1 f5       	brne	.+104    	; 0x180c <pio_util_handle_udp_test+0xbe>
    // send UDP packet back again
    // flip IP/UDP
    const uint8_t *src_ip = ip_get_src_ip(ip_buf);
    net_copy_ip(src_ip, ip_buf + 16); // set tgt ip
    17a4:	0d e8       	ldi	r16, 0x8D	; 141
    17a6:	11 e0       	ldi	r17, 0x01	; 1
    17a8:	b8 01       	movw	r22, r16
    17aa:	6c 5f       	subi	r22, 0xFC	; 252
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	c8 01       	movw	r24, r16
    17b0:	0e 94 43 06 	call	0xc86	; 0xc86 <net_copy_ip>
    net_copy_ip(g_sConfig.test_ip, ip_buf + 12); // set src ip
    17b4:	0f 2e       	mov	r0, r31
    17b6:	fb e5       	ldi	r31, 0x5B	; 91
    17b8:	cf 2e       	mov	r12, r31
    17ba:	f1 e0       	ldi	r31, 0x01	; 1
    17bc:	df 2e       	mov	r13, r31
    17be:	f0 2d       	mov	r31, r0
    17c0:	c6 01       	movw	r24, r12
    17c2:	b8 01       	movw	r22, r16
    17c4:	0e 94 43 06 	call	0xc86	; 0xc86 <net_copy_ip>
#define UDP_LENGTH_OFF    4
#define UDP_CHECKSUM_OFF  6
#define UDP_DATA_OFF      8

inline const uint8_t *udp_get_data_ptr(const uint8_t *udp_buf) { return udp_buf + UDP_DATA_OFF; }
inline uint16_t  udp_get_src_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_SRC_PORT_OFF); }
    17c8:	c5 01       	movw	r24, r10
    17ca:	0e 94 54 06 	call	0xca8	; 0xca8 <net_get_word>
    17ce:	7c 01       	movw	r14, r24
    uint16_t src_port = udp_get_src_port(udp_buf);
    net_put_word(udp_buf + UDP_SRC_PORT_OFF, dst_port);
    17d0:	c5 01       	movw	r24, r10
    17d2:	b4 01       	movw	r22, r8
    17d4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <net_put_word>
    net_put_word(udp_buf + UDP_TGT_PORT_OFF, src_port);
    17d8:	c5 01       	movw	r24, r10
    17da:	02 96       	adiw	r24, 0x02	; 2
    17dc:	b7 01       	movw	r22, r14
    17de:	0e 94 5e 06 	call	0xcbc	; 0xcbc <net_put_word>

    // flip eth
    net_copy_mac(g_pDataBuffer + ETH_OFF_SRC_MAC, g_pDataBuffer + ETH_OFF_TGT_MAC);
    17e2:	0f 2e       	mov	r0, r31
    17e4:	fc ee       	ldi	r31, 0xEC	; 236
    17e6:	ef 2e       	mov	r14, r31
    17e8:	ff ef       	ldi	r31, 0xFF	; 255
    17ea:	ff 2e       	mov	r15, r31
    17ec:	f0 2d       	mov	r31, r0
    17ee:	e0 0e       	add	r14, r16
    17f0:	f1 1e       	adc	r15, r17
    17f2:	0a 51       	subi	r16, 0x1A	; 26
    17f4:	10 40       	sbci	r17, 0x00	; 0
    17f6:	c7 01       	movw	r24, r14
    17f8:	b8 01       	movw	r22, r16
    17fa:	0e 94 34 06 	call	0xc68	; 0xc68 <net_copy_mac>
    net_copy_mac(g_sConfig.mac_addr, g_pDataBuffer + ETH_OFF_SRC_MAC);
    17fe:	c6 01       	movw	r24, r12
    1800:	0c 97       	sbiw	r24, 0x0c	; 12
    1802:	b7 01       	movw	r22, r14
    1804:	0e 94 34 06 	call	0xc68	; 0xc68 <net_copy_mac>
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	01 c0       	rjmp	.+2      	; 0x180e <pio_util_handle_udp_test+0xc0>

    return 1;
    180c:	80 e0       	ldi	r24, 0x00	; 0
 } else {
 	return 0;
 }
}
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	df 90       	pop	r13
    181c:	cf 90       	pop	r12
    181e:	bf 90       	pop	r11
    1820:	af 90       	pop	r10
    1822:	9f 90       	pop	r9
    1824:	8f 90       	pop	r8
    1826:	08 95       	ret

00001828 <pio_util_send_packet>:

  return ubRecvResult;
}

uint8_t pio_util_send_packet(uint16_t size)
{
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	ec 01       	movw	r28, r24
extern void timerDelay100us(uint16_t uwCount);

// ----- hardware timer -----

// 16 bit hw timer with 4us resolution
inline void timerReset(void) { TCNT1 = 0; }
    1834:	04 e8       	ldi	r16, 0x84	; 132
    1836:	10 e0       	ldi	r17, 0x00	; 0
    1838:	f8 01       	movw	r30, r16
    183a:	11 82       	std	Z+1, r1	; 0x01
    183c:	10 82       	st	Z, r1
  timerReset();
  uint8_t result = enc28j60_send(g_pDataBuffer, size);
    183e:	83 e7       	ldi	r24, 0x73	; 115
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	be 01       	movw	r22, r28
    1844:	0e 94 cc 0c 	call	0x1998	; 0x1998 <enc28j60_send>
    1848:	f8 2e       	mov	r15, r24
inline uint16_t  timerGetState(void) { return TCNT1; }
    184a:	f8 01       	movw	r30, r16
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
  // NOTE(KaiN#7): Is it really that short?
  uint16_t delta = timerGetState();

  uint16_t rate = timerCalculateKbps(size, delta);
    1850:	ce 01       	movw	r24, r28
    1852:	0e 94 b7 01 	call	0x36e	; 0x36e <timerCalculateKbps>
    1856:	ac 01       	movw	r20, r24
  if(result == PIO_OK) {
    1858:	ff 20       	and	r15, r15
    185a:	29 f4       	brne	.+10     	; 0x1866 <pio_util_send_packet+0x3e>
    stats_update_ok(STATS_ID_PIO_TX, size, rate);
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	be 01       	movw	r22, r28
    1860:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <stats_update_ok>
    1864:	07 c0       	rjmp	.+14     	; 0x1874 <pio_util_send_packet+0x4c>
  }
  else {
    stats_get(STATS_ID_PIO_TX)->err++;
    1866:	e7 e8       	ldi	r30, 0x87	; 135
    1868:	f7 e0       	ldi	r31, 0x07	; 7
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
  }

  return result;
}
    1874:	8f 2d       	mov	r24, r15
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	08 95       	ret

00001882 <pio_util_handle_arp>:
/**
 * Handles ARP request.
 * @param uwPacketSize Received ethernet frame size.
 */
uint8_t pio_util_handle_arp(uint16_t uwPacketSize)
{
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	ec 01       	movw	r28, r24
    1890:	8f e7       	ldi	r24, 0x7F	; 127
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	0e 94 54 06 	call	0xca8	; 0xca8 <net_get_word>
	// Sanity check
  uint16_t uwEtherType = eth_get_pkt_type(g_pDataBuffer);
  if(uwEtherType != ETH_TYPE_ARP) {
    1898:	86 50       	subi	r24, 0x06	; 6
    189a:	98 40       	sbci	r25, 0x08	; 8
    189c:	d9 f5       	brne	.+118    	; 0x1914 <pio_util_handle_arp+0x92>
    return 0;
  }
  if(uwPacketSize <= ETH_HDR_SIZE) {
    189e:	cf 30       	cpi	r28, 0x0F	; 15
    18a0:	d1 05       	cpc	r29, r1
    18a2:	c0 f1       	brcs	.+112    	; 0x1914 <pio_util_handle_arp+0x92>
  // Payload buffer pointer & size
  uint8_t *pPayloadBuffer = g_pDataBuffer + ETH_HDR_SIZE;
  uint16_t uwPayloadSize = uwPacketSize - ETH_HDR_SIZE;

  // Is it an ARP request?
  if(
    18a4:	be 01       	movw	r22, r28
    18a6:	6e 50       	subi	r22, 0x0E	; 14
    18a8:	70 40       	sbci	r23, 0x00	; 0
    18aa:	81 e8       	ldi	r24, 0x81	; 129
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	0e 94 0b 06 	call	0xc16	; 0xc16 <arp_is_ipv4>
    18b2:	88 23       	and	r24, r24
    18b4:	89 f1       	breq	.+98     	; 0x1918 <pio_util_handle_arp+0x96>

extern uint8_t arp_is_ipv4(const uint8_t *buf, uint16_t len);
extern void arp_make_reply(uint8_t *buf, const uint8_t *my_mac, const uint8_t *my_ip);

/* getter */
inline uint16_t arp_get_op(const uint8_t *buf) { return net_get_word(buf + ARP_OFF_OP); }
    18b6:	87 e8       	ldi	r24, 0x87	; 135
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	0e 94 54 06 	call	0xca8	; 0xca8 <net_get_word>
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	59 f5       	brne	.+86     	; 0x1918 <pio_util_handle_arp+0x96>
		arp_is_ipv4(pPayloadBuffer, uwPayloadSize) &&
		arp_get_op(pPayloadBuffer) == ARP_REQUEST
	) {
    // Is plipbox being searched?
    const uint8_t *pTargetIp = arp_get_tgt_ip(pPayloadBuffer);
    if(net_compare_ip(pTargetIp, g_sConfig.test_ip)) {
    18c2:	89 e9       	ldi	r24, 0x99	; 153
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	6b e5       	ldi	r22, 0x5B	; 91
    18c8:	71 e0       	ldi	r23, 0x01	; 1
    18ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <net_compare_ip>
    18ce:	88 23       	and	r24, r24
    18d0:	19 f1       	breq	.+70     	; 0x1918 <pio_util_handle_arp+0x96>
      arp_make_reply(pPayloadBuffer, g_sConfig.mac_addr, g_sConfig.test_ip);
    18d2:	01 e8       	ldi	r16, 0x81	; 129
    18d4:	11 e0       	ldi	r17, 0x01	; 1
    18d6:	0f 2e       	mov	r0, r31
    18d8:	ff e4       	ldi	r31, 0x4F	; 79
    18da:	ef 2e       	mov	r14, r31
    18dc:	f1 e0       	ldi	r31, 0x01	; 1
    18de:	ff 2e       	mov	r15, r31
    18e0:	f0 2d       	mov	r31, r0
    18e2:	a7 01       	movw	r20, r14
    18e4:	44 5f       	subi	r20, 0xF4	; 244
    18e6:	5f 4f       	sbci	r21, 0xFF	; 255
    18e8:	c8 01       	movw	r24, r16
    18ea:	b7 01       	movw	r22, r14
    18ec:	0e 94 cd 05 	call	0xb9a	; 0xb9a <arp_make_reply>
	net_put_word(pkt + ETH_OFF_TYPE, type);
}

inline void eth_make_bcast(uint8_t *pkt, const uint8_t *my_mac)
{
	net_copy_mac(net_bcast_mac, pkt + ETH_OFF_TGT_MAC);
    18f0:	0e 50       	subi	r16, 0x0E	; 14
    18f2:	10 40       	sbci	r17, 0x00	; 0
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	b8 01       	movw	r22, r16
    18fa:	0e 94 34 06 	call	0xc68	; 0xc68 <net_copy_mac>
	net_copy_mac(my_mac, pkt + ETH_OFF_SRC_MAC);
    18fe:	0a 5f       	subi	r16, 0xFA	; 250
    1900:	1f 4f       	sbci	r17, 0xFF	; 255
    1902:	c7 01       	movw	r24, r14
    1904:	b8 01       	movw	r22, r16
    1906:	0e 94 34 06 	call	0xc68	; 0xc68 <net_copy_mac>
      eth_make_bcast(g_pDataBuffer, g_sConfig.mac_addr);
      pio_util_send_packet(uwPacketSize);
    190a:	ce 01       	movw	r24, r28
    190c:	0e 94 14 0c 	call	0x1828	; 0x1828 <pio_util_send_packet>
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	03 c0       	rjmp	.+6      	; 0x191a <pio_util_handle_arp+0x98>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	01 c0       	rjmp	.+2      	; 0x191a <pio_util_handle_arp+0x98>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    }
  }

  return 1;
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	08 95       	ret

00001928 <pio_util_recv_packet>:
/**
 * Receives data from ENC28j60, calculates stats & does logging.
 * @param pDataSize Pointer to addr to be filled with read data size.
 */
uint8_t pio_util_recv_packet(uint16_t *pDataSize)
{
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
extern void timerDelay100us(uint16_t uwCount);

// ----- hardware timer -----

// 16 bit hw timer with 4us resolution
inline void timerReset(void) { TCNT1 = 0; }
    1934:	04 e8       	ldi	r16, 0x84	; 132
    1936:	10 e0       	ldi	r17, 0x00	; 0
    1938:	f8 01       	movw	r30, r16
    193a:	11 82       	std	Z+1, r1	; 0x01
    193c:	10 82       	st	Z, r1
  // Fetch packet from ENC28j60, measure elapsed time
  timerReset();
  uint8_t ubRecvResult = enc28j60_recv(g_pDataBuffer, DATABUF_SIZE, pDataSize);
    193e:	83 e7       	ldi	r24, 0x73	; 115
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	6a ee       	ldi	r22, 0xEA	; 234
    1944:	75 e0       	ldi	r23, 0x05	; 5
    1946:	ae 01       	movw	r20, r28
    1948:	0e 94 ce 0c 	call	0x199c	; 0x199c <enc28j60_recv>
    194c:	f8 2e       	mov	r15, r24
inline uint16_t  timerGetState(void) { return TCNT1; }
    194e:	f8 01       	movw	r30, r16
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
  uint16_t uwTimeDelta = timerGetState();
  uint16_t uwDataRate = timerCalculateKbps(*pDataSize, uwTimeDelta);
    1954:	88 81       	ld	r24, Y
    1956:	99 81       	ldd	r25, Y+1	; 0x01
    1958:	0e 94 b7 01 	call	0x36e	; 0x36e <timerCalculateKbps>
    195c:	ac 01       	movw	r20, r24

  if(ubRecvResult == PIO_OK) {
    195e:	ff 20       	and	r15, r15
    1960:	31 f4       	brne	.+12     	; 0x196e <pio_util_recv_packet+0x46>
		// Update stats - write new data size & rate
    stats_update_ok(STATS_ID_PIO_RX, *pDataSize, uwDataRate);
    1962:	68 81       	ld	r22, Y
    1964:	79 81       	ldd	r23, Y+1	; 0x01
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <stats_update_ok>
    196c:	07 c0       	rjmp	.+14     	; 0x197c <pio_util_recv_packet+0x54>
  }
  else {
		// Update stats - increase error count
    stats_get(STATS_ID_PIO_RX)->err++;
    196e:	eb e7       	ldi	r30, 0x7B	; 123
    1970:	f7 e0       	ldi	r31, 0x07	; 7
    1972:	80 81       	ld	r24, Z
    1974:	91 81       	ldd	r25, Z+1	; 0x01
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
  }

  return ubRecvResult;
}
    197c:	8f 2d       	mov	r24, r15
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	ff 90       	pop	r15
    1988:	08 95       	ret

0000198a <enc28j60_init>:
	if(result == PIO_OK) {
		// NOTE: UART - rev=hex_byte(rev)
	}

  return PIO_OK;
}
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	08 95       	ret

0000198e <enc28j60_exit>:
	#endif
	// Moved note from pio_exit
	// NOTE: UART - time_stamp_spc() pio: exit\r\n
  SetBank(ECON1);
  writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_RXEN);
}
    198e:	08 95       	ret

00001990 <enc28j60_control>:
			return PIO_OK;
		}
    default:
      return PIO_NOT_FOUND;
  }
}
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	08 95       	ret

00001994 <enc28j60_status>:
      return PIO_OK;
    default:
      *value = 0;
      return PIO_NOT_FOUND;
  }
}
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	08 95       	ret

00001998 <enc28j60_send>:

  // initiate send
  writeReg(ETXND, TXSTART_INIT+size);
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
  return PIO_OK;
}
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	08 95       	ret

0000199c <enc28j60_recv>:
  // read packet
  readBuf(len, data);

  next_pkt();
  return result;
}
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	08 95       	ret

000019a0 <enc28j60_has_recv>:
{
	#ifdef NOENC
	return 0;
	#endif
  return readRegByte(EPKTCNT);
}
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	08 95       	ret

000019a4 <spi_init>:
#include "spi.h"

void spi_init(void)
{
	// output: CS, MOSI, SCK, input: MISO, card detect, write protect
	SPI_DDR |= SPI_SCK | SPI_MOSI | SD_CS | ETH_CS;
    19a4:	e4 e2       	ldi	r30, 0x24	; 36
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8e 62       	ori	r24, 0x2E	; 46
    19ac:	80 83       	st	Z, r24
	SPI_DDR &= ~(SPI_MISO | SD_DETECT | SD_LOCK);
    19ae:	80 81       	ld	r24, Z
    19b0:	8e 76       	andi	r24, 0x6E	; 110
    19b2:	80 83       	st	Z, r24

	// MOSI, SCK = 0, Eth CS = 1
	SPI_PORT &= ~(SPI_MOSI | SPI_SCK);
    19b4:	e5 e2       	ldi	r30, 0x25	; 37
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	87 7d       	andi	r24, 0xD7	; 215
    19bc:	80 83       	st	Z, r24
	SPI_PORT |= ETH_CS;
    19be:	80 81       	ld	r24, Z
    19c0:	84 60       	ori	r24, 0x04	; 4
    19c2:	80 83       	st	Z, r24

  SPCR = _BV(SPE) | _BV(MSTR); // 8 MHz @ 16
    19c4:	80 e5       	ldi	r24, 0x50	; 80
    19c6:	8c bd       	out	0x2c, r24	; 44
	SPSR = _BV(SPI2X);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	8d bd       	out	0x2d, r24	; 45
}
    19cc:	08 95       	ret

000019ce <stats_reset>:
#include "base/uart.h"

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
    19ce:	ed e5       	ldi	r30, 0x5D	; 93
    19d0:	f7 e0       	ldi	r31, 0x07	; 7
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    19d2:	2d e8       	ldi	r18, 0x8D	; 141
    19d4:	37 e0       	ldi	r19, 0x07	; 7
    stats_t *s = &stats[i];
    s->bytes = 0;
    19d6:	10 82       	st	Z, r1
    19d8:	11 82       	std	Z+1, r1	; 0x01
    19da:	12 82       	std	Z+2, r1	; 0x02
    19dc:	13 82       	std	Z+3, r1	; 0x03
    s->cnt = 0;
    19de:	15 82       	std	Z+5, r1	; 0x05
    19e0:	14 82       	std	Z+4, r1	; 0x04
    s->err = 0;
    19e2:	17 82       	std	Z+7, r1	; 0x07
    19e4:	16 82       	std	Z+6, r1	; 0x06
    s->drop = 0;
    19e6:	11 86       	std	Z+9, r1	; 0x09
    19e8:	10 86       	std	Z+8, r1	; 0x08
    s->max_rate = 0;
    19ea:	13 86       	std	Z+11, r1	; 0x0b
    19ec:	12 86       	std	Z+10, r1	; 0x0a
    19ee:	3c 96       	adiw	r30, 0x0c	; 12

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    19f0:	e2 17       	cp	r30, r18
    19f2:	f3 07       	cpc	r31, r19
    19f4:	81 f7       	brne	.-32     	; 0x19d6 <stats_reset+0x8>
    s->cnt = 0;
    s->err = 0;
    s->drop = 0;
    s->max_rate = 0;
  }
}
    19f6:	08 95       	ret

000019f8 <stats_update_ok>:

void stats_update_ok(uint8_t id, uint16_t size, uint16_t rate)
{
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
  stats_t *s = &stats[id];
    19fc:	9c e0       	ldi	r25, 0x0C	; 12
    19fe:	89 9f       	mul	r24, r25
    1a00:	c0 01       	movw	r24, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	fc 01       	movw	r30, r24
    1a06:	e3 5a       	subi	r30, 0xA3	; 163
    1a08:	f8 4f       	sbci	r31, 0xF8	; 248
  s->cnt++;
    1a0a:	84 81       	ldd	r24, Z+4	; 0x04
    1a0c:	95 81       	ldd	r25, Z+5	; 0x05
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	95 83       	std	Z+5, r25	; 0x05
    1a12:	84 83       	std	Z+4, r24	; 0x04
  s->bytes += size;
    1a14:	8b 01       	movw	r16, r22
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	91 81       	ldd	r25, Z+1	; 0x01
    1a1e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a20:	b3 81       	ldd	r27, Z+3	; 0x03
    1a22:	80 0f       	add	r24, r16
    1a24:	91 1f       	adc	r25, r17
    1a26:	a2 1f       	adc	r26, r18
    1a28:	b3 1f       	adc	r27, r19
    1a2a:	80 83       	st	Z, r24
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	a2 83       	std	Z+2, r26	; 0x02
    1a30:	b3 83       	std	Z+3, r27	; 0x03
  if(rate > s->max_rate) {
    1a32:	82 85       	ldd	r24, Z+10	; 0x0a
    1a34:	93 85       	ldd	r25, Z+11	; 0x0b
    1a36:	84 17       	cp	r24, r20
    1a38:	95 07       	cpc	r25, r21
    1a3a:	10 f4       	brcc	.+4      	; 0x1a40 <stats_update_ok+0x48>
    s->max_rate = rate;
    1a3c:	53 87       	std	Z+11, r21	; 0x0b
    1a3e:	42 87       	std	Z+10, r20	; 0x0a
  }
}
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	08 95       	ret

00001a46 <dump_line>:
      break;
    default:
			// NOTE: UART - ?
      break;
  }
}
    1a46:	08 95       	ret

00001a48 <dump_header>:

static void dump_header(void)
{
	// NOTE: UART - cnt  bytes    err  drop rate\r\n
}
    1a48:	08 95       	ret

00001a4a <stats_dump_all>:
{
  dump_header();
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    dump_line(i);
  }
}
    1a4a:	08 95       	ret

00001a4c <stats_dump>:
  }
  if(pio) {
    dump_line(STATS_ID_PIO_RX);
    dump_line(STATS_ID_PIO_TX);
  }
}
    1a4c:	08 95       	ret

00001a4e <__mulsi3>:
    1a4e:	62 9f       	mul	r22, r18
    1a50:	d0 01       	movw	r26, r0
    1a52:	73 9f       	mul	r23, r19
    1a54:	f0 01       	movw	r30, r0
    1a56:	82 9f       	mul	r24, r18
    1a58:	e0 0d       	add	r30, r0
    1a5a:	f1 1d       	adc	r31, r1
    1a5c:	64 9f       	mul	r22, r20
    1a5e:	e0 0d       	add	r30, r0
    1a60:	f1 1d       	adc	r31, r1
    1a62:	92 9f       	mul	r25, r18
    1a64:	f0 0d       	add	r31, r0
    1a66:	83 9f       	mul	r24, r19
    1a68:	f0 0d       	add	r31, r0
    1a6a:	74 9f       	mul	r23, r20
    1a6c:	f0 0d       	add	r31, r0
    1a6e:	65 9f       	mul	r22, r21
    1a70:	f0 0d       	add	r31, r0
    1a72:	99 27       	eor	r25, r25
    1a74:	72 9f       	mul	r23, r18
    1a76:	b0 0d       	add	r27, r0
    1a78:	e1 1d       	adc	r30, r1
    1a7a:	f9 1f       	adc	r31, r25
    1a7c:	63 9f       	mul	r22, r19
    1a7e:	b0 0d       	add	r27, r0
    1a80:	e1 1d       	adc	r30, r1
    1a82:	f9 1f       	adc	r31, r25
    1a84:	bd 01       	movw	r22, r26
    1a86:	cf 01       	movw	r24, r30
    1a88:	11 24       	eor	r1, r1
    1a8a:	08 95       	ret

00001a8c <__udivmodqi4>:
    1a8c:	99 1b       	sub	r25, r25
    1a8e:	79 e0       	ldi	r23, 0x09	; 9
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <__udivmodqi4_ep>

00001a92 <__udivmodqi4_loop>:
    1a92:	99 1f       	adc	r25, r25
    1a94:	96 17       	cp	r25, r22
    1a96:	08 f0       	brcs	.+2      	; 0x1a9a <__udivmodqi4_ep>
    1a98:	96 1b       	sub	r25, r22

00001a9a <__udivmodqi4_ep>:
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	7a 95       	dec	r23
    1a9e:	c9 f7       	brne	.-14     	; 0x1a92 <__udivmodqi4_loop>
    1aa0:	80 95       	com	r24
    1aa2:	08 95       	ret

00001aa4 <__udivmodsi4>:
    1aa4:	a1 e2       	ldi	r26, 0x21	; 33
    1aa6:	1a 2e       	mov	r1, r26
    1aa8:	aa 1b       	sub	r26, r26
    1aaa:	bb 1b       	sub	r27, r27
    1aac:	fd 01       	movw	r30, r26
    1aae:	0d c0       	rjmp	.+26     	; 0x1aca <__udivmodsi4_ep>

00001ab0 <__udivmodsi4_loop>:
    1ab0:	aa 1f       	adc	r26, r26
    1ab2:	bb 1f       	adc	r27, r27
    1ab4:	ee 1f       	adc	r30, r30
    1ab6:	ff 1f       	adc	r31, r31
    1ab8:	a2 17       	cp	r26, r18
    1aba:	b3 07       	cpc	r27, r19
    1abc:	e4 07       	cpc	r30, r20
    1abe:	f5 07       	cpc	r31, r21
    1ac0:	20 f0       	brcs	.+8      	; 0x1aca <__udivmodsi4_ep>
    1ac2:	a2 1b       	sub	r26, r18
    1ac4:	b3 0b       	sbc	r27, r19
    1ac6:	e4 0b       	sbc	r30, r20
    1ac8:	f5 0b       	sbc	r31, r21

00001aca <__udivmodsi4_ep>:
    1aca:	66 1f       	adc	r22, r22
    1acc:	77 1f       	adc	r23, r23
    1ace:	88 1f       	adc	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	1a 94       	dec	r1
    1ad4:	69 f7       	brne	.-38     	; 0x1ab0 <__udivmodsi4_loop>
    1ad6:	60 95       	com	r22
    1ad8:	70 95       	com	r23
    1ada:	80 95       	com	r24
    1adc:	90 95       	com	r25
    1ade:	9b 01       	movw	r18, r22
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	bd 01       	movw	r22, r26
    1ae4:	cf 01       	movw	r24, r30
    1ae6:	08 95       	ret

00001ae8 <__eerd_block_m328p>:
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22

00001aec <__eerd_blraw_m328p>:
    1aec:	fc 01       	movw	r30, r24
    1aee:	f9 99       	sbic	0x1f, 1	; 31
    1af0:	fe cf       	rjmp	.-4      	; 0x1aee <__eerd_blraw_m328p+0x2>
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <__eerd_blraw_m328p+0x14>
    1af4:	f2 bd       	out	0x22, r31	; 34
    1af6:	e1 bd       	out	0x21, r30	; 33
    1af8:	f8 9a       	sbi	0x1f, 0	; 31
    1afa:	31 96       	adiw	r30, 0x01	; 1
    1afc:	00 b4       	in	r0, 0x20	; 32
    1afe:	0d 92       	st	X+, r0
    1b00:	41 50       	subi	r20, 0x01	; 1
    1b02:	50 40       	sbci	r21, 0x00	; 0
    1b04:	b8 f7       	brcc	.-18     	; 0x1af4 <__eerd_blraw_m328p+0x8>
    1b06:	08 95       	ret

00001b08 <__eerd_word_m328p>:
    1b08:	a8 e1       	ldi	r26, 0x18	; 24
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	42 e0       	ldi	r20, 0x02	; 2
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__eerd_blraw_m328p>

00001b14 <__eewr_block_m328p>:
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <__eewr_block_m328p+0xc>
    1b1a:	2d 91       	ld	r18, X+
    1b1c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__eewr_r18_m328p>
    1b20:	41 50       	subi	r20, 0x01	; 1
    1b22:	50 40       	sbci	r21, 0x00	; 0
    1b24:	d0 f7       	brcc	.-12     	; 0x1b1a <__eewr_block_m328p+0x6>
    1b26:	08 95       	ret

00001b28 <__eewr_byte_m328p>:
    1b28:	26 2f       	mov	r18, r22

00001b2a <__eewr_r18_m328p>:
    1b2a:	f9 99       	sbic	0x1f, 1	; 31
    1b2c:	fe cf       	rjmp	.-4      	; 0x1b2a <__eewr_r18_m328p>
    1b2e:	1f ba       	out	0x1f, r1	; 31
    1b30:	92 bd       	out	0x22, r25	; 34
    1b32:	81 bd       	out	0x21, r24	; 33
    1b34:	20 bd       	out	0x20, r18	; 32
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	fa 9a       	sbi	0x1f, 2	; 31
    1b3c:	f9 9a       	sbi	0x1f, 1	; 31
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	08 95       	ret

00001b44 <__eewr_word_m328p>:
    1b44:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__eewr_byte_m328p>
    1b48:	27 2f       	mov	r18, r23
    1b4a:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__eewr_r18_m328p>

00001b4e <_exit>:
    1b4e:	f8 94       	cli

00001b50 <__stop_program>:
    1b50:	ff cf       	rjmp	.-2      	; 0x1b50 <__stop_program>


bin\Debug\plipUltimate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000021da  000022ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021da  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000065b  0080013c  0080013c  000022ea  2**0
                  ALLOC
  3 .eeprom       00000016  00810000  00810000  000022ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  00002300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .debug_aranges 00000280  00000000  00000000  00002303  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000829  00000000  00000000  00002583  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004b16  00000000  00000000  00002dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001990  00000000  00000000  000078c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002c1e  00000000  00000000  00009252  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007e0  00000000  00000000  0000be70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000133e  00000000  00000000  0000c650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001be9  00000000  00000000  0000d98e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  0000f577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__ctors_end>
       4:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
       8:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
       c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      10:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      14:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      18:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      1c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      20:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      24:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      28:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      2c:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_11>
      30:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      34:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      38:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      3c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      40:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      44:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      48:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      4c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      50:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      54:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      58:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      5c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      60:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>
      64:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__bad_interrupt>

00000068 <cmd_table>:
      68:	d4 00 52 06 d6 00 e8 00 54 06 ea 00 fc 00 56 06     ..R.....T.....V.
      78:	fe 00 15 01 35 07 17 01 28 01 30 07 2b 01 45 01     ....5...(.0.+.E.
      88:	2b 07 48 01 64 01 27 07 67 01 83 01 23 07 86 01     +.H.d.'.g...#...
      98:	96 01 1f 07 99 01 aa 01 fc 06 ac 01 c8 01 b3 06     ................
      a8:	cb 01 e4 01 b3 06 e7 01 fd 01 78 06 00 02 17 02     ..........x.....
      b8:	78 06 1a 02 33 02 58 06 36 02 4b 02 78 06 4e 02     x...3.X.6.K.x.N.
      c8:	60 02 b3 06 63 02 00 00 00 00 00 00                 `...c.......

000000d4 <cmd_quit_name>:
      d4:	71 00                                               q.

000000d6 <cmd_quit_help>:
      d6:	71 75 69 74 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64     quit command mod
      e6:	65 00                                               e.

000000e8 <cmd_device_reset_name>:
      e8:	72 00                                               r.

000000ea <cmd_device_reset_help>:
      ea:	73 6f 66 74 20 72 65 73 65 74 20 64 65 76 69 63     soft reset devic
      fa:	65 00                                               e.

000000fc <cmd_version_name>:
      fc:	76 00                                               v.

000000fe <cmd_version_help>:
      fe:	70 72 69 6e 74 20 66 69 72 6d 77 61 72 65 20 76     print firmware v
     10e:	65 72 73 69 6f 6e 00                                ersion.

00000115 <cmd_param_dump_name>:
     115:	70 00                                               p.

00000117 <cmd_param_dump_help>:
     117:	70 72 69 6e 74 20 70 61 72 61 6d 65 74 65 72 73     print parameters
	...

00000128 <cmd_param_save_name>:
     128:	70 73 00                                            ps.

0000012b <cmd_param_save_help>:
     12b:	73 61 76 65 20 70 61 72 61 6d 65 74 65 72 73 20     save parameters 
     13b:	74 6f 20 45 45 50 52 4f 4d 00                       to EEPROM.

00000145 <cmd_param_load_name>:
     145:	70 6c 00                                            pl.

00000148 <cmd_param_load_help>:
     148:	6c 6f 61 64 20 70 61 72 61 6d 65 74 65 72 73 20     load parameters 
     158:	66 72 6f 6d 20 45 45 50 52 4f 4d 00                 from EEPROM.

00000164 <cmd_param_reset_name>:
     164:	70 72 00                                            pr.

00000167 <cmd_param_reset_help>:
     167:	72 65 73 65 74 20 70 61 72 61 6d 65 74 65 72 73     reset parameters
     177:	20 74 6f 20 64 65 66 61 75 6c 74 00                  to default.

00000183 <cmd_stats_dump_name>:
     183:	73 64 00                                            sd.

00000186 <cmd_stats_dump_help>:
     186:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

00000196 <cmd_stats_reset_name>:
     196:	73 72 00                                            sr.

00000199 <cmd_stats_reset_help>:
     199:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

000001aa <cmd_gen_m_name>:
     1aa:	6d 00                                               m.

000001ac <cmd_gen_m_help>:
     1ac:	6d 61 63 20 61 64 64 72 65 73 73 20 6f 66 20 64     mac address of d
     1bc:	65 76 69 63 65 20 3c 6d 61 63 3e 00                 evice <mac>.

000001c8 <cmd_gen_fd_name>:
     1c8:	66 64 00                                            fd.

000001cb <cmd_gen_fd_help>:
     1cb:	73 65 74 20 66 75 6c 6c 20 64 75 70 6c 65 20 6d     set full duple m
     1db:	6f 64 65 20 5b 6f 6e 5d 00                          ode [on].

000001e4 <cmd_gen_fc_name>:
     1e4:	66 63 00                                            fc.

000001e7 <cmd_gen_fc_help>:
     1e7:	73 65 74 20 66 6c 6f 77 20 63 6f 6e 74 72 6f 6c     set flow control
     1f7:	20 5b 6f 6e 5d 00                                    [on].

000001fd <cmd_gen_tl_name>:
     1fd:	74 6c 00                                            tl.

00000200 <cmd_gen_tl_help>:
     200:	74 65 73 74 20 70 61 63 6b 65 74 20 6c 65 6e 67     test packet leng
     210:	74 68 20 3c 6e 3e 00                                th <n>.

00000217 <cmd_gen_tt_name>:
     217:	74 74 00                                            tt.

0000021a <cmd_gen_tt_help>:
     21a:	74 65 73 74 20 70 61 63 6b 65 74 20 65 74 68 20     test packet eth 
     22a:	74 79 70 65 20 3c 6e 3e 00                          type <n>.

00000233 <cmd_gen_ti_name>:
     233:	74 69 00                                            ti.

00000236 <cmd_gen_ti_help>:
     236:	74 65 73 74 20 49 50 20 61 64 64 72 65 73 73 20     test IP address 
     246:	3c 69 70 3e 00                                      <ip>.

0000024b <cmd_gen_tp_name>:
     24b:	74 70 00                                            tp.

0000024e <cmd_gen_tp_help>:
     24e:	74 65 73 74 20 55 44 50 20 70 6f 72 74 20 3c 6e     test UDP port <n
     25e:	3e 00                                               >.

00000260 <cmd_gen_tm_name>:
     260:	74 6d 00                                            tm.

00000263 <cmd_gen_tm_help>:
     263:	74 65 73 74 20 6d 6f 64 65 20 5b 30 7c 31 5d 00     test mode [0|1].

00000273 <cmdkey_table>:
     273:	31 41 07 aa 02 32 44 07 bc 02 33 3d 07 d3 02 34     1A...2D...3=...4
     283:	39 07 e7 02 73 5f 07 fa 02 53 5c 07 0a 03 76 48     9...s_...S\...vH
     293:	07 1b 03 70 58 07 31 03 50 54 07 52 03 61 51 07     ...pX.1.PT.R.aQ.
     2a3:	7c 03 00 00 00 00 00                                |......

000002aa <cmd_enter_bridge_mode_help>:
     2aa:	65 6e 74 65 72 20 62 72 69 64 67 65 20 6d 6f 64     enter bridge mod
     2ba:	65 00                                               e.

000002bc <cmd_enter_bridge_test_mode_help>:
     2bc:	65 6e 74 65 72 20 62 72 69 64 67 65 20 74 65 73     enter bridge tes
     2cc:	74 20 6d 6f 64 65 00                                t mode.

000002d3 <cmd_enter_pio_test_mode_help>:
     2d3:	65 6e 74 65 72 20 50 49 4f 20 74 65 73 74 20 6d     enter PIO test m
     2e3:	6f 64 65 00                                         ode.

000002e7 <cmd_enter_pb_test_mode_help>:
     2e7:	65 6e 74 65 72 20 50 42 20 74 65 73 74 20 6d 6f     enter PB test mo
     2f7:	64 65 00                                            de.

000002fa <cmd_dump_stats_help>:
     2fa:	64 75 6d 70 20 73 74 61 74 69 73 74 69 63 73 00     dump statistics.

0000030a <cmd_reset_stats_help>:
     30a:	72 65 73 65 74 20 73 74 61 74 69 73 74 69 63 73     reset statistics
	...

0000031b <cmd_toggle_verbose_help>:
     31b:	74 6f 67 67 6c 65 20 76 65 72 62 6f 73 65 20 6f     toggle verbose o
     32b:	75 74 70 75 74 00                                   utput.

00000331 <cmd_send_test_packet_help>:
     331:	73 65 6e 64 20 61 20 74 65 73 74 20 70 61 63 6b     send a test pack
     341:	65 74 20 28 70 62 74 65 73 74 20 6d 6f 64 65 29     et (pbtest mode)
	...

00000352 <cmd_send_test_packet_silent_help>:
     352:	73 65 6e 64 20 61 20 74 65 73 74 20 70 61 63 6b     send a test pack
     362:	65 74 20 28 73 69 6c 65 6e 74 29 20 28 70 62 74     et (silent) (pbt
     372:	65 73 74 20 6d 6f 64 65 29 00                       est mode).

0000037c <cmd_toggle_auto_mode_help>:
     37c:	74 6f 67 67 6c 65 20 61 75 74 6f 20 73 65 6e 64     toggle auto send
     38c:	20 28 70 62 74 65 73 74 20 6d 6f 64 65 29 00         (pbtest mode).

0000039b <sc_sDefaultConfig>:
     39b:	1a 11 af a0 47 11 00 00 ea 05 fd ff c0 a8 02 de     ....G...........
     3ab:	90 1a 00 00 00                                      .....

000003b0 <__ctors_end>:
     3b0:	11 24       	eor	r1, r1
     3b2:	1f be       	out	0x3f, r1	; 63
     3b4:	cf ef       	ldi	r28, 0xFF	; 255
     3b6:	d8 e0       	ldi	r29, 0x08	; 8
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	cd bf       	out	0x3d, r28	; 61

000003bc <__do_copy_data>:
     3bc:	11 e0       	ldi	r17, 0x01	; 1
     3be:	a0 e0       	ldi	r26, 0x00	; 0
     3c0:	b1 e0       	ldi	r27, 0x01	; 1
     3c2:	ea ed       	ldi	r30, 0xDA	; 218
     3c4:	f1 e2       	ldi	r31, 0x21	; 33
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <.do_copy_data_start>

000003c8 <.do_copy_data_loop>:
     3c8:	05 90       	lpm	r0, Z+
     3ca:	0d 92       	st	X+, r0

000003cc <.do_copy_data_start>:
     3cc:	ac 33       	cpi	r26, 0x3C	; 60
     3ce:	b1 07       	cpc	r27, r17
     3d0:	d9 f7       	brne	.-10     	; 0x3c8 <.do_copy_data_loop>

000003d2 <__do_clear_bss>:
     3d2:	17 e0       	ldi	r17, 0x07	; 7
     3d4:	ac e3       	ldi	r26, 0x3C	; 60
     3d6:	b1 e0       	ldi	r27, 0x01	; 1
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <.do_clear_bss_start>

000003da <.do_clear_bss_loop>:
     3da:	1d 92       	st	X+, r1

000003dc <.do_clear_bss_start>:
     3dc:	a7 39       	cpi	r26, 0x97	; 151
     3de:	b1 07       	cpc	r27, r17
     3e0:	e1 f7       	brne	.-8      	; 0x3da <.do_clear_bss_loop>
     3e2:	0e 94 b3 07 	call	0xf66	; 0xf66 <main>
     3e6:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <_exit>

000003ea <__bad_interrupt>:
     3ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ee <timerInit>:
/// 100us is 1/10k of a second
/// NOTE(KaiN#): time was reduced by 1, should it be?
#define T1_100us F_CPU/10000

void timerInit(void) {
  cli();
     3ee:	f8 94       	cli

	/// Set timer 2 to CTC, prescaler 8 & compare value: 100us
  TCCR1A = _BV(WGM12);  // CTC
     3f0:	88 e0       	ldi	r24, 0x08	; 8
     3f2:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = _BV(CS10);   // Prescaler 1
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	80 93 81 00 	sts	0x0081, r24
  OCR1A = T1_100us;     // Output compare
     3fc:	80 ed       	ldi	r24, 0xD0	; 208
     3fe:	97 e0       	ldi	r25, 0x07	; 7
     400:	90 93 89 00 	sts	0x0089, r25
     404:	80 93 88 00 	sts	0x0088, r24
  TCNT1  = 0;           // Reset timer state
     408:	10 92 85 00 	sts	0x0085, r1
     40c:	10 92 84 00 	sts	0x0084, r1
  TIMSK1 = _BV(OCIE1A); // Enable compare interrupt
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	80 93 6f 00 	sts	0x006F, r24

  g_uwTimer100us = 0;
     416:	10 92 51 01 	sts	0x0151, r1
     41a:	10 92 50 01 	sts	0x0150, r1
  g_uwTimer10ms = 0;
     41e:	10 92 4f 01 	sts	0x014F, r1
     422:	10 92 4e 01 	sts	0x014E, r1
  g_uwTimeStamp = 0;
     426:	10 92 52 01 	sts	0x0152, r1
     42a:	10 92 53 01 	sts	0x0153, r1
     42e:	10 92 54 01 	sts	0x0154, r1
     432:	10 92 55 01 	sts	0x0155, r1
  s_uw10msCounter = 0;
     436:	10 92 3d 01 	sts	0x013D, r1
     43a:	10 92 3c 01 	sts	0x013C, r1

  sei();
     43e:	78 94       	sei
}
     440:	08 95       	ret

00000442 <__vector_11>:

/**
 * Timer interrupt handler.
 * Increments time stamp and time interval vars accordingly.
 */
ISR(TIMER1_COMPA_vect) {
     442:	1f 92       	push	r1
     444:	0f 92       	push	r0
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	0f 92       	push	r0
     44a:	11 24       	eor	r1, r1
     44c:	8f 93       	push	r24
     44e:	9f 93       	push	r25
     450:	af 93       	push	r26
     452:	bf 93       	push	r27
	TCNT1 = 0; // Reset timer s_uw10msCounterer
     454:	10 92 85 00 	sts	0x0085, r1
     458:	10 92 84 00 	sts	0x0084, r1
  ++g_uwTimer100us;
     45c:	80 91 50 01 	lds	r24, 0x0150
     460:	90 91 51 01 	lds	r25, 0x0151
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	90 93 51 01 	sts	0x0151, r25
     46a:	80 93 50 01 	sts	0x0150, r24
  ++g_uwTimeStamp;
     46e:	80 91 52 01 	lds	r24, 0x0152
     472:	90 91 53 01 	lds	r25, 0x0153
     476:	a0 91 54 01 	lds	r26, 0x0154
     47a:	b0 91 55 01 	lds	r27, 0x0155
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	a1 1d       	adc	r26, r1
     482:	b1 1d       	adc	r27, r1
     484:	80 93 52 01 	sts	0x0152, r24
     488:	90 93 53 01 	sts	0x0153, r25
     48c:	a0 93 54 01 	sts	0x0154, r26
     490:	b0 93 55 01 	sts	0x0155, r27
  ++s_uw10msCounter;
     494:	80 91 3c 01 	lds	r24, 0x013C
     498:	90 91 3d 01 	lds	r25, 0x013D
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	90 93 3d 01 	sts	0x013D, r25
     4a2:	80 93 3c 01 	sts	0x013C, r24
  if(s_uw10msCounter >= 100) {
     4a6:	84 36       	cpi	r24, 0x64	; 100
     4a8:	91 05       	cpc	r25, r1
     4aa:	68 f0       	brcs	.+26     	; 0x4c6 <__vector_11+0x84>
    s_uw10msCounter = 0;
     4ac:	10 92 3d 01 	sts	0x013D, r1
     4b0:	10 92 3c 01 	sts	0x013C, r1
    g_uwTimer10ms++;
     4b4:	80 91 4e 01 	lds	r24, 0x014E
     4b8:	90 91 4f 01 	lds	r25, 0x014F
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	90 93 4f 01 	sts	0x014F, r25
     4c2:	80 93 4e 01 	sts	0x014E, r24
  }
}
     4c6:	bf 91       	pop	r27
     4c8:	af 91       	pop	r26
     4ca:	9f 91       	pop	r25
     4cc:	8f 91       	pop	r24
     4ce:	0f 90       	pop	r0
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	0f 90       	pop	r0
     4d4:	1f 90       	pop	r1
     4d6:	18 95       	reti

000004d8 <timerDelay10ms>:

/// Busy-wait for supplied number of 10ms intervals
void timerDelay10ms(uint16_t uwCount) {
     4d8:	9c 01       	movw	r18, r24
	g_uwTimer10ms=0;
     4da:	10 92 4f 01 	sts	0x014F, r1
     4de:	10 92 4e 01 	sts	0x014E, r1
	while(g_uwTimer10ms<uwCount);
     4e2:	80 91 4e 01 	lds	r24, 0x014E
     4e6:	90 91 4f 01 	lds	r25, 0x014F
     4ea:	82 17       	cp	r24, r18
     4ec:	93 07       	cpc	r25, r19
     4ee:	c8 f3       	brcs	.-14     	; 0x4e2 <timerDelay10ms+0xa>
}
     4f0:	08 95       	ret

000004f2 <timerDelay100us>:

/// Busy-wait for supplied number of 100us intervals
void timerDelay100us(uint16_t uwCount) {
     4f2:	9c 01       	movw	r18, r24
	g_uwTimer100us=0;
     4f4:	10 92 51 01 	sts	0x0151, r1
     4f8:	10 92 50 01 	sts	0x0150, r1
	while(g_uwTimer100us<uwCount);
     4fc:	80 91 50 01 	lds	r24, 0x0150
     500:	90 91 51 01 	lds	r25, 0x0151
     504:	82 17       	cp	r24, r18
     506:	93 07       	cpc	r25, r19
     508:	c8 f3       	brcs	.-14     	; 0x4fc <timerDelay100us+0xa>
}
     50a:	08 95       	ret

0000050c <timerCalculateKbps>:

// TODO(KaiN#9): timerCalculateKbps() is completely messed up
/**
 * Calculates bitrate based on transferred byte count and elapsed time.
 */
uint16_t timerCalculateKbps(uint16_t bytes, uint16_t delta) {
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	eb 01       	movw	r28, r22
  if(delta != 0) {
     512:	61 15       	cp	r22, r1
     514:	71 05       	cpc	r23, r1
     516:	19 f4       	brne	.+6      	; 0x51e <timerCalculateKbps+0x12>
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	16 c0       	rjmp	.+44     	; 0x54a <timerCalculateKbps+0x3e>
    uint32_t nom = 1000 * (uint32_t)bytes * 100;
    uint32_t denom = (uint32_t)delta * 4;
    uint32_t rate = nom / denom;
    return (uint16_t)rate;
     51e:	bc 01       	movw	r22, r24
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	20 ea       	ldi	r18, 0xA0	; 160
     526:	36 e8       	ldi	r19, 0x86	; 134
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <__mulsi3>
     530:	9e 01       	movw	r18, r28
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	22 0f       	add	r18, r18
     538:	33 1f       	adc	r19, r19
     53a:	44 1f       	adc	r20, r20
     53c:	55 1f       	adc	r21, r21
     53e:	22 0f       	add	r18, r18
     540:	33 1f       	adc	r19, r19
     542:	44 1f       	adc	r20, r20
     544:	55 1f       	adc	r21, r21
     546:	0e 94 96 10 	call	0x212c	; 0x212c <__udivmodsi4>
  }
	else
		return 0;
}
     54a:	82 2f       	mov	r24, r18
     54c:	93 2f       	mov	r25, r19
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <utilNibbleToHex>:
/**
 * Converts nibble (0..15) value to hex char.
 */
char utilNibbleToHex(uint8_t ubIn)
{
  if(ubIn < 10)
     554:	8a 30       	cpi	r24, 0x0A	; 10
     556:	10 f4       	brcc	.+4      	; 0x55c <utilNibbleToHex+0x8>
    return '0' + ubIn;
     558:	80 5d       	subi	r24, 0xD0	; 208
     55a:	08 95       	ret
  else
    return 'A' + ubIn - 10;
     55c:	89 5c       	subi	r24, 0xC9	; 201
}
     55e:	08 95       	ret

00000560 <utilByteToHex>:

/**
 * Converts byte value to hex chars.
 */
void utilByteToHex(uint8_t ubIn, char *pOut)
{
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	f8 2e       	mov	r15, r24
     568:	8b 01       	movw	r16, r22
  pOut[0] = utilNibbleToHex(ubIn >> 4);
     56a:	82 95       	swap	r24
     56c:	8f 70       	andi	r24, 0x0F	; 15
     56e:	0e 94 aa 02 	call	0x554	; 0x554 <utilNibbleToHex>
     572:	f8 01       	movw	r30, r16
     574:	80 83       	st	Z, r24
  pOut[1] = utilNibbleToHex(ubIn & 0xf);
     576:	8f 2d       	mov	r24, r15
     578:	8f 70       	andi	r24, 0x0F	; 15
     57a:	0e 94 aa 02 	call	0x554	; 0x554 <utilNibbleToHex>
     57e:	f8 01       	movw	r30, r16
     580:	81 83       	std	Z+1, r24	; 0x01
}
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	ff 90       	pop	r15
     588:	08 95       	ret

0000058a <utilWordToHex>:

void utilWordToHex(uint16_t uwIn, char *pOut)
{
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	f8 2e       	mov	r15, r24
     592:	8b 01       	movw	r16, r22
  utilByteToHex((uint8_t)(uwIn>>8), pOut);
     594:	89 2f       	mov	r24, r25
     596:	0e 94 b0 02 	call	0x560	; 0x560 <utilByteToHex>
  utilByteToHex((uint8_t)(uwIn&0xff), pOut+2);
     59a:	0e 5f       	subi	r16, 0xFE	; 254
     59c:	1f 4f       	sbci	r17, 0xFF	; 255
     59e:	8f 2d       	mov	r24, r15
     5a0:	b8 01       	movw	r22, r16
     5a2:	0e 94 b0 02 	call	0x560	; 0x560 <utilByteToHex>
}
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	08 95       	ret

000005ae <utilDwordToHex>:

void utilDwordToHex(uint32_t ulIn, char *pOut)
{
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	6b 01       	movw	r12, r22
     5bc:	7c 01       	movw	r14, r24
     5be:	8a 01       	movw	r16, r20
  utilWordToHex((uint16_t)(ulIn>>16), pOut);
     5c0:	aa 27       	eor	r26, r26
     5c2:	bb 27       	eor	r27, r27
     5c4:	ba 01       	movw	r22, r20
     5c6:	0e 94 c5 02 	call	0x58a	; 0x58a <utilWordToHex>
  utilWordToHex((uint16_t)(ulIn&0xffff), pOut+4);
     5ca:	0c 5f       	subi	r16, 0xFC	; 252
     5cc:	1f 4f       	sbci	r17, 0xFF	; 255
     5ce:	c6 01       	movw	r24, r12
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 c5 02 	call	0x58a	; 0x58a <utilWordToHex>
}
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	08 95       	ret

000005e4 <utilByteToDec>:

void utilByteToDec(uint8_t value, uint8_t *out)
{
     5e4:	28 2f       	mov	r18, r24
     5e6:	fb 01       	movw	r30, r22
  uint8_t h = value / 100;
  uint8_t t = value % 100;
     5e8:	64 e6       	ldi	r22, 0x64	; 100
     5ea:	0e 94 8a 10 	call	0x2114	; 0x2114 <__udivmodqi4>
     5ee:	39 2f       	mov	r19, r25
  uint8_t o = t % 10;
  t = t / 10;
  out[0] = '0' + h;
     5f0:	82 2f       	mov	r24, r18
     5f2:	0e 94 8a 10 	call	0x2114	; 0x2114 <__udivmodqi4>
     5f6:	80 5d       	subi	r24, 0xD0	; 208
     5f8:	80 83       	st	Z, r24
  out[1] = '0' + t;
     5fa:	83 2f       	mov	r24, r19
     5fc:	6a e0       	ldi	r22, 0x0A	; 10
     5fe:	0e 94 8a 10 	call	0x2114	; 0x2114 <__udivmodqi4>
     602:	80 5d       	subi	r24, 0xD0	; 208
     604:	81 83       	std	Z+1, r24	; 0x01
  out[2] = '0' + o;
     606:	83 2f       	mov	r24, r19
     608:	0e 94 8a 10 	call	0x2114	; 0x2114 <__udivmodqi4>
     60c:	90 5d       	subi	r25, 0xD0	; 208
     60e:	92 83       	std	Z+2, r25	; 0x02
}
     610:	08 95       	ret

00000612 <utilDwordToDec>:

void utilDwordToDec(uint32_t value, uint8_t *out, uint8_t num_digits, uint8_t point_pos)
{
     612:	af 92       	push	r10
     614:	bf 92       	push	r11
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	c6 2e       	mov	r12, r22
     628:	d7 2e       	mov	r13, r23
     62a:	e8 2e       	mov	r14, r24
     62c:	f9 2e       	mov	r15, r25
     62e:	b2 2e       	mov	r11, r18
	uint8_t i;
  // start backwards
  uint8_t *pos = out + num_digits - 1;
     630:	82 2f       	mov	r24, r18
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	ea 01       	movw	r28, r20
     638:	c8 0f       	add	r28, r24
     63a:	d9 1f       	adc	r29, r25
  if(point_pos < num_digits) {
     63c:	02 17       	cp	r16, r18
     63e:	08 f4       	brcc	.+2      	; 0x642 <utilDwordToDec+0x30>
    pos++;
     640:	21 96       	adiw	r28, 0x01	; 1
  }
  for(i=0;i<num_digits;i++) {
     642:	bb 20       	and	r11, r11
     644:	41 f1       	breq	.+80     	; 0x696 <utilDwordToDec+0x84>
     646:	10 e0       	ldi	r17, 0x00	; 0
    if(i == point_pos) {
      *pos = '.';
     648:	0f 2e       	mov	r0, r31
     64a:	fe e2       	ldi	r31, 0x2E	; 46
     64c:	af 2e       	mov	r10, r31
     64e:	f0 2d       	mov	r31, r0
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
    if(i == point_pos) {
     650:	10 17       	cp	r17, r16
     652:	11 f4       	brne	.+4      	; 0x658 <utilDwordToDec+0x46>
      *pos = '.';
     654:	a8 82       	st	Y, r10
      pos--;
     656:	21 97       	sbiw	r28, 0x01	; 1
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
     658:	6c 2d       	mov	r22, r12
     65a:	7d 2d       	mov	r23, r13
     65c:	8e 2d       	mov	r24, r14
     65e:	9f 2d       	mov	r25, r15
     660:	2a e0       	ldi	r18, 0x0A	; 10
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	0e 94 96 10 	call	0x212c	; 0x212c <__udivmodsi4>
     66c:	60 5d       	subi	r22, 0xD0	; 208
     66e:	68 83       	st	Y, r22
  // start backwards
  uint8_t *pos = out + num_digits - 1;
  if(point_pos < num_digits) {
    pos++;
  }
  for(i=0;i<num_digits;i++) {
     670:	1f 5f       	subi	r17, 0xFF	; 255
     672:	1b 15       	cp	r17, r11
     674:	80 f4       	brcc	.+32     	; 0x696 <utilDwordToDec+0x84>
      *pos = '.';
      pos--;
    }
    uint8_t dec = value % 10;
    *pos = '0' + dec;
    pos--;
     676:	21 97       	sbiw	r28, 0x01	; 1
    value /= 10;
     678:	6c 2d       	mov	r22, r12
     67a:	7d 2d       	mov	r23, r13
     67c:	8e 2d       	mov	r24, r14
     67e:	9f 2d       	mov	r25, r15
     680:	2a e0       	ldi	r18, 0x0A	; 10
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	0e 94 96 10 	call	0x212c	; 0x212c <__udivmodsi4>
     68c:	c2 2e       	mov	r12, r18
     68e:	d3 2e       	mov	r13, r19
     690:	e4 2e       	mov	r14, r20
     692:	f5 2e       	mov	r15, r21
     694:	dd cf       	rjmp	.-70     	; 0x650 <utilDwordToDec+0x3e>
  }
}
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	bf 90       	pop	r11
     6a8:	af 90       	pop	r10
     6aa:	08 95       	ret

000006ac <utilParseNibbleHex>:

// parse

uint8_t utilParseNibbleHex(char c,uint8_t *value)
{
     6ac:	fb 01       	movw	r30, r22
  if((c>='a')&&(c<='f')) {
     6ae:	98 2f       	mov	r25, r24
     6b0:	81 56       	subi	r24, 0x61	; 97
     6b2:	86 30       	cpi	r24, 0x06	; 6
     6b4:	20 f4       	brcc	.+8      	; 0x6be <utilParseNibbleHex+0x12>
    *value = c + 10 - 'a';
     6b6:	86 5f       	subi	r24, 0xF6	; 246
     6b8:	80 83       	st	Z, r24
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	08 95       	ret
    return 1;
  }
  else if((c>='A')&&(c<='F')) {
     6be:	89 2f       	mov	r24, r25
     6c0:	81 54       	subi	r24, 0x41	; 65
     6c2:	86 30       	cpi	r24, 0x06	; 6
     6c4:	20 f4       	brcc	.+8      	; 0x6ce <utilParseNibbleHex+0x22>
    *value = c + 10 - 'A';
     6c6:	86 5f       	subi	r24, 0xF6	; 246
     6c8:	80 83       	st	Z, r24
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	08 95       	ret
    return 1;
  }
  else if((c>='0')&&(c<='9')) {
     6ce:	89 2f       	mov	r24, r25
     6d0:	80 53       	subi	r24, 0x30	; 48
     6d2:	8a 30       	cpi	r24, 0x0A	; 10
     6d4:	10 f0       	brcs	.+4      	; 0x6da <utilParseNibbleHex+0x2e>
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	08 95       	ret
    *value = c - '0';
     6da:	80 83       	st	Z, r24
     6dc:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
  }
  else
    return 0;
}
     6de:	08 95       	ret

000006e0 <utilParseByteHex>:

uint8_t utilParseByteHex(const char *str,uint8_t *value)
{
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	df 93       	push	r29
     6ea:	cf 93       	push	r28
     6ec:	0f 92       	push	r0
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	8c 01       	movw	r16, r24
     6f4:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseNibbleHex(str[0],&val))
     6f6:	fc 01       	movw	r30, r24
     6f8:	80 81       	ld	r24, Z
     6fa:	be 01       	movw	r22, r28
     6fc:	6f 5f       	subi	r22, 0xFF	; 255
     6fe:	7f 4f       	sbci	r23, 0xFF	; 255
     700:	0e 94 56 03 	call	0x6ac	; 0x6ac <utilParseNibbleHex>
     704:	88 23       	and	r24, r24
     706:	91 f0       	breq	.+36     	; 0x72c <utilParseByteHex+0x4c>
    return 0;
  val <<= 4;
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	82 95       	swap	r24
     70c:	80 7f       	andi	r24, 0xF0	; 240
     70e:	89 83       	std	Y+1, r24	; 0x01
  if(!utilParseNibbleHex(str[1],value))
     710:	f8 01       	movw	r30, r16
     712:	81 81       	ldd	r24, Z+1	; 0x01
     714:	b7 01       	movw	r22, r14
     716:	0e 94 56 03 	call	0x6ac	; 0x6ac <utilParseNibbleHex>
     71a:	88 23       	and	r24, r24
     71c:	39 f0       	breq	.+14     	; 0x72c <utilParseByteHex+0x4c>
    return 0;
  *value |= val;
     71e:	f7 01       	movw	r30, r14
     720:	80 81       	ld	r24, Z
     722:	99 81       	ldd	r25, Y+1	; 0x01
     724:	89 2b       	or	r24, r25
     726:	80 83       	st	Z, r24
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	01 c0       	rjmp	.+2      	; 0x72e <utilParseByteHex+0x4e>
  return 1;
     72c:	80 e0       	ldi	r24, 0x00	; 0
}
     72e:	0f 90       	pop	r0
     730:	cf 91       	pop	r28
     732:	df 91       	pop	r29
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	08 95       	ret

0000073e <utilParseWordHex>:

uint8_t utilParseWordHex(const char *str,uint16_t *value)
{
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	00 d0       	rcall	.+0      	; 0x74c <utilParseWordHex+0xe>
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	8c 01       	movw	r16, r24
     752:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     754:	be 01       	movw	r22, r28
     756:	6f 5f       	subi	r22, 0xFF	; 255
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <utilParseByteHex>
     75e:	88 23       	and	r24, r24
     760:	a1 f0       	breq	.+40     	; 0x78a <utilParseWordHex+0x4c>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     762:	c8 01       	movw	r24, r16
     764:	02 96       	adiw	r24, 0x02	; 2
     766:	be 01       	movw	r22, r28
     768:	6e 5f       	subi	r22, 0xFE	; 254
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <utilParseByteHex>
     770:	88 23       	and	r24, r24
     772:	59 f0       	breq	.+22     	; 0x78a <utilParseWordHex+0x4c>
    return 0;
  *value = (uint16_t)val << 8 | val2;
     774:	99 81       	ldd	r25, Y+1	; 0x01
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	2a 81       	ldd	r18, Y+2	; 0x02
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	82 2b       	or	r24, r18
     77e:	93 2b       	or	r25, r19
     780:	f7 01       	movw	r30, r14
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	01 c0       	rjmp	.+2      	; 0x78c <utilParseWordHex+0x4e>
  return 1;
     78a:	80 e0       	ldi	r24, 0x00	; 0
}
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	cf 91       	pop	r28
     792:	df 91       	pop	r29
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	08 95       	ret

0000079e <utilParseDwordHex>:

uint8_t utilParseDwordHex(const char *str,uint32_t *value)
{
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	df 93       	push	r29
     7a8:	cf 93       	push	r28
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <utilParseDwordHex+0xe>
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <utilParseDwordHex+0x10>
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	8c 01       	movw	r16, r24
     7b4:	7b 01       	movw	r14, r22
  uint8_t val;
  if(!utilParseByteHex(&str[0],&val))
     7b6:	be 01       	movw	r22, r28
     7b8:	6f 5f       	subi	r22, 0xFF	; 255
     7ba:	7f 4f       	sbci	r23, 0xFF	; 255
     7bc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <utilParseByteHex>
     7c0:	88 23       	and	r24, r24
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <utilParseDwordHex+0x28>
     7c4:	4a c0       	rjmp	.+148    	; 0x85a <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val2;
  if(!utilParseByteHex(&str[2],&val2))
     7c6:	c8 01       	movw	r24, r16
     7c8:	02 96       	adiw	r24, 0x02	; 2
     7ca:	be 01       	movw	r22, r28
     7cc:	6e 5f       	subi	r22, 0xFE	; 254
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <utilParseByteHex>
     7d4:	88 23       	and	r24, r24
     7d6:	09 f4       	brne	.+2      	; 0x7da <utilParseDwordHex+0x3c>
     7d8:	40 c0       	rjmp	.+128    	; 0x85a <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val3;
  if(!utilParseByteHex(&str[4],&val3))
     7da:	c8 01       	movw	r24, r16
     7dc:	04 96       	adiw	r24, 0x04	; 4
     7de:	be 01       	movw	r22, r28
     7e0:	6d 5f       	subi	r22, 0xFD	; 253
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <utilParseByteHex>
     7e8:	88 23       	and	r24, r24
     7ea:	b9 f1       	breq	.+110    	; 0x85a <utilParseDwordHex+0xbc>
    return 0;
  uint8_t val4;
  if(!utilParseByteHex(&str[6],&val4))
     7ec:	c8 01       	movw	r24, r16
     7ee:	06 96       	adiw	r24, 0x06	; 6
     7f0:	be 01       	movw	r22, r28
     7f2:	6c 5f       	subi	r22, 0xFC	; 252
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255
     7f6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <utilParseByteHex>
     7fa:	88 23       	and	r24, r24
     7fc:	71 f1       	breq	.+92     	; 0x85a <utilParseDwordHex+0xbc>
    return 0;
  *value = (uint32_t)val << 24 | (uint32_t)val2 << 16 | (uint32_t)val3 << 8 | val4;
     7fe:	29 81       	ldd	r18, Y+1	; 0x01
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	52 2f       	mov	r21, r18
     808:	44 27       	eor	r20, r20
     80a:	33 27       	eor	r19, r19
     80c:	22 27       	eor	r18, r18
     80e:	8a 81       	ldd	r24, Y+2	; 0x02
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	a0 e0       	ldi	r26, 0x00	; 0
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	dc 01       	movw	r26, r24
     818:	99 27       	eor	r25, r25
     81a:	88 27       	eor	r24, r24
     81c:	28 2b       	or	r18, r24
     81e:	39 2b       	or	r19, r25
     820:	4a 2b       	or	r20, r26
     822:	5b 2b       	or	r21, r27
     824:	8c 81       	ldd	r24, Y+4	; 0x04
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	a0 e0       	ldi	r26, 0x00	; 0
     82a:	b0 e0       	ldi	r27, 0x00	; 0
     82c:	28 2b       	or	r18, r24
     82e:	39 2b       	or	r19, r25
     830:	4a 2b       	or	r20, r26
     832:	5b 2b       	or	r21, r27
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	ba 2f       	mov	r27, r26
     83e:	a9 2f       	mov	r26, r25
     840:	98 2f       	mov	r25, r24
     842:	88 27       	eor	r24, r24
     844:	28 2b       	or	r18, r24
     846:	39 2b       	or	r19, r25
     848:	4a 2b       	or	r20, r26
     84a:	5b 2b       	or	r21, r27
     84c:	f7 01       	movw	r30, r14
     84e:	20 83       	st	Z, r18
     850:	31 83       	std	Z+1, r19	; 0x01
     852:	42 83       	std	Z+2, r20	; 0x02
     854:	53 83       	std	Z+3, r21	; 0x03
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	01 c0       	rjmp	.+2      	; 0x85c <utilParseDwordHex+0xbe>
  return 1;
     85a:	80 e0       	ldi	r24, 0x00	; 0
}
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	cf 91       	pop	r28
     866:	df 91       	pop	r29
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	08 95       	ret

00000872 <utilParseByteDec>:

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
     872:	db 01       	movw	r26, r22
     874:	fc 01       	movw	r30, r24
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
      break;
    }
    c -= '0';
    value *= 10;
     87a:	4a e0       	ldi	r20, 0x0A	; 10
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
    uint8_t c = buf[digits];
    if((c<'0')||(c>'9')) {
     87c:	80 81       	ld	r24, Z
     87e:	98 2f       	mov	r25, r24
     880:	90 53       	subi	r25, 0x30	; 48
     882:	9a 30       	cpi	r25, 0x0A	; 10
     884:	50 f4       	brcc	.+20     	; 0x89a <utilParseByteDec+0x28>
      break;
    }
    c -= '0';
    value *= 10;
     886:	34 9f       	mul	r19, r20
     888:	80 2d       	mov	r24, r0
     88a:	11 24       	eor	r1, r1
    value += c;
     88c:	38 2f       	mov	r19, r24
     88e:	39 0f       	add	r19, r25
    digits++;
     890:	2f 5f       	subi	r18, 0xFF	; 255
     892:	31 96       	adiw	r30, 0x01	; 1

uint8_t utilParseByteDec(const char *buf, uint8_t *out)
{
  uint8_t value = 0;
  uint8_t digits = 0;
  while(digits < 3) {
     894:	23 30       	cpi	r18, 0x03	; 3
     896:	91 f7       	brne	.-28     	; 0x87c <utilParseByteDec+0xa>
     898:	01 c0       	rjmp	.+2      	; 0x89c <utilParseByteDec+0x2a>
    c -= '0';
    value *= 10;
    value += c;
    digits++;
  }
  if(digits > 0) {
     89a:	21 11       	cpse	r18, r1
    *out = value;
     89c:	3c 93       	st	X, r19
  }
  return digits;
}
     89e:	82 2f       	mov	r24, r18
     8a0:	08 95       	ret

000008a2 <utilReset>:
/**
 * Reboots AVR microcontroller.
 * Performs watchdog-based AVR reset, resulting in executing bootloader code
 * in a clean way.
 */
void utilReset(void) {
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
	// Indicate reset
	LED_PORT &= ~LED_STATUS;
     8a6:	08 e2       	ldi	r16, 0x28	; 40
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	f8 01       	movw	r30, r16
     8ac:	80 81       	ld	r24, Z
     8ae:	8f 7d       	andi	r24, 0xDF	; 223
     8b0:	80 83       	st	Z, r24
	timerDelay10ms(20);
     8b2:	84 e1       	ldi	r24, 0x14	; 20
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <timerDelay10ms>
	LED_PORT |= LED_STATUS;
     8ba:	f8 01       	movw	r30, r16
     8bc:	80 81       	ld	r24, Z
     8be:	80 62       	ori	r24, 0x20	; 32
     8c0:	80 83       	st	Z, r24
	timerDelay10ms(20);
     8c2:	84 e1       	ldi	r24, 0x14	; 20
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <timerDelay10ms>

	// Perform a reset
	cli();
     8ca:	f8 94       	cli
	wdt_enable(WDTO_250MS);
     8cc:	2c e0       	ldi	r18, 0x0C	; 12
     8ce:	88 e1       	ldi	r24, 0x18	; 24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	a8 95       	wdr
     8d8:	80 93 60 00 	sts	0x0060, r24
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	20 93 60 00 	sts	0x0060, r18
     8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <utilReset+0x40>

000008e4 <trigger_request>:
uint8_t s_ubFlags;
static uint8_t req_is_pending;

static void trigger_request(void)
{
  if(!req_is_pending) {
     8e4:	80 91 3e 01 	lds	r24, 0x013E
     8e8:	88 23       	and	r24, r24
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <trigger_request+0x12>
    req_is_pending = 1;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 3e 01 	sts	0x013E, r24
    parRequestAmiRead();
     8f2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <parRequestAmiRead>
     8f6:	08 95       	ret

000008f8 <bridge_loop>:
}

// ---------- loop ----------

void bridge_loop(void)
{
     8f8:	cf 92       	push	r12
     8fa:	df 92       	push	r13
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	df 93       	push	r29
     904:	cf 93       	push	r28
     906:	00 d0       	rcall	.+0      	; 0x908 <__stack+0x9>
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
  // NOTE: UART - time_stamp_spc() [BRIDGE] on\r\n

  // Associate protocol fns with given ptrs
  pb_proto_init(bridgeFillPacket, bridgeProcessPacket);
     90c:	8f e3       	ldi	r24, 0x3F	; 63
     90e:	95 e0       	ldi	r25, 0x05	; 5
     910:	68 ed       	ldi	r22, 0xD8	; 216
     912:	74 e0       	ldi	r23, 0x04	; 4
     914:	0e 94 27 0a 	call	0x144e	; 0x144e <pb_proto_init>

  // Init ENC28j60
  enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
     918:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pio_util_get_init_flags>
     91c:	68 2f       	mov	r22, r24
     91e:	09 e5       	ldi	r16, 0x59	; 89
     920:	11 e0       	ldi	r17, 0x01	; 1
     922:	c8 01       	movw	r24, r16
     924:	0e 94 09 10 	call	0x2012	; 0x2012 <enc28j60_init>

  // Reset stats
  stats_reset();
     928:	0e 94 2b 10 	call	0x2056	; 0x2056 <stats_reset>

  // Reset flags & request state
  s_ubFlags = 0;
     92c:	10 92 56 01 	sts	0x0156, r1
  req_is_pending = 0;
     930:	10 92 3e 01 	sts	0x013E, r1

  uint8_t flow_control = g_sConfig.flow_ctl;
     934:	f8 01       	movw	r30, r16
     936:	f6 80       	ldd	r15, Z+6	; 0x06
     938:	10 e0       	ldi	r17, 0x00	; 0
        trigger_request();
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     93a:	6e 01       	movw	r12, r28
     93c:	08 94       	sec
     93e:	c1 1c       	adc	r12, r1
     940:	d1 1c       	adc	r13, r1
     942:	24 c0       	rjmp	.+72     	; 0x98c <__stack+0x8d>
  uint8_t ubPacketCount;
  while(run_mode == RUN_MODE_BRIDGE) {
    // NOTE: UART command handling was here

    // Calls pb_proto_handle - this is where PAR communication is done
    pb_util_handle();
     944:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <pb_util_handle>

    // Handle packets coming from network
		ubPacketCount = enc28j60_has_recv();
     948:	0e 94 14 10 	call	0x2028	; 0x2028 <enc28j60_has_recv>
     94c:	08 2f       	mov	r16, r24
    if(ubPacketCount) {
     94e:	88 23       	and	r24, r24
     950:	51 f0       	breq	.+20     	; 0x966 <__stack+0x67>
      if(ubDisplayPacketInfo) {
        // NOTE: UART - time_stamp_spc() FIRST INCOMING!\r\n
        ubDisplayPacketInfo = 0;
      }

      if(s_ubFlags & FLAG_ONLINE) {
     952:	80 91 56 01 	lds	r24, 0x0156
     956:	80 ff       	sbrs	r24, 0
     958:	03 c0       	rjmp	.+6      	; 0x960 <__stack+0x61>
				// Comm online: let Amiga know about new packet
        trigger_request();
     95a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <trigger_request>
     95e:	03 c0       	rjmp	.+6      	; 0x966 <__stack+0x67>
      }
      else {
				// Comm offline: read packet from ENC28j60 and drop it
        uint16_t size;
        pio_util_recv_packet(&size);
     960:	c6 01       	movw	r24, r12
     962:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <pio_util_recv_packet>
        // NOTE: UART - time_stamp_spc() OFFLINE DROP: hex_word(size)\r\n
      }
    }

    // flow control
    if(flow_control) {
     966:	ff 20       	and	r15, r15
     968:	89 f0       	breq	.+34     	; 0x98c <__stack+0x8d>
      // flow limited
      if(limit_flow) {
     96a:	11 23       	and	r17, r17
     96c:	41 f0       	breq	.+16     	; 0x97e <__stack+0x7f>
        // disable again?
        if(!ubPacketCount) {
     96e:	00 23       	and	r16, r16
     970:	69 f4       	brne	.+26     	; 0x98c <__stack+0x8d>
          enc28j60_control(PIO_CONTROL_FLOW, 0);
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	0e 94 0c 10 	call	0x2018	; 0x2018 <enc28j60_control>
     97a:	10 e0       	ldi	r17, 0x00	; 0
     97c:	07 c0       	rjmp	.+14     	; 0x98c <__stack+0x8d>
        }
      }
      // no flow limit
      else {
        // enable?
        if(ubPacketCount) {
     97e:	00 23       	and	r16, r16
     980:	29 f0       	breq	.+10     	; 0x98c <__stack+0x8d>
          enc28j60_control(PIO_CONTROL_FLOW, 1);
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	0e 94 0c 10 	call	0x2018	; 0x2018 <enc28j60_control>
     98a:	11 e0       	ldi	r17, 0x01	; 1

  uint8_t flow_control = g_sConfig.flow_ctl;
  uint8_t limit_flow = 0;
  uint8_t ubDisplayPacketInfo = 1;
  uint8_t ubPacketCount;
  while(run_mode == RUN_MODE_BRIDGE) {
     98c:	80 91 41 01 	lds	r24, 0x0141
     990:	88 23       	and	r24, r24
     992:	c1 f2       	breq	.-80     	; 0x944 <__stack+0x45>
        }
      }
    }
  }

  stats_dump_all();
     994:	0e 94 69 10 	call	0x20d2	; 0x20d2 <stats_dump_all>
  enc28j60_exit();
     998:	0e 94 0b 10 	call	0x2016	; 0x2016 <enc28j60_exit>

	// NOTE: UART - time_stamp_spc() [BRIDGE] off\r\n
}
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	cf 91       	pop	r28
     9a2:	df 91       	pop	r29
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	df 90       	pop	r13
     9ac:	cf 90       	pop	r12
     9ae:	08 95       	ret

000009b0 <bridgeProcessPacket>:
 * Custom "Magic" packets are defined as topmost EtherType values.
 * @param uwSize Packet length
 * @return Always PBPROTO_STATUS_OK
 */
static uint8_t bridgeProcessPacket(uint16_t uwSize)
{
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	ec 01       	movw	r28, r24
 * Returns EtherType field value in given eth frame.
 * @param pkt Pointer to eth frame.
 * @return 2-byte EtherType field value.
 */
inline uint16_t eth_get_pkt_type(const uint8_t *pkt) {
	return net_get_word(pkt + ETH_OFF_TYPE);
     9ba:	89 e8       	ldi	r24, 0x89	; 137
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
  // get eth type
  uint16_t eth_type = eth_get_pkt_type(g_pDataBuffer);
  switch(eth_type) {
     9c2:	2f ef       	ldi	r18, 0xFF	; 255
     9c4:	8d 3f       	cpi	r24, 0xFD	; 253
     9c6:	92 07       	cpc	r25, r18
     9c8:	99 f1       	breq	.+102    	; 0xa30 <bridgeProcessPacket+0x80>
     9ca:	2f ef       	ldi	r18, 0xFF	; 255
     9cc:	8e 3f       	cpi	r24, 0xFE	; 254
     9ce:	92 07       	cpc	r25, r18
     9d0:	28 f4       	brcc	.+10     	; 0x9dc <bridgeProcessPacket+0x2c>
     9d2:	8c 5f       	subi	r24, 0xFC	; 252
     9d4:	9f 4f       	sbci	r25, 0xFF	; 255
     9d6:	09 f0       	breq	.+2      	; 0x9da <bridgeProcessPacket+0x2a>
     9d8:	40 c0       	rjmp	.+128    	; 0xa5a <bridgeProcessPacket+0xaa>
     9da:	32 c0       	rjmp	.+100    	; 0xa40 <bridgeProcessPacket+0x90>
     9dc:	2f ef       	ldi	r18, 0xFF	; 255
     9de:	8e 3f       	cpi	r24, 0xFE	; 254
     9e0:	92 07       	cpc	r25, r18
     9e2:	01 f1       	breq	.+64     	; 0xa24 <bridgeProcessPacket+0x74>
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	9f 4f       	sbci	r25, 0xFF	; 255
     9e8:	c1 f5       	brne	.+112    	; 0xa5a <bridgeProcessPacket+0xaa>
 * @param buf Pointer to magic packet.
 */
static void bridgeCommOnline(const uint8_t *buf)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] online \r\n
  s_ubFlags |= FLAG_ONLINE | FLAG_FIRST_TRANSFER;
     9ea:	80 91 56 01 	lds	r24, 0x0156
     9ee:	85 60       	ori	r24, 0x05	; 5
     9f0:	80 93 56 01 	sts	0x0156, r24

  // validate mac address and if it does not match then reconfigure PIO
  const uint8_t *src_mac = eth_get_src_mac(buf);
  if(!net_compare_mac(g_sConfig.mac_addr, src_mac)) {
     9f4:	89 e5       	ldi	r24, 0x59	; 89
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	63 e8       	ldi	r22, 0x83	; 131
     9fa:	71 e0       	ldi	r23, 0x01	; 1
     9fc:	0e 94 c3 08 	call	0x1186	; 0x1186 <net_compare_mac>
     a00:	88 23       	and	r24, r24
     a02:	b9 f5       	brne	.+110    	; 0xa72 <bridgeProcessPacket+0xc2>
    // update mac param and save
    net_copy_mac(src_mac, g_sConfig.mac_addr);
     a04:	09 e5       	ldi	r16, 0x59	; 89
     a06:	11 e0       	ldi	r17, 0x01	; 1
     a08:	83 e8       	ldi	r24, 0x83	; 131
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	b8 01       	movw	r22, r16
     a0e:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>
    param_save();
     a12:	0e 94 0c 0a 	call	0x1418	; 0x1418 <param_save>

    // re-configure PIO
    enc28j60_exit();
     a16:	0e 94 0b 10 	call	0x2016	; 0x2016 <enc28j60_exit>
    enc28j60_init(g_sConfig.mac_addr, PIO_INIT_BROAD_CAST);
     a1a:	c8 01       	movw	r24, r16
     a1c:	64 e0       	ldi	r22, 0x04	; 4
     a1e:	0e 94 09 10 	call	0x2012	; 0x2012 <enc28j60_init>
     a22:	27 c0       	rjmp	.+78     	; 0xa72 <bridgeProcessPacket+0xc2>
 * Disables ethernet communication.
 */
static void bridgeCommOffline(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] offline
  s_ubFlags &= ~FLAG_ONLINE;
     a24:	80 91 56 01 	lds	r24, 0x0156
     a28:	8e 7f       	andi	r24, 0xFE	; 254
     a2a:	80 93 56 01 	sts	0x0156, r24
     a2e:	21 c0       	rjmp	.+66     	; 0xa72 <bridgeProcessPacket+0xc2>
}

static void bridgeLoopback(uint16_t size)
{
  s_ubFlags |= FLAG_SEND_MAGIC;
     a30:	80 91 56 01 	lds	r24, 0x0156
     a34:	82 60       	ori	r24, 0x02	; 2
     a36:	80 93 56 01 	sts	0x0156, r24
  trigger_request();
     a3a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <trigger_request>
     a3e:	19 c0       	rjmp	.+50     	; 0xa72 <bridgeProcessPacket+0xc2>
      break;
    case ETH_TYPE_MAGIC_LOOPBACK:
      bridgeLoopback(uwSize);
      break;
		case ETH_TYPE_MAGIC_CMD:
			cmdProcess(uwSize);
     a40:	ce 01       	movw	r24, r28
     a42:	0e 94 03 06 	call	0xc06	; 0xc06 <cmdProcess>
			s_ubFlags |= FLAG_SEND_CMD_RESPONSE;
     a46:	80 91 56 01 	lds	r24, 0x0156
     a4a:	88 60       	ori	r24, 0x08	; 8
     a4c:	80 93 56 01 	sts	0x0156, r24
			req_is_pending = 0;
     a50:	10 92 3e 01 	sts	0x013E, r1
			trigger_request();
     a54:	0e 94 72 04 	call	0x8e4	; 0x8e4 <trigger_request>
     a58:	0c c0       	rjmp	.+24     	; 0xa72 <bridgeProcessPacket+0xc2>
			break;
    default:
      // send packet via pio
      pio_util_send_packet(uwSize);
     a5a:	ce 01       	movw	r24, r28
     a5c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <pio_util_send_packet>
      // if a packet arrived and we are not online then request online state
      if((s_ubFlags & FLAG_ONLINE)==0) {
     a60:	80 91 56 01 	lds	r24, 0x0156
     a64:	80 fd       	sbrc	r24, 0
     a66:	05 c0       	rjmp	.+10     	; 0xa72 <bridgeProcessPacket+0xc2>
static void request_magic(void)
{
	// NOTE: UART - time_stamp_spc() [MAGIC] request\r\n

  // request receive
  s_ubFlags |= FLAG_SEND_MAGIC | FLAG_FIRST_TRANSFER;
     a68:	86 60       	ori	r24, 0x06	; 6
     a6a:	80 93 56 01 	sts	0x0156, r24
  trigger_request();
     a6e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <trigger_request>
        request_magic();
      }
      break;
  }
  return PBPROTO_STATUS_OK;
}
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	08 95       	ret

00000a7e <bridgeFillPacket>:
// ----- packet callbacks -----

// the Amiga requests a new packet

static uint8_t bridgeFillPacket(uint16_t *pFilledSize)
{
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ec 01       	movw	r28, r24
  if((s_ubFlags & FLAG_SEND_MAGIC) == FLAG_SEND_MAGIC) {
     a88:	80 91 56 01 	lds	r24, 0x0156
     a8c:	81 ff       	sbrs	r24, 1
     a8e:	1c c0       	rjmp	.+56     	; 0xac8 <bridgeFillPacket+0x4a>
		// Send magic packet to Amiga
    s_ubFlags &= ~FLAG_SEND_MAGIC;
     a90:	8d 7f       	andi	r24, 0xFD	; 253
     a92:	80 93 56 01 	sts	0x0156, r24
extern const uint8_t net_zero_mac[6];
extern const uint8_t net_zero_ip[4];
extern const uint8_t net_ones_ip[4];

/* convenience functions */
inline void net_copy_bcast_mac(uint8_t *out) { net_copy_mac(net_bcast_mac, out); }
     a96:	0d e7       	ldi	r16, 0x7D	; 125
     a98:	11 e0       	ldi	r17, 0x01	; 1
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	b8 01       	movw	r22, r16
     aa0:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>

    // Build magic packet header
    // Target (bcast) MAC, src (plipbox) MAC, 0xFFFF => pFilledSize: 14 bytes
    net_copy_bcast_mac(g_pDataBuffer + ETH_OFF_TGT_MAC);
    net_copy_mac(g_sConfig.mac_addr, g_pDataBuffer + ETH_OFF_SRC_MAC);
     aa4:	b8 01       	movw	r22, r16
     aa6:	6a 5f       	subi	r22, 0xFA	; 250
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	89 e5       	ldi	r24, 0x59	; 89
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>
    net_put_word(g_pDataBuffer + ETH_OFF_TYPE, ETH_TYPE_MAGIC_ONLINE);
     ab2:	c8 01       	movw	r24, r16
     ab4:	0c 96       	adiw	r24, 0x0c	; 12
     ab6:	6f ef       	ldi	r22, 0xFF	; 255
     ab8:	7f ef       	ldi	r23, 0xFF	; 255
     aba:	0e 94 81 08 	call	0x1102	; 0x1102 <net_put_word>

    *pFilledSize = ETH_HDR_SIZE;
     abe:	8e e0       	ldi	r24, 0x0E	; 14
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	99 83       	std	Y+1, r25	; 0x01
     ac4:	88 83       	st	Y, r24
     ac6:	13 c0       	rjmp	.+38     	; 0xaee <bridgeFillPacket+0x70>
  }
  else if((s_ubFlags & FLAG_SEND_CMD_RESPONSE) == FLAG_SEND_CMD_RESPONSE) {
     ac8:	83 ff       	sbrs	r24, 3
     aca:	07 c0       	rjmp	.+14     	; 0xada <bridgeFillPacket+0x5c>
    // Send CMD response - it's already in buffer
    *pFilledSize = g_uwCmdResponseSize;
     acc:	80 91 57 01 	lds	r24, 0x0157
     ad0:	90 91 58 01 	lds	r25, 0x0158
     ad4:	99 83       	std	Y+1, r25	; 0x01
     ad6:	88 83       	st	Y, r24
     ad8:	0a c0       	rjmp	.+20     	; 0xaee <bridgeFillPacket+0x70>
  }
  else {
		// Receive packet buffer with data from ENC28j60 if pending
    pio_util_recv_packet(pFilledSize);
     ada:	ce 01       	movw	r24, r28
     adc:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <pio_util_recv_packet>

    if(s_ubFlags & FLAG_FIRST_TRANSFER) {
     ae0:	80 91 56 01 	lds	r24, 0x0156
     ae4:	82 ff       	sbrs	r24, 2
     ae6:	03 c0       	rjmp	.+6      	; 0xaee <bridgeFillPacket+0x70>
			// report first packet transfer
      // NOTE: UART - time_stamp_spc() FIRST TRANSFER!\r\n
      s_ubFlags &= ~FLAG_FIRST_TRANSFER;
     ae8:	8b 7f       	andi	r24, 0xFB	; 251
     aea:	80 93 56 01 	sts	0x0156, r24
    }
  }

  req_is_pending = 0;
     aee:	10 92 3e 01 	sts	0x013E, r1

  return PBPROTO_STATUS_OK;
}
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	08 95       	ret

00000afe <bridge_test_loop>:

  return PBPROTO_STATUS_OK;
}

void bridge_test_loop(void)
{
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	df 93       	push	r29
     b04:	cf 93       	push	r28
     b06:	00 d0       	rcall	.+0      	; 0xb08 <bridge_test_loop+0xa>
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
	// NOTE: UART - time_stamp_spc [BRIDGE_TEST] on\r\n

  pb_proto_init(fill_pkt, proc_pkt);
     b0c:	87 ec       	ldi	r24, 0xC7	; 199
     b0e:	95 e0       	ldi	r25, 0x05	; 5
     b10:	63 ee       	ldi	r22, 0xE3	; 227
     b12:	75 e0       	ldi	r23, 0x05	; 5
     b14:	0e 94 27 0a 	call	0x144e	; 0x144e <pb_proto_init>
  enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
     b18:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pio_util_get_init_flags>
     b1c:	68 2f       	mov	r22, r24
     b1e:	89 e5       	ldi	r24, 0x59	; 89
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 09 10 	call	0x2012	; 0x2012 <enc28j60_init>
  stats_reset();
     b26:	0e 94 2b 10 	call	0x2056	; 0x2056 <stats_reset>
    pb_util_handle();

    // incoming packet via PIO?
    if(enc28j60_has_recv()) {
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
     b2a:	8e 01       	movw	r16, r28
     b2c:	0f 5f       	subi	r16, 0xFF	; 255
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
     b30:	1f c0       	rjmp	.+62     	; 0xb70 <bridge_test_loop+0x72>
  while(run_mode == RUN_MODE_BRIDGE_TEST) {
    // handle commands
    // NOTE: cmd_worker was here, reset by loop break

    // handle pbproto
    pb_util_handle();
     b32:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <pb_util_handle>

    // incoming packet via PIO?
    if(enc28j60_has_recv()) {
     b36:	0e 94 14 10 	call	0x2028	; 0x2028 <enc28j60_has_recv>
     b3a:	88 23       	and	r24, r24
     b3c:	c9 f0       	breq	.+50     	; 0xb70 <bridge_test_loop+0x72>
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
     b3e:	c8 01       	movw	r24, r16
     b40:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <pio_util_recv_packet>
     b44:	88 23       	and	r24, r24
     b46:	a1 f4       	brne	.+40     	; 0xb70 <bridge_test_loop+0x72>
        // handle ARP?
        if(!pio_util_handle_arp(size)) {
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
     b4c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <pio_util_handle_arp>
     b50:	88 23       	and	r24, r24
     b52:	71 f4       	brne	.+28     	; 0xb70 <bridge_test_loop+0x72>
          // is it a UDP test packet?
          if(pio_util_handle_udp_test(size)) {
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <pio_util_handle_udp_test>
     b5c:	88 23       	and	r24, r24
     b5e:	41 f0       	breq	.+16     	; 0xb70 <bridge_test_loop+0x72>
            if(pio_pkt_size != 0) {
							// NOTE: UART - OVERWRITE?!\r\n
            }

            // request receive
            pio_pkt_size = size;
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	90 93 40 01 	sts	0x0140, r25
     b68:	80 93 3f 01 	sts	0x013F, r24
            parRequestAmiRead();
     b6c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <parRequestAmiRead>

  pb_proto_init(fill_pkt, proc_pkt);
  enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
  stats_reset();

  while(run_mode == RUN_MODE_BRIDGE_TEST) {
     b70:	80 91 41 01 	lds	r24, 0x0141
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	e9 f2       	breq	.-70     	; 0xb32 <bridge_test_loop+0x34>
        }
      }
    }
  }

  stats_dump_all();
     b78:	0e 94 69 10 	call	0x20d2	; 0x20d2 <stats_dump_all>
  enc28j60_exit();
     b7c:	0e 94 0b 10 	call	0x2016	; 0x2016 <enc28j60_exit>

  // NOTE: UART - time_stamp_spc() [BRIDGE_TEST] off\r\n
}
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	08 95       	ret

00000b8e <fill_pkt>:
/* a RECV command arrived from Amiga.
   this should only happen if we got a packet here from PIO
   in the first place
*/
static uint8_t fill_pkt(uint16_t *pFilledSize)
{
     b8e:	fc 01       	movw	r30, r24
  *pFilledSize = pio_pkt_size;
     b90:	80 91 3f 01 	lds	r24, 0x013F
     b94:	90 91 40 01 	lds	r25, 0x0140
     b98:	91 83       	std	Z+1, r25	; 0x01
     b9a:	80 83       	st	Z, r24
  if(*pFilledSize > DATABUF_SIZE) {
     b9c:	8b 5e       	subi	r24, 0xEB	; 235
     b9e:	95 40       	sbci	r25, 0x05	; 5
     ba0:	10 f0       	brcs	.+4      	; 0xba6 <fill_pkt+0x18>
     ba2:	85 e0       	ldi	r24, 0x05	; 5
     ba4:	08 95       	ret
    return PBPROTO_STATUS_PACKET_TOO_LARGE;
  }

  // in test mode 0 send via internal device loopback
  if(g_sConfig.test_mode == 0) {
     ba6:	80 91 6c 01 	lds	r24, 0x016C
     baa:	88 23       	and	r24, r24
     bac:	31 f4       	brne	.+12     	; 0xbba <fill_pkt+0x2c>
    // switch eth type to magic for loop back
    net_put_word(g_pDataBuffer + ETH_OFF_TYPE, ETH_TYPE_MAGIC_LOOPBACK);
     bae:	89 e8       	ldi	r24, 0x89	; 137
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	6d ef       	ldi	r22, 0xFD	; 253
     bb4:	7f ef       	ldi	r23, 0xFF	; 255
     bb6:	0e 94 81 08 	call	0x1102	; 0x1102 <net_put_word>
  }

  // consumed packet
  pio_pkt_size = 0;
     bba:	10 92 40 01 	sts	0x0140, r1
     bbe:	10 92 3f 01 	sts	0x013F, r1
     bc2:	81 e0       	ldi	r24, 0x01	; 1

  return PBPROTO_STATUS_OK;
}
     bc4:	08 95       	ret

00000bc6 <proc_pkt>:

/* a SEND command arrvied from Amiga.
   we got our packet back. forward to PIO
*/
static uint8_t proc_pkt(uint16_t uwSize)
{
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	ec 01       	movw	r28, r24
  // make sure its the expected packet type
  uint16_t type = net_get_word(g_pDataBuffer + ETH_OFF_TYPE);
     bcc:	89 e8       	ldi	r24, 0x89	; 137
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
     bd4:	9c 01       	movw	r18, r24

  // in test mode 0 packet was sent by internal device loopback
  if(g_sConfig.test_mode == 0) {
     bd6:	80 91 6c 01 	lds	r24, 0x016C
     bda:	88 23       	and	r24, r24
     bdc:	51 f4       	brne	.+20     	; 0xbf2 <proc_pkt+0x2c>
    if(type != ETH_TYPE_MAGIC_LOOPBACK) {
     bde:	2d 5f       	subi	r18, 0xFD	; 253
     be0:	3f 4f       	sbci	r19, 0xFF	; 255
     be2:	69 f4       	brne	.+26     	; 0xbfe <proc_pkt+0x38>
			// NOTE: UART - NO MAGIC!!\r\n
      return PBPROTO_STATUS_OK;
    } else {
      // switch eth type back to IPv4
      net_put_word(g_pDataBuffer + ETH_OFF_TYPE, ETH_TYPE_IPV4);
     be4:	89 e8       	ldi	r24, 0x89	; 137
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	78 e0       	ldi	r23, 0x08	; 8
     bec:	0e 94 81 08 	call	0x1102	; 0x1102 <net_put_word>
     bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <proc_pkt+0x32>
    }
  } else {
    if(type != ETH_TYPE_IPV4) {
     bf2:	20 50       	subi	r18, 0x00	; 0
     bf4:	38 40       	sbci	r19, 0x08	; 8
     bf6:	19 f4       	brne	.+6      	; 0xbfe <proc_pkt+0x38>
      return PBPROTO_STATUS_OK;
    }
  }

  // send packet via pio
  pio_util_send_packet(uwSize);
     bf8:	ce 01       	movw	r24, r28
     bfa:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <pio_util_send_packet>

  return PBPROTO_STATUS_OK;
}
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <cmdProcess>:

/**
 * PlipUltimate command process function.
 * This function should be called when cmd packet has been received.
 */
void cmdProcess(uint16_t uwPacketSize) {
     c06:	1f 93       	push	r17
	uint8_t ubCmdType = g_pDataBuffer[0];
     c08:	ed e7       	ldi	r30, 0x7D	; 125
     c0a:	f1 e0       	ldi	r31, 0x01	; 1
     c0c:	90 81       	ld	r25, Z
	g_pDataBuffer[0] |= CMD_RESPONSE;
     c0e:	89 2f       	mov	r24, r25
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	80 83       	st	Z, r24
	switch(ubCmdType) {
     c14:	93 30       	cpi	r25, 0x03	; 3
     c16:	41 f0       	breq	.+16     	; 0xc28 <cmdProcess+0x22>
     c18:	94 30       	cpi	r25, 0x04	; 4
     c1a:	b1 f0       	breq	.+44     	; 0xc48 <cmdProcess+0x42>
     c1c:	91 30       	cpi	r25, 0x01	; 1
     c1e:	09 f0       	breq	.+2      	; 0xc22 <cmdProcess+0x1c>
     c20:	3f c0       	rjmp	.+126    	; 0xca0 <cmdProcess+0x9a>
		case CMD_SDWRITE:   cmdSdWrite();   return;
	}
}

static void cmdReboot(void) {
	utilReset();
     c22:	0e 94 51 04 	call	0x8a2	; 0x8a2 <utilReset>
     c26:	3c c0       	rjmp	.+120    	; 0xca0 <cmdProcess+0x9a>
static void cmdGetLog(void) {
	// TODO(KaiN#9): implement cmdGetLog()
}

static void cmdGetConfig(void) {
	memcpy(&g_pDataBuffer[ETH_HDR_SIZE], &g_sConfig, sizeof(tConfig));
     c28:	ab e8       	ldi	r26, 0x8B	; 139
     c2a:	b1 e0       	ldi	r27, 0x01	; 1
     c2c:	e9 e5       	ldi	r30, 0x59	; 89
     c2e:	f1 e0       	ldi	r31, 0x01	; 1
     c30:	84 e1       	ldi	r24, 0x14	; 20
     c32:	01 90       	ld	r0, Z+
     c34:	0d 92       	st	X+, r0
     c36:	81 50       	subi	r24, 0x01	; 1
     c38:	e1 f7       	brne	.-8      	; 0xc32 <cmdProcess+0x2c>
	g_uwCmdResponseSize = ETH_HDR_SIZE + sizeof(tConfig);
     c3a:	82 e2       	ldi	r24, 0x22	; 34
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	90 93 58 01 	sts	0x0158, r25
     c42:	80 93 57 01 	sts	0x0157, r24
     c46:	2c c0       	rjmp	.+88     	; 0xca0 <cmdProcess+0x9a>
}

static void cmdSetConfig(void) {
	uint8_t ubResult = 1;

	if(
     c48:	80 91 7e 01 	lds	r24, 0x017E
     c4c:	81 50       	subi	r24, 0x01	; 1
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	10 f0       	brcs	.+4      	; 0xc56 <cmdProcess+0x50>
     c52:	13 e0       	ldi	r17, 0x03	; 3
     c54:	1d c0       	rjmp	.+58     	; 0xc90 <cmdProcess+0x8a>
	) {
		ubResult |= 0b10;
	}
	else {
		// Update current config
		memcpy(&g_sConfig, &g_pDataBuffer[ETH_HDR_SIZE], sizeof(tConfig));
     c56:	a9 e5       	ldi	r26, 0x59	; 89
     c58:	b1 e0       	ldi	r27, 0x01	; 1
     c5a:	eb e8       	ldi	r30, 0x8B	; 139
     c5c:	f1 e0       	ldi	r31, 0x01	; 1
     c5e:	84 e1       	ldi	r24, 0x14	; 20
     c60:	01 90       	ld	r0, Z+
     c62:	0d 92       	st	X+, r0
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	e1 f7       	brne	.-8      	; 0xc60 <cmdProcess+0x5a>

		// Update ROM config
		if(g_pDataBuffer[1] == WRITE_TYPE_DEFAULT) {
     c68:	80 91 7e 01 	lds	r24, 0x017E
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	31 f4       	brne	.+12     	; 0xc7c <cmdProcess+0x76>
			if(param_save())
     c70:	0e 94 0c 0a 	call	0x1418	; 0x1418 <param_save>
     c74:	88 23       	and	r24, r24
     c76:	11 f0       	breq	.+4      	; 0xc7c <cmdProcess+0x76>
     c78:	15 e0       	ldi	r17, 0x05	; 5
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <cmdProcess+0x78>
     c7c:	11 e0       	ldi	r17, 0x01	; 1
				ubResult |= 0b100;
		}

		// Reconfigure plip
		enc28j60_exit();
     c7e:	0e 94 0b 10 	call	0x2016	; 0x2016 <enc28j60_exit>
		enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
     c82:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pio_util_get_init_flags>
     c86:	68 2f       	mov	r22, r24
     c88:	89 e5       	ldi	r24, 0x59	; 89
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 09 10 	call	0x2012	; 0x2012 <enc28j60_init>
	}

	// Prepare response
	g_pDataBuffer[1] = ubResult;
     c90:	10 93 7e 01 	sts	0x017E, r17
	g_uwCmdResponseSize = ETH_HDR_SIZE;
     c94:	8e e0       	ldi	r24, 0x0E	; 14
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	90 93 58 01 	sts	0x0158, r25
     c9c:	80 93 57 01 	sts	0x0157, r24
		case CMD_SETCONFIG: cmdSetConfig(); return;
		case CMD_SDINFO:    cmdGetSdInfo(); return;
		case CMD_SDREAD:    cmdSdRead();    return;
		case CMD_SDWRITE:   cmdSdWrite();   return;
	}
}
     ca0:	1f 91       	pop	r17
     ca2:	08 95       	ret

00000ca4 <cmd_quit>:
#include "stats.h"

COMMAND(cmd_quit)
{
  return CMD_QUIT;
}
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	08 95       	ret

00000ca8 <cmd_device_reset>:

COMMAND(cmd_device_reset)
{
  return CMD_RESET;
}
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	08 95       	ret

00000cac <cmd_version>:

COMMAND(cmd_version)
{
	// NOTE: UART - VERSION BUILD_DATE\r\n
  return CMD_OK;
}
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret

00000cb0 <cmd_param_ip_addr>:
    return CMD_PARSE_ERROR;
  }
}

COMMAND(cmd_param_ip_addr)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <cmd_param_ip_addr+0x6>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <cmd_param_ip_addr+0x8>
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	fb 01       	movw	r30, r22
  uint8_t ip[4];

  if(net_parse_ip((char*)argv[1], ip)) {
     cbe:	82 81       	ldd	r24, Z+2	; 0x02
     cc0:	93 81       	ldd	r25, Z+3	; 0x03
     cc2:	be 01       	movw	r22, r28
     cc4:	6f 5f       	subi	r22, 0xFF	; 255
     cc6:	7f 4f       	sbci	r23, 0xFF	; 255
     cc8:	0e 94 4b 09 	call	0x1296	; 0x1296 <net_parse_ip>
     ccc:	88 23       	and	r24, r24
     cce:	11 f4       	brne	.+4      	; 0xcd4 <cmd_param_ip_addr+0x24>
     cd0:	81 e1       	ldi	r24, 0x11	; 17
     cd2:	07 c0       	rjmp	.+14     	; 0xce2 <cmd_param_ip_addr+0x32>
    net_copy_ip(ip, g_sConfig.test_ip);
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	65 e6       	ldi	r22, 0x65	; 101
     cda:	71 e0       	ldi	r23, 0x01	; 1
     cdc:	0e 94 66 08 	call	0x10cc	; 0x10cc <net_copy_ip>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <cmd_param_word>:
  }
  return result;
}

COMMAND(cmd_param_word)
{
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <cmd_param_word+0xa>
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	28 2f       	mov	r18, r24
     d00:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     d02:	ed 91       	ld	r30, X+
     d04:	fc 91       	ld	r31, X
     d06:	11 97       	sbiw	r26, 0x01	; 1
  uint8_t type = argv[0][1];
     d08:	91 81       	ldd	r25, Z+1	; 0x01
  uint16_t *val = 0;

  if(group == 't') {
     d0a:	80 81       	ld	r24, Z
     d0c:	84 37       	cpi	r24, 0x74	; 116
     d0e:	19 f5       	brne	.+70     	; 0xd56 <cmd_param_word+0x66>
    switch(type) {
     d10:	90 37       	cpi	r25, 0x70	; 112
     d12:	59 f0       	breq	.+22     	; 0xd2a <cmd_param_word+0x3a>
     d14:	94 37       	cpi	r25, 0x74	; 116
     d16:	19 f0       	breq	.+6      	; 0xd1e <cmd_param_word+0x2e>
     d18:	9c 36       	cpi	r25, 0x6C	; 108
     d1a:	e9 f4       	brne	.+58     	; 0xd56 <cmd_param_word+0x66>
     d1c:	03 c0       	rjmp	.+6      	; 0xd24 <cmd_param_word+0x34>
     d1e:	03 e6       	ldi	r16, 0x63	; 99
     d20:	11 e0       	ldi	r17, 0x01	; 1
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <cmd_param_word+0x3e>
     d24:	01 e6       	ldi	r16, 0x61	; 97
     d26:	11 e0       	ldi	r17, 0x01	; 1
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <cmd_param_word+0x3e>
     d2a:	09 e6       	ldi	r16, 0x69	; 105
     d2c:	11 e0       	ldi	r17, 0x01	; 1
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     d2e:	21 30       	cpi	r18, 0x01	; 1
     d30:	91 f0       	breq	.+36     	; 0xd56 <cmd_param_word+0x66>
    return CMD_PARSE_ERROR;
  } else {
    uint16_t new_val;
    if(utilParseWordHex((char*)argv[1],&new_val)) {
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	8d 91       	ld	r24, X+
     d36:	9c 91       	ld	r25, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	be 01       	movw	r22, r28
     d3c:	6f 5f       	subi	r22, 0xFF	; 255
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	0e 94 9f 03 	call	0x73e	; 0x73e <utilParseWordHex>
     d44:	88 23       	and	r24, r24
     d46:	39 f0       	breq	.+14     	; 0xd56 <cmd_param_word+0x66>
      *val = new_val;
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	f8 01       	movw	r30, r16
     d4e:	91 83       	std	Z+1, r25	; 0x01
     d50:	80 83       	st	Z, r24
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <cmd_param_word+0x68>
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return CMD_OK;
     d56:	81 e1       	ldi	r24, 0x11	; 17
}
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	08 95       	ret

00000d66 <cmd_param_toggle>:
  param_reset();
  return CMD_OK;
}

COMMAND(cmd_param_toggle)
{
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	1f 93       	push	r17
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	0f 92       	push	r0
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	db 01       	movw	r26, r22
  uint8_t group = argv[0][0];
     d78:	ed 91       	ld	r30, X+
     d7a:	fc 91       	ld	r31, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	90 81       	ld	r25, Z
  uint8_t type = argv[0][1];
     d80:	21 81       	ldd	r18, Z+1	; 0x01
  uint8_t *val = 0;
  uint8_t result = CMD_OK;

  if(group == 't') {
     d82:	94 37       	cpi	r25, 0x74	; 116
     d84:	41 f4       	brne	.+16     	; 0xd96 <cmd_param_toggle+0x30>
    switch(type) {
     d86:	2d 36       	cpi	r18, 0x6D	; 109
     d88:	71 f5       	brne	.+92     	; 0xde6 <cmd_param_toggle+0x80>
     d8a:	ec e6       	ldi	r30, 0x6C	; 108
     d8c:	f1 e0       	ldi	r31, 0x01	; 1
     d8e:	90 81       	ld	r25, Z
     d90:	7f 01       	movw	r14, r30
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	11 c0       	rjmp	.+34     	; 0xdb8 <cmd_param_toggle+0x52>
      case 'm': val = &g_sConfig.test_mode; break;
      default: return CMD_PARSE_ERROR;
    }
  }
  else if(group == 'f') {
     d96:	96 36       	cpi	r25, 0x66	; 102
     d98:	31 f5       	brne	.+76     	; 0xde6 <cmd_param_toggle+0x80>
    switch(type) {
     d9a:	23 36       	cpi	r18, 0x63	; 99
     d9c:	41 f0       	breq	.+16     	; 0xdae <cmd_param_toggle+0x48>
     d9e:	24 36       	cpi	r18, 0x64	; 100
     da0:	11 f5       	brne	.+68     	; 0xde6 <cmd_param_toggle+0x80>
     da2:	e0 e6       	ldi	r30, 0x60	; 96
     da4:	f1 e0       	ldi	r31, 0x01	; 1
     da6:	90 81       	ld	r25, Z
     da8:	7f 01       	movw	r14, r30
     daa:	13 e0       	ldi	r17, 0x03	; 3
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <cmd_param_toggle+0x52>
     dae:	ef e5       	ldi	r30, 0x5F	; 95
     db0:	f1 e0       	ldi	r31, 0x01	; 1
     db2:	90 81       	ld	r25, Z
     db4:	7f 01       	movw	r14, r30
     db6:	13 e0       	ldi	r17, 0x03	; 3
  }
  else {
    return CMD_PARSE_ERROR;
  }

  if(argc == 1) {
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	31 f4       	brne	.+12     	; 0xdc8 <cmd_param_toggle+0x62>
    // toggle value if no argument is given
    *val = *val ? 0 : 1;
     dbc:	f7 01       	movw	r30, r14
     dbe:	10 82       	st	Z, r1
     dc0:	99 23       	and	r25, r25
     dc2:	91 f4       	brne	.+36     	; 0xde8 <cmd_param_toggle+0x82>
     dc4:	80 83       	st	Z, r24
     dc6:	10 c0       	rjmp	.+32     	; 0xde8 <cmd_param_toggle+0x82>
  } else {
    uint8_t new_val;
    if(utilParseByteHex((char*)argv[1],&new_val)) {
     dc8:	12 96       	adiw	r26, 0x02	; 2
     dca:	8d 91       	ld	r24, X+
     dcc:	9c 91       	ld	r25, X
     dce:	13 97       	sbiw	r26, 0x03	; 3
     dd0:	be 01       	movw	r22, r28
     dd2:	6f 5f       	subi	r22, 0xFF	; 255
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <utilParseByteHex>
     dda:	88 23       	and	r24, r24
     ddc:	21 f0       	breq	.+8      	; 0xde6 <cmd_param_toggle+0x80>
      *val = new_val;
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	f7 01       	movw	r30, r14
     de2:	80 83       	st	Z, r24
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <cmd_param_toggle+0x82>
     de6:	11 e1       	ldi	r17, 0x11	; 17
    } else {
      return CMD_PARSE_ERROR;
    }
  }
  return result;
}
     de8:	81 2f       	mov	r24, r17
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	1f 91       	pop	r17
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	08 95       	ret

00000df8 <cmd_param_mac_addr>:
  }
  return CMD_OK;
}

COMMAND(cmd_param_mac_addr)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <cmd_param_mac_addr+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <cmd_param_mac_addr+0x8>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <cmd_param_mac_addr+0xa>
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	fb 01       	movw	r30, r22
  uint8_t mac[6];

  if(net_parse_mac((char*)argv[1], mac)) {
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	be 01       	movw	r22, r28
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	0e 94 12 09 	call	0x1224	; 0x1224 <net_parse_mac>
     e16:	88 23       	and	r24, r24
     e18:	11 f4       	brne	.+4      	; 0xe1e <cmd_param_mac_addr+0x26>
     e1a:	81 e1       	ldi	r24, 0x11	; 17
     e1c:	07 c0       	rjmp	.+14     	; 0xe2c <cmd_param_mac_addr+0x34>
    net_copy_mac(mac, g_sConfig.mac_addr);
     e1e:	ce 01       	movw	r24, r28
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	69 e5       	ldi	r22, 0x59	; 89
     e24:	71 e0       	ldi	r23, 0x01	; 1
     e26:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
    return CMD_OK;
  } else {
    return CMD_PARSE_ERROR;
  }
}
     e2c:	26 96       	adiw	r28, 0x06	; 6
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <cmd_stats_reset>:
  return CMD_OK;
}

COMMAND(cmd_stats_reset)
{
  stats_reset();
     e3e:	0e 94 2b 10 	call	0x2056	; 0x2056 <stats_reset>
  return CMD_OK;
}
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	08 95       	ret

00000e46 <cmd_stats_dump>:
  }
}

COMMAND(cmd_stats_dump)
{
  stats_dump_all();
     e46:	0e 94 69 10 	call	0x20d2	; 0x20d2 <stats_dump_all>
  return CMD_OK;
}
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	08 95       	ret

00000e4e <cmd_param_reset>:
  }
}

COMMAND(cmd_param_reset)
{
  param_reset();
     e4e:	0e 94 cc 09 	call	0x1398	; 0x1398 <param_reset>
  return CMD_OK;
}
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	08 95       	ret

00000e56 <cmd_param_load>:
  }
}

COMMAND(cmd_param_load)
{
  uint8_t result = param_load();
     e56:	0e 94 db 09 	call	0x13b6	; 0x13b6 <param_load>
  if(result == PARAM_OK) {
     e5a:	81 11       	cpse	r24, r1
    return CMD_OK;
  } else {
    return CMD_MASK_ERROR | result;
     e5c:	80 62       	ori	r24, 0x20	; 32
  }
}
     e5e:	08 95       	ret

00000e60 <cmd_param_save>:
  return CMD_OK;
}

COMMAND(cmd_param_save)
{
  uint8_t result = param_save();
     e60:	0e 94 0c 0a 	call	0x1418	; 0x1418 <param_save>
  if(result == PARAM_OK) {
     e64:	81 11       	cpse	r24, r1
    return CMD_OK;
  } else {
    return CMD_MASK_ERROR | result;
     e66:	80 62       	ori	r24, 0x20	; 32
  }
}
     e68:	08 95       	ret

00000e6a <cmd_param_dump>:
  return CMD_OK;
}

COMMAND(cmd_param_dump)
{
  param_dump();
     e6a:	0e 94 a6 09 	call	0x134c	; 0x134c <param_dump>
  return CMD_OK;
}
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	08 95       	ret

00000e72 <cmd_enter_pb_test_mode>:
  stats_reset();
}

COMMAND_KEY(cmd_enter_pb_test_mode)
{
  run_mode = RUN_MODE_PB_TEST;
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	80 93 41 01 	sts	0x0141, r24
}
     e78:	08 95       	ret

00000e7a <cmd_enter_pio_test_mode>:

COMMAND_KEY(cmd_enter_pio_test_mode)
{
  run_mode = RUN_MODE_PIO_TEST;
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	80 93 41 01 	sts	0x0141, r24
}
     e80:	08 95       	ret

00000e82 <cmd_enter_bridge_mode>:

COMMAND_KEY(cmd_enter_bridge_mode)
{
  run_mode = RUN_MODE_BRIDGE;
     e82:	10 92 41 01 	sts	0x0141, r1
}
     e86:	08 95       	ret

00000e88 <cmd_enter_bridge_test_mode>:

COMMAND_KEY(cmd_enter_bridge_test_mode)
{
  run_mode = RUN_MODE_BRIDGE_TEST;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 41 01 	sts	0x0141, r24
}
     e8e:	08 95       	ret

00000e90 <cmd_toggle_verbose>:
  pb_test_toggle_auto();
}

COMMAND_KEY(cmd_toggle_verbose)
{
  global_verbose = !global_verbose;
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	80 91 42 01 	lds	r24, 0x0142
     e96:	88 23       	and	r24, r24
     e98:	09 f4       	brne	.+2      	; 0xe9c <cmd_toggle_verbose+0xc>
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	90 93 42 01 	sts	0x0142, r25
  // NOTE: UART - VERBOSE: global_verbose ? "ON\r\n" : "OFF\r\n"
}
     ea0:	08 95       	ret

00000ea2 <cmd_toggle_auto_mode>:
  pb_test_send_packet(1);
}

COMMAND_KEY(cmd_toggle_auto_mode)
{
  pb_test_toggle_auto();
     ea2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pb_test_toggle_auto>
}
     ea6:	08 95       	ret

00000ea8 <cmd_send_test_packet_silent>:
  pb_test_send_packet(0);
}

COMMAND_KEY(cmd_send_test_packet_silent)
{
  pb_test_send_packet(1);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <pb_test_send_packet>
}
     eae:	08 95       	ret

00000eb0 <cmd_send_test_packet>:
  run_mode = RUN_MODE_BRIDGE_TEST;
}

COMMAND_KEY(cmd_send_test_packet)
{
  pb_test_send_packet(0);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <pb_test_send_packet>
}
     eb6:	08 95       	ret

00000eb8 <cmd_reset_stats>:
  stats_dump_all();
}

COMMAND_KEY(cmd_reset_stats)
{
  stats_reset();
     eb8:	0e 94 2b 10 	call	0x2056	; 0x2056 <stats_reset>
}
     ebc:	08 95       	ret

00000ebe <cmd_dump_stats>:
#include "main.h"
#include "base/uartutil.h"

COMMAND_KEY(cmd_dump_stats)
{
  stats_dump_all();
     ebe:	0e 94 69 10 	call	0x20d2	; 0x20d2 <stats_dump_all>
}
     ec2:	08 95       	ret

00000ec4 <dump_eth_pkt>:
void dump_eth_pkt(const uint8_t *eth_buf, uint16_t size)
{
  uint8_t buf[4];

  // NOTE: UART - [dword_to_dec(size), hex_word(eth_get_pkt_type(eth_buf)), eth_get_src_mac(eth_buf) > eth_get_tgt_mac(eth_buf)]
}
     ec4:	08 95       	ret

00000ec6 <dump_ip_pkt>:
		// NOTE: UART - , hex_word(proto)
  }

  // src/tgt ip
  // NOTE: UART - , net_dump_ip(ip_get_src_ip(ip_buf)) > net_dump_ip(ip_get_tgt_ip(ip_buf)) ]
}
     ec6:	08 95       	ret

00000ec8 <dump_pb_cmd>:
  if(!ps->is_send) {
		// NOTE: UART - +req= uart_send_delta(ps->recv_delta);
  }

  // NOTE: UART - \r\n
}
     ec8:	08 95       	ret

00000eca <dump_arp_pkt>:

extern uint8_t arp_is_ipv4(const uint8_t *buf, uint16_t len);
extern void arp_make_reply(uint8_t *buf, const uint8_t *my_mac, const uint8_t *my_ip);

/* getter */
inline uint16_t arp_get_op(const uint8_t *buf) { return net_get_word(buf + ARP_OFF_OP); }
     eca:	06 96       	adiw	r24, 0x06	; 6
     ecc:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
		// NOTE: UART - hex_word(op)
  }

  // src-tgt pair
  // NOTE: UART - ,(net_dump_mac(arp_get_src_mac(arp_buf)), net_dump_ip(arp_get_src_ip(arp_buf))) > (net_dump_mac(arp_get_tgt_mac(arp_buf)) , net_dump_ip(arp_get_tgt_ip(arp_buf)))]
}
     ed0:	08 95       	ret

00000ed2 <dump_ip_protocol>:
		// NOTE: UART - hex_word(port)
  }
}

extern void dump_ip_protocol(const uint8_t *ip_buf)
{
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	fc 01       	movw	r30, r24
  const uint8_t *proto_buf = ip_buf + ip_get_hdr_length(ip_buf);
     eda:	80 81       	ld	r24, Z
     edc:	88 0f       	add	r24, r24
     ede:	88 0f       	add	r24, r24
     ee0:	8c 73       	andi	r24, 0x3C	; 60
     ee2:	ef 01       	movw	r28, r30
     ee4:	c8 0f       	add	r28, r24
     ee6:	d1 1d       	adc	r29, r1

inline const uint8_t *ip_get_src_ip(const uint8_t *buf) { return buf + 12; }
inline const uint8_t *ip_get_tgt_ip(const uint8_t *buf) { return buf + 16; }
inline uint16_t ip_get_total_length(const uint8_t *buf) { return (uint16_t)buf[2] << 8 | (uint16_t)buf[3]; }
inline uint8_t ip_get_hdr_length(const uint8_t *buf) { return (buf[0] & 0xf) * 4; }
inline uint8_t ip_get_protocol(const uint8_t *buf) { return buf[9]; }
     ee8:	81 85       	ldd	r24, Z+9	; 0x09
  uint8_t proto = ip_get_protocol(ip_buf);
  if(proto == IP_PROTOCOL_UDP) {
     eea:	81 31       	cpi	r24, 0x11	; 17
     eec:	41 f4       	brne	.+16     	; 0xefe <dump_ip_protocol+0x2c>
#define UDP_LENGTH_OFF    4
#define UDP_CHECKSUM_OFF  6
#define UDP_DATA_OFF      8

inline const uint8_t *udp_get_data_ptr(const uint8_t *udp_buf) { return udp_buf + UDP_DATA_OFF; }
inline uint16_t  udp_get_src_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_SRC_PORT_OFF); }
     eee:	ce 01       	movw	r24, r28
     ef0:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
inline uint16_t  udp_get_tgt_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_TGT_PORT_OFF); }
     ef4:	ce 01       	movw	r24, r28
     ef6:	02 96       	adiw	r24, 0x02	; 2
     ef8:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
     efc:	18 c0       	rjmp	.+48     	; 0xf2e <dump_ip_protocol+0x5c>
		// NOTE: UART - [UDP:
    uint16_t src_port = udp_get_src_port(proto_buf);
    uint16_t tgt_port = udp_get_tgt_port(proto_buf);
    // NOTE: UART - src_port > tgt_port]
  }
  else if(proto == IP_PROTOCOL_TCP) {
     efe:	86 30       	cpi	r24, 0x06	; 6
     f00:	b1 f4       	brne	.+44     	; 0xf2e <dump_ip_protocol+0x5c>
#define TCP_FLAGS_ECE     0x040
#define TCP_FLAGS_CWR     0x080
#define TCP_FLAGS_NS      0x100

inline const uint8_t *tcp_get_data_ptr(const uint8_t *tcp_buf) { return tcp_buf + (tcp_buf[TCP_DATA_SIZE_OFF] >> 4) * 4; }
inline uint16_t  tcp_get_src_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_SRC_PORT_OFF); }
     f02:	ce 01       	movw	r24, r28
     f04:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
inline uint16_t  tcp_get_tgt_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_TGT_PORT_OFF); }
     f08:	ce 01       	movw	r24, r28
     f0a:	02 96       	adiw	r24, 0x02	; 2
     f0c:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
inline uint32_t  tcp_get_seq_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_SEQ_NUM_OFF); }
inline uint32_t  tcp_get_ack_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_ACK_NUM_OFF); }
inline uint16_t  tcp_get_flags(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_FLAGS_OFF) & 0x1ff; }
     f10:	ce 01       	movw	r24, r28
     f12:	0c 96       	adiw	r24, 0x0c	; 12
     f14:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
     f18:	18 2f       	mov	r17, r24
#define TCP_FLAGS_NS      0x100

inline const uint8_t *tcp_get_data_ptr(const uint8_t *tcp_buf) { return tcp_buf + (tcp_buf[TCP_DATA_SIZE_OFF] >> 4) * 4; }
inline uint16_t  tcp_get_src_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_SRC_PORT_OFF); }
inline uint16_t  tcp_get_tgt_port(const uint8_t *tcp_buf) { return net_get_word(tcp_buf + TCP_TGT_PORT_OFF); }
inline uint32_t  tcp_get_seq_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_SEQ_NUM_OFF); }
     f1a:	ce 01       	movw	r24, r28
     f1c:	04 96       	adiw	r24, 0x04	; 4
     f1e:	0e 94 85 08 	call	0x110a	; 0x110a <net_get_long>
		// NOTE: UART - ,flags= hex_word(flags)

    uint32_t seq = tcp_get_seq_num(proto_buf);
    // NOTE: UART - ,seq= hex_word(seq)

    if(flags & TCP_FLAGS_ACK) {
     f22:	14 ff       	sbrs	r17, 4
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <dump_ip_protocol+0x5c>
inline uint32_t  tcp_get_ack_num(const uint8_t *tcp_buf) { return net_get_long(tcp_buf + TCP_ACK_NUM_OFF); }
     f26:	ce 01       	movw	r24, r28
     f28:	08 96       	adiw	r24, 0x08	; 8
     f2a:	0e 94 85 08 	call	0x110a	; 0x110a <net_get_long>
      // NOTE: UART - ,ack= hex_word(ack)
    }

    // NOTE: UART - ]
  }
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	08 95       	ret

00000f36 <dump_line>:

extern void dump_line(const uint8_t *eth_buf, uint16_t size)
{
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
  dump_eth_pkt(eth_buf, size);

  const uint8_t *ip_buf = eth_buf + ETH_HDR_SIZE;
     f3a:	ec 01       	movw	r28, r24
     f3c:	2e 96       	adiw	r28, 0x0e	; 14
     f3e:	0c 96       	adiw	r24, 0x0c	; 12
     f40:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
  uint16_t type = eth_get_pkt_type(eth_buf);
  if(type == ETH_TYPE_ARP) {
     f44:	28 e0       	ldi	r18, 0x08	; 8
     f46:	86 30       	cpi	r24, 0x06	; 6
     f48:	92 07       	cpc	r25, r18
     f4a:	21 f4       	brne	.+8      	; 0xf54 <dump_line+0x1e>
    dump_arp_pkt(ip_buf);
     f4c:	ce 01       	movw	r24, r28
     f4e:	0e 94 65 07 	call	0xeca	; 0xeca <dump_arp_pkt>
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <dump_line+0x2a>
  } else if(type == ETH_TYPE_IPV4) {
     f54:	80 50       	subi	r24, 0x00	; 0
     f56:	98 40       	sbci	r25, 0x08	; 8
     f58:	19 f4       	brne	.+6      	; 0xf60 <dump_line+0x2a>
    dump_ip_pkt(ip_buf);
    dump_ip_protocol(ip_buf);
     f5a:	ce 01       	movw	r24, r28
     f5c:	0e 94 69 07 	call	0xed2	; 0xed2 <dump_ip_protocol>
  }
}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <main>:
 * 	POut:    input,  pulled high
 * 	NAck:    output, default: 1
 */
static void hwInit(void) {
	// Disable watchdog
	cli();
     f66:	f8 94       	cli
	wdt_reset();
     f68:	a8 95       	wdr
	MCUSR=0;
     f6a:	14 be       	out	0x34, r1	; 52
	WDTCSR|=_BV(WDCE) | _BV(WDE);
     f6c:	e0 e6       	ldi	r30, 0x60	; 96
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	88 61       	ori	r24, 0x18	; 24
     f74:	80 83       	st	Z, r24
	WDTCSR=0;
     f76:	10 82       	st	Z, r1
	sei();
     f78:	78 94       	sei

	// Setup timers
	timerInit();
     f7a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <timerInit>

	// Zero DDR and PORT status
  PAR_STATUS_DDR &= ~PAR_STATUS_MASK;
     f7e:	a7 e2       	ldi	r26, 0x27	; 39
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	8c 91       	ld	r24, X
     f84:	80 7e       	andi	r24, 0xE0	; 224
     f86:	8c 93       	st	X, r24
  PAR_STATUS_PORT &= ~PAR_STATUS_MASK;
     f88:	e8 e2       	ldi	r30, 0x28	; 40
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 7e       	andi	r24, 0xE0	; 224
     f90:	80 83       	st	Z, r24

  // Set them correctly
  PAR_STATUS_DDR |= BUSY | NACK;
     f92:	8c 91       	ld	r24, X
     f94:	86 60       	ori	r24, 0x06	; 6
     f96:	8c 93       	st	X, r24
  PAR_STATUS_PORT |= NSTROBE | SEL | POUT | NACK;
     f98:	80 81       	ld	r24, Z
     f9a:	8b 61       	ori	r24, 0x1B	; 27
     f9c:	80 83       	st	Z, r24

  PAR_DATA_DDR = 0xFF;
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	8a b9       	out	0x0a, r24	; 10

  // Initialize status LED
  LED_DDR |= LED_STATUS;
     fa2:	8c 91       	ld	r24, X
     fa4:	80 62       	ori	r24, 0x20	; 32
     fa6:	8c 93       	st	X, r24
  LED_PORT |= LED_STATUS;
     fa8:	80 81       	ld	r24, Z
     faa:	80 62       	ori	r24, 0x20	; 32
     fac:	80 83       	st	Z, r24

	// Send welcome message
	// NOTE: UART - \r\nWelcome to plipbox " VERSION " " BUILD_DATE "\r\n

	// Load & display parameters (config)
	param_init();
     fae:	0e 94 05 0a 	call	0x140a	; 0x140a <param_init>
	param_dump();
     fb2:	0e 94 a6 09 	call	0x134c	; 0x134c <param_dump>

	// uart_send_free_stack();

	// Enter main loop depending on current run mode
	while(1) {
		switch(run_mode) {
     fb6:	80 91 41 01 	lds	r24, 0x0141
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	29 f0       	breq	.+10     	; 0xfc8 <main+0x62>
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	31 f0       	breq	.+12     	; 0xfce <main+0x68>
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	51 f4       	brne	.+20     	; 0xfda <main+0x74>
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <main+0x6e>
			case RUN_MODE_PB_TEST:
				pb_test_loop();
     fc8:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <pb_test_loop>
     fcc:	f4 cf       	rjmp	.-24     	; 0xfb6 <main+0x50>
				break;
			case RUN_MODE_PIO_TEST:
				pio_test_loop();
     fce:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <pio_test_loop>
     fd2:	f1 cf       	rjmp	.-30     	; 0xfb6 <main+0x50>
				break;
			case RUN_MODE_BRIDGE_TEST:
				bridge_test_loop();
     fd4:	0e 94 7f 05 	call	0xafe	; 0xafe <bridge_test_loop>
     fd8:	ee cf       	rjmp	.-36     	; 0xfb6 <main+0x50>
				break;
			case RUN_MODE_BRIDGE:
			default:
				bridge_loop();
     fda:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <bridge_loop>
     fde:	eb cf       	rjmp	.-42     	; 0xfb6 <main+0x50>

00000fe0 <arp_make_reply>:

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
}

void arp_make_reply(uint8_t *buf, const uint8_t *my_mac, const uint8_t *my_ip)
{
     fe0:	8f 92       	push	r8
     fe2:	9f 92       	push	r9
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	8c 01       	movw	r16, r24
     ff6:	5b 01       	movw	r10, r22
     ff8:	4a 01       	movw	r8, r20
	// make a reply
	net_put_word(buf + ARP_OFF_OP, ARP_REPLY);
     ffa:	06 96       	adiw	r24, 0x06	; 6
     ffc:	62 e0       	ldi	r22, 0x02	; 2
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	0e 94 81 08 	call	0x1102	; 0x1102 <net_put_word>
	net_copy_mac(buf + ARP_OFF_SRC_MAC, buf + ARP_OFF_TGT_MAC);
    1004:	cc 24       	eor	r12, r12
    1006:	dd 24       	eor	r13, r13
    1008:	68 94       	set
    100a:	c3 f8       	bld	r12, 3
    100c:	c0 0e       	add	r12, r16
    100e:	d1 1e       	adc	r13, r17
    1010:	b8 01       	movw	r22, r16
    1012:	6e 5e       	subi	r22, 0xEE	; 238
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	c6 01       	movw	r24, r12
    1018:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>
	net_copy_ip(buf + ARP_OFF_SRC_IP, buf + ARP_OFF_TGT_IP);
    101c:	0f 2e       	mov	r0, r31
    101e:	fe e0       	ldi	r31, 0x0E	; 14
    1020:	ef 2e       	mov	r14, r31
    1022:	ff 24       	eor	r15, r15
    1024:	f0 2d       	mov	r31, r0
    1026:	e0 0e       	add	r14, r16
    1028:	f1 1e       	adc	r15, r17
    102a:	08 5e       	subi	r16, 0xE8	; 232
    102c:	1f 4f       	sbci	r17, 0xFF	; 255
    102e:	c7 01       	movw	r24, r14
    1030:	b8 01       	movw	r22, r16
    1032:	0e 94 66 08 	call	0x10cc	; 0x10cc <net_copy_ip>
	net_copy_mac(my_mac, buf + ARP_OFF_SRC_MAC);
    1036:	c5 01       	movw	r24, r10
    1038:	b6 01       	movw	r22, r12
    103a:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>
	net_copy_ip(my_ip, buf + ARP_OFF_SRC_IP);
    103e:	c4 01       	movw	r24, r8
    1040:	b7 01       	movw	r22, r14
    1042:	0e 94 66 08 	call	0x10cc	; 0x10cc <net_copy_ip>
}
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	9f 90       	pop	r9
    1058:	8f 90       	pop	r8
    105a:	08 95       	ret

0000105c <arp_is_ipv4>:

#include "arp.h"
#include "net.h"

uint8_t arp_is_ipv4(const uint8_t *buf, uint16_t len)
{
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	ec 01       	movw	r28, r24
  if(len < ARP_SIZE) {
    1066:	6c 31       	cpi	r22, 0x1C	; 28
    1068:	71 05       	cpc	r23, r1
    106a:	10 f4       	brcc	.+4      	; 0x1070 <arp_is_ipv4+0x14>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	1a c0       	rjmp	.+52     	; 0x10a4 <arp_is_ipv4+0x48>
    return 0;
  }

  uint16_t hw_type = net_get_word(buf + ARP_OFF_HW_TYPE);
    1070:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
    1074:	8c 01       	movw	r16, r24
  uint16_t pt_type = net_get_word(buf + ARP_OFF_PROT_TYPE);
    1076:	ce 01       	movw	r24, r28
    1078:	02 96       	adiw	r24, 0x02	; 2
    107a:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
  uint8_t hw_size = buf[ARP_OFF_HW_SIZE];
    107e:	2c 81       	ldd	r18, Y+4	; 0x04
  uint8_t pt_size = buf[ARP_OFF_PROT_SIZE];
    1080:	3d 81       	ldd	r19, Y+5	; 0x05

  return (hw_type == 1) && (pt_type == 0x800) && (hw_size == 6) && (pt_size == 4);
    1082:	01 30       	cpi	r16, 0x01	; 1
    1084:	11 05       	cpc	r17, r1
    1086:	61 f4       	brne	.+24     	; 0x10a0 <arp_is_ipv4+0x44>
    1088:	80 50       	subi	r24, 0x00	; 0
    108a:	98 40       	sbci	r25, 0x08	; 8
    108c:	49 f4       	brne	.+18     	; 0x10a0 <arp_is_ipv4+0x44>
    108e:	26 30       	cpi	r18, 0x06	; 6
    1090:	39 f4       	brne	.+14     	; 0x10a0 <arp_is_ipv4+0x44>
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	34 30       	cpi	r19, 0x04	; 4
    1096:	09 f0       	breq	.+2      	; 0x109a <arp_is_ipv4+0x3e>
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	89 27       	eor	r24, r25
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <arp_is_ipv4+0x48>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
}
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <net_copy_mac>:
const uint8_t net_bcast_mac[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
const uint8_t net_zero_mac[6] = { 0,0,0,0,0,0 };
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
    10ae:	ac 01       	movw	r20, r24
    10b0:	25 e0       	ldi	r18, 0x05	; 5
	uint8_t i;
  for(i=6; i--;)
    out[i] = in[i];
    10b2:	82 2f       	mov	r24, r18
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	db 01       	movw	r26, r22
    10b8:	a8 0f       	add	r26, r24
    10ba:	b9 1f       	adc	r27, r25
    10bc:	fa 01       	movw	r30, r20
    10be:	e8 0f       	add	r30, r24
    10c0:	f9 1f       	adc	r31, r25
    10c2:	80 81       	ld	r24, Z
    10c4:	8c 93       	st	X, r24
const uint8_t net_zero_ip[4] = { 0,0,0,0 };
const uint8_t net_ones_ip[4] = { 255,255,255,255 };

void net_copy_mac(const uint8_t *in, uint8_t *out) {
	uint8_t i;
  for(i=6; i--;)
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	a0 f7       	brcc	.-24     	; 0x10b2 <net_copy_mac+0x4>
    out[i] = in[i];
}
    10ca:	08 95       	ret

000010cc <net_copy_ip>:

void net_copy_ip(const uint8_t *in, uint8_t *out) {
    10cc:	fc 01       	movw	r30, r24
    10ce:	db 01       	movw	r26, r22
	uint8_t i;
  for(i = 4; i--;)
		out[i] = in[i];
    10d0:	83 81       	ldd	r24, Z+3	; 0x03
    10d2:	13 96       	adiw	r26, 0x03	; 3
    10d4:	8c 93       	st	X, r24
    10d6:	13 97       	sbiw	r26, 0x03	; 3
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	12 96       	adiw	r26, 0x02	; 2
    10dc:	8c 93       	st	X, r24
    10de:	12 97       	sbiw	r26, 0x02	; 2
    10e0:	81 81       	ldd	r24, Z+1	; 0x01
    10e2:	11 96       	adiw	r26, 0x01	; 1
    10e4:	8c 93       	st	X, r24
    10e6:	11 97       	sbiw	r26, 0x01	; 1
    10e8:	80 81       	ld	r24, Z
    10ea:	8c 93       	st	X, r24
}
    10ec:	08 95       	ret

000010ee <net_get_word>:

uint16_t  net_get_word(const uint8_t *buf) {
    10ee:	fc 01       	movw	r30, r24
    10f0:	21 81       	ldd	r18, Z+1	; 0x01
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	90 81       	ld	r25, Z
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	28 2b       	or	r18, r24
    10fa:	39 2b       	or	r19, r25
  return (uint16_t)buf[0] << 8 | (uint16_t)buf[1];
}
    10fc:	82 2f       	mov	r24, r18
    10fe:	93 2f       	mov	r25, r19
    1100:	08 95       	ret

00001102 <net_put_word>:

void net_put_word(uint8_t *buf, uint16_t value)
{
    1102:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 8);
    1104:	70 83       	st	Z, r23
  buf[1] = (uint8_t)(value & 0xff);
    1106:	61 83       	std	Z+1, r22	; 0x01
}
    1108:	08 95       	ret

0000110a <net_get_long>:

uint32_t  net_get_long(const uint8_t *buf)
{
    110a:	fc 01       	movw	r30, r24
    110c:	23 81       	ldd	r18, Z+3	; 0x03
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a0 e0       	ldi	r26, 0x00	; 0
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	b8 2f       	mov	r27, r24
    111e:	aa 27       	eor	r26, r26
    1120:	99 27       	eor	r25, r25
    1122:	88 27       	eor	r24, r24
    1124:	28 2b       	or	r18, r24
    1126:	39 2b       	or	r19, r25
    1128:	4a 2b       	or	r20, r26
    112a:	5b 2b       	or	r21, r27
    112c:	81 81       	ldd	r24, Z+1	; 0x01
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	dc 01       	movw	r26, r24
    1136:	99 27       	eor	r25, r25
    1138:	88 27       	eor	r24, r24
    113a:	28 2b       	or	r18, r24
    113c:	39 2b       	or	r19, r25
    113e:	4a 2b       	or	r20, r26
    1140:	5b 2b       	or	r21, r27
    1142:	82 81       	ldd	r24, Z+2	; 0x02
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a0 e0       	ldi	r26, 0x00	; 0
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	ba 2f       	mov	r27, r26
    114c:	a9 2f       	mov	r26, r25
    114e:	98 2f       	mov	r25, r24
    1150:	88 27       	eor	r24, r24
    1152:	28 2b       	or	r18, r24
    1154:	39 2b       	or	r19, r25
    1156:	4a 2b       	or	r20, r26
    1158:	5b 2b       	or	r21, r27
  return (uint32_t)buf[0] << 24 | (uint32_t)buf[1] << 16 | (uint32_t)buf[2] << 8 | (uint32_t)buf[3];
}
    115a:	62 2f       	mov	r22, r18
    115c:	73 2f       	mov	r23, r19
    115e:	84 2f       	mov	r24, r20
    1160:	95 2f       	mov	r25, r21
    1162:	08 95       	ret

00001164 <net_put_long>:

void net_put_long(uint8_t *buf, uint32_t value)
{
    1164:	fc 01       	movw	r30, r24
  buf[0] = (uint8_t)(value >> 24);
    1166:	87 2f       	mov	r24, r23
    1168:	99 27       	eor	r25, r25
    116a:	aa 27       	eor	r26, r26
    116c:	bb 27       	eor	r27, r27
    116e:	80 83       	st	Z, r24
  buf[1] = (uint8_t)((value >> 16) & 0xff);
    1170:	cb 01       	movw	r24, r22
    1172:	aa 27       	eor	r26, r26
    1174:	bb 27       	eor	r27, r27
    1176:	81 83       	std	Z+1, r24	; 0x01
  buf[2] = (uint8_t)((value >> 8) & 0xff);
    1178:	bb 27       	eor	r27, r27
    117a:	a7 2f       	mov	r26, r23
    117c:	96 2f       	mov	r25, r22
    117e:	85 2f       	mov	r24, r21
    1180:	82 83       	std	Z+2, r24	; 0x02
  buf[3] = (uint8_t)(value & 0xff);
    1182:	43 83       	std	Z+3, r20	; 0x03
}
    1184:	08 95       	ret

00001186 <net_compare_mac>:
    pos += 4;
  }
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
    1186:	ac 01       	movw	r20, r24
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++)
    if(a[i] != b[i])
    118c:	fa 01       	movw	r30, r20
    118e:	e2 0f       	add	r30, r18
    1190:	f3 1f       	adc	r31, r19
    1192:	db 01       	movw	r26, r22
    1194:	a2 0f       	add	r26, r18
    1196:	b3 1f       	adc	r27, r19
    1198:	90 81       	ld	r25, Z
    119a:	8c 91       	ld	r24, X
    119c:	98 17       	cp	r25, r24
    119e:	11 f0       	breq	.+4      	; 0x11a4 <net_compare_mac+0x1e>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	08 95       	ret
    11a4:	2f 5f       	subi	r18, 0xFF	; 255
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
  // NOTE: UART - ip_str
}

uint8_t  net_compare_mac(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<6;i++)
    11a8:	26 30       	cpi	r18, 0x06	; 6
    11aa:	31 05       	cpc	r19, r1
    11ac:	79 f7       	brne	.-34     	; 0x118c <net_compare_mac+0x6>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
    11b0:	08 95       	ret

000011b2 <net_compare_ip>:

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
    11b2:	ac 01       	movw	r20, r24
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++)
    if(a[i] != b[i])
    11b8:	fa 01       	movw	r30, r20
    11ba:	e2 0f       	add	r30, r18
    11bc:	f3 1f       	adc	r31, r19
    11be:	db 01       	movw	r26, r22
    11c0:	a2 0f       	add	r26, r18
    11c2:	b3 1f       	adc	r27, r19
    11c4:	90 81       	ld	r25, Z
    11c6:	8c 91       	ld	r24, X
    11c8:	98 17       	cp	r25, r24
    11ca:	11 f0       	breq	.+4      	; 0x11d0 <net_compare_ip+0x1e>
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	08 95       	ret
    11d0:	2f 5f       	subi	r18, 0xFF	; 255
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
  return 1;
}

uint8_t  net_compare_ip(const uint8_t *a, const uint8_t *b) {
	uint8_t i;
  for(i=0;i<4;i++)
    11d4:	24 30       	cpi	r18, 0x04	; 4
    11d6:	31 05       	cpc	r19, r1
    11d8:	79 f7       	brne	.-34     	; 0x11b8 <net_compare_ip+0x6>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    if(a[i] != b[i])
      return 0;
  return 1;
}
    11dc:	08 95       	ret

000011de <net_dump_ip>:
    mac[i] = value;
  }
  return 1;
}

void net_dump_ip(const uint8_t *in) {
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    11ea:	20 91 24 01 	lds	r18, 0x0124
    11ee:	30 91 25 01 	lds	r19, 0x0125
    11f2:	8c 01       	movw	r16, r24
    11f4:	e9 01       	movw	r28, r18
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    11f6:	ee 24       	eor	r14, r14
    11f8:	ff 24       	eor	r15, r15
    11fa:	68 94       	set
    11fc:	e4 f8       	bld	r14, 4
    11fe:	e2 0e       	add	r14, r18
    1200:	f3 1e       	adc	r15, r19
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    1202:	f8 01       	movw	r30, r16
    1204:	81 91       	ld	r24, Z+
    1206:	8f 01       	movw	r16, r30
    1208:	be 01       	movw	r22, r28
    120a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <utilByteToDec>
    120e:	24 96       	adiw	r28, 0x04	; 4
}

void net_dump_ip(const uint8_t *in) {
  uint8_t pos = 0;
  uint8_t i;
  for(i=0;i<4;i++) {
    1210:	ce 15       	cp	r28, r14
    1212:	df 05       	cpc	r29, r15
    1214:	b1 f7       	brne	.-20     	; 0x1202 <net_dump_ip+0x24>
    utilByteToDec(in[i],(uint8_t *)(ip_str+pos));
    pos += 4;
  }
  // NOTE: UART - ip_str
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	08 95       	ret

00001224 <net_parse_mac>:
    ip[i] = value;
  }
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
    1224:	af 92       	push	r10
    1226:	bf 92       	push	r11
    1228:	cf 92       	push	r12
    122a:	df 92       	push	r13
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	7c 01       	movw	r14, r24
    1240:	6b 01       	movw	r12, r22
    1242:	00 e0       	ldi	r16, 0x00	; 0
    1244:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<6;i++) {
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
    1246:	5e 01       	movw	r10, r28
    1248:	08 94       	sec
    124a:	a1 1c       	adc	r10, r1
    124c:	b1 1c       	adc	r11, r1
    124e:	c7 01       	movw	r24, r14
    1250:	b5 01       	movw	r22, r10
    1252:	0e 94 70 03 	call	0x6e0	; 0x6e0 <utilParseByteHex>
    1256:	88 23       	and	r24, r24
    1258:	89 f0       	breq	.+34     	; 0x127c <net_parse_mac+0x58>
      return 0;
    }
    buf += 3;
    mac[i] = value;
    125a:	f6 01       	movw	r30, r12
    125c:	e0 0f       	add	r30, r16
    125e:	f1 1f       	adc	r31, r17
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	80 83       	st	Z, r24
    1264:	0f 5f       	subi	r16, 0xFF	; 255
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
  return 1;
}

uint8_t net_parse_mac(const char *buf, uint8_t *mac) {
	uint8_t i;
  for(i=0;i<6;i++) {
    1268:	06 30       	cpi	r16, 0x06	; 6
    126a:	11 05       	cpc	r17, r1
    126c:	11 f4       	brne	.+4      	; 0x1272 <net_parse_mac+0x4e>
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	06 c0       	rjmp	.+12     	; 0x127e <net_parse_mac+0x5a>
    uint8_t value;
    if(!utilParseByteHex(buf, &value)) {
      return 0;
    }
    buf += 3;
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	e8 0e       	add	r14, r24
    1278:	f9 1e       	adc	r15, r25
    127a:	e9 cf       	rjmp	.-46     	; 0x124e <net_parse_mac+0x2a>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    mac[i] = value;
  }
  return 1;
}
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	bf 90       	pop	r11
    1292:	af 90       	pop	r10
    1294:	08 95       	ret

00001296 <net_parse_ip>:
    pos += 3;
  }
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
    1296:	af 92       	push	r10
    1298:	bf 92       	push	r11
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	7c 01       	movw	r14, r24
    12b2:	6b 01       	movw	r12, r22
    12b4:	00 e0       	ldi	r16, 0x00	; 0
    12b6:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
  for(i=0;i<4;i++) {
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
    12b8:	5e 01       	movw	r10, r28
    12ba:	08 94       	sec
    12bc:	a1 1c       	adc	r10, r1
    12be:	b1 1c       	adc	r11, r1
    12c0:	c7 01       	movw	r24, r14
    12c2:	b5 01       	movw	r22, r10
    12c4:	0e 94 39 04 	call	0x872	; 0x872 <utilParseByteDec>
    12c8:	98 2f       	mov	r25, r24
    if(digits == 0)
    12ca:	88 23       	and	r24, r24
    12cc:	91 f0       	breq	.+36     	; 0x12f2 <net_parse_ip+0x5c>
      return 0;
    buf += digits + 1;
    ip[i] = value;
    12ce:	f6 01       	movw	r30, r12
    12d0:	e0 0f       	add	r30, r16
    12d2:	f1 1f       	adc	r31, r17
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	80 83       	st	Z, r24
    12d8:	0f 5f       	subi	r16, 0xFF	; 255
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
  // NOTE: UART - mac_str
}

uint8_t net_parse_ip(const char *buf, uint8_t *ip) {
	uint8_t i;
  for(i=0;i<4;i++) {
    12dc:	04 30       	cpi	r16, 0x04	; 4
    12de:	11 05       	cpc	r17, r1
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <net_parse_ip+0x50>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <net_parse_ip+0x5e>
    uint8_t value;
    uint8_t digits = utilParseByteDec(buf,&value);
    if(digits == 0)
      return 0;
    buf += digits + 1;
    12e6:	89 2f       	mov	r24, r25
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	e8 0e       	add	r14, r24
    12ee:	f9 1e       	adc	r15, r25
    12f0:	e7 cf       	rjmp	.-50     	; 0x12c0 <net_parse_ip+0x2a>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    ip[i] = value;
  }
  return 1;
}
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	bf 90       	pop	r11
    1308:	af 90       	pop	r10
    130a:	08 95       	ret

0000130c <net_dump_mac>:
}

static char *mac_str = "00:00:00:00:00:00";
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
    utilByteToHex(in[i], mac_str+pos);
    1318:	e0 90 38 01 	lds	r14, 0x0138
    131c:	f0 90 39 01 	lds	r15, 0x0139
    1320:	8c 01       	movw	r16, r24
    1322:	c0 e0       	ldi	r28, 0x00	; 0
    1324:	d0 e0       	ldi	r29, 0x00	; 0
    1326:	b7 01       	movw	r22, r14
    1328:	6c 0f       	add	r22, r28
    132a:	7d 1f       	adc	r23, r29
    132c:	f8 01       	movw	r30, r16
    132e:	81 91       	ld	r24, Z+
    1330:	8f 01       	movw	r16, r30
    1332:	0e 94 b0 02 	call	0x560	; 0x560 <utilByteToHex>
    pos += 3;
    1336:	23 96       	adiw	r28, 0x03	; 3
static char *ip_str = "000.000.000.000";

void net_dump_mac(const uint8_t *in) {
  int pos = 0;
  uint8_t i;
  for(i=0;i<6;i++) {
    1338:	c2 31       	cpi	r28, 0x12	; 18
    133a:	d1 05       	cpc	r29, r1
    133c:	a1 f7       	brne	.-24     	; 0x1326 <net_dump_mac+0x1a>
    utilByteToHex(in[i], mac_str+pos);
    pos += 3;
  }
  // NOTE: UART - mac_str
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	08 95       	ret

0000134c <param_dump>:
	// NOTE: UART - \r\n tt: packet type param.test_ptype
	// NOTE: UART - \r\n ti: ip address param.test_ip
	// NOTE: UART - \r\n tp: udp port param.test_port
	// NOTE: UART - \r\n tm: test mode param.test_mode
	// NOTE: UART - \r\n
}
    134c:	08 95       	ret

0000134e <calc_crc16>:

// build check sum for parameter block
static uint16_t calc_crc16(tConfig *p)
{
  uint16_t crc16 = 0xffff;
  uint8_t *data = (uint8_t *)p;
    134e:	fc 01       	movw	r30, r24
    1350:	4f ef       	ldi	r20, 0xFF	; 255
    1352:	5f ef       	ldi	r21, 0xFF	; 255
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    1358:	81 91       	ld	r24, Z+
    135a:	48 27       	eor	r20, r24
    135c:	84 2f       	mov	r24, r20
    135e:	82 95       	swap	r24
    1360:	84 27       	eor	r24, r20
    1362:	08 2e       	mov	r0, r24
    1364:	86 95       	lsr	r24
    1366:	86 95       	lsr	r24
    1368:	80 25       	eor	r24, r0
    136a:	08 2e       	mov	r0, r24
    136c:	86 95       	lsr	r24
    136e:	80 25       	eor	r24, r0
    1370:	87 70       	andi	r24, 0x07	; 7
    1372:	04 2e       	mov	r0, r20
    1374:	45 2f       	mov	r20, r21
    1376:	86 95       	lsr	r24
    1378:	07 94       	ror	r0
    137a:	87 95       	ror	r24
    137c:	50 2d       	mov	r21, r0
    137e:	48 27       	eor	r20, r24
    1380:	06 94       	lsr	r0
    1382:	87 95       	ror	r24
    1384:	50 25       	eor	r21, r0
    1386:	48 27       	eor	r20, r24
  uint16_t i;
  for(i=0;i<sizeof(tConfig);i++) {
    1388:	2f 5f       	subi	r18, 0xFF	; 255
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
    138c:	24 31       	cpi	r18, 0x14	; 20
    138e:	31 05       	cpc	r19, r1
    1390:	19 f7       	brne	.-58     	; 0x1358 <calc_crc16+0xa>
    crc16 = _crc16_update(crc16,*data);
    data++;
  }
  return crc16;
}
    1392:	84 2f       	mov	r24, r20
    1394:	95 2f       	mov	r25, r21
    1396:	08 95       	ret

00001398 <param_reset>:

  return PARAM_OK;
}

void param_reset(void)
{
    1398:	a9 e5       	ldi	r26, 0x59	; 89
    139a:	b1 e0       	ldi	r27, 0x01	; 1
    139c:	2b e9       	ldi	r18, 0x9B	; 155
    139e:	33 e0       	ldi	r19, 0x03	; 3
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
    13a0:	4d e6       	ldi	r20, 0x6D	; 109
    13a2:	51 e0       	ldi	r21, 0x01	; 1

  return PARAM_OK;
}

void param_reset(void)
{
    13a4:	f9 01       	movw	r30, r18
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
    *(out++) = pgm_read_byte_near(in++);
    13a6:	2f 5f       	subi	r18, 0xFF	; 255
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	e4 91       	lpm	r30, Z+
    13ac:	ed 93       	st	X+, r30
{
	uint8_t i;
  // restore default param
  uint8_t *out = (uint8_t *)&g_sConfig;
  const uint8_t *in = (const uint8_t *)&sc_sDefaultConfig;
  for(i=0;i<sizeof(tConfig);i++) {
    13ae:	a4 17       	cp	r26, r20
    13b0:	b5 07       	cpc	r27, r21
    13b2:	c1 f7       	brne	.-16     	; 0x13a4 <param_reset+0xc>
    *(out++) = pgm_read_byte_near(in++);
  }
}
    13b4:	08 95       	ret

000013b6 <param_load>:

  return PARAM_OK;
}

uint8_t param_load(void)
{
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
  // check that eeprom is readable
  if(!eeprom_is_ready())
    13be:	f9 9b       	sbis	0x1f, 1	; 31
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <param_load+0x10>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	1d c0       	rjmp	.+58     	; 0x1400 <param_load+0x4a>
    return PARAM_EEPROM_NOT_READY;

  // read param
  eeprom_read_block(&g_sConfig,&s_sEepromConfig,sizeof(tConfig));
    13c6:	0f 2e       	mov	r0, r31
    13c8:	f9 e5       	ldi	r31, 0x59	; 89
    13ca:	ef 2e       	mov	r14, r31
    13cc:	f1 e0       	ldi	r31, 0x01	; 1
    13ce:	ff 2e       	mov	r15, r31
    13d0:	f0 2d       	mov	r31, r0
    13d2:	c7 01       	movw	r24, r14
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	44 e1       	ldi	r20, 0x14	; 20
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	0e 94 b8 10 	call	0x2170	; 0x2170 <__eerd_block_m328p>

  // read crc16
  uint16_t crc16 = eeprom_read_word(&s_uwEepromCrc);
    13e0:	84 e1       	ldi	r24, 0x14	; 20
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 c8 10 	call	0x2190	; 0x2190 <__eerd_word_m328p>
    13e8:	8c 01       	movw	r16, r24
  uint16_t my_crc16 = calc_crc16(&g_sConfig);
    13ea:	c7 01       	movw	r24, r14
    13ec:	0e 94 a7 09 	call	0x134e	; 0x134e <calc_crc16>
  if(crc16 != my_crc16) {
    13f0:	08 17       	cp	r16, r24
    13f2:	19 07       	cpc	r17, r25
    13f4:	11 f4       	brne	.+4      	; 0x13fa <param_load+0x44>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <param_load+0x4a>
    param_reset();
    13fa:	0e 94 cc 09 	call	0x1398	; 0x1398 <param_reset>
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    return PARAM_EEPROM_CRC_MISMATCH;
  }

  return PARAM_OK;
}
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	08 95       	ret

0000140a <param_init>:
  }
}

void param_init(void)
{
  if(param_load()!=PARAM_OK)
    140a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <param_load>
    140e:	88 23       	and	r24, r24
    1410:	11 f0       	breq	.+4      	; 0x1416 <param_init+0xc>
    param_reset();
    1412:	0e 94 cc 09 	call	0x1398	; 0x1398 <param_reset>
    1416:	08 95       	ret

00001418 <param_save>:
  }
  return crc16;
}

uint8_t param_save(void)
{
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
  // check that eeprom is writable
  if(!eeprom_is_ready())
    141c:	f9 9b       	sbis	0x1f, 1	; 31
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <param_save+0xc>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	12 c0       	rjmp	.+36     	; 0x1448 <param_save+0x30>
    return PARAM_EEPROM_NOT_READY;

  // write current param to eeprom
  eeprom_write_block(&g_sConfig,&s_sEepromConfig,sizeof(tConfig));
    1424:	09 e5       	ldi	r16, 0x59	; 89
    1426:	11 e0       	ldi	r17, 0x01	; 1
    1428:	c8 01       	movw	r24, r16
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	44 e1       	ldi	r20, 0x14	; 20
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	0e 94 ce 10 	call	0x219c	; 0x219c <__eewr_block_m328p>

  // calc current parameter crc
  uint16_t crc16 = calc_crc16(&g_sConfig);
    1436:	c8 01       	movw	r24, r16
    1438:	0e 94 a7 09 	call	0x134e	; 0x134e <calc_crc16>
    143c:	bc 01       	movw	r22, r24
  eeprom_write_word(&s_uwEepromCrc,crc16);
    143e:	84 e1       	ldi	r24, 0x14	; 20
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__eewr_word_m328p>
    1446:	80 e0       	ldi	r24, 0x00	; 0

  return PARAM_OK;
}
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <pb_proto_init>:

// ----- Init -----

void pb_proto_init(pb_proto_fill_func _packetFillFn, pb_proto_proc_func _packetProcessFn)
{
  packetFillFn = _packetFillFn;
    144e:	90 93 44 01 	sts	0x0144, r25
    1452:	80 93 43 01 	sts	0x0143, r24
  packetProcessFn = _packetProcessFn;
    1456:	70 93 46 01 	sts	0x0146, r23
    145a:	60 93 45 01 	sts	0x0145, r22

  // Set data DDR to input, make BUSY low
  PAR_DATA_DDR = 0x00;
    145e:	1a b8       	out	0x0a, r1	; 10
  PAR_STATUS_PORT &= ~BUSY;
    1460:	e8 e2       	ldi	r30, 0x28	; 40
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8b 7f       	andi	r24, 0xFB	; 251
    1468:	80 83       	st	Z, r24
}
    146a:	08 95       	ret

0000146c <parGetStatusLines>:

uint8_t parGetStatusLines(void) {
	uint8_t ubIn, ubStrobe, ubSelect, ubPOut;
	ubIn = PAR_STATUS_PIN;
    146c:	86 b1       	in	r24, 0x06	; 6
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	20 71       	andi	r18, 0x10	; 16
    1474:	30 70       	andi	r19, 0x00	; 0
    1476:	35 95       	asr	r19
    1478:	27 95       	ror	r18
    147a:	35 95       	asr	r19
    147c:	27 95       	ror	r18
    147e:	35 95       	asr	r19
    1480:	27 95       	ror	r18
    1482:	35 95       	asr	r19
    1484:	27 95       	ror	r18
    1486:	22 0f       	add	r18, r18
    1488:	33 1f       	adc	r19, r19
    148a:	88 70       	andi	r24, 0x08	; 8
    148c:	88 0f       	add	r24, r24
    148e:	88 0f       	add	r24, r24
  ubStrobe = (ubIn & NSTROBE) >> POUT_PIN;
  ubSelect = (ubIn & SEL)     >> SEL_PIN;
  ubPOut   = (ubIn & POUT)    >> NSTROBE_PIN;
  return ((ubPOut << 2) | (ubSelect << 1) | ubStrobe);
}
    1490:	82 2b       	or	r24, r18
    1492:	08 95       	ret

00001494 <parWaitForPout>:
 * Waits for PaperOut pin state specified by ubReqValue, for ubStateFlag purposes.
 * @param ubReqValue Requested PaperOut pin state (1: hi, 0: lo)
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t parWaitForPout(uint8_t ubReqValue, uint8_t ubStateFlag) {
    1494:	78 2f       	mov	r23, r24
  g_uwTimer100us = 0;
    1496:	10 92 51 01 	sts	0x0151, r1
    149a:	10 92 50 01 	sts	0x0150, r1
  while(g_uwTimer100us < pb_proto_timeout) {
    149e:	40 91 3a 01 	lds	r20, 0x013A
    14a2:	50 91 3b 01 	lds	r21, 0x013B
		uint8_t ubIn = PAR_STATUS_PIN;
    14a6:	e6 e2       	ldi	r30, 0x26	; 38
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	15 c0       	rjmp	.+42     	; 0x14d6 <parWaitForPout+0x42>
    14ac:	80 81       	ld	r24, Z
    uint8_t ubPOut = (ubIn & POUT) >> POUT_PIN;
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    if(ubReqValue == ubPOut)
    14b2:	c9 01       	movw	r24, r18
    14b4:	88 70       	andi	r24, 0x08	; 8
    14b6:	90 70       	andi	r25, 0x00	; 0
    14b8:	95 95       	asr	r25
    14ba:	87 95       	ror	r24
    14bc:	95 95       	asr	r25
    14be:	87 95       	ror	r24
    14c0:	95 95       	asr	r25
    14c2:	87 95       	ror	r24
    14c4:	78 17       	cp	r23, r24
    14c6:	11 f4       	brne	.+4      	; 0x14cc <parWaitForPout+0x38>
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	08 95       	ret
      return PBPROTO_STATUS_OK;
    // During transfer client aborted and removed SEL
    if(!(ubIn & SEL))
    14cc:	24 fd       	sbrc	r18, 4
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <parWaitForPout+0x42>
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
    14d0:	86 2f       	mov	r24, r22
    14d2:	83 60       	ori	r24, 0x03	; 3
    14d4:	08 95       	ret
 * @param ubStateFlag For debugging purposes. Flag is appended to return value.
 * @return wait result - PBPROTO_STATUS_OK on success, otherwise error occured.
 */
static uint8_t parWaitForPout(uint8_t ubReqValue, uint8_t ubStateFlag) {
  g_uwTimer100us = 0;
  while(g_uwTimer100us < pb_proto_timeout) {
    14d6:	80 91 50 01 	lds	r24, 0x0150
    14da:	90 91 51 01 	lds	r25, 0x0151
    14de:	84 17       	cp	r24, r20
    14e0:	95 07       	cpc	r25, r21
    14e2:	20 f3       	brcs	.-56     	; 0x14ac <parWaitForPout+0x18>
      return PBPROTO_STATUS_OK;
    // During transfer client aborted and removed SEL
    if(!(ubIn & SEL))
      return PBPROTO_STATUS_LOST_SELECT | ubStateFlag;
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
    14e4:	86 2f       	mov	r24, r22
    14e6:	82 60       	ori	r24, 0x02	; 2
}
    14e8:	08 95       	ret

000014ea <pb_proto_handle>:
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    14ea:	2f 92       	push	r2
    14ec:	3f 92       	push	r3
    14ee:	4f 92       	push	r4
    14f0:	5f 92       	push	r5
    14f2:	6f 92       	push	r6
    14f4:	7f 92       	push	r7
    14f6:	8f 92       	push	r8
    14f8:	9f 92       	push	r9
    14fa:	af 92       	push	r10
    14fc:	bf 92       	push	r11
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <pb_proto_handle+0x26>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
  uint8_t result;
  pb_proto_stat_t *ps = &pb_proto_stat;

  // handle server side of plipbox protocol
  ps->cmd = 0;
    1514:	10 92 6d 01 	sts	0x016D, r1

  // make sure that SEL == 1 and POUT == 0
  if(!(PAR_STATUS_PIN & SEL) || (PAR_STATUS_PIN & POUT)) {
    1518:	34 9b       	sbis	0x06, 4	; 6
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <pb_proto_handle+0x36>
    151c:	33 9b       	sbis	0x06, 3	; 6
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <pb_proto_handle+0x3e>
    ps->status = PBPROTO_STATUS_IDLE;
    1520:	10 92 6e 01 	sts	0x016E, r1
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	ad c2       	rjmp	.+1370   	; 0x1a82 <pb_proto_handle+0x598>
    return PBPROTO_STATUS_IDLE;
  }

  // Read command byte
  uint8_t cmd = PAR_DATA_PIN;
    1528:	a9 b0       	in	r10, 0x09	; 9

  // Amiga wants to receive data - prepare
  uint16_t pkt_size = 0;
    152a:	1a 82       	std	Y+2, r1	; 0x02
    152c:	19 82       	std	Y+1, r1	; 0x01
  if((cmd == PBPROTO_CMD_RECV) || (cmd == PBPROTO_CMD_RECV_BURST)) {
    152e:	22 e2       	ldi	r18, 0x22	; 34
    1530:	a2 16       	cp	r10, r18
    1532:	19 f0       	breq	.+6      	; 0x153a <pb_proto_handle+0x50>
    1534:	84 e4       	ldi	r24, 0x44	; 68
    1536:	a8 16       	cp	r10, r24
    1538:	61 f4       	brne	.+24     	; 0x1552 <pb_proto_handle+0x68>
    uint8_t res = packetFillFn(&pkt_size);
    153a:	e0 91 43 01 	lds	r30, 0x0143
    153e:	f0 91 44 01 	lds	r31, 0x0144
    1542:	ce 01       	movw	r24, r28
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	09 95       	icall
    if(res != PBPROTO_STATUS_OK) {
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	19 f0       	breq	.+6      	; 0x1552 <pb_proto_handle+0x68>
      ps->status = res;
    154c:	80 93 6e 01 	sts	0x016E, r24
    1550:	98 c2       	rjmp	.+1328   	; 0x1a82 <pb_proto_handle+0x598>
      return res;
    }
  }

  // start timer
  uint32_t ts = g_uwTimeStamp;
    1552:	60 90 52 01 	lds	r6, 0x0152
    1556:	70 90 53 01 	lds	r7, 0x0153
    155a:	80 90 54 01 	lds	r8, 0x0154
    155e:	90 90 55 01 	lds	r9, 0x0155
    1562:	10 92 85 00 	sts	0x0085, r1
    1566:	10 92 84 00 	sts	0x0084, r1
  timerReset();

  // confirm cmd with BUSY = 1
  PAR_STATUS_PORT |= BUSY;
    156a:	e8 e2       	ldi	r30, 0x28	; 40
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	84 60       	ori	r24, 0x04	; 4
    1572:	80 83       	st	Z, r24

  uint16_t uwParDataSize = 0;
  switch(cmd) {
    1574:	a2 e2       	ldi	r26, 0x22	; 34
    1576:	aa 16       	cp	r10, r26
    1578:	a1 f0       	breq	.+40     	; 0x15a2 <pb_proto_handle+0xb8>
    157a:	aa 15       	cp	r26, r10
    157c:	20 f0       	brcs	.+8      	; 0x1586 <pb_proto_handle+0x9c>
    157e:	b1 e1       	ldi	r27, 0x11	; 17
    1580:	ab 16       	cp	r10, r27
    1582:	49 f4       	brne	.+18     	; 0x1596 <pb_proto_handle+0xac>
    1584:	75 c0       	rjmp	.+234    	; 0x1670 <pb_proto_handle+0x186>
    1586:	e3 e3       	ldi	r30, 0x33	; 51
    1588:	ae 16       	cp	r10, r30
    158a:	09 f4       	brne	.+2      	; 0x158e <pb_proto_handle+0xa4>
    158c:	7a c1       	rjmp	.+756    	; 0x1882 <pb_proto_handle+0x398>
    158e:	f4 e4       	ldi	r31, 0x44	; 68
    1590:	af 16       	cp	r10, r31
    1592:	09 f4       	brne	.+2      	; 0x1596 <pb_proto_handle+0xac>
    1594:	dd c0       	rjmp	.+442    	; 0x1750 <pb_proto_handle+0x266>
    1596:	bb 24       	eor	r11, r11
    1598:	68 94       	set
    159a:	b2 f8       	bld	r11, 2
    159c:	cc 24       	eor	r12, r12
    159e:	dd 24       	eor	r13, r13
    15a0:	fc c1       	rjmp	.+1016   	; 0x199a <pb_proto_handle+0x4b0>
    case PBPROTO_CMD_RECV:
      result = parHandleAmiRead(pkt_size, &uwParDataSize);
    15a2:	e9 80       	ldd	r14, Y+1	; 0x01
    15a4:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t parHandleAmiRead(uint16_t uwSize, uint16_t *pWriteSize)
{
	uint8_t ubStatus;

  PAR_DATA_DDR = 0xFF;
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	8a b9       	out	0x0a, r24	; 10

  // Send packet size - high part
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	60 e2       	ldi	r22, 0x20	; 32
    15ae:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    15b2:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    15b4:	21 e0       	ldi	r18, 0x01	; 1
    15b6:	82 17       	cp	r24, r18
    15b8:	09 f0       	breq	.+2      	; 0x15bc <pb_proto_handle+0xd2>
    15ba:	57 c0       	rjmp	.+174    	; 0x166a <pb_proto_handle+0x180>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize >> 8;
    15bc:	fb b8       	out	0x0b, r15	; 11
  PAR_STATUS_PORT &= ~BUSY;
    15be:	e8 e2       	ldi	r30, 0x28	; 40
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8b 7f       	andi	r24, 0xFB	; 251
    15c6:	80 83       	st	Z, r24

  // Send packet size - low part
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	60 e3       	ldi	r22, 0x30	; 48
    15cc:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    15d0:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK) {
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	b8 16       	cp	r11, r24
    15d6:	09 f0       	breq	.+2      	; 0x15da <pb_proto_handle+0xf0>
    15d8:	48 c0       	rjmp	.+144    	; 0x166a <pb_proto_handle+0x180>
    return ubStatus;
    // NOTE(KaiN): return without DDR switchback
  }
  PAR_DATA_PORT = uwSize & 0xFF;
    15da:	eb b8       	out	0x0b, r14	; 11
  PAR_STATUS_PORT |= BUSY;
    15dc:	e8 e2       	ldi	r30, 0x28	; 40
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	84 60       	ori	r24, 0x04	; 4
    15e4:	80 83       	st	Z, r24
  const uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    15e6:	c7 01       	movw	r24, r14
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	0f 2e       	mov	r0, r31
    15ec:	fe ef       	ldi	r31, 0xFE	; 254
    15ee:	2f 2e       	mov	r2, r31
    15f0:	ff ef       	ldi	r31, 0xFF	; 255
    15f2:	3f 2e       	mov	r3, r31
    15f4:	f0 2d       	mov	r31, r0
    15f6:	28 22       	and	r2, r24
    15f8:	39 22       	and	r3, r25
  while(uwSize--) {
    15fa:	21 14       	cp	r2, r1
    15fc:	31 04       	cpc	r3, r1
    15fe:	61 f1       	breq	.+88     	; 0x1658 <pb_proto_handle+0x16e>
    1600:	01 e0       	ldi	r16, 0x01	; 1
    1602:	0f 2e       	mov	r0, r31
    1604:	fd e7       	ldi	r31, 0x7D	; 125
    1606:	ef 2e       	mov	r14, r31
    1608:	f1 e0       	ldi	r31, 0x01	; 1
    160a:	ff 2e       	mov	r15, r31
    160c:	f0 2d       	mov	r31, r0
    160e:	cc 24       	eor	r12, r12
    1610:	dd 24       	eor	r13, r13
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    PAR_STATUS_PORT ^= BUSY;
    1612:	0f 2e       	mov	r0, r31
    1614:	f8 e2       	ldi	r31, 0x28	; 40
    1616:	4f 2e       	mov	r4, r31
    1618:	55 24       	eor	r5, r5
    161a:	f0 2d       	mov	r31, r0
    161c:	14 e0       	ldi	r17, 0x04	; 4
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    161e:	80 2f       	mov	r24, r16
    1620:	60 e4       	ldi	r22, 0x40	; 64
    1622:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    1626:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    1628:	a1 e0       	ldi	r26, 0x01	; 1
    162a:	8a 17       	cp	r24, r26
    162c:	e1 f4       	brne	.+56     	; 0x1666 <pb_proto_handle+0x17c>
      break;
    PAR_DATA_PORT = *(ptr++);
    162e:	f7 01       	movw	r30, r14
    1630:	80 81       	ld	r24, Z
    1632:	ab e2       	ldi	r26, 0x2B	; 43
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	8c 93       	st	X, r24
    PAR_STATUS_PORT ^= BUSY;
    1638:	f2 01       	movw	r30, r4
    163a:	80 81       	ld	r24, Z
    163c:	81 27       	eor	r24, r17
    163e:	80 83       	st	Z, r24
    ++uwWriteSize;
    1640:	08 94       	sec
    1642:	c1 1c       	adc	r12, r1
    1644:	d1 1c       	adc	r13, r1
  uint8_t ubPOutWait = 1;
  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
  while(uwSize--) {
    1646:	2c 14       	cp	r2, r12
    1648:	3d 04       	cpc	r3, r13
    164a:	41 f0       	breq	.+16     	; 0x165c <pb_proto_handle+0x172>
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    PAR_DATA_PORT = *(ptr++);
    164c:	08 94       	sec
    164e:	e1 1c       	adc	r14, r1
    1650:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= BUSY;
    ++uwWriteSize;
    ubPOutWait ^= 1;
    1652:	f1 e0       	ldi	r31, 0x01	; 1
    1654:	0f 27       	eor	r16, r31
    1656:	e3 cf       	rjmp	.-58     	; 0x161e <pb_proto_handle+0x134>
    1658:	cc 24       	eor	r12, r12
    165a:	dd 24       	eor	r13, r13
  }

  // Final wait
  if(ubStatus == PBPROTO_STATUS_OK)
    ubStatus = parWaitForPout(1, PBPROTO_STAGE_LAST_DATA);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	60 e5       	ldi	r22, 0x50	; 80
    1660:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    1664:	b8 2e       	mov	r11, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    1666:	1a b8       	out	0x0a, r1	; 10
    1668:	98 c1       	rjmp	.+816    	; 0x199a <pb_proto_handle+0x4b0>
    166a:	cc 24       	eor	r12, r12
    166c:	dd 24       	eor	r13, r13
    166e:	95 c1       	rjmp	.+810    	; 0x199a <pb_proto_handle+0x4b0>
{
  uint8_t ubStatus;
  uint16_t uwSize;

  // --- get size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	60 e2       	ldi	r22, 0x20	; 32
    1674:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    1678:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	82 17       	cp	r24, r18
    167e:	09 f0       	breq	.+2      	; 0x1682 <pb_proto_handle+0x198>
    1680:	64 c0       	rjmp	.+200    	; 0x174a <pb_proto_handle+0x260>
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    1682:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~BUSY;
    1684:	e8 e2       	ldi	r30, 0x28	; 40
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	8b 7f       	andi	r24, 0xFB	; 251
    168c:	80 83       	st	Z, r24

  // --- get size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	60 e3       	ldi	r22, 0x30	; 48
    1692:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    1696:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	b8 16       	cp	r11, r24
    169c:	09 f0       	breq	.+2      	; 0x16a0 <pb_proto_handle+0x1b6>
    169e:	55 c0       	rjmp	.+170    	; 0x174a <pb_proto_handle+0x260>
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    16a0:	29 b1       	in	r18, 0x09	; 9

  // --- get size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize = PAR_DATA_PIN << 8;
    16a2:	90 2f       	mov	r25, r16
    16a4:	80 e0       	ldi	r24, 0x00	; 0

  // --- get size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;
  uwSize |= PAR_DATA_PIN;
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	28 2b       	or	r18, r24
    16aa:	39 2b       	or	r19, r25
  PAR_STATUS_PORT ^= BUSY;
    16ac:	e8 e2       	ldi	r30, 0x28	; 40
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	94 e0       	ldi	r25, 0x04	; 4
    16b4:	89 27       	eor	r24, r25
    16b6:	80 83       	st	Z, r24

  // Check with buffer size
  if(uwSize > DATABUF_SIZE) {
    16b8:	a5 e0       	ldi	r26, 0x05	; 5
    16ba:	2b 3e       	cpi	r18, 0xEB	; 235
    16bc:	3a 07       	cpc	r19, r26
    16be:	38 f0       	brcs	.+14     	; 0x16ce <pb_proto_handle+0x1e4>
    16c0:	0f 2e       	mov	r0, r31
    16c2:	f5 e0       	ldi	r31, 0x05	; 5
    16c4:	bf 2e       	mov	r11, r31
    16c6:	f0 2d       	mov	r31, r0
    16c8:	cc 24       	eor	r12, r12
    16ca:	dd 24       	eor	r13, r13
    16cc:	66 c1       	rjmp	.+716    	; 0x199a <pb_proto_handle+0x4b0>
  }

  // Original plipbox had following loop operating on words, so size has to be
  // rounded up
  // TODO(KaiN#9): Make odd transfers safe?
  uwSize = (uwSize+1)&0xFFFE;
    16ce:	c9 01       	movw	r24, r18
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	0f 2e       	mov	r0, r31
    16d4:	fe ef       	ldi	r31, 0xFE	; 254
    16d6:	2f 2e       	mov	r2, r31
    16d8:	ff ef       	ldi	r31, 0xFF	; 255
    16da:	3f 2e       	mov	r3, r31
    16dc:	f0 2d       	mov	r31, r0
    16de:	28 22       	and	r2, r24
    16e0:	39 22       	and	r3, r25

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    16e2:	21 14       	cp	r2, r1
    16e4:	31 04       	cpc	r3, r1
    16e6:	71 f1       	breq	.+92     	; 0x1744 <pb_proto_handle+0x25a>
    16e8:	01 e0       	ldi	r16, 0x01	; 1
    16ea:	0f 2e       	mov	r0, r31
    16ec:	fd e7       	ldi	r31, 0x7D	; 125
    16ee:	ef 2e       	mov	r14, r31
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	ff 2e       	mov	r15, r31
    16f4:	f0 2d       	mov	r31, r0
    16f6:	cc 24       	eor	r12, r12
    16f8:	dd 24       	eor	r13, r13
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    PAR_STATUS_PORT ^= BUSY;
    16fa:	0f 2e       	mov	r0, r31
    16fc:	f8 e2       	ldi	r31, 0x28	; 40
    16fe:	4f 2e       	mov	r4, r31
    1700:	55 24       	eor	r5, r5
    1702:	f0 2d       	mov	r31, r0
    1704:	14 e0       	ldi	r17, 0x04	; 4
  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    1706:	80 2f       	mov	r24, r16
    1708:	60 e4       	ldi	r22, 0x40	; 64
    170a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    170e:	b8 2e       	mov	r11, r24
    if(ubStatus != PBPROTO_STATUS_OK)
    1710:	b1 e0       	ldi	r27, 0x01	; 1
    1712:	8b 17       	cp	r24, r27
    1714:	09 f0       	breq	.+2      	; 0x1718 <pb_proto_handle+0x22e>
    1716:	41 c1       	rjmp	.+642    	; 0x199a <pb_proto_handle+0x4b0>
      break;
    *(ptr++) = PAR_DATA_PIN;
    1718:	e9 e2       	ldi	r30, 0x29	; 41
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	d7 01       	movw	r26, r14
    1720:	8c 93       	st	X, r24
    PAR_STATUS_PORT ^= BUSY;
    1722:	f2 01       	movw	r30, r4
    1724:	80 81       	ld	r24, Z
    1726:	81 27       	eor	r24, r17
    1728:	80 83       	st	Z, r24
    ubPOutWait ^= 1;
    uwReadSize++;
    172a:	08 94       	sec
    172c:	c1 1c       	adc	r12, r1
    172e:	d1 1c       	adc	r13, r1

  // Packet read loop
  uint16_t uwReadSize = 0;
  uint8_t *ptr = g_pDataBuffer;
  uint8_t ubPOutWait = 1;
  while(uwSize--) {
    1730:	2c 14       	cp	r2, r12
    1732:	3d 04       	cpc	r3, r13
    1734:	09 f4       	brne	.+2      	; 0x1738 <pb_proto_handle+0x24e>
    1736:	31 c1       	rjmp	.+610    	; 0x199a <pb_proto_handle+0x4b0>
    ubStatus = parWaitForPout(ubPOutWait, PBPROTO_STAGE_DATA);
    if(ubStatus != PBPROTO_STATUS_OK)
      break;
    *(ptr++) = PAR_DATA_PIN;
    1738:	08 94       	sec
    173a:	e1 1c       	adc	r14, r1
    173c:	f1 1c       	adc	r15, r1
    PAR_STATUS_PORT ^= BUSY;
    ubPOutWait ^= 1;
    173e:	f1 e0       	ldi	r31, 0x01	; 1
    1740:	0f 27       	eor	r16, r31
    1742:	e1 cf       	rjmp	.-62     	; 0x1706 <pb_proto_handle+0x21c>
    1744:	cc 24       	eor	r12, r12
    1746:	dd 24       	eor	r13, r13
    1748:	28 c1       	rjmp	.+592    	; 0x199a <pb_proto_handle+0x4b0>
    174a:	cc 24       	eor	r12, r12
    174c:	dd 24       	eor	r13, r13
    174e:	25 c1       	rjmp	.+586    	; 0x199a <pb_proto_handle+0x4b0>
      break;
    case PBPROTO_CMD_SEND:
      result = parHandleAmiWrite(&uwParDataSize);
      break;
    case PBPROTO_CMD_RECV_BURST:
      result = parHandleAmiReadBurst(pkt_size, &uwParDataSize);
    1750:	e9 80       	ldd	r14, Y+1	; 0x01
    1752:	fa 80       	ldd	r15, Y+2	; 0x02
 */
static uint8_t parHandleAmiReadBurst(uint16_t size, uint16_t *ret_size) {
  uint8_t status;

  // --- set packet size hi
  status = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	60 e2       	ldi	r22, 0x20	; 32
    1758:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    175c:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    175e:	21 e0       	ldi	r18, 0x01	; 1
    1760:	82 17       	cp	r24, r18
    1762:	09 f0       	breq	.+2      	; 0x1766 <pb_proto_handle+0x27c>
    1764:	8b c0       	rjmp	.+278    	; 0x187c <pb_proto_handle+0x392>
    return status;

	PAR_DATA_DDR = 0xFF;
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	8a b9       	out	0x0a, r24	; 10
	PAR_DATA_PORT = size >> 8;
    176a:	fb b8       	out	0x0b, r15	; 11
	PAR_STATUS_PORT &= ~BUSY;
    176c:	e8 e2       	ldi	r30, 0x28	; 40
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8b 7f       	andi	r24, 0xFB	; 251
    1774:	80 83       	st	Z, r24

  // --- set packet size lo ---
  status = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	60 e3       	ldi	r22, 0x30	; 48
    177a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    177e:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	b8 16       	cp	r11, r24
    1784:	09 f0       	breq	.+2      	; 0x1788 <pb_proto_handle+0x29e>
    1786:	7a c0       	rjmp	.+244    	; 0x187c <pb_proto_handle+0x392>
    return status;

	PAR_DATA_PORT = size & 0xFF;
    1788:	eb b8       	out	0x0b, r14	; 11
	PAR_STATUS_PORT ^= BUSY;
    178a:	e8 e2       	ldi	r30, 0x28	; 40
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	94 e0       	ldi	r25, 0x04	; 4
    1792:	89 27       	eor	r24, r25
    1794:	80 83       	st	Z, r24

  // --- burst ready? ---
  status = parWaitForPout(1, PBPROTO_STAGE_DATA);
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	60 e4       	ldi	r22, 0x40	; 64
    179a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    179e:	b8 2e       	mov	r11, r24
  if(status != PBPROTO_STATUS_OK)
    17a0:	a1 e0       	ldi	r26, 0x01	; 1
    17a2:	8a 17       	cp	r24, r26
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <pb_proto_handle+0x2be>
    17a6:	6a c0       	rjmp	.+212    	; 0x187c <pb_proto_handle+0x392>
    return status;

  // round to even and convert to words
  uint16_t words = (size + 1) >> 1;
    17a8:	c7 01       	movw	r24, r14
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	ac 01       	movw	r20, r24
    17ae:	56 95       	lsr	r21
    17b0:	47 95       	ror	r20
  uint16_t i;
  uint8_t *ptr = g_pDataBuffer;

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    17b2:	f8 94       	cli
	PAR_STATUS_PORT ^= BUSY;
    17b4:	e8 e2       	ldi	r30, 0x28	; 40
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	94 e0       	ldi	r25, 0x04	; 4
    17bc:	89 27       	eor	r24, r25
    17be:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    17c0:	41 15       	cp	r20, r1
    17c2:	51 05       	cpc	r21, r1
    17c4:	91 f1       	breq	.+100    	; 0x182a <pb_proto_handle+0x340>
    17c6:	0d e7       	ldi	r16, 0x7D	; 125
    17c8:	11 e0       	ldi	r17, 0x01	; 1
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17ce:	9f e0       	ldi	r25, 0x0F	; 15
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    17d0:	6b e2       	ldi	r22, 0x2B	; 43
    17d2:	70 e0       	ldi	r23, 0x00	; 0

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    17d4:	e6 e2       	ldi	r30, 0x26	; 38
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	89 2f       	mov	r24, r25
    17da:	8a 95       	dec	r24
    17dc:	f1 f7       	brne	.-4      	; 0x17da <pb_proto_handle+0x2f0>
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= BUSY;
  for(i=0;i<words;i++) {
    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    17de:	d8 01       	movw	r26, r16
    17e0:	8c 91       	ld	r24, X
    17e2:	db 01       	movw	r26, r22
    17e4:	8c 93       	st	X, r24

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    17e6:	80 81       	ld	r24, Z
    17e8:	83 ff       	sbrs	r24, 3
    17ea:	03 c0       	rjmp	.+6      	; 0x17f2 <pb_proto_handle+0x308>
    17ec:	80 81       	ld	r24, Z
    17ee:	84 fd       	sbrc	r24, 4
    17f0:	fa cf       	rjmp	.-12     	; 0x17e6 <pb_proto_handle+0x2fc>
		if(!(PAR_STATUS_PIN & SEL))
    17f2:	80 81       	ld	r24, Z
    17f4:	84 ff       	sbrs	r24, 4
    17f6:	1b c0       	rjmp	.+54     	; 0x182e <pb_proto_handle+0x344>
    17f8:	89 2f       	mov	r24, r25
    17fa:	8a 95       	dec	r24
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <pb_proto_handle+0x310>
			break;

    BURST_DELAY;
    PAR_DATA_PORT = *(ptr++);
    17fe:	d8 01       	movw	r26, r16
    1800:	11 96       	adiw	r26, 0x01	; 1
    1802:	8c 91       	ld	r24, X
    1804:	db 01       	movw	r26, r22
    1806:	8c 93       	st	X, r24

    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    1808:	80 81       	ld	r24, Z
    180a:	83 fd       	sbrc	r24, 3
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <pb_proto_handle+0x32a>
    180e:	80 81       	ld	r24, Z
    1810:	84 fd       	sbrc	r24, 4
    1812:	fa cf       	rjmp	.-12     	; 0x1808 <pb_proto_handle+0x31e>
		if(!(PAR_STATUS_PIN & SEL))
    1814:	80 81       	ld	r24, Z
    1816:	84 ff       	sbrs	r24, 4
    1818:	0a c0       	rjmp	.+20     	; 0x182e <pb_proto_handle+0x344>

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
	PAR_STATUS_PORT ^= BUSY;
  for(i=0;i<words;i++) {
    181a:	2f 5f       	subi	r18, 0xFF	; 255
    181c:	3f 4f       	sbci	r19, 0xFF	; 255
    181e:	24 17       	cp	r18, r20
    1820:	35 07       	cpc	r19, r21
    1822:	28 f4       	brcc	.+10     	; 0x182e <pb_proto_handle+0x344>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    1824:	0e 5f       	subi	r16, 0xFE	; 254
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	d7 cf       	rjmp	.-82     	; 0x17d8 <pb_proto_handle+0x2ee>
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    182e:	e6 e2       	ldi	r30, 0x26	; 38
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;
    1832:	a8 e2       	ldi	r26, 0x28	; 40
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
		if(!(PAR_STATUS_PIN & SEL))
			break;
  }
  recv_burst_exit:
  sei();
    1836:	78 94       	sei
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <pb_proto_handle+0x356>
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    if(!(PAR_STATUS_PIN & SEL))
    183a:	80 81       	ld	r24, Z
    183c:	84 ff       	sbrs	r24, 4
    183e:	fb cf       	rjmp	.-10     	; 0x1836 <pb_proto_handle+0x34c>
  sei();
  // END TIME CRITICAL

	// TODO(KaiN#9): WTF with label/goto
  // final wait REQ == 0
  while(PAR_STATUS_PIN & POUT)
    1840:	80 81       	ld	r24, Z
    1842:	83 fd       	sbrc	r24, 3
    1844:	fa cf       	rjmp	.-12     	; 0x183a <pb_proto_handle+0x350>
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;
    1846:	8c 91       	ld	r24, X
    1848:	84 60       	ori	r24, 0x04	; 4
    184a:	8c 93       	st	X, r24
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <pb_proto_handle+0x36a>

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & POUT))
    if(!(PAR_STATUS_PIN & SEL))
    184e:	80 81       	ld	r24, Z
    1850:	84 ff       	sbrs	r24, 4
    1852:	f1 cf       	rjmp	.-30     	; 0x1836 <pb_proto_handle+0x34c>
			goto recv_burst_exit;

	PAR_STATUS_PORT |= BUSY;

  // final wait REQ == 1
  while(!(PAR_STATUS_PIN & POUT))
    1854:	80 81       	ld	r24, Z
    1856:	83 ff       	sbrs	r24, 3
    1858:	fa cf       	rjmp	.-12     	; 0x184e <pb_proto_handle+0x364>
    if(!(PAR_STATUS_PIN & SEL))
			goto recv_burst_exit;

  // error?
  if(i<words)
    185a:	24 17       	cp	r18, r20
    185c:	35 07       	cpc	r19, r21
    185e:	20 f4       	brcc	.+8      	; 0x1868 <pb_proto_handle+0x37e>
    1860:	0f 2e       	mov	r0, r31
    1862:	f2 e4       	ldi	r31, 0x42	; 66
    1864:	bf 2e       	mov	r11, r31
    1866:	f0 2d       	mov	r31, r0
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT &= ~BUSY;
    1868:	e8 e2       	ldi	r30, 0x28	; 40
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	8b 7f       	andi	r24, 0xFB	; 251
    1870:	80 83       	st	Z, r24

  // [IN]
  PAR_DATA_DDR = 0x00;
    1872:	1a b8       	out	0x0a, r1	; 10

  *ret_size = i << 1;
    1874:	69 01       	movw	r12, r18
    1876:	cc 0c       	add	r12, r12
    1878:	dd 1c       	adc	r13, r13
    187a:	8f c0       	rjmp	.+286    	; 0x199a <pb_proto_handle+0x4b0>
    187c:	cc 24       	eor	r12, r12
    187e:	dd 24       	eor	r13, r13
    1880:	8c c0       	rjmp	.+280    	; 0x199a <pb_proto_handle+0x4b0>
{
  uint16_t uwSize;
  uint8_t ubStatus;

  // --- packet size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	60 e2       	ldi	r22, 0x20	; 32
    1886:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    188a:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    188c:	b1 e0       	ldi	r27, 0x01	; 1
    188e:	8b 17       	cp	r24, r27
    1890:	09 f0       	breq	.+2      	; 0x1894 <pb_proto_handle+0x3aa>
    1892:	81 c0       	rjmp	.+258    	; 0x1996 <pb_proto_handle+0x4ac>
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    1894:	09 b1       	in	r16, 0x09	; 9
  PAR_STATUS_PORT &= ~BUSY;
    1896:	e8 e2       	ldi	r30, 0x28	; 40
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8b 7f       	andi	r24, 0xFB	; 251
    189e:	80 83       	st	Z, r24

  // --- packet size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	60 e3       	ldi	r22, 0x30	; 48
    18a4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <parWaitForPout>
    18a8:	b8 2e       	mov	r11, r24
  if(ubStatus != PBPROTO_STATUS_OK)
    18aa:	e1 e0       	ldi	r30, 0x01	; 1
    18ac:	8e 17       	cp	r24, r30
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <pb_proto_handle+0x3c8>
    18b0:	72 c0       	rjmp	.+228    	; 0x1996 <pb_proto_handle+0x4ac>
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    18b2:	29 b1       	in	r18, 0x09	; 9
  // --- packet size hi ---
  ubStatus = parWaitForPout(1, PBPROTO_STAGE_SIZE_HI);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize = PAR_DATA_PIN << 8;
    18b4:	90 2f       	mov	r25, r16
    18b6:	80 e0       	ldi	r24, 0x00	; 0
  // --- packet size lo ---
  ubStatus = parWaitForPout(0, PBPROTO_STAGE_SIZE_LO);
  if(ubStatus != PBPROTO_STATUS_OK)
    return ubStatus;

  uwSize |= PAR_DATA_PIN;
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	82 2b       	or	r24, r18
    18bc:	93 2b       	or	r25, r19
  // delay SET_RAK until burst begin...

  // check size
  if(uwSize > DATABUF_SIZE)
    18be:	f5 e0       	ldi	r31, 0x05	; 5
    18c0:	8b 3e       	cpi	r24, 0xEB	; 235
    18c2:	9f 07       	cpc	r25, r31
    18c4:	38 f0       	brcs	.+14     	; 0x18d4 <pb_proto_handle+0x3ea>
    18c6:	0f 2e       	mov	r0, r31
    18c8:	f5 e0       	ldi	r31, 0x05	; 5
    18ca:	bf 2e       	mov	r11, r31
    18cc:	f0 2d       	mov	r31, r0
    18ce:	cc 24       	eor	r12, r12
    18d0:	dd 24       	eor	r13, r13
    18d2:	63 c0       	rjmp	.+198    	; 0x199a <pb_proto_handle+0x4b0>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;

  // round to even and convert to words
  uint16_t words = (uwSize +1) >> 1;
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	bc 01       	movw	r22, r24
    18d8:	76 95       	lsr	r23
    18da:	67 95       	ror	r22
  uint8_t result = PBPROTO_STATUS_OK;
  uint8_t *ptr = g_pDataBuffer;

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
    18dc:	f8 94       	cli
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
    18de:	e8 e2       	ldi	r30, 0x28	; 40
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	94 e0       	ldi	r25, 0x04	; 4
    18e6:	89 27       	eor	r24, r25
    18e8:	80 83       	st	Z, r24
  for(i=0;i<words;i++) {
    18ea:	61 15       	cp	r22, r1
    18ec:	71 05       	cpc	r23, r1
    18ee:	29 f4       	brne	.+10     	; 0x18fa <pb_proto_handle+0x410>
    18f0:	2d c0       	rjmp	.+90     	; 0x194c <pb_proto_handle+0x462>
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
    18f2:	80 81       	ld	r24, Z
    18f4:	84 fd       	sbrc	r24, 4
    18f6:	09 c0       	rjmp	.+18     	; 0x190a <pb_proto_handle+0x420>
    18f8:	0e c0       	rjmp	.+28     	; 0x1916 <pb_proto_handle+0x42c>
    18fa:	0d e7       	ldi	r16, 0x7D	; 125
    18fc:	11 e0       	ldi	r17, 0x01	; 1
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    1902:	e6 e2       	ldi	r30, 0x26	; 38
    1904:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    1906:	49 e2       	ldi	r20, 0x29	; 41
    1908:	50 e0       	ldi	r21, 0x00	; 0
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    // wait REQ == 1
    while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    190a:	80 81       	ld	r24, Z
    190c:	83 fd       	sbrc	r24, 3
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <pb_proto_handle+0x42c>
    1910:	80 81       	ld	r24, Z
    1912:	84 fd       	sbrc	r24, 4
    1914:	ee cf       	rjmp	.-36     	; 0x18f2 <pb_proto_handle+0x408>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    1916:	da 01       	movw	r26, r20
    1918:	8c 91       	ld	r24, X
    191a:	d8 01       	movw	r26, r16
    191c:	8c 93       	st	X, r24
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <pb_proto_handle+0x43c>

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
    1920:	80 81       	ld	r24, Z
    1922:	84 ff       	sbrs	r24, 4
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <pb_proto_handle+0x448>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;

    // wait REQ == 0
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
    1926:	80 81       	ld	r24, Z
    1928:	83 ff       	sbrs	r24, 3
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <pb_proto_handle+0x448>
    192c:	80 81       	ld	r24, Z
    192e:	84 fd       	sbrc	r24, 4
    1930:	f7 cf       	rjmp	.-18     	; 0x1920 <pb_proto_handle+0x436>
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
    1932:	da 01       	movw	r26, r20
    1934:	8c 91       	ld	r24, X
    1936:	d8 01       	movw	r26, r16
    1938:	11 96       	adiw	r26, 0x01	; 1
    193a:	8c 93       	st	X, r24

  // ----- burst loop -----
  // BEGIN TIME CRITICAL
  cli();
  PAR_STATUS_PORT ^= BUSY; // trigger start of burst
  for(i=0;i<words;i++) {
    193c:	2f 5f       	subi	r18, 0xFF	; 255
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
    1940:	26 17       	cp	r18, r22
    1942:	37 07       	cpc	r19, r23
    1944:	18 f4       	brcc	.+6      	; 0x194c <pb_proto_handle+0x462>
 * - prepares response for recv
 * - does normal/burst comm with Amiga
 * - waits a bit for SEL=0, then sets BUSY=0
 * - processes packet sent by Amiga
 */
uint8_t pb_proto_handle(void) {
    1946:	0e 5f       	subi	r16, 0xFE	; 254
    1948:	1f 4f       	sbci	r17, 0xFF	; 255
    194a:	df cf       	rjmp	.-66     	; 0x190a <pb_proto_handle+0x420>
    while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL))
		if(!(PAR_STATUS_PIN & SEL))
			break;
    *(ptr++) = PAR_DATA_PIN;
  }
  sei();
    194c:	78 94       	sei
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    194e:	e6 e2       	ldi	r30, 0x26	; 38
    1950:	f0 e0       	ldi	r31, 0x00	; 0
		if(!(PAR_STATUS_PIN & SEL))
			continue;

		PAR_STATUS_PORT ^= BUSY;
    1952:	a8 e2       	ldi	r26, 0x28	; 40
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	94 e0       	ldi	r25, 0x04	; 4
  sei();
  // END TIME CRITICAL

  do {
		// Wait for POUT == 1
		while(!(PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    1958:	80 81       	ld	r24, Z
    195a:	83 fd       	sbrc	r24, 3
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <pb_proto_handle+0x47a>
    195e:	80 81       	ld	r24, Z
    1960:	84 fd       	sbrc	r24, 4
    1962:	fa cf       	rjmp	.-12     	; 0x1958 <pb_proto_handle+0x46e>
		if(!(PAR_STATUS_PIN & SEL))
    1964:	80 81       	ld	r24, Z
    1966:	84 ff       	sbrs	r24, 4
    1968:	09 c0       	rjmp	.+18     	; 0x197c <pb_proto_handle+0x492>
			continue;

		PAR_STATUS_PORT ^= BUSY;
    196a:	8c 91       	ld	r24, X
    196c:	89 27       	eor	r24, r25
    196e:	8c 93       	st	X, r24
		// Wait for POUT == 0
		while((PAR_STATUS_PIN & POUT) && (PAR_STATUS_PIN & SEL));
    1970:	80 81       	ld	r24, Z
    1972:	83 ff       	sbrs	r24, 3
    1974:	03 c0       	rjmp	.+6      	; 0x197c <pb_proto_handle+0x492>
    1976:	80 81       	ld	r24, Z
    1978:	84 fd       	sbrc	r24, 4
    197a:	fa cf       	rjmp	.-12     	; 0x1970 <pb_proto_handle+0x486>
  } while(!(PAR_STATUS_PIN & SEL));
    197c:	80 81       	ld	r24, Z
    197e:	84 ff       	sbrs	r24, 4
    1980:	eb cf       	rjmp	.-42     	; 0x1958 <pb_proto_handle+0x46e>
  // error?
  if(i<words)
    result = PBPROTO_STATUS_TIMEOUT | PBPROTO_STAGE_DATA;

  // final ACK
	PAR_STATUS_PORT ^= BUSY;
    1982:	e8 e2       	ldi	r30, 0x28	; 40
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	94 e0       	ldi	r25, 0x04	; 4
    198a:	89 27       	eor	r24, r25
    198c:	80 83       	st	Z, r24

  *ret_size = i << 1;
    198e:	6b 01       	movw	r12, r22
    1990:	cc 0c       	add	r12, r12
    1992:	dd 1c       	adc	r13, r13
    1994:	02 c0       	rjmp	.+4      	; 0x199a <pb_proto_handle+0x4b0>
    1996:	cc 24       	eor	r12, r12
    1998:	dd 24       	eor	r13, r13
  }
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t parWaitForSel(uint8_t select_state, uint8_t state_flag) {
  g_uwTimer100us = 0;
    199a:	10 92 51 01 	sts	0x0151, r1
    199e:	10 92 50 01 	sts	0x0150, r1
  while(g_uwTimer100us < pb_proto_timeout) {
    19a2:	20 91 3a 01 	lds	r18, 0x013A
    19a6:	30 91 3b 01 	lds	r19, 0x013B
    if(((PAR_STATUS_PIN & SEL) >> SEL_PIN) == select_state)
    19aa:	e6 e2       	ldi	r30, 0x26	; 38
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	03 c0       	rjmp	.+6      	; 0x19b6 <pb_proto_handle+0x4cc>
    19b0:	80 81       	ld	r24, Z
    19b2:	84 ff       	sbrs	r24, 4
    19b4:	07 c0       	rjmp	.+14     	; 0x19c4 <pb_proto_handle+0x4da>
  return PBPROTO_STATUS_TIMEOUT | ubStateFlag;
}

static uint8_t parWaitForSel(uint8_t select_state, uint8_t state_flag) {
  g_uwTimer100us = 0;
  while(g_uwTimer100us < pb_proto_timeout) {
    19b6:	80 91 50 01 	lds	r24, 0x0150
    19ba:	90 91 51 01 	lds	r25, 0x0151
    19be:	82 17       	cp	r24, r18
    19c0:	93 07       	cpc	r25, r19
    19c2:	b0 f3       	brcs	.-20     	; 0x19b0 <pb_proto_handle+0x4c6>

  // wait for SEL == 0
  parWaitForSel(0, PBPROTO_STAGE_END_SELECT);

  // reset BUSY = 0
  PAR_STATUS_PORT &= ~BUSY;
    19c4:	e8 e2       	ldi	r30, 0x28	; 40
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8b 7f       	andi	r24, 0xFB	; 251
    19cc:	80 83       	st	Z, r24
    19ce:	e0 90 84 00 	lds	r14, 0x0084
    19d2:	f0 90 85 00 	lds	r15, 0x0085
  // Read timer - assuming transfer will be much shorter than 100us
  // TODO(KaiN#7): is it really that short?
  uint16_t uwTimeDelta = timerGetState();

  // Amiga sent data - process it
  if(result == PBPROTO_STATUS_OK) {
    19d6:	b1 e0       	ldi	r27, 0x01	; 1
    19d8:	bb 16       	cp	r11, r27
    19da:	71 f4       	brne	.+28     	; 0x19f8 <pb_proto_handle+0x50e>
    if((cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST)) {
    19dc:	e1 e1       	ldi	r30, 0x11	; 17
    19de:	ae 16       	cp	r10, r30
    19e0:	21 f0       	breq	.+8      	; 0x19ea <pb_proto_handle+0x500>
    19e2:	f3 e3       	ldi	r31, 0x33	; 51
    19e4:	af 16       	cp	r10, r31
    19e6:	09 f0       	breq	.+2      	; 0x19ea <pb_proto_handle+0x500>
    19e8:	61 c0       	rjmp	.+194    	; 0x1aac <pb_proto_handle+0x5c2>
      result = packetProcessFn(uwParDataSize);
    19ea:	e0 91 45 01 	lds	r30, 0x0145
    19ee:	f0 91 46 01 	lds	r31, 0x0146
    19f2:	c6 01       	movw	r24, r12
    19f4:	09 95       	icall
    19f6:	b8 2e       	mov	r11, r24
    }
  }

  // fill in stats
  ps->cmd = cmd;
    19f8:	0d e6       	ldi	r16, 0x6D	; 109
    19fa:	11 e0       	ldi	r17, 0x01	; 1
    19fc:	f8 01       	movw	r30, r16
    19fe:	a1 92       	st	Z+, r10
  ps->status = result;
    1a00:	b0 82       	st	Z, r11
  ps->size = uwParDataSize;
    1a02:	d8 01       	movw	r26, r16
    1a04:	15 96       	adiw	r26, 0x05	; 5
    1a06:	dc 92       	st	X, r13
    1a08:	ce 92       	st	-X, r12
    1a0a:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = uwTimeDelta;
    1a0c:	17 96       	adiw	r26, 0x07	; 7
    1a0e:	fc 92       	st	X, r15
    1a10:	ee 92       	st	-X, r14
    1a12:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timerCalculateKbps(uwParDataSize, uwTimeDelta);
    1a14:	c6 01       	movw	r24, r12
    1a16:	b7 01       	movw	r22, r14
    1a18:	0e 94 86 02 	call	0x50c	; 0x50c <timerCalculateKbps>
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	91 87       	std	Z+9, r25	; 0x09
    1a20:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    1a22:	d8 01       	movw	r26, r16
    1a24:	1c 96       	adiw	r26, 0x0c	; 12
    1a26:	6d 92       	st	X+, r6
    1a28:	7d 92       	st	X+, r7
    1a2a:	8d 92       	st	X+, r8
    1a2c:	9c 92       	st	X, r9
    1a2e:	1f 97       	sbiw	r26, 0x0f	; 15
  ps->is_send = (cmd == PBPROTO_CMD_SEND) || (cmd == PBPROTO_CMD_SEND_BURST);
    1a30:	b1 e1       	ldi	r27, 0x11	; 17
    1a32:	ab 16       	cp	r10, r27
    1a34:	31 f0       	breq	.+12     	; 0x1a42 <pb_proto_handle+0x558>
    1a36:	e3 e3       	ldi	r30, 0x33	; 51
    1a38:	ae 16       	cp	r10, r30
    1a3a:	19 f0       	breq	.+6      	; 0x1a42 <pb_proto_handle+0x558>
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <pb_proto_handle+0x55c>
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	ef e6       	ldi	r30, 0x6F	; 111
    1a48:	f1 e0       	ldi	r31, 0x01	; 1
    1a4a:	81 93       	st	Z+, r24
  ps->stats_id = ps->is_send ? STATS_ID_PB_TX : STATS_ID_PB_RX;
    1a4c:	10 82       	st	Z, r1
    1a4e:	88 23       	and	r24, r24
    1a50:	11 f0       	breq	.+4      	; 0x1a56 <pb_proto_handle+0x56c>
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 83       	st	Z, r24
  ps->recv_delta = ps->is_send ? 0 : (uint16_t)(ps->ts - trigger_ts);
    1a56:	80 91 6f 01 	lds	r24, 0x016F
    1a5a:	88 23       	and	r24, r24
    1a5c:	19 f0       	breq	.+6      	; 0x1a64 <pb_proto_handle+0x57a>
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	0a c0       	rjmp	.+20     	; 0x1a78 <pb_proto_handle+0x58e>
    1a64:	20 91 79 01 	lds	r18, 0x0179
    1a68:	30 91 7a 01 	lds	r19, 0x017A
    1a6c:	80 91 47 01 	lds	r24, 0x0147
    1a70:	90 91 48 01 	lds	r25, 0x0148
    1a74:	28 1b       	sub	r18, r24
    1a76:	39 0b       	sbc	r19, r25
    1a78:	30 93 78 01 	sts	0x0178, r19
    1a7c:	20 93 77 01 	sts	0x0177, r18
    1a80:	8b 2d       	mov	r24, r11
  return result;
}
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	ff 90       	pop	r15
    1a90:	ef 90       	pop	r14
    1a92:	df 90       	pop	r13
    1a94:	cf 90       	pop	r12
    1a96:	bf 90       	pop	r11
    1a98:	af 90       	pop	r10
    1a9a:	9f 90       	pop	r9
    1a9c:	8f 90       	pop	r8
    1a9e:	7f 90       	pop	r7
    1aa0:	6f 90       	pop	r6
    1aa2:	5f 90       	pop	r5
    1aa4:	4f 90       	pop	r4
    1aa6:	3f 90       	pop	r3
    1aa8:	2f 90       	pop	r2
    1aaa:	08 95       	ret
      result = packetProcessFn(uwParDataSize);
    }
  }

  // fill in stats
  ps->cmd = cmd;
    1aac:	0d e6       	ldi	r16, 0x6D	; 109
    1aae:	11 e0       	ldi	r17, 0x01	; 1
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	a1 92       	st	Z+, r10
  ps->status = result;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	80 83       	st	Z, r24
  ps->size = uwParDataSize;
    1ab8:	d8 01       	movw	r26, r16
    1aba:	15 96       	adiw	r26, 0x05	; 5
    1abc:	dc 92       	st	X, r13
    1abe:	ce 92       	st	-X, r12
    1ac0:	14 97       	sbiw	r26, 0x04	; 4
  ps->delta = uwTimeDelta;
    1ac2:	17 96       	adiw	r26, 0x07	; 7
    1ac4:	fc 92       	st	X, r15
    1ac6:	ee 92       	st	-X, r14
    1ac8:	16 97       	sbiw	r26, 0x06	; 6
  ps->rate = timerCalculateKbps(uwParDataSize, uwTimeDelta);
    1aca:	c6 01       	movw	r24, r12
    1acc:	b7 01       	movw	r22, r14
    1ace:	0e 94 86 02 	call	0x50c	; 0x50c <timerCalculateKbps>
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	91 87       	std	Z+9, r25	; 0x09
    1ad6:	80 87       	std	Z+8, r24	; 0x08
  ps->ts = ts;
    1ad8:	d8 01       	movw	r26, r16
    1ada:	1c 96       	adiw	r26, 0x0c	; 12
    1adc:	6d 92       	st	X+, r6
    1ade:	7d 92       	st	X+, r7
    1ae0:	8d 92       	st	X+, r8
    1ae2:	9c 92       	st	X, r9
    1ae4:	1f 97       	sbiw	r26, 0x0f	; 15
    1ae6:	aa cf       	rjmp	.-172    	; 0x1a3c <pb_proto_handle+0x552>

00001ae8 <parRequestAmiRead>:

/**
 * Sends information to Amiga that data is ready.
 * Done as 1ms pulse on ACK line.
 */
void parRequestAmiRead(void) {
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
  PAR_STATUS_PORT &= ~NACK;
    1aec:	08 e2       	ldi	r16, 0x28	; 40
    1aee:	10 e0       	ldi	r17, 0x00	; 0
    1af0:	f8 01       	movw	r30, r16
    1af2:	80 81       	ld	r24, Z
    1af4:	8d 7f       	andi	r24, 0xFD	; 253
    1af6:	80 83       	st	Z, r24
  timerDelay100us(20);
    1af8:	84 e1       	ldi	r24, 0x14	; 20
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <timerDelay100us>
  PAR_STATUS_PORT |= NACK;
    1b00:	f8 01       	movw	r30, r16
    1b02:	80 81       	ld	r24, Z
    1b04:	82 60       	ori	r24, 0x02	; 2
    1b06:	80 83       	st	Z, r24
  trigger_ts = g_uwTimeStamp;
    1b08:	80 91 52 01 	lds	r24, 0x0152
    1b0c:	90 91 53 01 	lds	r25, 0x0153
    1b10:	a0 91 54 01 	lds	r26, 0x0154
    1b14:	b0 91 55 01 	lds	r27, 0x0155
    1b18:	80 93 47 01 	sts	0x0147, r24
    1b1c:	90 93 48 01 	sts	0x0148, r25
    1b20:	a0 93 49 01 	sts	0x0149, r26
    1b24:	b0 93 4a 01 	sts	0x014A, r27
}
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <pb_test_send_packet>:
	// NOTE: UART - time_stamp_spc() [PB_TEST] off\r\n
}

void pb_test_send_packet(uint8_t silent)
{
  silent_mode = silent;
    1b2e:	80 93 4d 01 	sts	0x014D, r24
  parRequestAmiRead();
    1b32:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <parRequestAmiRead>
}
    1b36:	08 95       	ret

00001b38 <pb_test_toggle_auto>:

void pb_test_toggle_auto(void)
{
  auto_mode = !auto_mode;
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	80 91 4c 01 	lds	r24, 0x014C
    1b3e:	88 23       	and	r24, r24
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <pb_test_toggle_auto+0xc>
    1b42:	91 e0       	ldi	r25, 0x01	; 1
    1b44:	90 93 4c 01 	sts	0x014C, r25
		// NOTE: UART - on
  } else {
		// NOTE: UART - off
  }

  if(auto_mode) {
    1b48:	99 23       	and	r25, r25
    1b4a:	29 f0       	breq	.+10     	; 0x1b56 <pb_test_toggle_auto+0x1e>
    // send first packet
    pb_test_send_packet(1);
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <pb_test_send_packet>
    // clear stats
    stats_reset();
    1b52:	0e 94 2b 10 	call	0x2056	; 0x2056 <stats_reset>
    1b56:	08 95       	ret

00001b58 <pb_test_loop>:
      pb_test_toggle_auto();
    }
  }
}

void pb_test_loop(void) {
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
	// NOTE: time_stamp_spc() [PB_TEST] on\r\n

  stats_reset();
    1b60:	0e 94 2b 10 	call	0x2056	; 0x2056 <stats_reset>

  // setup handlers for pb testing
  pb_proto_init(fill_pkt, proc_pkt);
    1b64:	84 e2       	ldi	r24, 0x24	; 36
    1b66:	9e e0       	ldi	r25, 0x0E	; 14
    1b68:	61 ef       	ldi	r22, 0xF1	; 241
    1b6a:	7d e0       	ldi	r23, 0x0D	; 13
    1b6c:	0e 94 27 0a 	call	0x144e	; 0x144e <pb_proto_init>
  auto_mode = 0;
    1b70:	10 92 4c 01 	sts	0x014C, r1
  toggle_request = 0;
    1b74:	10 92 4b 01 	sts	0x014B, r1
  silent_mode = 0;
    1b78:	10 92 4d 01 	sts	0x014D, r1
    if(!silent_mode) {
      dump_pb_cmd(&pb_proto_stat);
    }

    // next iteration?
    if(pb_proto_stat.is_send) {
    1b7c:	cf e6       	ldi	r28, 0x6F	; 111
    1b7e:	d1 e0       	ldi	r29, 0x01	; 1
  // ok!
  if(status == PBPROTO_STATUS_OK) {

    // always dump I/O
    if(!silent_mode) {
      dump_pb_cmd(&pb_proto_stat);
    1b80:	0d e6       	ldi	r16, 0x6D	; 109
    1b82:	11 e0       	ldi	r17, 0x01	; 1
    1b84:	21 c0       	rjmp	.+66     	; 0x1bc8 <pb_test_loop+0x70>

// ----- function table -----

static void pb_test_worker(void)
{
  uint8_t status = pb_util_handle();
    1b86:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <pb_util_handle>

  // ok!
  if(status == PBPROTO_STATUS_OK) {
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	a9 f4       	brne	.+42     	; 0x1bb8 <pb_test_loop+0x60>

    // always dump I/O
    if(!silent_mode) {
    1b8e:	80 91 4d 01 	lds	r24, 0x014D
    1b92:	88 23       	and	r24, r24
    1b94:	19 f4       	brne	.+6      	; 0x1b9c <pb_test_loop+0x44>
      dump_pb_cmd(&pb_proto_stat);
    1b96:	c8 01       	movw	r24, r16
    1b98:	0e 94 64 07 	call	0xec8	; 0xec8 <dump_pb_cmd>
    }

    // next iteration?
    if(pb_proto_stat.is_send) {
    1b9c:	88 81       	ld	r24, Y
    1b9e:	88 23       	and	r24, r24
    1ba0:	99 f0       	breq	.+38     	; 0x1bc8 <pb_test_loop+0x70>
      if(auto_mode) {
    1ba2:	80 91 4c 01 	lds	r24, 0x014C
    1ba6:	88 23       	and	r24, r24
    1ba8:	21 f0       	breq	.+8      	; 0x1bb2 <pb_test_loop+0x5a>
        // next iteration after
        pb_test_send_packet(1);
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <pb_test_send_packet>
    1bb0:	0b c0       	rjmp	.+22     	; 0x1bc8 <pb_test_loop+0x70>
      } else {
        silent_mode = 0;
    1bb2:	10 92 4d 01 	sts	0x014D, r1
    1bb6:	08 c0       	rjmp	.+16     	; 0x1bc8 <pb_test_loop+0x70>
      }
    }
  }
  // pb proto failed with an error
  else if(status != PBPROTO_STATUS_IDLE) {
    1bb8:	88 23       	and	r24, r24
    1bba:	31 f0       	breq	.+12     	; 0x1bc8 <pb_test_loop+0x70>
    // disable auto mode
    if(auto_mode) {
    1bbc:	80 91 4c 01 	lds	r24, 0x014C
    1bc0:	88 23       	and	r24, r24
    1bc2:	11 f0       	breq	.+4      	; 0x1bc8 <pb_test_loop+0x70>
      pb_test_toggle_auto();
    1bc4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pb_test_toggle_auto>
  auto_mode = 0;
  toggle_request = 0;
  silent_mode = 0;

  // test loop
  while(run_mode == RUN_MODE_PB_TEST) {
    1bc8:	80 91 41 01 	lds	r24, 0x0141
    1bcc:	82 30       	cpi	r24, 0x02	; 2
    1bce:	d9 f2       	breq	.-74     	; 0x1b86 <pb_test_loop+0x2e>
    // NOTE: UART cmd_worker handling was here, reset by loop break

    pb_test_worker();
  }

  stats_dump(1,0);
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <stats_dump>

	// NOTE: UART - time_stamp_spc() [PB_TEST] off\r\n
}
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	08 95       	ret

00001be2 <proc_pkt>:

  return PBPROTO_STATUS_OK;
}

static uint8_t proc_pkt(uint16_t uwSize)
{
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	c0 e0       	ldi	r28, 0x00	; 0
    1be8:	d0 e0       	ldi	r29, 0x00	; 0
    1bea:	20 91 61 01 	lds	r18, 0x0161
    1bee:	30 91 62 01 	lds	r19, 0x0162
    1bf2:	28 17       	cp	r18, r24
    1bf4:	39 07       	cpc	r19, r25
    1bf6:	11 f0       	breq	.+4      	; 0x1bfc <proc_pkt+0x1a>
    1bf8:	c1 e0       	ldi	r28, 0x01	; 1
    1bfa:	d0 e0       	ldi	r29, 0x00	; 0
    errors = 1;
    // NOTE: UART - ERR: uwSize\r\n
  }

  // +0: check dst mac
  if(!net_compare_mac(g_pDataBuffer, net_bcast_mac)) {
    1bfc:	8d e7       	ldi	r24, 0x7D	; 125
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	71 e0       	ldi	r23, 0x01	; 1
    1c04:	0e 94 c3 08 	call	0x1186	; 0x1186 <net_compare_mac>
    1c08:	88 23       	and	r24, r24
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <proc_pkt+0x2c>
    errors++;
    1c0c:	21 96       	adiw	r28, 0x01	; 1
    // NOTE: UART - ERR: dst mac\r\n
  }
  // +6: check src mac
  if(!net_compare_mac(g_pDataBuffer+6, g_sConfig.mac_addr)) {
    1c0e:	83 e8       	ldi	r24, 0x83	; 131
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	69 e5       	ldi	r22, 0x59	; 89
    1c14:	71 e0       	ldi	r23, 0x01	; 1
    1c16:	0e 94 c3 08 	call	0x1186	; 0x1186 <net_compare_mac>
    1c1a:	88 23       	and	r24, r24
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <proc_pkt+0x3e>
    errors++;
    1c1e:	21 96       	adiw	r28, 0x01	; 1
    // NOTE: UART - ERR: src mac\r\n
  }
  // +12,+13: pkt type
  uint8_t ptype_hi = (uint8_t)(g_sConfig.test_ptype >> 8);
    1c20:	e3 e6       	ldi	r30, 0x63	; 99
    1c22:	f1 e0       	ldi	r31, 0x01	; 1
    1c24:	20 81       	ld	r18, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
  uint8_t ptype_lo = (uint8_t)(g_sConfig.test_ptype & 0xff);
  if((g_pDataBuffer[12] != ptype_hi) || (g_pDataBuffer[13] != ptype_lo)) {
    1c28:	80 91 89 01 	lds	r24, 0x0189
    1c2c:	89 17       	cp	r24, r25
    1c2e:	19 f4       	brne	.+6      	; 0x1c36 <proc_pkt+0x54>
    1c30:	80 91 8a 01 	lds	r24, 0x018A
    1c34:	82 13       	cpse	r24, r18
    errors++;
    1c36:	21 96       	adiw	r28, 0x01	; 1
    uart_send_spc();
  }
  uart_send_crlf();
#endif

  if(errors > 0) {
    1c38:	cd 2b       	or	r28, r29
    1c3a:	11 f4       	brne	.+4      	; 0x1c40 <proc_pkt+0x5e>
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <proc_pkt+0x60>
    1c40:	86 e0       	ldi	r24, 0x06	; 6
		// NOTE: UART - TOTAL ERRORS hex_word(errors)\r\n
    return PBPROTO_STATUS_ERROR;
  } else {
    return PBPROTO_STATUS_OK;
  }
}
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	08 95       	ret

00001c48 <fill_pkt>:
static uint8_t silent_mode;

// ----- Packet Callbacks -----

static uint8_t fill_pkt(uint16_t *pFilledSize)
{
    1c48:	ef 92       	push	r14
    1c4a:	ff 92       	push	r15
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	ec 01       	movw	r28, r24
  *pFilledSize = g_sConfig.test_plen;
    1c56:	80 91 61 01 	lds	r24, 0x0161
    1c5a:	90 91 62 01 	lds	r25, 0x0162
    1c5e:	99 83       	std	Y+1, r25	; 0x01
    1c60:	88 83       	st	Y, r24
  if(*pFilledSize > DATABUF_SIZE) {
    1c62:	8b 5e       	subi	r24, 0xEB	; 235
    1c64:	95 40       	sbci	r25, 0x05	; 5
    1c66:	10 f0       	brcs	.+4      	; 0x1c6c <fill_pkt+0x24>
    1c68:	85 e0       	ldi	r24, 0x05	; 5
    1c6a:	27 c0       	rjmp	.+78     	; 0x1cba <fill_pkt+0x72>
    return PBPROTO_STATUS_PACKET_TOO_LARGE;
  }

  net_copy_mac(net_bcast_mac, g_pDataBuffer);
    1c6c:	0f 2e       	mov	r0, r31
    1c6e:	fd e7       	ldi	r31, 0x7D	; 125
    1c70:	ef 2e       	mov	r14, r31
    1c72:	f1 e0       	ldi	r31, 0x01	; 1
    1c74:	ff 2e       	mov	r15, r31
    1c76:	f0 2d       	mov	r31, r0
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	b7 01       	movw	r22, r14
    1c7e:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>
  net_copy_mac(g_sConfig.mac_addr, g_pDataBuffer+6);
    1c82:	09 e5       	ldi	r16, 0x59	; 89
    1c84:	11 e0       	ldi	r17, 0x01	; 1
    1c86:	b7 01       	movw	r22, r14
    1c88:	6a 5f       	subi	r22, 0xFA	; 250
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	c8 01       	movw	r24, r16
    1c8e:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>

  uint8_t ptype_hi = (uint8_t)(g_sConfig.test_ptype >> 8);
    1c92:	06 5f       	subi	r16, 0xF6	; 246
    1c94:	1f 4f       	sbci	r17, 0xFF	; 255
    1c96:	f8 01       	movw	r30, r16
    1c98:	90 81       	ld	r25, Z
    1c9a:	81 81       	ldd	r24, Z+1	; 0x01
  uint8_t ptype_lo = (uint8_t)(g_sConfig.test_ptype & 0xff);
  g_pDataBuffer[12] = ptype_hi;
    1c9c:	f7 01       	movw	r30, r14
    1c9e:	84 87       	std	Z+12, r24	; 0x0c
  g_pDataBuffer[13] = ptype_lo;
    1ca0:	95 87       	std	Z+13, r25	; 0x0d

  uint8_t *ptr = g_pDataBuffer + 14;
  uint16_t num = *pFilledSize - 14;
    1ca2:	88 81       	ld	r24, Y
    1ca4:	99 81       	ldd	r25, Y+1	; 0x01
    1ca6:	0e 97       	sbiw	r24, 0x0e	; 14
  uint8_t val = 0;
  while(num > 0) {
    1ca8:	39 f0       	breq	.+14     	; 0x1cb8 <fill_pkt+0x70>
    1caa:	eb e8       	ldi	r30, 0x8B	; 139
    1cac:	f1 e0       	ldi	r31, 0x01	; 1
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    *ptr = val;
    1cb0:	21 93       	st	Z+, r18
    ptr++;
    val++;
    1cb2:	2f 5f       	subi	r18, 0xFF	; 255
    num--;
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
  g_pDataBuffer[13] = ptype_lo;

  uint8_t *ptr = g_pDataBuffer + 14;
  uint16_t num = *pFilledSize - 14;
  uint8_t val = 0;
  while(num > 0) {
    1cb6:	e1 f7       	brne	.-8      	; 0x1cb0 <fill_pkt+0x68>
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    val++;
    num--;
  }

  return PBPROTO_STATUS_OK;
}
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	08 95       	ret

00001cc8 <pb_util_handle>:
#include "stats.h"
#include "dump.h"
#include "main.h"

uint8_t pb_util_handle(void)
{
    1cc8:	0f 93       	push	r16
  const pb_proto_stat_t *ps = &pb_proto_stat;

  // call protocol handler (low level transmit)
  uint8_t status = pb_proto_handle();
    1cca:	0e 94 75 0a 	call	0x14ea	; 0x14ea <pb_proto_handle>
    1cce:	08 2f       	mov	r16, r24
  if(status == PBPROTO_STATUS_IDLE) {
    1cd0:	88 23       	and	r24, r24
    1cd2:	29 f1       	breq	.+74     	; 0x1d1e <pb_util_handle+0x56>
		// Nothing done... return
    return PBPROTO_STATUS_IDLE;
	}

  if(status == PBPROTO_STATUS_OK) {
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	91 f4       	brne	.+36     	; 0x1cfc <pb_util_handle+0x34>
		// Everything went OK
    // Update stats
    stats_update_ok(ps->stats_id, ps->size, ps->rate);
    1cd8:	e0 e7       	ldi	r30, 0x70	; 112
    1cda:	f1 e0       	ldi	r31, 0x01	; 1
    1cdc:	61 81       	ldd	r22, Z+1	; 0x01
    1cde:	72 81       	ldd	r23, Z+2	; 0x02
    1ce0:	45 81       	ldd	r20, Z+5	; 0x05
    1ce2:	56 81       	ldd	r21, Z+6	; 0x06
    1ce4:	80 81       	ld	r24, Z
    1ce6:	0e 94 40 10 	call	0x2080	; 0x2080 <stats_update_ok>
    if(global_verbose)
    1cea:	80 91 42 01 	lds	r24, 0x0142
    1cee:	88 23       	and	r24, r24
    1cf0:	b1 f0       	breq	.+44     	; 0x1d1e <pb_util_handle+0x56>
      dump_pb_cmd(ps); // In interactive (verbose) mode show result
    1cf2:	8d e6       	ldi	r24, 0x6D	; 109
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	0e 94 64 07 	call	0xec8	; 0xec8 <dump_pb_cmd>
    1cfa:	11 c0       	rjmp	.+34     	; 0x1d1e <pb_util_handle+0x56>
  }
  else {
		// PB proto failed with an error
    // Dump error
    dump_pb_cmd(ps);
    1cfc:	8d e6       	ldi	r24, 0x6D	; 109
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	0e 94 64 07 	call	0xec8	; 0xec8 <dump_pb_cmd>
    1d04:	e0 91 70 01 	lds	r30, 0x0170
    1d08:	8c e0       	ldi	r24, 0x0C	; 12
    1d0a:	e8 9f       	mul	r30, r24
    1d0c:	f0 01       	movw	r30, r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	e9 59       	subi	r30, 0x99	; 153
    1d12:	f8 4f       	sbci	r31, 0xF8	; 248
    // Update stats
    stats_get(ps->stats_id)->err++;
    1d14:	86 81       	ldd	r24, Z+6	; 0x06
    1d16:	97 81       	ldd	r25, Z+7	; 0x07
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	97 83       	std	Z+7, r25	; 0x07
    1d1c:	86 83       	std	Z+6, r24	; 0x06
  }
  return status;
}
    1d1e:	80 2f       	mov	r24, r16
    1d20:	0f 91       	pop	r16
    1d22:	08 95       	ret

00001d24 <pio_test_loop>:
/**
 * Packet IO test mode loop.
 * Used to benchmark Amiga-PlipBox comm.
 */
void pio_test_loop(void)
{
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <pio_test_loop+0xe>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62

  // NOTE: UART - time_stamp_spc() [PIO_TEST] on\r\n

  enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
    1d36:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <pio_util_get_init_flags>
    1d3a:	68 2f       	mov	r22, r24
    1d3c:	89 e5       	ldi	r24, 0x59	; 89
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	0e 94 09 10 	call	0x2012	; 0x2012 <enc28j60_init>
  stats_reset();
    1d44:	0e 94 2b 10 	call	0x2056	; 0x2056 <stats_reset>
    // NOTE: UART cmd_worker() processing here, reset by loop break

    // incoming packet?
    if(enc28j60_has_recv()) {
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
    1d48:	7e 01       	movw	r14, r28
    1d4a:	08 94       	sec
    1d4c:	e1 1c       	adc	r14, r1
    1d4e:	f1 1c       	adc	r15, r1
            // directly send back test packet
            pio_util_send_packet(size);
          }
        }
      } else {
        stats_get(STATS_ID_PIO_RX)->err++;
    1d50:	05 e8       	ldi	r16, 0x85	; 133
    1d52:	17 e0       	ldi	r17, 0x07	; 7
    1d54:	20 c0       	rjmp	.+64     	; 0x1d96 <pio_test_loop+0x72>
  while(run_mode == RUN_MODE_PIO_TEST) {
    // handle commands
    // NOTE: UART cmd_worker() processing here, reset by loop break

    // incoming packet?
    if(enc28j60_has_recv()) {
    1d56:	0e 94 14 10 	call	0x2028	; 0x2028 <enc28j60_has_recv>
    1d5a:	88 23       	and	r24, r24
    1d5c:	e1 f0       	breq	.+56     	; 0x1d96 <pio_test_loop+0x72>
      uint16_t size;
      if(pio_util_recv_packet(&size) == PIO_OK) {
    1d5e:	c7 01       	movw	r24, r14
    1d60:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <pio_util_recv_packet>
    1d64:	88 23       	and	r24, r24
    1d66:	89 f4       	brne	.+34     	; 0x1d8a <pio_test_loop+0x66>
        // handle ARP?
        if(!pio_util_handle_arp(size)) {
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <pio_util_handle_arp>
    1d70:	88 23       	and	r24, r24
    1d72:	89 f4       	brne	.+34     	; 0x1d96 <pio_test_loop+0x72>
          // is it a UDP test packet?
          if(pio_util_handle_udp_test(size)) {
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <pio_util_handle_udp_test>
    1d7c:	88 23       	and	r24, r24
    1d7e:	59 f0       	breq	.+22     	; 0x1d96 <pio_test_loop+0x72>
            // directly send back test packet
            pio_util_send_packet(size);
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <pio_util_send_packet>
    1d88:	06 c0       	rjmp	.+12     	; 0x1d96 <pio_test_loop+0x72>
          }
        }
      } else {
        stats_get(STATS_ID_PIO_RX)->err++;
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	80 81       	ld	r24, Z
    1d8e:	91 81       	ldd	r25, Z+1	; 0x01
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	80 83       	st	Z, r24
  // NOTE: UART - time_stamp_spc() [PIO_TEST] on\r\n

  enc28j60_init(g_sConfig.mac_addr, pio_util_get_init_flags());
  stats_reset();

  while(run_mode == RUN_MODE_PIO_TEST) {
    1d96:	80 91 41 01 	lds	r24, 0x0141
    1d9a:	83 30       	cpi	r24, 0x03	; 3
    1d9c:	e1 f2       	breq	.-72     	; 0x1d56 <pio_test_loop+0x32>
        stats_get(STATS_ID_PIO_RX)->err++;
      }
    }
  }

  stats_dump(0,1);
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <stats_dump>
  enc28j60_exit();
    1da6:	0e 94 0b 10 	call	0x2016	; 0x2016 <enc28j60_exit>

	// NOTE: UART - time_stamp_spc() [PIO_TEST] off\r\n
}
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	ff 90       	pop	r15
    1db8:	ef 90       	pop	r14
    1dba:	08 95       	ret

00001dbc <pio_util_get_init_flags>:

uint8_t pio_util_get_init_flags()
{
  uint8_t flags = PIO_INIT_BROAD_CAST;

  if(g_sConfig.flow_ctl) {
    1dbc:	80 91 5f 01 	lds	r24, 0x015F
    1dc0:	88 23       	and	r24, r24
    1dc2:	11 f0       	breq	.+4      	; 0x1dc8 <pio_util_get_init_flags+0xc>
    1dc4:	9c e0       	ldi	r25, 0x0C	; 12
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <pio_util_get_init_flags+0xe>
    1dc8:	94 e0       	ldi	r25, 0x04	; 4
    flags |= PIO_INIT_FLOW_CONTROL;
  }
  if(g_sConfig.full_duplex) {
    1dca:	80 91 60 01 	lds	r24, 0x0160
    1dce:	81 11       	cpse	r24, r1
    flags |= PIO_INIT_FULL_DUPLEX;
    1dd0:	91 60       	ori	r25, 0x01	; 1
  }

  return flags;
}
    1dd2:	89 2f       	mov	r24, r25
    1dd4:	08 95       	ret

00001dd6 <pio_util_handle_udp_test>:

  return 1;
}

uint8_t pio_util_handle_udp_test(uint16_t size)
{
    1dd6:	8f 92       	push	r8
    1dd8:	9f 92       	push	r9
    1dda:	af 92       	push	r10
    1ddc:	bf 92       	push	r11
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
  uint8_t *ip_buf = g_pDataBuffer + ETH_HDR_SIZE;
  uint8_t *udp_buf = ip_buf + ip_get_hdr_length(ip_buf);
    1dee:	0b e8       	ldi	r16, 0x8B	; 139
    1df0:	11 e0       	ldi	r17, 0x01	; 1
    1df2:	f8 01       	movw	r30, r16
    1df4:	80 81       	ld	r24, Z
    1df6:	88 0f       	add	r24, r24
    1df8:	88 0f       	add	r24, r24
    1dfa:	8c 73       	andi	r24, 0x3C	; 60
    1dfc:	58 01       	movw	r10, r16
    1dfe:	a8 0e       	add	r10, r24
    1e00:	b1 1c       	adc	r11, r1
    1e02:	c5 01       	movw	r24, r10
    1e04:	02 96       	adiw	r24, 0x02	; 2
    1e06:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
    1e0a:	ec 01       	movw	r28, r24
  const uint8_t *dst_ip = ip_get_tgt_ip(ip_buf);
  uint16_t dst_port = udp_get_tgt_port(udp_buf);
  const uint8_t *data_ptr = udp_get_data_ptr(udp_buf);

  // for us?
  if(net_compare_ip(g_sConfig.test_ip, dst_ip) && (dst_port == g_sConfig.test_port)) {
    1e0c:	00 5f       	subi	r16, 0xF0	; 240
    1e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e10:	85 e6       	ldi	r24, 0x65	; 101
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	b8 01       	movw	r22, r16
    1e16:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <net_compare_ip>
    1e1a:	88 23       	and	r24, r24
    1e1c:	d9 f1       	breq	.+118    	; 0x1e94 <pio_util_handle_udp_test+0xbe>
    1e1e:	80 90 69 01 	lds	r8, 0x0169
    1e22:	90 90 6a 01 	lds	r9, 0x016A
    1e26:	8c 16       	cp	r8, r28
    1e28:	9d 06       	cpc	r9, r29
    1e2a:	a1 f5       	brne	.+104    	; 0x1e94 <pio_util_handle_udp_test+0xbe>
    }

    // send UDP packet back again
    // flip IP/UDP
    const uint8_t *src_ip = ip_get_src_ip(ip_buf);
    net_copy_ip(src_ip, ip_buf + 16); // set tgt ip
    1e2c:	07 e9       	ldi	r16, 0x97	; 151
    1e2e:	11 e0       	ldi	r17, 0x01	; 1
    1e30:	b8 01       	movw	r22, r16
    1e32:	6c 5f       	subi	r22, 0xFC	; 252
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	c8 01       	movw	r24, r16
    1e38:	0e 94 66 08 	call	0x10cc	; 0x10cc <net_copy_ip>
    net_copy_ip(g_sConfig.test_ip, ip_buf + 12); // set src ip
    1e3c:	0f 2e       	mov	r0, r31
    1e3e:	f5 e6       	ldi	r31, 0x65	; 101
    1e40:	cf 2e       	mov	r12, r31
    1e42:	f1 e0       	ldi	r31, 0x01	; 1
    1e44:	df 2e       	mov	r13, r31
    1e46:	f0 2d       	mov	r31, r0
    1e48:	c6 01       	movw	r24, r12
    1e4a:	b8 01       	movw	r22, r16
    1e4c:	0e 94 66 08 	call	0x10cc	; 0x10cc <net_copy_ip>
#define UDP_LENGTH_OFF    4
#define UDP_CHECKSUM_OFF  6
#define UDP_DATA_OFF      8

inline const uint8_t *udp_get_data_ptr(const uint8_t *udp_buf) { return udp_buf + UDP_DATA_OFF; }
inline uint16_t  udp_get_src_port(const uint8_t *udp_buf) { return net_get_word(udp_buf + UDP_SRC_PORT_OFF); }
    1e50:	c5 01       	movw	r24, r10
    1e52:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
    1e56:	7c 01       	movw	r14, r24
    uint16_t src_port = udp_get_src_port(udp_buf);
    net_put_word(udp_buf + UDP_SRC_PORT_OFF, dst_port);
    1e58:	c5 01       	movw	r24, r10
    1e5a:	b4 01       	movw	r22, r8
    1e5c:	0e 94 81 08 	call	0x1102	; 0x1102 <net_put_word>
    net_put_word(udp_buf + UDP_TGT_PORT_OFF, src_port);
    1e60:	c5 01       	movw	r24, r10
    1e62:	02 96       	adiw	r24, 0x02	; 2
    1e64:	b7 01       	movw	r22, r14
    1e66:	0e 94 81 08 	call	0x1102	; 0x1102 <net_put_word>

    // flip eth
    net_copy_mac(g_pDataBuffer + ETH_OFF_SRC_MAC, g_pDataBuffer + ETH_OFF_TGT_MAC);
    1e6a:	0f 2e       	mov	r0, r31
    1e6c:	fc ee       	ldi	r31, 0xEC	; 236
    1e6e:	ef 2e       	mov	r14, r31
    1e70:	ff ef       	ldi	r31, 0xFF	; 255
    1e72:	ff 2e       	mov	r15, r31
    1e74:	f0 2d       	mov	r31, r0
    1e76:	e0 0e       	add	r14, r16
    1e78:	f1 1e       	adc	r15, r17
    1e7a:	0a 51       	subi	r16, 0x1A	; 26
    1e7c:	10 40       	sbci	r17, 0x00	; 0
    1e7e:	c7 01       	movw	r24, r14
    1e80:	b8 01       	movw	r22, r16
    1e82:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>
    net_copy_mac(g_sConfig.mac_addr, g_pDataBuffer + ETH_OFF_SRC_MAC);
    1e86:	c6 01       	movw	r24, r12
    1e88:	0c 97       	sbiw	r24, 0x0c	; 12
    1e8a:	b7 01       	movw	r22, r14
    1e8c:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	01 c0       	rjmp	.+2      	; 0x1e96 <pio_util_handle_udp_test+0xc0>

    return 1;
    1e94:	80 e0       	ldi	r24, 0x00	; 0
 } else {
 	return 0;
 }
}
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	bf 90       	pop	r11
    1ea8:	af 90       	pop	r10
    1eaa:	9f 90       	pop	r9
    1eac:	8f 90       	pop	r8
    1eae:	08 95       	ret

00001eb0 <pio_util_send_packet>:
  }
  return ubRecvResult;
}

uint8_t pio_util_send_packet(uint16_t size)
{
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	ec 01       	movw	r28, r24
extern void timerDelay100us(uint16_t uwCount);

// ----- hardware timer -----

// 16 bit hw timer with 4us resolution
inline void timerReset(void) { TCNT1 = 0; }
    1ebc:	04 e8       	ldi	r16, 0x84	; 132
    1ebe:	10 e0       	ldi	r17, 0x00	; 0
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	11 82       	std	Z+1, r1	; 0x01
    1ec4:	10 82       	st	Z, r1
  timerReset();
  uint8_t result = enc28j60_send(g_pDataBuffer, size);
    1ec6:	8d e7       	ldi	r24, 0x7D	; 125
    1ec8:	91 e0       	ldi	r25, 0x01	; 1
    1eca:	be 01       	movw	r22, r28
    1ecc:	0e 94 10 10 	call	0x2020	; 0x2020 <enc28j60_send>
    1ed0:	f8 2e       	mov	r15, r24
inline uint16_t  timerGetState(void) { return TCNT1; }
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
  // NOTE(KaiN#7): Is it really that short?
  uint16_t delta = timerGetState();

  uint16_t rate = timerCalculateKbps(size, delta);
    1ed8:	ce 01       	movw	r24, r28
    1eda:	0e 94 86 02 	call	0x50c	; 0x50c <timerCalculateKbps>
    1ede:	ac 01       	movw	r20, r24
  if(result == PIO_OK) {
    1ee0:	ff 20       	and	r15, r15
    1ee2:	29 f4       	brne	.+10     	; 0x1eee <pio_util_send_packet+0x3e>
    stats_update_ok(STATS_ID_PIO_TX, size, rate);
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	be 01       	movw	r22, r28
    1ee8:	0e 94 40 10 	call	0x2080	; 0x2080 <stats_update_ok>
    1eec:	07 c0       	rjmp	.+14     	; 0x1efc <pio_util_send_packet+0x4c>
  }
  else {
    stats_get(STATS_ID_PIO_TX)->err++;
    1eee:	e1 e9       	ldi	r30, 0x91	; 145
    1ef0:	f7 e0       	ldi	r31, 0x07	; 7
    1ef2:	80 81       	ld	r24, Z
    1ef4:	91 81       	ldd	r25, Z+1	; 0x01
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
    } else {
			// NOTE: UART - ERROR=hex_byte(result)\r\n
    }
  }
  return result;
}
    1efc:	8f 2d       	mov	r24, r15
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	08 95       	ret

00001f0a <pio_util_handle_arp>:
/**
 * Handles ARP request.
 * @param uwPacketSize Received ethernet frame size.
 */
uint8_t pio_util_handle_arp(uint16_t uwPacketSize)
{
    1f0a:	ef 92       	push	r14
    1f0c:	ff 92       	push	r15
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	ec 01       	movw	r28, r24
    1f18:	89 e8       	ldi	r24, 0x89	; 137
    1f1a:	91 e0       	ldi	r25, 0x01	; 1
    1f1c:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
	// Sanity check
  uint16_t uwEtherType = eth_get_pkt_type(g_pDataBuffer);
  if(uwEtherType != ETH_TYPE_ARP) {
    1f20:	86 50       	subi	r24, 0x06	; 6
    1f22:	98 40       	sbci	r25, 0x08	; 8
    1f24:	d9 f5       	brne	.+118    	; 0x1f9c <pio_util_handle_arp+0x92>
    return 0;
  }
  if(uwPacketSize <= ETH_HDR_SIZE) {
    1f26:	cf 30       	cpi	r28, 0x0F	; 15
    1f28:	d1 05       	cpc	r29, r1
    1f2a:	c0 f1       	brcs	.+112    	; 0x1f9c <pio_util_handle_arp+0x92>
  // Payload buffer pointer & size
  uint8_t *pPayloadBuffer = g_pDataBuffer + ETH_HDR_SIZE;
  uint16_t uwPayloadSize = uwPacketSize - ETH_HDR_SIZE;

  // Is it an ARP request?
  if(
    1f2c:	be 01       	movw	r22, r28
    1f2e:	6e 50       	subi	r22, 0x0E	; 14
    1f30:	70 40       	sbci	r23, 0x00	; 0
    1f32:	8b e8       	ldi	r24, 0x8B	; 139
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	0e 94 2e 08 	call	0x105c	; 0x105c <arp_is_ipv4>
    1f3a:	88 23       	and	r24, r24
    1f3c:	89 f1       	breq	.+98     	; 0x1fa0 <pio_util_handle_arp+0x96>
    1f3e:	81 e9       	ldi	r24, 0x91	; 145
    1f40:	91 e0       	ldi	r25, 0x01	; 1
    1f42:	0e 94 77 08 	call	0x10ee	; 0x10ee <net_get_word>
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	59 f5       	brne	.+86     	; 0x1fa0 <pio_util_handle_arp+0x96>
    // Is plipbox being searched?
    const uint8_t *pTargetIp = arp_get_tgt_ip(pPayloadBuffer);
    if(global_verbose) {
			// NOTE: UART - time_stamp_spc() ARP REQ: IP=pTargetIp\r\n
    }
    if(net_compare_ip(pTargetIp, g_sConfig.test_ip)) {
    1f4a:	83 ea       	ldi	r24, 0xA3	; 163
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	65 e6       	ldi	r22, 0x65	; 101
    1f50:	71 e0       	ldi	r23, 0x01	; 1
    1f52:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <net_compare_ip>
    1f56:	88 23       	and	r24, r24
    1f58:	19 f1       	breq	.+70     	; 0x1fa0 <pio_util_handle_arp+0x96>
      arp_make_reply(pPayloadBuffer, g_sConfig.mac_addr, g_sConfig.test_ip);
    1f5a:	0b e8       	ldi	r16, 0x8B	; 139
    1f5c:	11 e0       	ldi	r17, 0x01	; 1
    1f5e:	0f 2e       	mov	r0, r31
    1f60:	f9 e5       	ldi	r31, 0x59	; 89
    1f62:	ef 2e       	mov	r14, r31
    1f64:	f1 e0       	ldi	r31, 0x01	; 1
    1f66:	ff 2e       	mov	r15, r31
    1f68:	f0 2d       	mov	r31, r0
    1f6a:	a7 01       	movw	r20, r14
    1f6c:	44 5f       	subi	r20, 0xF4	; 244
    1f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f70:	c8 01       	movw	r24, r16
    1f72:	b7 01       	movw	r22, r14
    1f74:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <arp_make_reply>
	net_put_word(pkt + ETH_OFF_TYPE, type);
}

inline void eth_make_bcast(uint8_t *pkt, const uint8_t *my_mac)
{
	net_copy_mac(net_bcast_mac, pkt + ETH_OFF_TGT_MAC);
    1f78:	0e 50       	subi	r16, 0x0E	; 14
    1f7a:	10 40       	sbci	r17, 0x00	; 0
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	b8 01       	movw	r22, r16
    1f82:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>
	net_copy_mac(my_mac, pkt + ETH_OFF_SRC_MAC);
    1f86:	0a 5f       	subi	r16, 0xFA	; 250
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	c7 01       	movw	r24, r14
    1f8c:	b8 01       	movw	r22, r16
    1f8e:	0e 94 57 08 	call	0x10ae	; 0x10ae <net_copy_mac>
      eth_make_bcast(g_pDataBuffer, g_sConfig.mac_addr);
      pio_util_send_packet(uwPacketSize);
    1f92:	ce 01       	movw	r24, r28
    1f94:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <pio_util_send_packet>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <pio_util_handle_arp+0x98>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <pio_util_handle_arp+0x98>
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
  }

  return 1;
}
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	ff 90       	pop	r15
    1fac:	ef 90       	pop	r14
    1fae:	08 95       	ret

00001fb0 <pio_util_recv_packet>:
/**
 * Receives data from ENC28j60, calculates stats & does logging.
 * @param pDataSize Pointer to addr to be filled with read data size.
 */
uint8_t pio_util_recv_packet(uint16_t *pDataSize)
{
    1fb0:	ff 92       	push	r15
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	ec 01       	movw	r28, r24
extern void timerDelay100us(uint16_t uwCount);

// ----- hardware timer -----

// 16 bit hw timer with 4us resolution
inline void timerReset(void) { TCNT1 = 0; }
    1fbc:	04 e8       	ldi	r16, 0x84	; 132
    1fbe:	10 e0       	ldi	r17, 0x00	; 0
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	11 82       	std	Z+1, r1	; 0x01
    1fc4:	10 82       	st	Z, r1
  // Fetch packet from ENC28j60, measure elapsed time
  timerReset();
  uint8_t ubRecvResult = enc28j60_recv(g_pDataBuffer, DATABUF_SIZE, pDataSize);
    1fc6:	8d e7       	ldi	r24, 0x7D	; 125
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	6a ee       	ldi	r22, 0xEA	; 234
    1fcc:	75 e0       	ldi	r23, 0x05	; 5
    1fce:	ae 01       	movw	r20, r28
    1fd0:	0e 94 12 10 	call	0x2024	; 0x2024 <enc28j60_recv>
    1fd4:	f8 2e       	mov	r15, r24
inline uint16_t  timerGetState(void) { return TCNT1; }
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	60 81       	ld	r22, Z
    1fda:	71 81       	ldd	r23, Z+1	; 0x01
  uint16_t uwTimeDelta = timerGetState();
  uint16_t uwDataRate = timerCalculateKbps(*pDataSize, uwTimeDelta);
    1fdc:	88 81       	ld	r24, Y
    1fde:	99 81       	ldd	r25, Y+1	; 0x01
    1fe0:	0e 94 86 02 	call	0x50c	; 0x50c <timerCalculateKbps>
    1fe4:	ac 01       	movw	r20, r24

  if(ubRecvResult == PIO_OK) {
    1fe6:	ff 20       	and	r15, r15
    1fe8:	31 f4       	brne	.+12     	; 0x1ff6 <pio_util_recv_packet+0x46>
		// Update stats - write new data size & rate
    stats_update_ok(STATS_ID_PIO_RX, *pDataSize, uwDataRate);
    1fea:	68 81       	ld	r22, Y
    1fec:	79 81       	ldd	r23, Y+1	; 0x01
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	0e 94 40 10 	call	0x2080	; 0x2080 <stats_update_ok>
    1ff4:	07 c0       	rjmp	.+14     	; 0x2004 <pio_util_recv_packet+0x54>
  }
  else {
		// Update stats - increase error count
    stats_get(STATS_ID_PIO_RX)->err++;
    1ff6:	e5 e8       	ldi	r30, 0x85	; 133
    1ff8:	f7 e0       	ldi	r31, 0x07	; 7
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	80 83       	st	Z, r24
    else {
			// NOTE: UART - ERROR=hex_byte(ubRecvResult)\r\n
    }
  }
  return ubRecvResult;
}
    2004:	8f 2d       	mov	r24, r15
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	ff 90       	pop	r15
    2010:	08 95       	ret

00002012 <enc28j60_init>:
	if(result == PIO_OK) {
		// NOTE: UART - rev=hex_byte(rev)
	}

  return PIO_OK;
}
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	08 95       	ret

00002016 <enc28j60_exit>:
	#endif
	// Moved note from pio_exit
	// NOTE: UART - time_stamp_spc() pio: exit\r\n
  SetBank(ECON1);
  writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_RXEN);
}
    2016:	08 95       	ret

00002018 <enc28j60_control>:
			return PIO_OK;
		}
    default:
      return PIO_NOT_FOUND;
  }
}
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	08 95       	ret

0000201c <enc28j60_status>:
      return PIO_OK;
    default:
      *value = 0;
      return PIO_NOT_FOUND;
  }
}
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	08 95       	ret

00002020 <enc28j60_send>:

  // initiate send
  writeReg(ETXND, TXSTART_INIT+size);
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
  return PIO_OK;
}
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	08 95       	ret

00002024 <enc28j60_recv>:
  // read packet
  readBuf(len, data);

  next_pkt();
  return result;
}
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	08 95       	ret

00002028 <enc28j60_has_recv>:
{
	#ifdef NOENC
	return 0;
	#endif
  return readRegByte(EPKTCNT);
}
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	08 95       	ret

0000202c <spi_init>:
#include "spi.h"

void spi_init(void)
{
	// output: CS, MOSI, SCK, input: MISO, card detect, write protect
	SPI_DDR |= SPI_SCK | SPI_MOSI | SD_CS | ETH_CS;
    202c:	e4 e2       	ldi	r30, 0x24	; 36
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8e 62       	ori	r24, 0x2E	; 46
    2034:	80 83       	st	Z, r24
	SPI_DDR &= ~(SPI_MISO | SD_DETECT | SD_LOCK);
    2036:	80 81       	ld	r24, Z
    2038:	8e 76       	andi	r24, 0x6E	; 110
    203a:	80 83       	st	Z, r24

	// MOSI, SCK = 0, Eth CS = 1
	SPI_PORT &= ~(SPI_MOSI | SPI_SCK);
    203c:	e5 e2       	ldi	r30, 0x25	; 37
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	87 7d       	andi	r24, 0xD7	; 215
    2044:	80 83       	st	Z, r24
	SPI_PORT |= ETH_CS;
    2046:	80 81       	ld	r24, Z
    2048:	84 60       	ori	r24, 0x04	; 4
    204a:	80 83       	st	Z, r24

  SPCR = _BV(SPE) | _BV(MSTR); // 8 MHz @ 16
    204c:	80 e5       	ldi	r24, 0x50	; 80
    204e:	8c bd       	out	0x2c, r24	; 44
	SPSR = _BV(SPI2X);
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	8d bd       	out	0x2d, r24	; 45
}
    2054:	08 95       	ret

00002056 <stats_reset>:
#include "base/uart.h"

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
    2056:	e7 e6       	ldi	r30, 0x67	; 103
    2058:	f7 e0       	ldi	r31, 0x07	; 7
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    205a:	27 e9       	ldi	r18, 0x97	; 151
    205c:	37 e0       	ldi	r19, 0x07	; 7
    stats_t *s = &stats[i];
    s->bytes = 0;
    205e:	10 82       	st	Z, r1
    2060:	11 82       	std	Z+1, r1	; 0x01
    2062:	12 82       	std	Z+2, r1	; 0x02
    2064:	13 82       	std	Z+3, r1	; 0x03
    s->cnt = 0;
    2066:	15 82       	std	Z+5, r1	; 0x05
    2068:	14 82       	std	Z+4, r1	; 0x04
    s->err = 0;
    206a:	17 82       	std	Z+7, r1	; 0x07
    206c:	16 82       	std	Z+6, r1	; 0x06
    s->drop = 0;
    206e:	11 86       	std	Z+9, r1	; 0x09
    2070:	10 86       	std	Z+8, r1	; 0x08
    s->max_rate = 0;
    2072:	13 86       	std	Z+11, r1	; 0x0b
    2074:	12 86       	std	Z+10, r1	; 0x0a
    2076:	3c 96       	adiw	r30, 0x0c	; 12

stats_t stats[STATS_ID_NUM];

void stats_reset(void)
{
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    2078:	e2 17       	cp	r30, r18
    207a:	f3 07       	cpc	r31, r19
    207c:	81 f7       	brne	.-32     	; 0x205e <stats_reset+0x8>
    s->cnt = 0;
    s->err = 0;
    s->drop = 0;
    s->max_rate = 0;
  }
}
    207e:	08 95       	ret

00002080 <stats_update_ok>:

void stats_update_ok(uint8_t id, uint16_t size, uint16_t rate)
{
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
  stats_t *s = &stats[id];
    2084:	9c e0       	ldi	r25, 0x0C	; 12
    2086:	89 9f       	mul	r24, r25
    2088:	c0 01       	movw	r24, r0
    208a:	11 24       	eor	r1, r1
    208c:	fc 01       	movw	r30, r24
    208e:	e9 59       	subi	r30, 0x99	; 153
    2090:	f8 4f       	sbci	r31, 0xF8	; 248
  s->cnt++;
    2092:	84 81       	ldd	r24, Z+4	; 0x04
    2094:	95 81       	ldd	r25, Z+5	; 0x05
    2096:	01 96       	adiw	r24, 0x01	; 1
    2098:	95 83       	std	Z+5, r25	; 0x05
    209a:	84 83       	std	Z+4, r24	; 0x04
  s->bytes += size;
    209c:	8b 01       	movw	r16, r22
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	a2 81       	ldd	r26, Z+2	; 0x02
    20a8:	b3 81       	ldd	r27, Z+3	; 0x03
    20aa:	80 0f       	add	r24, r16
    20ac:	91 1f       	adc	r25, r17
    20ae:	a2 1f       	adc	r26, r18
    20b0:	b3 1f       	adc	r27, r19
    20b2:	80 83       	st	Z, r24
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	a2 83       	std	Z+2, r26	; 0x02
    20b8:	b3 83       	std	Z+3, r27	; 0x03
  if(rate > s->max_rate) {
    20ba:	82 85       	ldd	r24, Z+10	; 0x0a
    20bc:	93 85       	ldd	r25, Z+11	; 0x0b
    20be:	84 17       	cp	r24, r20
    20c0:	95 07       	cpc	r25, r21
    20c2:	10 f4       	brcc	.+4      	; 0x20c8 <stats_update_ok+0x48>
    s->max_rate = rate;
    20c4:	53 87       	std	Z+11, r21	; 0x0b
    20c6:	42 87       	std	Z+10, r20	; 0x0a
  }
}
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	08 95       	ret

000020ce <dump_line>:
      break;
    default:
			// NOTE: UART - ?
      break;
  }
}
    20ce:	08 95       	ret

000020d0 <dump_header>:

static void dump_header(void)
{
	// NOTE: UART - cnt  bytes    err  drop rate\r\n
}
    20d0:	08 95       	ret

000020d2 <stats_dump_all>:
{
  dump_header();
  for(uint8_t i=0;i<STATS_ID_NUM;i++) {
    dump_line(i);
  }
}
    20d2:	08 95       	ret

000020d4 <stats_dump>:
  }
  if(pio) {
    dump_line(STATS_ID_PIO_RX);
    dump_line(STATS_ID_PIO_TX);
  }
}
    20d4:	08 95       	ret

000020d6 <__mulsi3>:
    20d6:	62 9f       	mul	r22, r18
    20d8:	d0 01       	movw	r26, r0
    20da:	73 9f       	mul	r23, r19
    20dc:	f0 01       	movw	r30, r0
    20de:	82 9f       	mul	r24, r18
    20e0:	e0 0d       	add	r30, r0
    20e2:	f1 1d       	adc	r31, r1
    20e4:	64 9f       	mul	r22, r20
    20e6:	e0 0d       	add	r30, r0
    20e8:	f1 1d       	adc	r31, r1
    20ea:	92 9f       	mul	r25, r18
    20ec:	f0 0d       	add	r31, r0
    20ee:	83 9f       	mul	r24, r19
    20f0:	f0 0d       	add	r31, r0
    20f2:	74 9f       	mul	r23, r20
    20f4:	f0 0d       	add	r31, r0
    20f6:	65 9f       	mul	r22, r21
    20f8:	f0 0d       	add	r31, r0
    20fa:	99 27       	eor	r25, r25
    20fc:	72 9f       	mul	r23, r18
    20fe:	b0 0d       	add	r27, r0
    2100:	e1 1d       	adc	r30, r1
    2102:	f9 1f       	adc	r31, r25
    2104:	63 9f       	mul	r22, r19
    2106:	b0 0d       	add	r27, r0
    2108:	e1 1d       	adc	r30, r1
    210a:	f9 1f       	adc	r31, r25
    210c:	bd 01       	movw	r22, r26
    210e:	cf 01       	movw	r24, r30
    2110:	11 24       	eor	r1, r1
    2112:	08 95       	ret

00002114 <__udivmodqi4>:
    2114:	99 1b       	sub	r25, r25
    2116:	79 e0       	ldi	r23, 0x09	; 9
    2118:	04 c0       	rjmp	.+8      	; 0x2122 <__udivmodqi4_ep>

0000211a <__udivmodqi4_loop>:
    211a:	99 1f       	adc	r25, r25
    211c:	96 17       	cp	r25, r22
    211e:	08 f0       	brcs	.+2      	; 0x2122 <__udivmodqi4_ep>
    2120:	96 1b       	sub	r25, r22

00002122 <__udivmodqi4_ep>:
    2122:	88 1f       	adc	r24, r24
    2124:	7a 95       	dec	r23
    2126:	c9 f7       	brne	.-14     	; 0x211a <__udivmodqi4_loop>
    2128:	80 95       	com	r24
    212a:	08 95       	ret

0000212c <__udivmodsi4>:
    212c:	a1 e2       	ldi	r26, 0x21	; 33
    212e:	1a 2e       	mov	r1, r26
    2130:	aa 1b       	sub	r26, r26
    2132:	bb 1b       	sub	r27, r27
    2134:	fd 01       	movw	r30, r26
    2136:	0d c0       	rjmp	.+26     	; 0x2152 <__udivmodsi4_ep>

00002138 <__udivmodsi4_loop>:
    2138:	aa 1f       	adc	r26, r26
    213a:	bb 1f       	adc	r27, r27
    213c:	ee 1f       	adc	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	a2 17       	cp	r26, r18
    2142:	b3 07       	cpc	r27, r19
    2144:	e4 07       	cpc	r30, r20
    2146:	f5 07       	cpc	r31, r21
    2148:	20 f0       	brcs	.+8      	; 0x2152 <__udivmodsi4_ep>
    214a:	a2 1b       	sub	r26, r18
    214c:	b3 0b       	sbc	r27, r19
    214e:	e4 0b       	sbc	r30, r20
    2150:	f5 0b       	sbc	r31, r21

00002152 <__udivmodsi4_ep>:
    2152:	66 1f       	adc	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	1a 94       	dec	r1
    215c:	69 f7       	brne	.-38     	; 0x2138 <__udivmodsi4_loop>
    215e:	60 95       	com	r22
    2160:	70 95       	com	r23
    2162:	80 95       	com	r24
    2164:	90 95       	com	r25
    2166:	9b 01       	movw	r18, r22
    2168:	ac 01       	movw	r20, r24
    216a:	bd 01       	movw	r22, r26
    216c:	cf 01       	movw	r24, r30
    216e:	08 95       	ret

00002170 <__eerd_block_m328p>:
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22

00002174 <__eerd_blraw_m328p>:
    2174:	fc 01       	movw	r30, r24
    2176:	f9 99       	sbic	0x1f, 1	; 31
    2178:	fe cf       	rjmp	.-4      	; 0x2176 <__eerd_blraw_m328p+0x2>
    217a:	06 c0       	rjmp	.+12     	; 0x2188 <__eerd_blraw_m328p+0x14>
    217c:	f2 bd       	out	0x22, r31	; 34
    217e:	e1 bd       	out	0x21, r30	; 33
    2180:	f8 9a       	sbi	0x1f, 0	; 31
    2182:	31 96       	adiw	r30, 0x01	; 1
    2184:	00 b4       	in	r0, 0x20	; 32
    2186:	0d 92       	st	X+, r0
    2188:	41 50       	subi	r20, 0x01	; 1
    218a:	50 40       	sbci	r21, 0x00	; 0
    218c:	b8 f7       	brcc	.-18     	; 0x217c <__eerd_blraw_m328p+0x8>
    218e:	08 95       	ret

00002190 <__eerd_word_m328p>:
    2190:	a8 e1       	ldi	r26, 0x18	; 24
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	42 e0       	ldi	r20, 0x02	; 2
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__eerd_blraw_m328p>

0000219c <__eewr_block_m328p>:
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <__eewr_block_m328p+0xc>
    21a2:	2d 91       	ld	r18, X+
    21a4:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__eewr_r18_m328p>
    21a8:	41 50       	subi	r20, 0x01	; 1
    21aa:	50 40       	sbci	r21, 0x00	; 0
    21ac:	d0 f7       	brcc	.-12     	; 0x21a2 <__eewr_block_m328p+0x6>
    21ae:	08 95       	ret

000021b0 <__eewr_byte_m328p>:
    21b0:	26 2f       	mov	r18, r22

000021b2 <__eewr_r18_m328p>:
    21b2:	f9 99       	sbic	0x1f, 1	; 31
    21b4:	fe cf       	rjmp	.-4      	; 0x21b2 <__eewr_r18_m328p>
    21b6:	1f ba       	out	0x1f, r1	; 31
    21b8:	92 bd       	out	0x22, r25	; 34
    21ba:	81 bd       	out	0x21, r24	; 33
    21bc:	20 bd       	out	0x20, r18	; 32
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	fa 9a       	sbi	0x1f, 2	; 31
    21c4:	f9 9a       	sbi	0x1f, 1	; 31
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	08 95       	ret

000021cc <__eewr_word_m328p>:
    21cc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__eewr_byte_m328p>
    21d0:	27 2f       	mov	r18, r23
    21d2:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__eewr_r18_m328p>

000021d6 <_exit>:
    21d6:	f8 94       	cli

000021d8 <__stop_program>:
    21d8:	ff cf       	rjmp	.-2      	; 0x21d8 <__stop_program>
